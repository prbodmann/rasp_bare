
kernel8-rpi4.elf:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000080000 <_start>:
   80000:	d5384240 	mrs	x0, currentel
   80004:	f100101f 	cmp	x0, #0x4
   80008:	54000380 	b.eq	80078 <_start+0x78>  // b.none
   8000c:	58000420 	ldr	x0, 80090 <_start+0x90>
   80010:	d51c4100 	msr	sp_el1, x0
   80014:	58000420 	ldr	x0, 80098 <_start+0x98>
   80018:	d51cc000 	msr	vbar_el2, x0
   8001c:	d53ce100 	mrs	x0, cnthctl_el2
   80020:	b2400400 	orr	x0, x0, #0x3
   80024:	d51ce100 	msr	cnthctl_el2, x0
   80028:	d51ce07f 	msr	cntvoff_el2, xzr
   8002c:	d5380000 	mrs	x0, midr_el1
   80030:	d53800a1 	mrs	x1, mpidr_el1
   80034:	d51c0000 	msr	vpidr_el2, x0
   80038:	d51c00a1 	msr	vmpidr_el2, x1
   8003c:	d2867fe0 	mov	x0, #0x33ff                	// #13311
   80040:	d51c1140 	msr	cptr_el2, x0
   80044:	d51c117f 	msr	hstr_el2, xzr
   80048:	d2a00600 	mov	x0, #0x300000              	// #3145728
   8004c:	d5181040 	msr	cpacr_el1, x0
   80050:	d2b00000 	mov	x0, #0x80000000            	// #2147483648
   80054:	d51c1100 	msr	hcr_el2, x0
   80058:	d2810000 	mov	x0, #0x800                 	// #2048
   8005c:	f2a61a00 	movk	x0, #0x30d0, lsl #16
   80060:	d5181000 	msr	sctlr_el1, x0
   80064:	d2807880 	mov	x0, #0x3c4                 	// #964
   80068:	d51c4000 	msr	spsr_el2, x0
   8006c:	10000060 	adr	x0, 80078 <_start+0x78>
   80070:	d51c4020 	msr	elr_el2, x0
   80074:	d69f03e0 	eret
   80078:	58000140 	ldr	x0, 800a0 <_start+0xa0>
   8007c:	9100001f 	mov	sp, x0
   80080:	580000c0 	ldr	x0, 80098 <_start+0x98>
   80084:	d518c000 	msr	vbar_el1, x0
   80088:	14004942 	b	92590 <sysinit>
   8008c:	00000000 	.inst	0x00000000 ; undefined
   80090:	00308000 	.word	0x00308000
   80094:	00000000 	.word	0x00000000
   80098:	00099000 	.word	0x00099000
   8009c:	00000000 	.word	0x00000000
   800a0:	002a0000 	.word	0x002a0000
   800a4:	00000000 	.word	0x00000000

Disassembly of section .text:

0000000000080800 <main>:
   80800:	d287be10 	mov	x16, #0x3df0                	// #15856
   80804:	cb3063ff 	sub	sp, sp, x16
   80808:	910043e0 	add	x0, sp, #0x10
   8080c:	f90003fe 	str	x30, [sp]
   80810:	940002a0 	bl	81290 <CKernel::CKernel()>
   80814:	910043e0 	add	x0, sp, #0x10
   80818:	9400031a 	bl	81480 <CKernel::Initialize()>
   8081c:	72001c1f 	tst	w0, #0xff
   80820:	540000a0 	b.eq	80834 <main+0x34>  // b.none
   80824:	910043e0 	add	x0, sp, #0x10
   80828:	94000362 	bl	815b0 <CKernel::Run()>
   8082c:	7100081f 	cmp	w0, #0x2
   80830:	54000040 	b.eq	80838 <main+0x38>  // b.none
   80834:	94004743 	bl	92540 <halt>
   80838:	9400474a 	bl	92560 <reboot>
   8083c:	00000000 	.inst	0x00000000 ; undefined

0000000000080840 <compare(void const*, void const*)>:
   80840:	fd400001 	ldr	d1, [x0]
   80844:	52800022 	mov	w2, #0x1                   	// #1
   80848:	fd400020 	ldr	d0, [x1]
   8084c:	1e602030 	fcmpe	d1, d0
   80850:	5a9f53e0 	csetm	w0, mi  // mi = first
   80854:	1e602020 	fcmp	d1, d0
   80858:	1a82d000 	csel	w0, w0, w2, le
   8085c:	d65f03c0 	ret

0000000000080860 <qsort(void*, unsigned long, unsigned long)>:
   80860:	b40050c1 	cbz	x1, 81278 <qsort(void*, unsigned long, unsigned long)+0xa18>
   80864:	d11083ff 	sub	sp, sp, #0x420
   80868:	d100042d 	sub	x13, x1, #0x1
   8086c:	f100103f 	cmp	x1, #0x4
   80870:	d37ef451 	lsl	x17, x2, #2
   80874:	a90053f3 	stp	x19, x20, [sp]
   80878:	d503201f 	nop
   8087c:	9b0201ad 	madd	x13, x13, x2, x0
   80880:	f9000bfe 	str	x30, [sp, #16]
   80884:	54002be9 	b.ls	80e00 <qsort(void*, unsigned long, unsigned long)+0x5a0>  // b.plast
   80888:	910083fe 	add	x30, sp, #0x20
   8088c:	cb0203f0 	neg	x16, x2
   80890:	a9027fff 	stp	xzr, xzr, [sp, #32]
   80894:	910043d2 	add	x18, x30, #0x10
   80898:	aa0d03ef 	mov	x15, x13
   8089c:	aa0003ee 	mov	x14, x0
   808a0:	cb0e01e5 	sub	x5, x15, x14
   808a4:	fd4001c1 	ldr	d1, [x14]
   808a8:	9ac208a1 	udiv	x1, x5, x2
   808ac:	d341fc23 	lsr	x3, x1, #1
   808b0:	9b027c64 	mul	x4, x3, x2
   808b4:	fc6469c0 	ldr	d0, [x14, x4]
   808b8:	8b0401c5 	add	x5, x14, x4
   808bc:	1e602030 	fcmpe	d1, d0
   808c0:	54000c24 	b.mi	80a44 <qsort(void*, unsigned long, unsigned long)+0x1e4>  // b.first
   808c4:	54000c0d 	b.le	80a44 <qsort(void*, unsigned long, unsigned long)+0x1e4>
   808c8:	f2400846 	ands	x6, x2, #0x7
   808cc:	d2800001 	mov	x1, #0x0                   	// #0
   808d0:	54000640 	b.eq	80998 <qsort(void*, unsigned long, unsigned long)+0x138>  // b.none
   808d4:	f10004df 	cmp	x6, #0x1
   808d8:	54000520 	b.eq	8097c <qsort(void*, unsigned long, unsigned long)+0x11c>  // b.none
   808dc:	f10008df 	cmp	x6, #0x2
   808e0:	54000440 	b.eq	80968 <qsort(void*, unsigned long, unsigned long)+0x108>  // b.none
   808e4:	f1000cdf 	cmp	x6, #0x3
   808e8:	54000360 	b.eq	80954 <qsort(void*, unsigned long, unsigned long)+0xf4>  // b.none
   808ec:	f10010df 	cmp	x6, #0x4
   808f0:	54000280 	b.eq	80940 <qsort(void*, unsigned long, unsigned long)+0xe0>  // b.none
   808f4:	f10014df 	cmp	x6, #0x5
   808f8:	540001a0 	b.eq	8092c <qsort(void*, unsigned long, unsigned long)+0xcc>  // b.none
   808fc:	f10018df 	cmp	x6, #0x6
   80900:	540000c0 	b.eq	80918 <qsort(void*, unsigned long, unsigned long)+0xb8>  // b.none
   80904:	39c001c7 	ldrsb	w7, [x14]
   80908:	d2800021 	mov	x1, #0x1                   	// #1
   8090c:	39c000a8 	ldrsb	w8, [x5]
   80910:	390000a7 	strb	w7, [x5]
   80914:	390001c8 	strb	w8, [x14]
   80918:	38e169c9 	ldrsb	w9, [x14, x1]
   8091c:	38e168aa 	ldrsb	w10, [x5, x1]
   80920:	382168a9 	strb	w9, [x5, x1]
   80924:	382169ca 	strb	w10, [x14, x1]
   80928:	91000421 	add	x1, x1, #0x1
   8092c:	38e169cb 	ldrsb	w11, [x14, x1]
   80930:	38e168ac 	ldrsb	w12, [x5, x1]
   80934:	382168ab 	strb	w11, [x5, x1]
   80938:	382169cc 	strb	w12, [x14, x1]
   8093c:	91000421 	add	x1, x1, #0x1
   80940:	38e169d3 	ldrsb	w19, [x14, x1]
   80944:	38e168b4 	ldrsb	w20, [x5, x1]
   80948:	382168b3 	strb	w19, [x5, x1]
   8094c:	382169d4 	strb	w20, [x14, x1]
   80950:	91000421 	add	x1, x1, #0x1
   80954:	38e169c4 	ldrsb	w4, [x14, x1]
   80958:	38e168a3 	ldrsb	w3, [x5, x1]
   8095c:	382168a4 	strb	w4, [x5, x1]
   80960:	382169c3 	strb	w3, [x14, x1]
   80964:	91000421 	add	x1, x1, #0x1
   80968:	38e169c6 	ldrsb	w6, [x14, x1]
   8096c:	38e168a7 	ldrsb	w7, [x5, x1]
   80970:	382168a6 	strb	w6, [x5, x1]
   80974:	382169c7 	strb	w7, [x14, x1]
   80978:	91000421 	add	x1, x1, #0x1
   8097c:	38e169c8 	ldrsb	w8, [x14, x1]
   80980:	38e168a9 	ldrsb	w9, [x5, x1]
   80984:	382168a8 	strb	w8, [x5, x1]
   80988:	382169c9 	strb	w9, [x14, x1]
   8098c:	91000421 	add	x1, x1, #0x1
   80990:	eb01005f 	cmp	x2, x1
   80994:	54000560 	b.eq	80a40 <qsort(void*, unsigned long, unsigned long)+0x1e0>  // b.none
   80998:	38e169cc 	ldrsb	w12, [x14, x1]
   8099c:	91000433 	add	x19, x1, #0x1
   809a0:	9100082a 	add	x10, x1, #0x2
   809a4:	91000c34 	add	x20, x1, #0x3
   809a8:	91001028 	add	x8, x1, #0x4
   809ac:	38e168ab 	ldrsb	w11, [x5, x1]
   809b0:	91001427 	add	x7, x1, #0x5
   809b4:	91001826 	add	x6, x1, #0x6
   809b8:	91001c24 	add	x4, x1, #0x7
   809bc:	382168ac 	strb	w12, [x5, x1]
   809c0:	382169cb 	strb	w11, [x14, x1]
   809c4:	91002021 	add	x1, x1, #0x8
   809c8:	38f369c3 	ldrsb	w3, [x14, x19]
   809cc:	eb01005f 	cmp	x2, x1
   809d0:	38f368a9 	ldrsb	w9, [x5, x19]
   809d4:	383368a3 	strb	w3, [x5, x19]
   809d8:	383369c9 	strb	w9, [x14, x19]
   809dc:	38ea69cc 	ldrsb	w12, [x14, x10]
   809e0:	38ea68b3 	ldrsb	w19, [x5, x10]
   809e4:	382a68ac 	strb	w12, [x5, x10]
   809e8:	382a69d3 	strb	w19, [x14, x10]
   809ec:	38f469ca 	ldrsb	w10, [x14, x20]
   809f0:	38f468ab 	ldrsb	w11, [x5, x20]
   809f4:	383468aa 	strb	w10, [x5, x20]
   809f8:	383469cb 	strb	w11, [x14, x20]
   809fc:	38e869d4 	ldrsb	w20, [x14, x8]
   80a00:	38e868a3 	ldrsb	w3, [x5, x8]
   80a04:	382868b4 	strb	w20, [x5, x8]
   80a08:	382869c3 	strb	w3, [x14, x8]
   80a0c:	38e769c8 	ldrsb	w8, [x14, x7]
   80a10:	38e768a9 	ldrsb	w9, [x5, x7]
   80a14:	382768a8 	strb	w8, [x5, x7]
   80a18:	382769c9 	strb	w9, [x14, x7]
   80a1c:	38e669c7 	ldrsb	w7, [x14, x6]
   80a20:	38e668ac 	ldrsb	w12, [x5, x6]
   80a24:	382668a7 	strb	w7, [x5, x6]
   80a28:	382669cc 	strb	w12, [x14, x6]
   80a2c:	38e469c6 	ldrsb	w6, [x14, x4]
   80a30:	38e468b3 	ldrsb	w19, [x5, x4]
   80a34:	382468a6 	strb	w6, [x5, x4]
   80a38:	382469d3 	strb	w19, [x14, x4]
   80a3c:	54fffae1 	b.ne	80998 <qsort(void*, unsigned long, unsigned long)+0x138>  // b.any
   80a40:	fd4000a0 	ldr	d0, [x5]
   80a44:	fd4001e2 	ldr	d2, [x15]
   80a48:	1e602050 	fcmpe	d2, d0
   80a4c:	540018ac 	b.gt	80d60 <qsort(void*, unsigned long, unsigned long)+0x500>
   80a50:	54001885 	b.pl	80d60 <qsort(void*, unsigned long, unsigned long)+0x500>  // b.nfrst
   80a54:	f2400844 	ands	x4, x2, #0x7
   80a58:	d2800001 	mov	x1, #0x0                   	// #0
   80a5c:	54000640 	b.eq	80b24 <qsort(void*, unsigned long, unsigned long)+0x2c4>  // b.none
   80a60:	f100049f 	cmp	x4, #0x1
   80a64:	54000520 	b.eq	80b08 <qsort(void*, unsigned long, unsigned long)+0x2a8>  // b.none
   80a68:	f100089f 	cmp	x4, #0x2
   80a6c:	54000440 	b.eq	80af4 <qsort(void*, unsigned long, unsigned long)+0x294>  // b.none
   80a70:	f1000c9f 	cmp	x4, #0x3
   80a74:	54000360 	b.eq	80ae0 <qsort(void*, unsigned long, unsigned long)+0x280>  // b.none
   80a78:	f100109f 	cmp	x4, #0x4
   80a7c:	54000280 	b.eq	80acc <qsort(void*, unsigned long, unsigned long)+0x26c>  // b.none
   80a80:	f100149f 	cmp	x4, #0x5
   80a84:	540001a0 	b.eq	80ab8 <qsort(void*, unsigned long, unsigned long)+0x258>  // b.none
   80a88:	f100189f 	cmp	x4, #0x6
   80a8c:	540000c0 	b.eq	80aa4 <qsort(void*, unsigned long, unsigned long)+0x244>  // b.none
   80a90:	39c001ea 	ldrsb	w10, [x15]
   80a94:	d2800021 	mov	x1, #0x1                   	// #1
   80a98:	39c000ab 	ldrsb	w11, [x5]
   80a9c:	390000aa 	strb	w10, [x5]
   80aa0:	390001eb 	strb	w11, [x15]
   80aa4:	38e169f4 	ldrsb	w20, [x15, x1]
   80aa8:	38e168a3 	ldrsb	w3, [x5, x1]
   80aac:	382168b4 	strb	w20, [x5, x1]
   80ab0:	382169e3 	strb	w3, [x15, x1]
   80ab4:	91000421 	add	x1, x1, #0x1
   80ab8:	38e169e8 	ldrsb	w8, [x15, x1]
   80abc:	38e168a9 	ldrsb	w9, [x5, x1]
   80ac0:	382168a8 	strb	w8, [x5, x1]
   80ac4:	382169e9 	strb	w9, [x15, x1]
   80ac8:	91000421 	add	x1, x1, #0x1
   80acc:	38e169e7 	ldrsb	w7, [x15, x1]
   80ad0:	38e168ac 	ldrsb	w12, [x5, x1]
   80ad4:	382168a7 	strb	w7, [x5, x1]
   80ad8:	382169ec 	strb	w12, [x15, x1]
   80adc:	91000421 	add	x1, x1, #0x1
   80ae0:	38e169e6 	ldrsb	w6, [x15, x1]
   80ae4:	38e168b3 	ldrsb	w19, [x5, x1]
   80ae8:	382168a6 	strb	w6, [x5, x1]
   80aec:	382169f3 	strb	w19, [x15, x1]
   80af0:	91000421 	add	x1, x1, #0x1
   80af4:	38e169e4 	ldrsb	w4, [x15, x1]
   80af8:	38e168aa 	ldrsb	w10, [x5, x1]
   80afc:	382168a4 	strb	w4, [x5, x1]
   80b00:	382169ea 	strb	w10, [x15, x1]
   80b04:	91000421 	add	x1, x1, #0x1
   80b08:	38e169eb 	ldrsb	w11, [x15, x1]
   80b0c:	38e168b4 	ldrsb	w20, [x5, x1]
   80b10:	382168ab 	strb	w11, [x5, x1]
   80b14:	382169f4 	strb	w20, [x15, x1]
   80b18:	91000421 	add	x1, x1, #0x1
   80b1c:	eb02003f 	cmp	x1, x2
   80b20:	54000560 	b.eq	80bcc <qsort(void*, unsigned long, unsigned long)+0x36c>  // b.none
   80b24:	38e169ec 	ldrsb	w12, [x15, x1]
   80b28:	91000423 	add	x3, x1, #0x1
   80b2c:	91000833 	add	x19, x1, #0x2
   80b30:	91000c29 	add	x9, x1, #0x3
   80b34:	91001028 	add	x8, x1, #0x4
   80b38:	38e168aa 	ldrsb	w10, [x5, x1]
   80b3c:	91001427 	add	x7, x1, #0x5
   80b40:	91001826 	add	x6, x1, #0x6
   80b44:	91001c24 	add	x4, x1, #0x7
   80b48:	382168ac 	strb	w12, [x5, x1]
   80b4c:	382169ea 	strb	w10, [x15, x1]
   80b50:	91002021 	add	x1, x1, #0x8
   80b54:	38e369f4 	ldrsb	w20, [x15, x3]
   80b58:	eb02003f 	cmp	x1, x2
   80b5c:	38e368ab 	ldrsb	w11, [x5, x3]
   80b60:	382368b4 	strb	w20, [x5, x3]
   80b64:	382369eb 	strb	w11, [x15, x3]
   80b68:	38f369ec 	ldrsb	w12, [x15, x19]
   80b6c:	38f368a3 	ldrsb	w3, [x5, x19]
   80b70:	383368ac 	strb	w12, [x5, x19]
   80b74:	383369e3 	strb	w3, [x15, x19]
   80b78:	38e969f3 	ldrsb	w19, [x15, x9]
   80b7c:	38e968aa 	ldrsb	w10, [x5, x9]
   80b80:	382968b3 	strb	w19, [x5, x9]
   80b84:	382969ea 	strb	w10, [x15, x9]
   80b88:	38e869e9 	ldrsb	w9, [x15, x8]
   80b8c:	38e868b4 	ldrsb	w20, [x5, x8]
   80b90:	382868a9 	strb	w9, [x5, x8]
   80b94:	382869f4 	strb	w20, [x15, x8]
   80b98:	38e769e8 	ldrsb	w8, [x15, x7]
   80b9c:	38e768ab 	ldrsb	w11, [x5, x7]
   80ba0:	382768a8 	strb	w8, [x5, x7]
   80ba4:	382769eb 	strb	w11, [x15, x7]
   80ba8:	38e669e7 	ldrsb	w7, [x15, x6]
   80bac:	38e668ac 	ldrsb	w12, [x5, x6]
   80bb0:	382668a7 	strb	w7, [x5, x6]
   80bb4:	382669ec 	strb	w12, [x15, x6]
   80bb8:	38e469e6 	ldrsb	w6, [x15, x4]
   80bbc:	38e468a3 	ldrsb	w3, [x5, x4]
   80bc0:	382468a6 	strb	w6, [x5, x4]
   80bc4:	382469e3 	strb	w3, [x15, x4]
   80bc8:	54fffae1 	b.ne	80b24 <qsort(void*, unsigned long, unsigned long)+0x2c4>  // b.any
   80bcc:	fd4000a0 	ldr	d0, [x5]
   80bd0:	fd4001c3 	ldr	d3, [x14]
   80bd4:	1e632010 	fcmpe	d0, d3
   80bd8:	54000c4c 	b.gt	80d60 <qsort(void*, unsigned long, unsigned long)+0x500>
   80bdc:	54000c25 	b.pl	80d60 <qsort(void*, unsigned long, unsigned long)+0x500>  // b.nfrst
   80be0:	f2400844 	ands	x4, x2, #0x7
   80be4:	d2800001 	mov	x1, #0x0                   	// #0
   80be8:	54000640 	b.eq	80cb0 <qsort(void*, unsigned long, unsigned long)+0x450>  // b.none
   80bec:	f100049f 	cmp	x4, #0x1
   80bf0:	54000520 	b.eq	80c94 <qsort(void*, unsigned long, unsigned long)+0x434>  // b.none
   80bf4:	f100089f 	cmp	x4, #0x2
   80bf8:	54000440 	b.eq	80c80 <qsort(void*, unsigned long, unsigned long)+0x420>  // b.none
   80bfc:	f1000c9f 	cmp	x4, #0x3
   80c00:	54000360 	b.eq	80c6c <qsort(void*, unsigned long, unsigned long)+0x40c>  // b.none
   80c04:	f100109f 	cmp	x4, #0x4
   80c08:	54000280 	b.eq	80c58 <qsort(void*, unsigned long, unsigned long)+0x3f8>  // b.none
   80c0c:	f100149f 	cmp	x4, #0x5
   80c10:	540001a0 	b.eq	80c44 <qsort(void*, unsigned long, unsigned long)+0x3e4>  // b.none
   80c14:	f100189f 	cmp	x4, #0x6
   80c18:	540000c0 	b.eq	80c30 <qsort(void*, unsigned long, unsigned long)+0x3d0>  // b.none
   80c1c:	39c001d3 	ldrsb	w19, [x14]
   80c20:	d2800021 	mov	x1, #0x1                   	// #1
   80c24:	39c000aa 	ldrsb	w10, [x5]
   80c28:	390000b3 	strb	w19, [x5]
   80c2c:	390001ca 	strb	w10, [x14]
   80c30:	38e169c9 	ldrsb	w9, [x14, x1]
   80c34:	38e168b4 	ldrsb	w20, [x5, x1]
   80c38:	382168a9 	strb	w9, [x5, x1]
   80c3c:	382169d4 	strb	w20, [x14, x1]
   80c40:	91000421 	add	x1, x1, #0x1
   80c44:	38e169c8 	ldrsb	w8, [x14, x1]
   80c48:	38e168ab 	ldrsb	w11, [x5, x1]
   80c4c:	382168a8 	strb	w8, [x5, x1]
   80c50:	382169cb 	strb	w11, [x14, x1]
   80c54:	91000421 	add	x1, x1, #0x1
   80c58:	38e169c7 	ldrsb	w7, [x14, x1]
   80c5c:	38e168ac 	ldrsb	w12, [x5, x1]
   80c60:	382168a7 	strb	w7, [x5, x1]
   80c64:	382169cc 	strb	w12, [x14, x1]
   80c68:	91000421 	add	x1, x1, #0x1
   80c6c:	38e169c6 	ldrsb	w6, [x14, x1]
   80c70:	38e168a3 	ldrsb	w3, [x5, x1]
   80c74:	382168a6 	strb	w6, [x5, x1]
   80c78:	382169c3 	strb	w3, [x14, x1]
   80c7c:	91000421 	add	x1, x1, #0x1
   80c80:	38e169c4 	ldrsb	w4, [x14, x1]
   80c84:	38e168b3 	ldrsb	w19, [x5, x1]
   80c88:	382168a4 	strb	w4, [x5, x1]
   80c8c:	382169d3 	strb	w19, [x14, x1]
   80c90:	91000421 	add	x1, x1, #0x1
   80c94:	38e169ca 	ldrsb	w10, [x14, x1]
   80c98:	38e168a9 	ldrsb	w9, [x5, x1]
   80c9c:	382168aa 	strb	w10, [x5, x1]
   80ca0:	382169c9 	strb	w9, [x14, x1]
   80ca4:	91000421 	add	x1, x1, #0x1
   80ca8:	eb02003f 	cmp	x1, x2
   80cac:	54000560 	b.eq	80d58 <qsort(void*, unsigned long, unsigned long)+0x4f8>  // b.none
   80cb0:	38e169d4 	ldrsb	w20, [x14, x1]
   80cb4:	91000423 	add	x3, x1, #0x1
   80cb8:	9100082a 	add	x10, x1, #0x2
   80cbc:	91000c33 	add	x19, x1, #0x3
   80cc0:	91001028 	add	x8, x1, #0x4
   80cc4:	38e168ab 	ldrsb	w11, [x5, x1]
   80cc8:	91001427 	add	x7, x1, #0x5
   80ccc:	91001826 	add	x6, x1, #0x6
   80cd0:	91001c24 	add	x4, x1, #0x7
   80cd4:	382168b4 	strb	w20, [x5, x1]
   80cd8:	382169cb 	strb	w11, [x14, x1]
   80cdc:	91002021 	add	x1, x1, #0x8
   80ce0:	38e369cc 	ldrsb	w12, [x14, x3]
   80ce4:	eb02003f 	cmp	x1, x2
   80ce8:	38e368a9 	ldrsb	w9, [x5, x3]
   80cec:	382368ac 	strb	w12, [x5, x3]
   80cf0:	382369c9 	strb	w9, [x14, x3]
   80cf4:	38ea69d4 	ldrsb	w20, [x14, x10]
   80cf8:	38ea68a3 	ldrsb	w3, [x5, x10]
   80cfc:	382a68b4 	strb	w20, [x5, x10]
   80d00:	382a69c3 	strb	w3, [x14, x10]
   80d04:	38f369ca 	ldrsb	w10, [x14, x19]
   80d08:	38f368ab 	ldrsb	w11, [x5, x19]
   80d0c:	383368aa 	strb	w10, [x5, x19]
   80d10:	383369cb 	strb	w11, [x14, x19]
   80d14:	38e869d3 	ldrsb	w19, [x14, x8]
   80d18:	38e868ac 	ldrsb	w12, [x5, x8]
   80d1c:	382868b3 	strb	w19, [x5, x8]
   80d20:	382869cc 	strb	w12, [x14, x8]
   80d24:	38e769c8 	ldrsb	w8, [x14, x7]
   80d28:	38e768a9 	ldrsb	w9, [x5, x7]
   80d2c:	382768a8 	strb	w8, [x5, x7]
   80d30:	382769c9 	strb	w9, [x14, x7]
   80d34:	38e669c7 	ldrsb	w7, [x14, x6]
   80d38:	38e668b4 	ldrsb	w20, [x5, x6]
   80d3c:	382668a7 	strb	w7, [x5, x6]
   80d40:	382669d4 	strb	w20, [x14, x6]
   80d44:	38e469c6 	ldrsb	w6, [x14, x4]
   80d48:	38e468a3 	ldrsb	w3, [x5, x4]
   80d4c:	382468a6 	strb	w6, [x5, x4]
   80d50:	382469c3 	strb	w3, [x14, x4]
   80d54:	54fffae1 	b.ne	80cb0 <qsort(void*, unsigned long, unsigned long)+0x450>  // b.any
   80d58:	fd4000a0 	ldr	d0, [x5]
   80d5c:	d503201f 	nop
   80d60:	8b0201c1 	add	x1, x14, x2
   80d64:	8b1001e3 	add	x3, x15, x16
   80d68:	fd400024 	ldr	d4, [x1]
   80d6c:	1e602090 	fcmpe	d4, d0
   80d70:	540000cc 	b.gt	80d88 <qsort(void*, unsigned long, unsigned long)+0x528>
   80d74:	540000a5 	b.pl	80d88 <qsort(void*, unsigned long, unsigned long)+0x528>  // b.nfrst
   80d78:	8b020021 	add	x1, x1, x2
   80d7c:	fd400024 	ldr	d4, [x1]
   80d80:	1e602090 	fcmpe	d4, d0
   80d84:	54ffff8d 	b.le	80d74 <qsort(void*, unsigned long, unsigned long)+0x514>
   80d88:	fd400065 	ldr	d5, [x3]
   80d8c:	1e652010 	fcmpe	d0, d5
   80d90:	5400010c 	b.gt	80db0 <qsort(void*, unsigned long, unsigned long)+0x550>
   80d94:	540000e5 	b.pl	80db0 <qsort(void*, unsigned long, unsigned long)+0x550>  // b.nfrst
   80d98:	8b100063 	add	x3, x3, x16
   80d9c:	fd400066 	ldr	d6, [x3]
   80da0:	1e6020d0 	fcmpe	d6, d0
   80da4:	54000064 	b.mi	80db0 <qsort(void*, unsigned long, unsigned long)+0x550>  // b.first
   80da8:	54ffff8c 	b.gt	80d98 <qsort(void*, unsigned long, unsigned long)+0x538>
   80dac:	d503201f 	nop
   80db0:	eb03003f 	cmp	x1, x3
   80db4:	540017e3 	b.cc	810b0 <qsort(void*, unsigned long, unsigned long)+0x850>  // b.lo, b.ul, b.last
   80db8:	540000a0 	b.eq	80dcc <qsort(void*, unsigned long, unsigned long)+0x56c>  // b.none
   80dbc:	eb03003f 	cmp	x1, x3
   80dc0:	540000a8 	b.hi	80dd4 <qsort(void*, unsigned long, unsigned long)+0x574>  // b.pmore
   80dc4:	fd4000a0 	ldr	d0, [x5]
   80dc8:	17ffffe8 	b	80d68 <qsort(void*, unsigned long, unsigned long)+0x508>
   80dcc:	8b020021 	add	x1, x1, x2
   80dd0:	8b100063 	add	x3, x3, x16
   80dd4:	cb0e0065 	sub	x5, x3, x14
   80dd8:	cb0101e4 	sub	x4, x15, x1
   80ddc:	eb1100bf 	cmp	x5, x17
   80de0:	54002368 	b.hi	8124c <qsort(void*, unsigned long, unsigned long)+0x9ec>  // b.pmore
   80de4:	eb04023f 	cmp	x17, x4
   80de8:	aa0103ee 	mov	x14, x1
   80dec:	54000063 	b.cc	80df8 <qsort(void*, unsigned long, unsigned long)+0x598>  // b.lo, b.ul, b.last
   80df0:	a97f3e4e 	ldp	x14, x15, [x18, #-16]
   80df4:	d1004252 	sub	x18, x18, #0x10
   80df8:	eb1e025f 	cmp	x18, x30
   80dfc:	54ffd528 	b.hi	808a0 <qsort(void*, unsigned long, unsigned long)+0x40>  // b.pmore
   80e00:	8b110003 	add	x3, x0, x17
   80e04:	8b020005 	add	x5, x0, x2
   80e08:	eb0301bf 	cmp	x13, x3
   80e0c:	9a8331b0 	csel	x16, x13, x3, cc  // cc = lo, ul, last
   80e10:	aa0503e1 	mov	x1, x5
   80e14:	eb05021f 	cmp	x16, x5
   80e18:	aa0003f1 	mov	x17, x0
   80e1c:	54000d43 	b.cc	80fc4 <qsort(void*, unsigned long, unsigned long)+0x764>  // b.lo, b.ul, b.last
   80e20:	fd400027 	ldr	d7, [x1]
   80e24:	fd400230 	ldr	d16, [x17]
   80e28:	1e7020f0 	fcmpe	d7, d16
   80e2c:	5400006c 	b.gt	80e38 <qsort(void*, unsigned long, unsigned long)+0x5d8>
   80e30:	1e7020e0 	fcmp	d7, d16
   80e34:	9a815231 	csel	x17, x17, x1, pl  // pl = nfrst
   80e38:	8b020021 	add	x1, x1, x2
   80e3c:	eb01021f 	cmp	x16, x1
   80e40:	54ffff02 	b.cs	80e20 <qsort(void*, unsigned long, unsigned long)+0x5c0>  // b.hs, b.nlast
   80e44:	eb11001f 	cmp	x0, x17
   80e48:	54000be0 	b.eq	80fc4 <qsort(void*, unsigned long, unsigned long)+0x764>  // b.none
   80e4c:	f240085e 	ands	x30, x2, #0x7
   80e50:	d2800010 	mov	x16, #0x0                   	// #0
   80e54:	54000640 	b.eq	80f1c <qsort(void*, unsigned long, unsigned long)+0x6bc>  // b.none
   80e58:	f10007df 	cmp	x30, #0x1
   80e5c:	54000520 	b.eq	80f00 <qsort(void*, unsigned long, unsigned long)+0x6a0>  // b.none
   80e60:	f1000bdf 	cmp	x30, #0x2
   80e64:	54000440 	b.eq	80eec <qsort(void*, unsigned long, unsigned long)+0x68c>  // b.none
   80e68:	f1000fdf 	cmp	x30, #0x3
   80e6c:	54000360 	b.eq	80ed8 <qsort(void*, unsigned long, unsigned long)+0x678>  // b.none
   80e70:	f10013df 	cmp	x30, #0x4
   80e74:	54000280 	b.eq	80ec4 <qsort(void*, unsigned long, unsigned long)+0x664>  // b.none
   80e78:	f10017df 	cmp	x30, #0x5
   80e7c:	540001a0 	b.eq	80eb0 <qsort(void*, unsigned long, unsigned long)+0x650>  // b.none
   80e80:	f1001bdf 	cmp	x30, #0x6
   80e84:	540000c0 	b.eq	80e9c <qsort(void*, unsigned long, unsigned long)+0x63c>  // b.none
   80e88:	39c0000b 	ldrsb	w11, [x0]
   80e8c:	d2800030 	mov	x16, #0x1                   	// #1
   80e90:	39c00234 	ldrsb	w20, [x17]
   80e94:	3900022b 	strb	w11, [x17]
   80e98:	39000014 	strb	w20, [x0]
   80e9c:	38f0680a 	ldrsb	w10, [x0, x16]
   80ea0:	38f06a26 	ldrsb	w6, [x17, x16]
   80ea4:	38306a2a 	strb	w10, [x17, x16]
   80ea8:	38306806 	strb	w6, [x0, x16]
   80eac:	91000610 	add	x16, x16, #0x1
   80eb0:	38f06809 	ldrsb	w9, [x0, x16]
   80eb4:	38f06a2c 	ldrsb	w12, [x17, x16]
   80eb8:	38306a29 	strb	w9, [x17, x16]
   80ebc:	3830680c 	strb	w12, [x0, x16]
   80ec0:	91000610 	add	x16, x16, #0x1
   80ec4:	38f06808 	ldrsb	w8, [x0, x16]
   80ec8:	38f06a33 	ldrsb	w19, [x17, x16]
   80ecc:	38306a28 	strb	w8, [x17, x16]
   80ed0:	38306813 	strb	w19, [x0, x16]
   80ed4:	91000610 	add	x16, x16, #0x1
   80ed8:	38f06807 	ldrsb	w7, [x0, x16]
   80edc:	38f06a24 	ldrsb	w4, [x17, x16]
   80ee0:	38306a27 	strb	w7, [x17, x16]
   80ee4:	38306804 	strb	w4, [x0, x16]
   80ee8:	91000610 	add	x16, x16, #0x1
   80eec:	38f0680f 	ldrsb	w15, [x0, x16]
   80ef0:	38f06a32 	ldrsb	w18, [x17, x16]
   80ef4:	38306a2f 	strb	w15, [x17, x16]
   80ef8:	38306812 	strb	w18, [x0, x16]
   80efc:	91000610 	add	x16, x16, #0x1
   80f00:	38f0680e 	ldrsb	w14, [x0, x16]
   80f04:	38f06a23 	ldrsb	w3, [x17, x16]
   80f08:	38306a2e 	strb	w14, [x17, x16]
   80f0c:	38306803 	strb	w3, [x0, x16]
   80f10:	91000610 	add	x16, x16, #0x1
   80f14:	eb02021f 	cmp	x16, x2
   80f18:	54000560 	b.eq	80fc4 <qsort(void*, unsigned long, unsigned long)+0x764>  // b.none
   80f1c:	38f06801 	ldrsb	w1, [x0, x16]
   80f20:	9100061e 	add	x30, x16, #0x1
   80f24:	91000a0b 	add	x11, x16, #0x2
   80f28:	91000e14 	add	x20, x16, #0x3
   80f2c:	91001209 	add	x9, x16, #0x4
   80f30:	38f06a2a 	ldrsb	w10, [x17, x16]
   80f34:	91001608 	add	x8, x16, #0x5
   80f38:	91001a13 	add	x19, x16, #0x6
   80f3c:	91001e06 	add	x6, x16, #0x7
   80f40:	38306a21 	strb	w1, [x17, x16]
   80f44:	3830680a 	strb	w10, [x0, x16]
   80f48:	91002210 	add	x16, x16, #0x8
   80f4c:	38fe6807 	ldrsb	w7, [x0, x30]
   80f50:	eb02021f 	cmp	x16, x2
   80f54:	38fe6a2c 	ldrsb	w12, [x17, x30]
   80f58:	383e6a27 	strb	w7, [x17, x30]
   80f5c:	383e680c 	strb	w12, [x0, x30]
   80f60:	38eb680f 	ldrsb	w15, [x0, x11]
   80f64:	38eb6a24 	ldrsb	w4, [x17, x11]
   80f68:	382b6a2f 	strb	w15, [x17, x11]
   80f6c:	382b6804 	strb	w4, [x0, x11]
   80f70:	38f46812 	ldrsb	w18, [x0, x20]
   80f74:	38f46a2e 	ldrsb	w14, [x17, x20]
   80f78:	38346a32 	strb	w18, [x17, x20]
   80f7c:	3834680e 	strb	w14, [x0, x20]
   80f80:	38e96803 	ldrsb	w3, [x0, x9]
   80f84:	38e96a21 	ldrsb	w1, [x17, x9]
   80f88:	38296a23 	strb	w3, [x17, x9]
   80f8c:	38296801 	strb	w1, [x0, x9]
   80f90:	38e8681e 	ldrsb	w30, [x0, x8]
   80f94:	38e86a34 	ldrsb	w20, [x17, x8]
   80f98:	38286a3e 	strb	w30, [x17, x8]
   80f9c:	38286814 	strb	w20, [x0, x8]
   80fa0:	38f3680b 	ldrsb	w11, [x0, x19]
   80fa4:	38f36a29 	ldrsb	w9, [x17, x19]
   80fa8:	38336a2b 	strb	w11, [x17, x19]
   80fac:	38336809 	strb	w9, [x0, x19]
   80fb0:	38e6680a 	ldrsb	w10, [x0, x6]
   80fb4:	38e66a28 	ldrsb	w8, [x17, x6]
   80fb8:	38266a2a 	strb	w10, [x17, x6]
   80fbc:	38266808 	strb	w8, [x0, x6]
   80fc0:	54fffae1 	b.ne	80f1c <qsort(void*, unsigned long, unsigned long)+0x6bc>  // b.any
   80fc4:	8b0200a3 	add	x3, x5, x2
   80fc8:	d100044c 	sub	x12, x2, #0x1
   80fcc:	eb0d007f 	cmp	x3, x13
   80fd0:	cb0203e6 	neg	x6, x2
   80fd4:	8b0c00ae 	add	x14, x5, x12
   80fd8:	54000528 	b.hi	8107c <qsort(void*, unsigned long, unsigned long)+0x81c>  // b.pmore
   80fdc:	d503201f 	nop
   80fe0:	fc6268b3 	ldr	d19, [x5, x2]
   80fe4:	fc666871 	ldr	d17, [x3, x6]
   80fe8:	1e732230 	fcmpe	d17, d19
   80fec:	540003e4 	b.mi	81068 <qsort(void*, unsigned long, unsigned long)+0x808>  // b.first
   80ff0:	540003cd 	b.le	81068 <qsort(void*, unsigned long, unsigned long)+0x808>
   80ff4:	fc6668b2 	ldr	d18, [x5, x6]
   80ff8:	8b0600a0 	add	x0, x5, x6
   80ffc:	1e732250 	fcmpe	d18, d19
   81000:	54000044 	b.mi	81008 <qsort(void*, unsigned long, unsigned long)+0x7a8>  // b.first
   81004:	5400052c 	b.gt	810a8 <qsort(void*, unsigned long, unsigned long)+0x848>
   81008:	eb05007f 	cmp	x3, x5
   8100c:	540002e0 	b.eq	81068 <qsort(void*, unsigned long, unsigned long)+0x808>  // b.none
   81010:	8b0c0067 	add	x7, x3, x12
   81014:	eb0300ff 	cmp	x7, x3
   81018:	54000283 	b.cc	81068 <qsort(void*, unsigned long, unsigned long)+0x808>  // b.lo, b.ul, b.last
   8101c:	aa0e03e4 	mov	x4, x14
   81020:	eb05009f 	cmp	x4, x5
   81024:	39c000f2 	ldrsb	w18, [x7]
   81028:	aa0403f1 	mov	x17, x4
   8102c:	54000303 	b.cc	8108c <qsort(void*, unsigned long, unsigned long)+0x82c>  // b.lo, b.ul, b.last
   81030:	aa0703ef 	mov	x15, x7
   81034:	14000002 	b	8103c <qsort(void*, unsigned long, unsigned long)+0x7dc>
   81038:	aa1303f1 	mov	x17, x19
   8103c:	39c00230 	ldrsb	w16, [x17]
   81040:	8b060233 	add	x19, x17, x6
   81044:	eb05027f 	cmp	x19, x5
   81048:	390001f0 	strb	w16, [x15]
   8104c:	cb0201ef 	sub	x15, x15, x2
   81050:	54ffff42 	b.cs	81038 <qsort(void*, unsigned long, unsigned long)+0x7d8>  // b.hs, b.nlast
   81054:	d10004e7 	sub	x7, x7, #0x1
   81058:	39000232 	strb	w18, [x17]
   8105c:	d1000484 	sub	x4, x4, #0x1
   81060:	eb0e00ff 	cmp	x7, x14
   81064:	54fffde1 	b.ne	81020 <qsort(void*, unsigned long, unsigned long)+0x7c0>  // b.any
   81068:	aa0303e5 	mov	x5, x3
   8106c:	8b0201ce 	add	x14, x14, x2
   81070:	8b0200a3 	add	x3, x5, x2
   81074:	eb0d007f 	cmp	x3, x13
   81078:	54fffb49 	b.ls	80fe0 <qsort(void*, unsigned long, unsigned long)+0x780>  // b.plast
   8107c:	a94053f3 	ldp	x19, x20, [sp]
   81080:	f9400bfe 	ldr	x30, [sp, #16]
   81084:	911083ff 	add	sp, sp, #0x420
   81088:	d65f03c0 	ret
   8108c:	aa0703f1 	mov	x17, x7
   81090:	d10004e7 	sub	x7, x7, #0x1
   81094:	eb0e00ff 	cmp	x7, x14
   81098:	d1000484 	sub	x4, x4, #0x1
   8109c:	39000232 	strb	w18, [x17]
   810a0:	54fffc01 	b.ne	81020 <qsort(void*, unsigned long, unsigned long)+0x7c0>  // b.any
   810a4:	17fffff1 	b	81068 <qsort(void*, unsigned long, unsigned long)+0x808>
   810a8:	aa0003e5 	mov	x5, x0
   810ac:	17ffffd2 	b	80ff4 <qsort(void*, unsigned long, unsigned long)+0x794>
   810b0:	f240084a 	ands	x10, x2, #0x7
   810b4:	d2800004 	mov	x4, #0x0                   	// #0
   810b8:	54000640 	b.eq	81180 <qsort(void*, unsigned long, unsigned long)+0x920>  // b.none
   810bc:	f100055f 	cmp	x10, #0x1
   810c0:	54000520 	b.eq	81164 <qsort(void*, unsigned long, unsigned long)+0x904>  // b.none
   810c4:	f100095f 	cmp	x10, #0x2
   810c8:	54000440 	b.eq	81150 <qsort(void*, unsigned long, unsigned long)+0x8f0>  // b.none
   810cc:	f1000d5f 	cmp	x10, #0x3
   810d0:	54000360 	b.eq	8113c <qsort(void*, unsigned long, unsigned long)+0x8dc>  // b.none
   810d4:	f100115f 	cmp	x10, #0x4
   810d8:	54000280 	b.eq	81128 <qsort(void*, unsigned long, unsigned long)+0x8c8>  // b.none
   810dc:	f100155f 	cmp	x10, #0x5
   810e0:	540001a0 	b.eq	81114 <qsort(void*, unsigned long, unsigned long)+0x8b4>  // b.none
   810e4:	f100195f 	cmp	x10, #0x6
   810e8:	540000c0 	b.eq	81100 <qsort(void*, unsigned long, unsigned long)+0x8a0>  // b.none
   810ec:	39c0006b 	ldrsb	w11, [x3]
   810f0:	d2800024 	mov	x4, #0x1                   	// #1
   810f4:	39c00033 	ldrsb	w19, [x1]
   810f8:	3900002b 	strb	w11, [x1]
   810fc:	39000073 	strb	w19, [x3]
   81100:	38e4686c 	ldrsb	w12, [x3, x4]
   81104:	38e46828 	ldrsb	w8, [x1, x4]
   81108:	3824682c 	strb	w12, [x1, x4]
   8110c:	38246868 	strb	w8, [x3, x4]
   81110:	91000484 	add	x4, x4, #0x1
   81114:	38e46869 	ldrsb	w9, [x3, x4]
   81118:	38e46827 	ldrsb	w7, [x1, x4]
   8111c:	38246829 	strb	w9, [x1, x4]
   81120:	38246867 	strb	w7, [x3, x4]
   81124:	91000484 	add	x4, x4, #0x1
   81128:	38e46874 	ldrsb	w20, [x3, x4]
   8112c:	38e46826 	ldrsb	w6, [x1, x4]
   81130:	38246834 	strb	w20, [x1, x4]
   81134:	38246866 	strb	w6, [x3, x4]
   81138:	91000484 	add	x4, x4, #0x1
   8113c:	38e4686a 	ldrsb	w10, [x3, x4]
   81140:	38e4682b 	ldrsb	w11, [x1, x4]
   81144:	3824682a 	strb	w10, [x1, x4]
   81148:	3824686b 	strb	w11, [x3, x4]
   8114c:	91000484 	add	x4, x4, #0x1
   81150:	38e46873 	ldrsb	w19, [x3, x4]
   81154:	38e4682c 	ldrsb	w12, [x1, x4]
   81158:	38246833 	strb	w19, [x1, x4]
   8115c:	3824686c 	strb	w12, [x3, x4]
   81160:	91000484 	add	x4, x4, #0x1
   81164:	38e46868 	ldrsb	w8, [x3, x4]
   81168:	38e46829 	ldrsb	w9, [x1, x4]
   8116c:	38246828 	strb	w8, [x1, x4]
   81170:	38246869 	strb	w9, [x3, x4]
   81174:	91000484 	add	x4, x4, #0x1
   81178:	eb02009f 	cmp	x4, x2
   8117c:	54000560 	b.eq	81228 <qsort(void*, unsigned long, unsigned long)+0x9c8>  // b.none
   81180:	38e46874 	ldrsb	w20, [x3, x4]
   81184:	91000486 	add	x6, x4, #0x1
   81188:	9100088c 	add	x12, x4, #0x2
   8118c:	91000c8b 	add	x11, x4, #0x3
   81190:	9100108a 	add	x10, x4, #0x4
   81194:	38e46833 	ldrsb	w19, [x1, x4]
   81198:	91001489 	add	x9, x4, #0x5
   8119c:	91001888 	add	x8, x4, #0x6
   811a0:	91001c87 	add	x7, x4, #0x7
   811a4:	38246834 	strb	w20, [x1, x4]
   811a8:	38246873 	strb	w19, [x3, x4]
   811ac:	91002084 	add	x4, x4, #0x8
   811b0:	38e66874 	ldrsb	w20, [x3, x6]
   811b4:	eb02009f 	cmp	x4, x2
   811b8:	38e66833 	ldrsb	w19, [x1, x6]
   811bc:	38266834 	strb	w20, [x1, x6]
   811c0:	38266873 	strb	w19, [x3, x6]
   811c4:	38ec6874 	ldrsb	w20, [x3, x12]
   811c8:	38ec6826 	ldrsb	w6, [x1, x12]
   811cc:	382c6834 	strb	w20, [x1, x12]
   811d0:	382c6866 	strb	w6, [x3, x12]
   811d4:	38eb686c 	ldrsb	w12, [x3, x11]
   811d8:	38eb6833 	ldrsb	w19, [x1, x11]
   811dc:	382b682c 	strb	w12, [x1, x11]
   811e0:	382b6873 	strb	w19, [x3, x11]
   811e4:	38ea686b 	ldrsb	w11, [x3, x10]
   811e8:	38ea6834 	ldrsb	w20, [x1, x10]
   811ec:	382a682b 	strb	w11, [x1, x10]
   811f0:	382a6874 	strb	w20, [x3, x10]
   811f4:	38e9686a 	ldrsb	w10, [x3, x9]
   811f8:	38e96826 	ldrsb	w6, [x1, x9]
   811fc:	3829682a 	strb	w10, [x1, x9]
   81200:	38296866 	strb	w6, [x3, x9]
   81204:	38e86869 	ldrsb	w9, [x3, x8]
   81208:	38e8682c 	ldrsb	w12, [x1, x8]
   8120c:	38286829 	strb	w9, [x1, x8]
   81210:	3828686c 	strb	w12, [x3, x8]
   81214:	38e76868 	ldrsb	w8, [x3, x7]
   81218:	38e76833 	ldrsb	w19, [x1, x7]
   8121c:	38276828 	strb	w8, [x1, x7]
   81220:	38276873 	strb	w19, [x3, x7]
   81224:	54fffae1 	b.ne	81180 <qsort(void*, unsigned long, unsigned long)+0x920>  // b.any
   81228:	eb05003f 	cmp	x1, x5
   8122c:	540000c0 	b.eq	81244 <qsort(void*, unsigned long, unsigned long)+0x9e4>  // b.none
   81230:	eb0300bf 	cmp	x5, x3
   81234:	9a8110a5 	csel	x5, x5, x1, ne  // ne = any
   81238:	8b020021 	add	x1, x1, x2
   8123c:	8b100063 	add	x3, x3, x16
   81240:	17fffedf 	b	80dbc <qsort(void*, unsigned long, unsigned long)+0x55c>
   81244:	aa0303e5 	mov	x5, x3
   81248:	17fffffc 	b	81238 <qsort(void*, unsigned long, unsigned long)+0x9d8>
   8124c:	eb04023f 	cmp	x17, x4
   81250:	54000102 	b.cs	81270 <qsort(void*, unsigned long, unsigned long)+0xa10>  // b.hs, b.nlast
   81254:	eb0400bf 	cmp	x5, x4
   81258:	91004247 	add	x7, x18, #0x10
   8125c:	5400010d 	b.le	8127c <qsort(void*, unsigned long, unsigned long)+0xa1c>
   81260:	a9000e4e 	stp	x14, x3, [x18]
   81264:	aa0103ee 	mov	x14, x1
   81268:	aa0703f2 	mov	x18, x7
   8126c:	17fffee3 	b	80df8 <qsort(void*, unsigned long, unsigned long)+0x598>
   81270:	aa0303ef 	mov	x15, x3
   81274:	17fffee1 	b	80df8 <qsort(void*, unsigned long, unsigned long)+0x598>
   81278:	d65f03c0 	ret
   8127c:	a9003e41 	stp	x1, x15, [x18]
   81280:	aa0303ef 	mov	x15, x3
   81284:	aa0703f2 	mov	x18, x7
   81288:	17fffedc 	b	80df8 <qsort(void*, unsigned long, unsigned long)+0x598>
   8128c:	d503201f 	nop

0000000000081290 <CKernel::CKernel()>:
   81290:	a9bc53f3 	stp	x19, x20, [sp, #-64]!
   81294:	d2836102 	mov	x2, #0x1b08                	// #6920
   81298:	52800001 	mov	w1, #0x0                   	// #0
   8129c:	aa0003f3 	mov	x19, x0
   812a0:	8b020014 	add	x20, x0, x2
   812a4:	a9015bf5 	stp	x21, x22, [sp, #16]
   812a8:	91006015 	add	x21, x0, #0x18
   812ac:	a9027bf7 	stp	x23, x30, [sp, #32]
   812b0:	94001f88 	bl	890d0 <CActLED::CActLED(bool)>
   812b4:	d2856103 	mov	x3, #0x2b08                	// #11016
   812b8:	aa1503e0 	mov	x0, x21
   812bc:	8b030276 	add	x22, x19, x3
   812c0:	94002834 	bl	8b390 <CKernelOptions::CKernelOptions()>
   812c4:	d285ab04 	mov	x4, #0x2d58                	// #11608
   812c8:	91220260 	add	x0, x19, #0x880
   812cc:	8b040277 	add	x23, x19, x4
   812d0:	940021cc 	bl	89a00 <CDeviceNameService::CDeviceNameService()>
   812d4:	aa1503e0 	mov	x0, x21
   812d8:	9400290e 	bl	8b710 <CKernelOptions::GetWidth() const>
   812dc:	2a0003e1 	mov	w1, w0
   812e0:	aa1503e0 	mov	x0, x21
   812e4:	b9003fe1 	str	w1, [sp, #60]
   812e8:	9400290e 	bl	8b720 <CKernelOptions::GetHeight() const>
   812ec:	b9403fe1 	ldr	w1, [sp, #60]
   812f0:	52800004 	mov	w4, #0x0                   	// #0
   812f4:	2a0003e2 	mov	w2, w0
   812f8:	52800003 	mov	w3, #0x0                   	// #0
   812fc:	91224260 	add	x0, x19, #0x890
   81300:	94002f60 	bl	8d080 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)>
   81304:	52800003 	mov	w3, #0x0                   	// #0
   81308:	52800002 	mov	w2, #0x0                   	// #0
   8130c:	d2800001 	mov	x1, #0x0                   	// #0
   81310:	9125c260 	add	x0, x19, #0x970
   81314:	94003563 	bl	8e8a0 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)>
   81318:	d2836005 	mov	x5, #0x1b00                	// #6912
   8131c:	8b050260 	add	x0, x19, x5
   81320:	94004ee8 	bl	94ec0 <CExceptionHandler::CExceptionHandler()>
   81324:	aa1403e0 	mov	x0, x20
   81328:	9400536a 	bl	960d0 <CInterruptSystem::CInterruptSystem()>
   8132c:	aa1403e1 	mov	x1, x20
   81330:	aa1603e0 	mov	x0, x22
   81334:	9400450f 	bl	92770 <CTimer::CTimer(CInterruptSystem*)>
   81338:	aa1503e0 	mov	x0, x21
   8133c:	94002901 	bl	8b740 <CKernelOptions::GetLogLevel() const>
   81340:	d2856e06 	mov	x6, #0x2b70                	// #11120
   81344:	aa1603e2 	mov	x2, x22
   81348:	2a0003e1 	mov	w1, w0
   8134c:	52800023 	mov	w3, #0x1                   	// #1
   81350:	8b060260 	add	x0, x19, x6
   81354:	94002963 	bl	8b8e0 <CLogger::CLogger(unsigned int, CTimer*, bool)>
   81358:	aa1403e1 	mov	x1, x20
   8135c:	aa1703e0 	mov	x0, x23
   81360:	94002340 	bl	8a060 <CGPIOManager::CGPIOManager(CInterruptSystem*)>
   81364:	d285e307 	mov	x7, #0x2f18                	// #12056
   81368:	aa1703e3 	mov	x3, x23
   8136c:	8b070260 	add	x0, x19, x7
   81370:	52800242 	mov	w2, #0x12                  	// #18
   81374:	52800221 	mov	w1, #0x11                  	// #17
   81378:	94000e6a 	bl	84d20 <CSoftSerialDevice::CSoftSerialDevice(unsigned int, unsigned int, CGPIOManager*)>
   8137c:	d2860508 	mov	x8, #0x3028                	// #12328
   81380:	aa1303e3 	mov	x3, x19
   81384:	8b080260 	add	x0, x19, x8
   81388:	aa1603e2 	mov	x2, x22
   8138c:	aa1403e1 	mov	x1, x20
   81390:	9400065c 	bl	82d00 <CEMMCDevice::CEMMCDevice(CInterruptSystem*, CTimer*, CActLED*)>
   81394:	d2868809 	mov	x9, #0x3440                	// #13376
   81398:	8b090260 	add	x0, x19, x9
   8139c:	940010b9 	bl	85680 <CFATFileSystem::CFATFileSystem()>
   813a0:	aa1303e0 	mov	x0, x19
   813a4:	52803e83 	mov	w3, #0x1f4                 	// #500
   813a8:	a9415bf5 	ldp	x21, x22, [sp, #16]
   813ac:	52801902 	mov	w2, #0xc8                  	// #200
   813b0:	528000a1 	mov	w1, #0x5                   	// #5
   813b4:	a9427bf7 	ldp	x23, x30, [sp, #32]
   813b8:	a8c453f3 	ldp	x19, x20, [sp], #64
   813bc:	14001f91 	b	89200 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>

00000000000813c0 <CKernel::~CKernel()>:
   813c0:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   813c4:	aa0003f3 	mov	x19, x0
   813c8:	d2868800 	mov	x0, #0x3440                	// #13376
   813cc:	8b000260 	add	x0, x19, x0
   813d0:	940010c8 	bl	856f0 <CFATFileSystem::~CFATFileSystem()>
   813d4:	d2860501 	mov	x1, #0x3028                	// #12328
   813d8:	8b010260 	add	x0, x19, x1
   813dc:	940006a9 	bl	82e80 <CEMMCDevice::~CEMMCDevice()>
   813e0:	d285e302 	mov	x2, #0x2f18                	// #12056
   813e4:	8b020260 	add	x0, x19, x2
   813e8:	94001076 	bl	855c0 <CSoftSerialDevice::~CSoftSerialDevice()>
   813ec:	d285ab03 	mov	x3, #0x2d58                	// #11608
   813f0:	8b030260 	add	x0, x19, x3
   813f4:	9400232b 	bl	8a0a0 <CGPIOManager::~CGPIOManager()>
   813f8:	d2856e04 	mov	x4, #0x2b70                	// #11120
   813fc:	8b040260 	add	x0, x19, x4
   81400:	9400294c 	bl	8b930 <CLogger::~CLogger()>
   81404:	d2856105 	mov	x5, #0x2b08                	// #11016
   81408:	8b050260 	add	x0, x19, x5
   8140c:	940044f9 	bl	927f0 <CTimer::~CTimer()>
   81410:	d2836106 	mov	x6, #0x1b08                	// #6920
   81414:	8b060260 	add	x0, x19, x6
   81418:	94005342 	bl	96120 <CInterruptSystem::~CInterruptSystem()>
   8141c:	d2836007 	mov	x7, #0x1b00                	// #6912
   81420:	8b070260 	add	x0, x19, x7
   81424:	94004eb3 	bl	94ef0 <CExceptionHandler::~CExceptionHandler()>
   81428:	9125c260 	add	x0, x19, #0x970
   8142c:	94003595 	bl	8ea80 <CSerialDevice::~CSerialDevice()>
   81430:	91224260 	add	x0, x19, #0x890
   81434:	94002f3b 	bl	8d120 <CScreenDevice::~CScreenDevice()>
   81438:	91220260 	add	x0, x19, #0x880
   8143c:	94002181 	bl	89a40 <CDeviceNameService::~CDeviceNameService()>
   81440:	91006260 	add	x0, x19, #0x18
   81444:	940028af 	bl	8b700 <CKernelOptions::~CKernelOptions()>
   81448:	aa1303e0 	mov	x0, x19
   8144c:	a8c17bf3 	ldp	x19, x30, [sp], #16
   81450:	14001f4c 	b	89180 <CActLED::~CActLED()>
   81454:	d503201f 	nop
   81458:	d503201f 	nop
   8145c:	d503201f 	nop

0000000000081460 <CKernel::send_message(int)>:
   81460:	aa0003e3 	mov	x3, x0
   81464:	531e7422 	lsl	w2, w1, #2
   81468:	d285e300 	mov	x0, #0x2f18                	// #12056
   8146c:	d287b701 	mov	x1, #0x3db8                	// #15800
   81470:	8b000060 	add	x0, x3, x0
   81474:	8b010061 	add	x1, x3, x1
   81478:	14000e6a 	b	84e20 <CSoftSerialDevice::Write(void const*, unsigned int)>
   8147c:	d503201f 	nop

0000000000081480 <CKernel::Initialize()>:
   81480:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   81484:	52984001 	mov	w1, #0xc200                	// #49664
   81488:	72a00021 	movk	w1, #0x1, lsl #16
   8148c:	aa0003f3 	mov	x19, x0
   81490:	9125c000 	add	x0, x0, #0x970
   81494:	940035d7 	bl	8ebf0 <CSerialDevice::Initialize(unsigned int)>
   81498:	72001c1f 	tst	w0, #0xff
   8149c:	54000081 	b.ne	814ac <CKernel::Initialize()+0x2c>  // b.any
   814a0:	52800000 	mov	w0, #0x0                   	// #0
   814a4:	a8c17bf3 	ldp	x19, x30, [sp], #16
   814a8:	d65f03c0 	ret
   814ac:	d2836104 	mov	x4, #0x1b08                	// #6920
   814b0:	8b040260 	add	x0, x19, x4
   814b4:	94005323 	bl	96140 <CInterruptSystem::Initialize()>
   814b8:	72001c1f 	tst	w0, #0xff
   814bc:	54ffff20 	b.eq	814a0 <CKernel::Initialize()+0x20>  // b.none
   814c0:	d2856103 	mov	x3, #0x2b08                	// #11016
   814c4:	8b030260 	add	x0, x19, x3
   814c8:	940047a6 	bl	93360 <CTimer::Initialize()>
   814cc:	72001c1f 	tst	w0, #0xff
   814d0:	54fffe80 	b.eq	814a0 <CKernel::Initialize()+0x20>  // b.none
   814d4:	d2860502 	mov	x2, #0x3028                	// #12328
   814d8:	8b020260 	add	x0, x19, x2
   814dc:	9400069d 	bl	82f50 <CEMMCDevice::Initialize()>
   814e0:	72001c1f 	tst	w0, #0xff
   814e4:	54fffde0 	b.eq	814a0 <CKernel::Initialize()+0x20>  // b.none
   814e8:	d285ab01 	mov	x1, #0x2d58                	// #11608
   814ec:	8b010260 	add	x0, x19, x1
   814f0:	9400231c 	bl	8a160 <CGPIOManager::Initialize()>
   814f4:	72001c1f 	tst	w0, #0xff
   814f8:	54fffd40 	b.eq	814a0 <CKernel::Initialize()+0x20>  // b.none
   814fc:	d285e300 	mov	x0, #0x2f18                	// #12056
   81500:	8b000260 	add	x0, x19, x0
   81504:	a8c17bf3 	ldp	x19, x30, [sp], #16
   81508:	14000e2a 	b	84db0 <CSoftSerialDevice::Initialize()>
   8150c:	d503201f 	nop

0000000000081510 <CKernel::initGold(char*)>:
   81510:	d2868802 	mov	x2, #0x3440                	// #13376
   81514:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   81518:	8b020013 	add	x19, x0, x2
   8151c:	aa1303e0 	mov	x0, x19
   81520:	f9000bfe 	str	x30, [sp, #16]
   81524:	940010af 	bl	857e0 <CFATFileSystem::FileOpen(char const*)>
   81528:	b000f503 	adrp	x3, 1f22000 <distance_temp+0xf415a0>
   8152c:	2a0003f4 	mov	w20, w0
   81530:	2a0003e1 	mov	w1, w0
   81534:	91398062 	add	x2, x3, #0xe60
   81538:	aa1303e0 	mov	x0, x19
   8153c:	52848003 	mov	w3, #0x2400                	// #9216
   81540:	72a01e83 	movk	w3, #0xf4, lsl #16
   81544:	940011f7 	bl	85d20 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)>
   81548:	2a1403e1 	mov	w1, w20
   8154c:	aa1303e0 	mov	x0, x19
   81550:	f9400bfe 	ldr	x30, [sp, #16]
   81554:	a8c253f3 	ldp	x19, x20, [sp], #32
   81558:	1400118e 	b	85b90 <CFATFileSystem::FileClose(unsigned int)>
   8155c:	d503201f 	nop

0000000000081560 <CKernel::initInput(char*)>:
   81560:	d2868802 	mov	x2, #0x3440                	// #13376
   81564:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   81568:	8b020013 	add	x19, x0, x2
   8156c:	aa1303e0 	mov	x0, x19
   81570:	f9000bfe 	str	x30, [sp, #16]
   81574:	9400109b 	bl	857e0 <CFATFileSystem::FileOpen(char const*)>
   81578:	b00000e3 	adrp	x3, 9e000 <font_data+0x1558>
   8157c:	2a0003f4 	mov	w20, w0
   81580:	2a0003e1 	mov	w1, w0
   81584:	91198062 	add	x2, x3, #0x660
   81588:	aa1303e0 	mov	x0, x19
   8158c:	52848003 	mov	w3, #0x2400                	// #9216
   81590:	72a01e83 	movk	w3, #0xf4, lsl #16
   81594:	940011e3 	bl	85d20 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)>
   81598:	2a1403e1 	mov	w1, w20
   8159c:	aa1303e0 	mov	x0, x19
   815a0:	f9400bfe 	ldr	x30, [sp, #16]
   815a4:	a8c253f3 	ldp	x19, x20, [sp], #32
   815a8:	1400117a 	b	85b90 <CFATFileSystem::FileClose(unsigned int)>
   815ac:	d503201f 	nop

00000000000815b0 <CKernel::Run()>:
   815b0:	a9ba53f3 	stp	x19, x20, [sp, #-96]!
   815b4:	d285e303 	mov	x3, #0x2f18                	// #12056
   815b8:	aa0003f3 	mov	x19, x0
   815bc:	d287b704 	mov	x4, #0x3db8                	// #15800
   815c0:	91220000 	add	x0, x0, #0x880
   815c4:	52800022 	mov	w2, #0x1                   	// #1
   815c8:	a90263f7 	stp	x23, x24, [sp, #32]
   815cc:	b00000d4 	adrp	x20, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   815d0:	91128298 	add	x24, x20, #0x4a0
   815d4:	91002301 	add	x1, x24, #0x8
   815d8:	a9015bf5 	stp	x21, x22, [sp, #16]
   815dc:	8b030275 	add	x21, x19, x3
   815e0:	8b040276 	add	x22, x19, x4
   815e4:	a9036bf9 	stp	x25, x26, [sp, #48]
   815e8:	a90473fb 	stp	x27, x28, [sp, #64]
   815ec:	f9002bfe 	str	x30, [sp, #80]
   815f0:	940021e4 	bl	89d80 <CDeviceNameService::GetDevice(char const*, bool)>
   815f4:	aa0003f7 	mov	x23, x0
   815f8:	b4000c60 	cbz	x0, 81784 <CKernel::Run()+0x1d4>
   815fc:	d2868800 	mov	x0, #0x3440                	// #13376
   81600:	aa1703e1 	mov	x1, x23
   81604:	8b000260 	add	x0, x19, x0
   81608:	94001046 	bl	85720 <CFATFileSystem::Mount(CDevice*)>
   8160c:	34000ae0 	cbz	w0, 81768 <CKernel::Run()+0x1b8>
   81610:	91004301 	add	x1, x24, #0x10
   81614:	aa1303e0 	mov	x0, x19
   81618:	97ffffbe 	bl	81510 <CKernel::initGold(char*)>
   8161c:	9100a301 	add	x1, x24, #0x28
   81620:	aa1303e0 	mov	x0, x19
   81624:	97ffffcf 	bl	81560 <CKernel::initInput(char*)>
   81628:	d2848018 	mov	x24, #0x2400                	// #9216
   8162c:	f2a01e98 	movk	x24, #0xf4, lsl #16
   81630:	b00000e1 	adrp	x1, 9e000 <font_data+0x1558>
   81634:	91198034 	add	x20, x1, #0x660
   81638:	f0007afa 	adrp	x26, fe0000 <distance+0xf419a0>
   8163c:	9129835a 	add	x26, x26, #0xa60
   81640:	b000f51b 	adrp	x27, 1f22000 <distance_temp+0xf415a0>
   81644:	9139837b 	add	x27, x27, #0xe60
   81648:	d2909017 	mov	x23, #0x8480                	// #33920
   8164c:	f2a003d7 	movk	x23, #0x1e, lsl #16
   81650:	d2847f1c 	mov	x28, #0x23f8                	// #9208
   81654:	f2a01e9c 	movk	x28, #0xf4, lsl #16
   81658:	52b54019 	mov	w25, #0xaa000000            	// #-1442840576
   8165c:	d503201f 	nop
   81660:	aa1803e2 	mov	x2, x24
   81664:	aa1403e1 	mov	x1, x20
   81668:	aa1a03e0 	mov	x0, x26
   8166c:	94004b59 	bl	943d0 <memcpy>
   81670:	d2800102 	mov	x2, #0x8                   	// #8
   81674:	aa1703e1 	mov	x1, x23
   81678:	aa1a03e0 	mov	x0, x26
   8167c:	97fffc79 	bl	80860 <qsort(void*, unsigned long, unsigned long)>
   81680:	f9400342 	ldr	x2, [x26]
   81684:	d2800111 	mov	x17, #0x8                   	// #8
   81688:	f9400367 	ldr	x7, [x27]
   8168c:	eb07005f 	cmp	x2, x7
   81690:	1a9f07e4 	cset	w4, ne  // ne = any
   81694:	d503201f 	nop
   81698:	f8716b4b 	ldr	x11, [x26, x17]
   8169c:	91002228 	add	x8, x17, #0x8
   816a0:	9100422d 	add	x13, x17, #0x10
   816a4:	9100622c 	add	x12, x17, #0x18
   816a8:	9100822e 	add	x14, x17, #0x20
   816ac:	f8716b69 	ldr	x9, [x27, x17]
   816b0:	9100a22f 	add	x15, x17, #0x28
   816b4:	9100c230 	add	x16, x17, #0x30
   816b8:	9100e231 	add	x17, x17, #0x38
   816bc:	f8686b4a 	ldr	x10, [x26, x8]
   816c0:	f8686b72 	ldr	x18, [x27, x8]
   816c4:	eb09017f 	cmp	x11, x9
   816c8:	1a84049e 	cinc	w30, w4, ne  // ne = any
   816cc:	f86d6b43 	ldr	x3, [x26, x13]
   816d0:	f86d6b64 	ldr	x4, [x27, x13]
   816d4:	eb12015f 	cmp	x10, x18
   816d8:	1a9e07c5 	cinc	w5, w30, ne  // ne = any
   816dc:	f86c6b41 	ldr	x1, [x26, x12]
   816e0:	f86c6b66 	ldr	x6, [x27, x12]
   816e4:	eb04007f 	cmp	x3, x4
   816e8:	1a8504a0 	cinc	w0, w5, ne  // ne = any
   816ec:	f86e6b47 	ldr	x7, [x26, x14]
   816f0:	f86e6b62 	ldr	x2, [x27, x14]
   816f4:	eb06003f 	cmp	x1, x6
   816f8:	1a800408 	cinc	w8, w0, ne  // ne = any
   816fc:	f86f6b4b 	ldr	x11, [x26, x15]
   81700:	f86f6b6c 	ldr	x12, [x27, x15]
   81704:	eb0200ff 	cmp	x7, x2
   81708:	1a88050d 	cinc	w13, w8, ne  // ne = any
   8170c:	f8706b4e 	ldr	x14, [x26, x16]
   81710:	f8706b69 	ldr	x9, [x27, x16]
   81714:	eb0c017f 	cmp	x11, x12
   81718:	1a8d05af 	cinc	w15, w13, ne  // ne = any
   8171c:	eb0901df 	cmp	x14, x9
   81720:	1a8f05e4 	cinc	w4, w15, ne  // ne = any
   81724:	eb1c023f 	cmp	x17, x28
   81728:	54fffb81 	b.ne	81698 <CKernel::Run()+0xe8>  // b.any
   8172c:	34000124 	cbz	w4, 81750 <CKernel::Run()+0x1a0>
   81730:	52bba010 	mov	w16, #0xdd000000            	// #-587202560
   81734:	52800102 	mov	w2, #0x8                   	// #8
   81738:	b93dbe64 	str	w4, [x19, #15804]
   8173c:	aa1603e1 	mov	x1, x22
   81740:	aa1503e0 	mov	x0, x21
   81744:	b93dba70 	str	w16, [x19, #15800]
   81748:	94000db6 	bl	84e20 <CSoftSerialDevice::Write(void const*, unsigned int)>
   8174c:	17ffffc5 	b	81660 <CKernel::Run()+0xb0>
   81750:	52800082 	mov	w2, #0x4                   	// #4
   81754:	aa1603e1 	mov	x1, x22
   81758:	b93dba79 	str	w25, [x19, #15800]
   8175c:	aa1503e0 	mov	x0, x21
   81760:	94000db0 	bl	84e20 <CSoftSerialDevice::Write(void const*, unsigned int)>
   81764:	17ffffbf 	b	81660 <CKernel::Run()+0xb0>
   81768:	52bfe406 	mov	w6, #0xff200000            	// #-14680064
   8176c:	52800082 	mov	w2, #0x4                   	// #4
   81770:	aa1603e1 	mov	x1, x22
   81774:	aa1503e0 	mov	x0, x21
   81778:	b93dba66 	str	w6, [x19, #15800]
   8177c:	94000da9 	bl	84e20 <CSoftSerialDevice::Write(void const*, unsigned int)>
   81780:	17ffffa4 	b	81610 <CKernel::Run()+0x60>
   81784:	52bfe205 	mov	w5, #0xff100000            	// #-15728640
   81788:	52800082 	mov	w2, #0x4                   	// #4
   8178c:	aa1603e1 	mov	x1, x22
   81790:	aa1503e0 	mov	x0, x21
   81794:	b93dba65 	str	w5, [x19, #15800]
   81798:	94000da2 	bl	84e20 <CSoftSerialDevice::Write(void const*, unsigned int)>
   8179c:	17ffff98 	b	815fc <CKernel::Run()+0x4c>

00000000000817a0 <lud_diagonal_omp(double*, int, int)>:
   817a0:	2a0203ec 	mov	w12, w2
   817a4:	a9b453f3 	stp	x19, x20, [sp, #-192]!
   817a8:	52800163 	mov	w3, #0xb                   	// #11
   817ac:	528001a2 	mov	w2, #0xd                   	// #13
   817b0:	531d7027 	lsl	w7, w1, #3
   817b4:	4b010be5 	neg	w5, w1, lsl #2
   817b8:	1b017d89 	mul	w9, w12, w1
   817bc:	93407c2b 	sxtw	x11, w1
   817c0:	8b2cc16a 	add	x10, x11, w12, sxtw
   817c4:	a9036bf9 	stp	x25, x26, [sp, #48]
   817c8:	531e743a 	lsl	w26, w1, #2
   817cc:	1b033034 	madd	w20, w1, w3, w12
   817d0:	0b01034d 	add	w13, w26, w1
   817d4:	0b0100f9 	add	w25, w7, w1
   817d8:	1e6e1003 	fmov	d3, #1.000000000000000000e+00
   817dc:	0b0d058f 	add	w15, w12, w13, lsl #1
   817e0:	2a0903f2 	mov	w18, w9
   817e4:	4b0100ee 	sub	w14, w7, w1
   817e8:	a90473fb 	stp	x27, x28, [sp, #64]
   817ec:	531f783b 	lsl	w27, w1, #1
   817f0:	8b29c15c 	add	x28, x10, w9, sxtw
   817f4:	0b010368 	add	w8, w27, w1
   817f8:	0b0c00e3 	add	w3, w7, w12
   817fc:	0b080591 	add	w17, w12, w8, lsl #1
   81800:	0b0c0113 	add	w19, w8, w12
   81804:	11000586 	add	w6, w12, #0x1
   81808:	0b080990 	add	w16, w12, w8, lsl #2
   8180c:	a9015bf5 	stp	x21, x22, [sp, #16]
   81810:	0b090268 	add	w8, w19, w9
   81814:	1b023035 	madd	w21, w1, w2, w12
   81818:	0b0c01b6 	add	w22, w13, w12
   8181c:	0b090224 	add	w4, w17, w9
   81820:	8b1c0c02 	add	x2, x0, x28, lsl #3
   81824:	0b09020d 	add	w13, w16, w9
   81828:	0b0c013c 	add	w28, w9, w12
   8182c:	a90263f7 	stp	x23, x24, [sp, #32]
   81830:	0b0c0338 	add	w24, w25, w12
   81834:	0b1201f9 	add	w25, w15, w18
   81838:	0b0c01d7 	add	w23, w14, w12
   8183c:	11000d91 	add	w17, w12, #0x3
   81840:	9100056e 	add	x14, x11, #0x1
   81844:	0b1b018b 	add	w11, w12, w27
   81848:	f9002bfe 	str	x30, [sp, #80]
   8184c:	0b01019e 	add	w30, w12, w1
   81850:	0b1202d0 	add	w16, w22, w18
   81854:	0b0903c7 	add	w7, w30, w9
   81858:	2914a7e5 	stp	w5, w9, [sp, #164]
   8185c:	0b0c0349 	add	w9, w26, w12
   81860:	11000985 	add	w5, w12, #0x2
   81864:	b900afec 	str	w12, [sp, #172]
   81868:	1100418c 	add	w12, w12, #0x10
   8186c:	0b12006f 	add	w15, w3, w18
   81870:	0b1202f3 	add	w19, w23, w18
   81874:	f9003be2 	str	x2, [sp, #112]
   81878:	d37df1d6 	lsl	x22, x14, #3
   8187c:	0b120294 	add	w20, w20, w18
   81880:	b90087e8 	str	w8, [sp, #132]
   81884:	0b12012e 	add	w14, w9, w18
   81888:	0b1202b5 	add	w21, w21, w18
   8188c:	b9009ff9 	str	w25, [sp, #156]
   81890:	0b1200d7 	add	w23, w6, w18
   81894:	0b120319 	add	w25, w24, w18
   81898:	290f1fe7 	stp	w7, w7, [sp, #120]
   8189c:	0b120178 	add	w24, w11, w18
   818a0:	0b1200aa 	add	w10, w5, w18
   818a4:	b9008bee 	str	w14, [sp, #136]
   818a8:	0b120223 	add	w3, w17, w18
   818ac:	4b1a003a 	sub	w26, w1, w26
   818b0:	b90067f7 	str	w23, [sp, #100]
   818b4:	0b12018c 	add	w12, w12, w18
   818b8:	52800002 	mov	w2, #0x0                   	// #0
   818bc:	b9006bea 	str	w10, [sp, #104]
   818c0:	2a1c03e8 	mov	w8, w28
   818c4:	52800009 	mov	w9, #0x0                   	// #0
   818c8:	b9006fe3 	str	w3, [sp, #108]
   818cc:	b90083f8 	str	w24, [sp, #128]
   818d0:	b9008ff0 	str	w16, [sp, #140]
   818d4:	b90093e4 	str	w4, [sp, #144]
   818d8:	b90097f3 	str	w19, [sp, #148]
   818dc:	b9009bef 	str	w15, [sp, #152]
   818e0:	b900a3f4 	str	w20, [sp, #160]
   818e4:	f9005bf6 	str	x22, [sp, #176]
   818e8:	b900bbed 	str	w13, [sp, #184]
   818ec:	b900bff5 	str	w21, [sp, #188]
   818f0:	11002511 	add	w17, w8, #0x9
   818f4:	11002915 	add	w21, w8, #0xa
   818f8:	8b31cc12 	add	x18, x0, w17, sxtw #3
   818fc:	2a1903e7 	mov	w7, w25
   81900:	2a1c03e5 	mov	w5, w28
   81904:	8b35cc13 	add	x19, x0, w21, sxtw #3
   81908:	11001104 	add	w4, w8, #0x4
   8190c:	11001d1e 	add	w30, w8, #0x7
   81910:	8b24cc0a 	add	x10, x0, w4, sxtw #3
   81914:	1100150b 	add	w11, w8, #0x5
   81918:	1100190d 	add	w13, w8, #0x6
   8191c:	8b3ecc0f 	add	x15, x0, w30, sxtw #3
   81920:	11002106 	add	w6, w8, #0x8
   81924:	11002d14 	add	w20, w8, #0xb
   81928:	b94067e3 	ldr	w3, [sp, #100]
   8192c:	11003116 	add	w22, w8, #0xc
   81930:	11003517 	add	w23, w8, #0xd
   81934:	8b28cc0e 	add	x14, x0, w8, sxtw #3
   81938:	11003918 	add	w24, w8, #0xe
   8193c:	b9406be4 	ldr	w4, [sp, #104]
   81940:	8b2bcc0b 	add	x11, x0, w11, sxtw #3
   81944:	8b2dcc0d 	add	x13, x0, w13, sxtw #3
   81948:	8b26cc10 	add	x16, x0, w6, sxtw #3
   8194c:	8b34cc14 	add	x20, x0, w20, sxtw #3
   81950:	b9406ffe 	ldr	w30, [sp, #108]
   81954:	8b36cc16 	add	x22, x0, w22, sxtw #3
   81958:	8b37cc17 	add	x23, x0, w23, sxtw #3
   8195c:	8b38cc18 	add	x24, x0, w24, sxtw #3
   81960:	8b23cc11 	add	x17, x0, w3, sxtw #3
   81964:	8b24cc15 	add	x21, x0, w4, sxtw #3
   81968:	8b3ecc1e 	add	x30, x0, w30, sxtw #3
   8196c:	d503201f 	nop
   81970:	34000d42 	cbz	w2, 81b18 <lud_diagonal_omp(double*, int, int)+0x378>
   81974:	0b0900a6 	add	w6, w5, w9
   81978:	fc65d802 	ldr	d2, [x0, w5, sxtw #3]
   8197c:	7100045f 	cmp	w2, #0x1
   81980:	93407cc3 	sxtw	x3, w6
   81984:	fd4001c0 	ldr	d0, [x14]
   81988:	fc637801 	ldr	d1, [x0, x3, lsl #3]
   8198c:	1f428404 	fmsub	d4, d0, d2, d1
   81990:	fc237804 	str	d4, [x0, x3, lsl #3]
   81994:	54000c20 	b.eq	81b18 <lud_diagonal_omp(double*, int, int)+0x378>  // b.none
   81998:	0b050024 	add	w4, w1, w5
   8199c:	fd400226 	ldr	d6, [x17]
   819a0:	7100085f 	cmp	w2, #0x2
   819a4:	fc64d805 	ldr	d5, [x0, w4, sxtw #3]
   819a8:	1f4590c7 	fmsub	d7, d6, d5, d4
   819ac:	fc237807 	str	d7, [x0, x3, lsl #3]
   819b0:	54000b40 	b.eq	81b18 <lud_diagonal_omp(double*, int, int)+0x378>  // b.none
   819b4:	0b040026 	add	w6, w1, w4
   819b8:	fd4002b1 	ldr	d17, [x21]
   819bc:	71000c5f 	cmp	w2, #0x3
   819c0:	fc66d810 	ldr	d16, [x0, w6, sxtw #3]
   819c4:	1f509e32 	fmsub	d18, d17, d16, d7
   819c8:	fc237812 	str	d18, [x0, x3, lsl #3]
   819cc:	54000a60 	b.eq	81b18 <lud_diagonal_omp(double*, int, int)+0x378>  // b.none
   819d0:	0b060024 	add	w4, w1, w6
   819d4:	fd4003d4 	ldr	d20, [x30]
   819d8:	7100105f 	cmp	w2, #0x4
   819dc:	fc64d813 	ldr	d19, [x0, w4, sxtw #3]
   819e0:	1f53ca95 	fmsub	d21, d20, d19, d18
   819e4:	fc237815 	str	d21, [x0, x3, lsl #3]
   819e8:	54000980 	b.eq	81b18 <lud_diagonal_omp(double*, int, int)+0x378>  // b.none
   819ec:	0b040026 	add	w6, w1, w4
   819f0:	fd400157 	ldr	d23, [x10]
   819f4:	7100145f 	cmp	w2, #0x5
   819f8:	fc66d816 	ldr	d22, [x0, w6, sxtw #3]
   819fc:	1f56d6f8 	fmsub	d24, d23, d22, d21
   81a00:	fc237818 	str	d24, [x0, x3, lsl #3]
   81a04:	540008a0 	b.eq	81b18 <lud_diagonal_omp(double*, int, int)+0x378>  // b.none
   81a08:	0b060024 	add	w4, w1, w6
   81a0c:	fd40017a 	ldr	d26, [x11]
   81a10:	7100185f 	cmp	w2, #0x6
   81a14:	fc64d819 	ldr	d25, [x0, w4, sxtw #3]
   81a18:	1f59e35b 	fmsub	d27, d26, d25, d24
   81a1c:	fc23781b 	str	d27, [x0, x3, lsl #3]
   81a20:	540007c0 	b.eq	81b18 <lud_diagonal_omp(double*, int, int)+0x378>  // b.none
   81a24:	0b1a00e6 	add	w6, w7, w26
   81a28:	fd4001bd 	ldr	d29, [x13]
   81a2c:	71001c5f 	cmp	w2, #0x7
   81a30:	fc66d81c 	ldr	d28, [x0, w6, sxtw #3]
   81a34:	1f5cefbe 	fmsub	d30, d29, d28, d27
   81a38:	fc23781e 	str	d30, [x0, x3, lsl #3]
   81a3c:	540006e0 	b.eq	81b18 <lud_diagonal_omp(double*, int, int)+0x378>  // b.none
   81a40:	0b1b0084 	add	w4, w4, w27
   81a44:	fd4001e2 	ldr	d2, [x15]
   81a48:	7100205f 	cmp	w2, #0x8
   81a4c:	fc64d81f 	ldr	d31, [x0, w4, sxtw #3]
   81a50:	1f5ff840 	fmsub	d0, d2, d31, d30
   81a54:	fc237800 	str	d0, [x0, x3, lsl #3]
   81a58:	54000600 	b.eq	81b18 <lud_diagonal_omp(double*, int, int)+0x378>  // b.none
   81a5c:	0b040024 	add	w4, w1, w4
   81a60:	fd400201 	ldr	d1, [x16]
   81a64:	7100245f 	cmp	w2, #0x9
   81a68:	fc64d804 	ldr	d4, [x0, w4, sxtw #3]
   81a6c:	1f448025 	fmsub	d5, d1, d4, d0
   81a70:	fc237805 	str	d5, [x0, x3, lsl #3]
   81a74:	54000520 	b.eq	81b18 <lud_diagonal_omp(double*, int, int)+0x378>  // b.none
   81a78:	fc67d806 	ldr	d6, [x0, w7, sxtw #3]
   81a7c:	7100285f 	cmp	w2, #0xa
   81a80:	fd400247 	ldr	d7, [x18]
   81a84:	1f4694f0 	fmsub	d16, d7, d6, d5
   81a88:	fc237810 	str	d16, [x0, x3, lsl #3]
   81a8c:	54000460 	b.eq	81b18 <lud_diagonal_omp(double*, int, int)+0x378>  // b.none
   81a90:	b940a7e4 	ldr	w4, [sp, #164]
   81a94:	71002c5f 	cmp	w2, #0xb
   81a98:	fd400272 	ldr	d18, [x19]
   81a9c:	4b0400c6 	sub	w6, w6, w4
   81aa0:	fc66d811 	ldr	d17, [x0, w6, sxtw #3]
   81aa4:	1f51c253 	fmsub	d19, d18, d17, d16
   81aa8:	fc237813 	str	d19, [x0, x3, lsl #3]
   81aac:	54000360 	b.eq	81b18 <lud_diagonal_omp(double*, int, int)+0x378>  // b.none
   81ab0:	0b060024 	add	w4, w1, w6
   81ab4:	fd400295 	ldr	d21, [x20]
   81ab8:	7100305f 	cmp	w2, #0xc
   81abc:	fc64d814 	ldr	d20, [x0, w4, sxtw #3]
   81ac0:	1f54ceb6 	fmsub	d22, d21, d20, d19
   81ac4:	fc237816 	str	d22, [x0, x3, lsl #3]
   81ac8:	54000280 	b.eq	81b18 <lud_diagonal_omp(double*, int, int)+0x378>  // b.none
   81acc:	0b040026 	add	w6, w1, w4
   81ad0:	fd4002d8 	ldr	d24, [x22]
   81ad4:	7100345f 	cmp	w2, #0xd
   81ad8:	fc66d817 	ldr	d23, [x0, w6, sxtw #3]
   81adc:	1f57db19 	fmsub	d25, d24, d23, d22
   81ae0:	fc237819 	str	d25, [x0, x3, lsl #3]
   81ae4:	540001a0 	b.eq	81b18 <lud_diagonal_omp(double*, int, int)+0x378>  // b.none
   81ae8:	0b060024 	add	w4, w1, w6
   81aec:	fd4002fb 	ldr	d27, [x23]
   81af0:	7100385f 	cmp	w2, #0xe
   81af4:	fc64d81a 	ldr	d26, [x0, w4, sxtw #3]
   81af8:	1f5ae77c 	fmsub	d28, d27, d26, d25
   81afc:	fc23781c 	str	d28, [x0, x3, lsl #3]
   81b00:	540000c0 	b.eq	81b18 <lud_diagonal_omp(double*, int, int)+0x378>  // b.none
   81b04:	0b040026 	add	w6, w1, w4
   81b08:	fd40031e 	ldr	d30, [x24]
   81b0c:	fc66d81d 	ldr	d29, [x0, w6, sxtw #3]
   81b10:	1f5df3df 	fmsub	d31, d30, d29, d28
   81b14:	fc23781f 	str	d31, [x0, x3, lsl #3]
   81b18:	110004a5 	add	w5, w5, #0x1
   81b1c:	110004e7 	add	w7, w7, #0x1
   81b20:	6b0c00bf 	cmp	w5, w12
   81b24:	54fff261 	b.ne	81970 <lud_diagonal_omp(double*, int, int)+0x1d0>  // b.any
   81b28:	29552bee 	ldp	w14, w10, [sp, #168]
   81b2c:	11000458 	add	w24, w2, #0x1
   81b30:	71003c5f 	cmp	w2, #0xf
   81b34:	2a1803e6 	mov	w6, w24
   81b38:	0b0901cb 	add	w11, w14, w9
   81b3c:	0b02016d 	add	w13, w11, w2
   81b40:	0b0a01af 	add	w15, w13, w10
   81b44:	fc6fd802 	ldr	d2, [x0, w15, sxtw #3]
   81b48:	1e621864 	fdiv	d4, d3, d2
   81b4c:	54001740 	b.eq	81e34 <lud_diagonal_omp(double*, int, int)+0x694>  // b.none
   81b50:	b940bbf0 	ldr	w16, [sp, #184]
   81b54:	8b3ccc1e 	add	x30, x0, w28, sxtw #3
   81b58:	8b39cc15 	add	x21, x0, w25, sxtw #3
   81b5c:	b940bff3 	ldr	w19, [sp, #188]
   81b60:	b9407ff6 	ldr	w22, [sp, #124]
   81b64:	8b36cc0a 	add	x10, x0, w22, sxtw #3
   81b68:	0b100052 	add	w18, w2, w16
   81b6c:	8b32cc07 	add	x7, x0, w18, sxtw #3
   81b70:	b9408be3 	ldr	w3, [sp, #136]
   81b74:	8b23cc0f 	add	x15, x0, w3, sxtw #3
   81b78:	0b130054 	add	w20, w2, w19
   81b7c:	8b34cc0d 	add	x13, x0, w20, sxtw #3
   81b80:	b94087f1 	ldr	w17, [sp, #132]
   81b84:	8b31cc0e 	add	x14, x0, w17, sxtw #3
   81b88:	b94093f2 	ldr	w18, [sp, #144]
   81b8c:	b94097f3 	ldr	w19, [sp, #148]
   81b90:	8b32cc11 	add	x17, x0, w18, sxtw #3
   81b94:	b9409bf4 	ldr	w20, [sp, #152]
   81b98:	8b33cc12 	add	x18, x0, w19, sxtw #3
   81b9c:	b9409ff6 	ldr	w22, [sp, #156]
   81ba0:	8b34cc13 	add	x19, x0, w20, sxtw #3
   81ba4:	b9407be4 	ldr	w4, [sp, #120]
   81ba8:	8b36cc14 	add	x20, x0, w22, sxtw #3
   81bac:	f9403be3 	ldr	x3, [sp, #112]
   81bb0:	b94083f7 	ldr	w23, [sp, #128]
   81bb4:	8b37cc0b 	add	x11, x0, w23, sxtw #3
   81bb8:	b9408fe5 	ldr	w5, [sp, #140]
   81bbc:	8b25cc10 	add	x16, x0, w5, sxtw #3
   81bc0:	b940a3f7 	ldr	w23, [sp, #160]
   81bc4:	8b37cc16 	add	x22, x0, w23, sxtw #3
   81bc8:	fd400060 	ldr	d0, [x3]
   81bcc:	34000be2 	cbz	w2, 81d48 <lud_diagonal_omp(double*, int, int)+0x5a8>
   81bd0:	7100045f 	cmp	w2, #0x1
   81bd4:	fc64d801 	ldr	d1, [x0, w4, sxtw #3]
   81bd8:	fd4003c5 	ldr	d5, [x30]
   81bdc:	1f4180a0 	fmsub	d0, d5, d1, d0
   81be0:	fd000060 	str	d0, [x3]
   81be4:	54000b20 	b.eq	81d48 <lud_diagonal_omp(double*, int, int)+0x5a8>  // b.none
   81be8:	11000485 	add	w5, w4, #0x1
   81bec:	fd400147 	ldr	d7, [x10]
   81bf0:	7100085f 	cmp	w2, #0x2
   81bf4:	fc65d806 	ldr	d6, [x0, w5, sxtw #3]
   81bf8:	1f4680e0 	fmsub	d0, d7, d6, d0
   81bfc:	fd000060 	str	d0, [x3]
   81c00:	54000a40 	b.eq	81d48 <lud_diagonal_omp(double*, int, int)+0x5a8>  // b.none
   81c04:	11000897 	add	w23, w4, #0x2
   81c08:	fd400171 	ldr	d17, [x11]
   81c0c:	71000c5f 	cmp	w2, #0x3
   81c10:	fc77d810 	ldr	d16, [x0, w23, sxtw #3]
   81c14:	1f508220 	fmsub	d0, d17, d16, d0
   81c18:	fd000060 	str	d0, [x3]
   81c1c:	54000960 	b.eq	81d48 <lud_diagonal_omp(double*, int, int)+0x5a8>  // b.none
   81c20:	11000c85 	add	w5, w4, #0x3
   81c24:	fd4001d3 	ldr	d19, [x14]
   81c28:	7100105f 	cmp	w2, #0x4
   81c2c:	fc65d812 	ldr	d18, [x0, w5, sxtw #3]
   81c30:	1f528260 	fmsub	d0, d19, d18, d0
   81c34:	fd000060 	str	d0, [x3]
   81c38:	54000880 	b.eq	81d48 <lud_diagonal_omp(double*, int, int)+0x5a8>  // b.none
   81c3c:	11001097 	add	w23, w4, #0x4
   81c40:	fd4001f5 	ldr	d21, [x15]
   81c44:	7100145f 	cmp	w2, #0x5
   81c48:	fc77d814 	ldr	d20, [x0, w23, sxtw #3]
   81c4c:	1f5482a0 	fmsub	d0, d21, d20, d0
   81c50:	fd000060 	str	d0, [x3]
   81c54:	540007a0 	b.eq	81d48 <lud_diagonal_omp(double*, int, int)+0x5a8>  // b.none
   81c58:	11001485 	add	w5, w4, #0x5
   81c5c:	fd400217 	ldr	d23, [x16]
   81c60:	7100185f 	cmp	w2, #0x6
   81c64:	fc65d816 	ldr	d22, [x0, w5, sxtw #3]
   81c68:	1f5782c0 	fmsub	d0, d22, d23, d0
   81c6c:	fd000060 	str	d0, [x3]
   81c70:	540006c0 	b.eq	81d48 <lud_diagonal_omp(double*, int, int)+0x5a8>  // b.none
   81c74:	11001897 	add	w23, w4, #0x6
   81c78:	fd400239 	ldr	d25, [x17]
   81c7c:	71001c5f 	cmp	w2, #0x7
   81c80:	fc77d818 	ldr	d24, [x0, w23, sxtw #3]
   81c84:	1f598300 	fmsub	d0, d24, d25, d0
   81c88:	fd000060 	str	d0, [x3]
   81c8c:	540005e0 	b.eq	81d48 <lud_diagonal_omp(double*, int, int)+0x5a8>  // b.none
   81c90:	11001c85 	add	w5, w4, #0x7
   81c94:	fd40025b 	ldr	d27, [x18]
   81c98:	7100205f 	cmp	w2, #0x8
   81c9c:	fc65d81a 	ldr	d26, [x0, w5, sxtw #3]
   81ca0:	1f5b8340 	fmsub	d0, d26, d27, d0
   81ca4:	fd000060 	str	d0, [x3]
   81ca8:	54000500 	b.eq	81d48 <lud_diagonal_omp(double*, int, int)+0x5a8>  // b.none
   81cac:	11002097 	add	w23, w4, #0x8
   81cb0:	fd40027d 	ldr	d29, [x19]
   81cb4:	7100245f 	cmp	w2, #0x9
   81cb8:	fc77d81c 	ldr	d28, [x0, w23, sxtw #3]
   81cbc:	1f5d8380 	fmsub	d0, d28, d29, d0
   81cc0:	fd000060 	str	d0, [x3]
   81cc4:	54000420 	b.eq	81d48 <lud_diagonal_omp(double*, int, int)+0x5a8>  // b.none
   81cc8:	11002485 	add	w5, w4, #0x9
   81ccc:	fd4002bf 	ldr	d31, [x21]
   81cd0:	7100285f 	cmp	w2, #0xa
   81cd4:	fc65d81e 	ldr	d30, [x0, w5, sxtw #3]
   81cd8:	1f5f83c0 	fmsub	d0, d30, d31, d0
   81cdc:	fd000060 	str	d0, [x3]
   81ce0:	54000340 	b.eq	81d48 <lud_diagonal_omp(double*, int, int)+0x5a8>  // b.none
   81ce4:	11002897 	add	w23, w4, #0xa
   81ce8:	fd400281 	ldr	d1, [x20]
   81cec:	71002c5f 	cmp	w2, #0xb
   81cf0:	fc77d802 	ldr	d2, [x0, w23, sxtw #3]
   81cf4:	1f418040 	fmsub	d0, d2, d1, d0
   81cf8:	fd000060 	str	d0, [x3]
   81cfc:	54000260 	b.eq	81d48 <lud_diagonal_omp(double*, int, int)+0x5a8>  // b.none
   81d00:	11002c85 	add	w5, w4, #0xb
   81d04:	fd4002c6 	ldr	d6, [x22]
   81d08:	7100305f 	cmp	w2, #0xc
   81d0c:	fc65d805 	ldr	d5, [x0, w5, sxtw #3]
   81d10:	1f4680a0 	fmsub	d0, d5, d6, d0
   81d14:	fd000060 	str	d0, [x3]
   81d18:	54000180 	b.eq	81d48 <lud_diagonal_omp(double*, int, int)+0x5a8>  // b.none
   81d1c:	11003097 	add	w23, w4, #0xc
   81d20:	fd4000f0 	ldr	d16, [x7]
   81d24:	7100345f 	cmp	w2, #0xd
   81d28:	fc77d807 	ldr	d7, [x0, w23, sxtw #3]
   81d2c:	1f5080e0 	fmsub	d0, d7, d16, d0
   81d30:	fd000060 	str	d0, [x3]
   81d34:	540000a0 	b.eq	81d48 <lud_diagonal_omp(double*, int, int)+0x5a8>  // b.none
   81d38:	11003485 	add	w5, w4, #0xd
   81d3c:	fd4001b2 	ldr	d18, [x13]
   81d40:	fc65d811 	ldr	d17, [x0, w5, sxtw #3]
   81d44:	1f528220 	fmsub	d0, d17, d18, d0
   81d48:	1e600893 	fmul	d19, d4, d0
   81d4c:	110004c6 	add	w6, w6, #0x1
   81d50:	0b010084 	add	w4, w4, w1
   81d54:	710040df 	cmp	w6, #0x10
   81d58:	fd000073 	str	d19, [x3]
   81d5c:	8b21cc63 	add	x3, x3, w1, sxtw #3
   81d60:	54fff341 	b.ne	81bc8 <lud_diagonal_omp(double*, int, int)+0x428>  // b.any
   81d64:	b9407be7 	ldr	w7, [sp, #120]
   81d68:	1100079c 	add	w28, w28, #0x1
   81d6c:	11000739 	add	w25, w25, #0x1
   81d70:	0b010129 	add	w9, w9, w1
   81d74:	0b010108 	add	w8, w8, w1
   81d78:	b9407fea 	ldr	w10, [sp, #124]
   81d7c:	b94083ee 	ldr	w14, [sp, #128]
   81d80:	0b0100ed 	add	w13, w7, w1
   81d84:	b94087f0 	ldr	w16, [sp, #132]
   81d88:	1100054b 	add	w11, w10, #0x1
   81d8c:	b9007bed 	str	w13, [sp, #120]
   81d90:	f9403be2 	ldr	x2, [sp, #112]
   81d94:	110005cf 	add	w15, w14, #0x1
   81d98:	b9007feb 	str	w11, [sp, #124]
   81d9c:	f9405bfe 	ldr	x30, [sp, #176]
   81da0:	11000611 	add	w17, w16, #0x1
   81da4:	b90083ef 	str	w15, [sp, #128]
   81da8:	b9408bf2 	ldr	w18, [sp, #136]
   81dac:	b90087f1 	str	w17, [sp, #132]
   81db0:	b9408ff4 	ldr	w20, [sp, #140]
   81db4:	8b1e0055 	add	x21, x2, x30
   81db8:	b94093f7 	ldr	w23, [sp, #144]
   81dbc:	11000653 	add	w19, w18, #0x1
   81dc0:	f9003bf5 	str	x21, [sp, #112]
   81dc4:	b94097e6 	ldr	w6, [sp, #148]
   81dc8:	11000696 	add	w22, w20, #0x1
   81dcc:	b9008bf3 	str	w19, [sp, #136]
   81dd0:	b9409be3 	ldr	w3, [sp, #152]
   81dd4:	110006e5 	add	w5, w23, #0x1
   81dd8:	b9008ff6 	str	w22, [sp, #140]
   81ddc:	b9409ffe 	ldr	w30, [sp, #156]
   81de0:	110004c4 	add	w4, w6, #0x1
   81de4:	b90093e5 	str	w5, [sp, #144]
   81de8:	b940a3e7 	ldr	w7, [sp, #160]
   81dec:	11000462 	add	w2, w3, #0x1
   81df0:	b90097e4 	str	w4, [sp, #148]
   81df4:	b94067ea 	ldr	w10, [sp, #100]
   81df8:	110007d5 	add	w21, w30, #0x1
   81dfc:	b9009be2 	str	w2, [sp, #152]
   81e00:	2a1803e2 	mov	w2, w24
   81e04:	b9406bee 	ldr	w14, [sp, #104]
   81e08:	110004ed 	add	w13, w7, #0x1
   81e0c:	b9009ff5 	str	w21, [sp, #156]
   81e10:	b9406ff0 	ldr	w16, [sp, #108]
   81e14:	0b01014b 	add	w11, w10, w1
   81e18:	b900a3ed 	str	w13, [sp, #160]
   81e1c:	0b0101cf 	add	w15, w14, w1
   81e20:	b90067eb 	str	w11, [sp, #100]
   81e24:	0b010211 	add	w17, w16, w1
   81e28:	b9006bef 	str	w15, [sp, #104]
   81e2c:	b9006ff1 	str	w17, [sp, #108]
   81e30:	17fffeb0 	b	818f0 <lud_diagonal_omp(double*, int, int)+0x150>
   81e34:	a9415bf5 	ldp	x21, x22, [sp, #16]
   81e38:	a94263f7 	ldp	x23, x24, [sp, #32]
   81e3c:	a9436bf9 	ldp	x25, x26, [sp, #48]
   81e40:	a94473fb 	ldp	x27, x28, [sp, #64]
   81e44:	f9402bfe 	ldr	x30, [sp, #80]
   81e48:	a8cc53f3 	ldp	x19, x20, [sp], #192
   81e4c:	d65f03c0 	ret

0000000000081e50 <lud_omp>:
   81e50:	d2824a10 	mov	x16, #0x1250                	// #4688
   81e54:	51004022 	sub	w2, w1, #0x10
   81e58:	cb3063ff 	sub	sp, sp, x16
   81e5c:	7100005f 	cmp	w2, #0x0
   81e60:	aa0003ef 	mov	x15, x0
   81e64:	a90053f3 	stp	x19, x20, [sp]
   81e68:	a9015bf5 	stp	x21, x22, [sp, #16]
   81e6c:	2a0103f5 	mov	w21, w1
   81e70:	f9002bfe 	str	x30, [sp, #80]
   81e74:	5400726d 	b.le	82cc0 <lud_omp+0xe70>
   81e78:	531c6ea0 	lsl	w0, w21, #4
   81e7c:	91077fe1 	add	x1, sp, #0x1df
   81e80:	a90263f7 	stp	x23, x24, [sp, #32]
   81e84:	52800165 	mov	w5, #0xb                   	// #11
   81e88:	528001a4 	mov	w4, #0xd                   	// #13
   81e8c:	93407c03 	sxtw	x3, w0
   81e90:	531d72a6 	lsl	w6, w21, #3
   81e94:	110006a9 	add	w9, w21, #0x1
   81e98:	531f7aa7 	lsl	w7, w21, #1
   81e9c:	fd002fe8 	str	d8, [sp, #88]
   81ea0:	531e76a8 	lsl	w8, w21, #2
   81ea4:	927ae437 	and	x23, x1, #0xffffffffffffffc0
   81ea8:	2f00e408 	movi	d8, #0x0
   81eac:	510046aa 	sub	w10, w21, #0x11
   81eb0:	4b1500d2 	sub	w18, w6, w21
   81eb4:	1b057ead 	mul	w13, w21, w5
   81eb8:	531c6d2b 	lsl	w11, w9, #4
   81ebc:	0b15011e 	add	w30, w8, w21
   81ec0:	1b047eae 	mul	w14, w21, w4
   81ec4:	aa0f03f8 	mov	x24, x15
   81ec8:	912002f6 	add	x22, x23, #0x800
   81ecc:	a9036bf9 	stp	x25, x26, [sp, #48]
   81ed0:	91004071 	add	x17, x3, #0x10
   81ed4:	937d7eba 	sbfiz	x26, x21, #3, #32
   81ed8:	91002354 	add	x20, x26, #0x8
   81edc:	2a1503f9 	mov	w25, w21
   81ee0:	a90473fb 	stp	x27, x28, [sp, #64]
   81ee4:	0b1500fc 	add	w28, w7, w21
   81ee8:	53047d5b 	lsr	w27, w10, #4
   81eec:	d37df230 	lsl	x16, x17, #3
   81ef0:	531f7a4f 	lsl	w15, w18, #1
   81ef4:	2a1b03e1 	mov	w1, w27
   81ef8:	531f7b89 	lsl	w9, w28, #1
   81efc:	531e7780 	lsl	w0, w28, #2
   81f00:	52800013 	mov	w19, #0x0                   	// #0
   81f04:	b9010fe2 	str	w2, [sp, #268]
   81f08:	51004162 	sub	w2, w11, #0x10
   81f0c:	f900a3e3 	str	x3, [sp, #320]
   81f10:	531f7bc3 	lsl	w3, w30, #1
   81f14:	b90183e6 	str	w6, [sp, #384]
   81f18:	0b1500c6 	add	w6, w6, w21
   81f1c:	aa1a03f5 	mov	x21, x26
   81f20:	aa1603fa 	mov	x26, x22
   81f24:	aa1803f6 	mov	x22, x24
   81f28:	f9004fff 	str	xzr, [sp, #152]
   81f2c:	b900a3ff 	str	wzr, [sp, #160]
   81f30:	b900a7e2 	str	w2, [sp, #164]
   81f34:	f9008bff 	str	xzr, [sp, #272]
   81f38:	b9011bef 	str	w15, [sp, #280]
   81f3c:	f900a7f0 	str	x16, [sp, #328]
   81f40:	b90157eb 	str	w11, [sp, #340]
   81f44:	f900afe1 	str	x1, [sp, #344]
   81f48:	b90163fb 	str	w27, [sp, #352]
   81f4c:	b90167e7 	str	w7, [sp, #356]
   81f50:	b9016bfc 	str	w28, [sp, #360]
   81f54:	b9016fe8 	str	w8, [sp, #364]
   81f58:	b90173fe 	str	w30, [sp, #368]
   81f5c:	b90177e6 	str	w6, [sp, #372]
   81f60:	b9017bed 	str	w13, [sp, #376]
   81f64:	b9017fee 	str	w14, [sp, #380]
   81f68:	b90187f2 	str	w18, [sp, #388]
   81f6c:	b9018be9 	str	w9, [sp, #392]
   81f70:	b9018fe3 	str	w3, [sp, #396]
   81f74:	b90193e0 	str	w0, [sp, #400]
   81f78:	f9404ffb 	ldr	x27, [sp, #152]
   81f7c:	2a1903e1 	mov	w1, w25
   81f80:	aa1803e0 	mov	x0, x24
   81f84:	531c6f67 	lsl	w7, w27, #4
   81f88:	2a0703e2 	mov	w2, w7
   81f8c:	b90153e7 	str	w7, [sp, #336]
   81f90:	97fffe04 	bl	817a0 <lud_diagonal_omp(double*, int, int)>
   81f94:	b9410fe8 	ldr	w8, [sp, #268]
   81f98:	7100011f 	cmp	w8, #0x0
   81f9c:	11003d05 	add	w5, w8, #0xf
   81fa0:	1a88b0a4 	csel	w4, w5, w8, lt  // lt = tstop
   81fa4:	13047c8c 	asr	w12, w4, #4
   81fa8:	1100410b 	add	w11, w8, #0x10
   81fac:	71007d7f 	cmp	w11, #0x1f
   81fb0:	1b0c7d8d 	mul	w13, w12, w12
   81fb4:	b90133ec 	str	w12, [sp, #304]
   81fb8:	b90137ed 	str	w13, [sp, #308]
   81fbc:	5400626d 	b.le	82c08 <lud_omp+0xdb8>
   81fc0:	29543ff0 	ldp	w16, w15, [sp, #160]
   81fc4:	d37cef71 	lsl	x17, x27, #4
   81fc8:	8b33c22e 	add	x14, x17, w19, sxtw
   81fcc:	910041d2 	add	x18, x14, #0x10
   81fd0:	1100433e 	add	w30, w25, #0x10
   81fd4:	b94167e3 	ldr	w3, [sp, #356]
   81fd8:	8b120f1c 	add	x28, x24, x18, lsl #3
   81fdc:	f9009ff1 	str	x17, [sp, #312]
   81fe0:	b94187f2 	ldr	w18, [sp, #388]
   81fe4:	0b0f0273 	add	w19, w19, w15
   81fe8:	8b33c221 	add	x1, x17, w19, sxtw
   81fec:	8b010f00 	add	x0, x24, x1, lsl #3
   81ff0:	b9417be1 	ldr	w1, [sp, #376]
   81ff4:	0b1003c2 	add	w2, w30, w16
   81ff8:	2a1003eb 	mov	w11, w16
   81ffc:	11004066 	add	w6, w3, #0x10
   82000:	f90067fc 	str	x28, [sp, #200]
   82004:	0b0f016f 	add	w15, w11, w15
   82008:	f90063e0 	str	x0, [sp, #192]
   8200c:	0b1000db 	add	w27, w6, w16
   82010:	b94193e0 	ldr	w0, [sp, #400]
   82014:	1100425c 	add	w28, w18, #0x10
   82018:	b900dbe2 	str	w2, [sp, #216]
   8201c:	b9416bea 	ldr	w10, [sp, #360]
   82020:	b900dffb 	str	w27, [sp, #220]
   82024:	1100403b 	add	w27, w1, #0x10
   82028:	b94183fe 	ldr	w30, [sp, #384]
   8202c:	11004012 	add	w18, w0, #0x10
   82030:	b9011ff3 	str	w19, [sp, #284]
   82034:	b9417fe6 	ldr	w6, [sp, #380]
   82038:	0b0b0241 	add	w1, w18, w11
   8203c:	11004147 	add	w7, w10, #0x10
   82040:	b9416fe8 	ldr	w8, [sp, #364]
   82044:	0b1000ec 	add	w12, w7, w16
   82048:	110043d0 	add	w16, w30, #0x10
   8204c:	b90107e1 	str	w1, [sp, #260]
   82050:	b94173e5 	ldr	w5, [sp, #368]
   82054:	110040de 	add	w30, w6, #0x10
   82058:	b900e3ec 	str	w12, [sp, #224]
   8205c:	b9418be4 	ldr	w4, [sp, #392]
   82060:	0b0b03c0 	add	w0, w30, w11
   82064:	1100410d 	add	w13, w8, #0x10
   82068:	b94177e2 	ldr	w2, [sp, #372]
   8206c:	0b0b01aa 	add	w10, w13, w11
   82070:	110040b1 	add	w17, w5, #0x10
   82074:	b9010be0 	str	w0, [sp, #264]
   82078:	b9418fe9 	ldr	w9, [sp, #396]
   8207c:	0b0b022c 	add	w12, w17, w11
   82080:	0b0b0391 	add	w17, w28, w11
   82084:	1100408e 	add	w14, w4, #0x10
   82088:	b900e7ea 	str	w10, [sp, #228]
   8208c:	b9411bf2 	ldr	w18, [sp, #280]
   82090:	0b0b01cd 	add	w13, w14, w11
   82094:	0b0b020e 	add	w14, w16, w11
   82098:	11004053 	add	w19, w2, #0x10
   8209c:	b900ebec 	str	w12, [sp, #232]
   820a0:	0b0b0270 	add	w16, w19, w11
   820a4:	b900efed 	str	w13, [sp, #236]
   820a8:	11004123 	add	w3, w9, #0x10
   820ac:	b900f3f1 	str	w17, [sp, #240]
   820b0:	0b0b0073 	add	w19, w3, w11
   820b4:	0b0b0363 	add	w3, w27, w11
   820b8:	b900f7ee 	str	w14, [sp, #244]
   820bc:	11008246 	add	w6, w18, #0x20
   820c0:	b900fbf0 	str	w16, [sp, #248]
   820c4:	1100425e 	add	w30, w18, #0x10
   820c8:	b900fff3 	str	w19, [sp, #252]
   820cc:	910022eb 	add	x11, x23, #0x8
   820d0:	b90103e3 	str	w3, [sp, #256]
   820d4:	b90097e6 	str	w6, [sp, #148]
   820d8:	f90057fa 	str	x26, [sp, #168]
   820dc:	910202fa 	add	x26, x23, #0x80
   820e0:	291a7bff 	stp	wzr, w30, [sp, #208]
   820e4:	f90093eb 	str	x11, [sp, #288]
   820e8:	f90097fa 	str	x26, [sp, #296]
   820ec:	f94057ea 	ldr	x10, [sp, #168]
   820f0:	aa1603e8 	mov	x8, x22
   820f4:	aa1703ec 	mov	x12, x23
   820f8:	cb170147 	sub	x7, x10, x23
   820fc:	363802e7 	tbz	w7, #7, 82158 <lud_omp+0x308>
   82100:	a94016cd 	ldp	x13, x5, [x22]
   82104:	910202ec 	add	x12, x23, #0x80
   82108:	8b1502c8 	add	x8, x22, x21
   8210c:	a94242dc 	ldp	x28, x16, [x22, #32]
   82110:	a9430ad3 	ldp	x19, x2, [x22, #48]
   82114:	a9446ec9 	ldp	x9, x27, [x22, #64]
   82118:	a94506c3 	ldp	x3, x1, [x22, #80]
   8211c:	a9464ac0 	ldp	x0, x18, [x22, #96]
   82120:	a9477ac6 	ldp	x6, x30, [x22, #112]
   82124:	a90016ed 	stp	x13, x5, [x23]
   82128:	f9400ad1 	ldr	x17, [x22, #16]
   8212c:	a90242fc 	stp	x28, x16, [x23, #32]
   82130:	f9400ece 	ldr	x14, [x22, #24]
   82134:	a9030af3 	stp	x19, x2, [x23, #48]
   82138:	f94057e4 	ldr	x4, [sp, #168]
   8213c:	a9013af1 	stp	x17, x14, [x23, #16]
   82140:	a9046ee9 	stp	x9, x27, [x23, #64]
   82144:	eb04019f 	cmp	x12, x4
   82148:	a90506e3 	stp	x3, x1, [x23, #80]
   8214c:	a9064ae0 	stp	x0, x18, [x23, #96]
   82150:	a9077ae6 	stp	x6, x30, [x23, #112]
   82154:	54000580 	b.eq	82204 <lud_omp+0x3b4>  // b.none
   82158:	8b15011a 	add	x26, x8, x21
   8215c:	91020180 	add	x0, x12, #0x80
   82160:	a940290b 	ldp	x11, x10, [x8]
   82164:	a9413507 	ldp	x7, x13, [x8, #16]
   82168:	a9421511 	ldp	x17, x5, [x8, #32]
   8216c:	a943110e 	ldp	x14, x4, [x8, #48]
   82170:	a944411c 	ldp	x28, x16, [x8, #64]
   82174:	a9450913 	ldp	x19, x2, [x8, #80]
   82178:	a9466d09 	ldp	x9, x27, [x8, #96]
   8217c:	a9470503 	ldp	x3, x1, [x8, #112]
   82180:	a900298b 	stp	x11, x10, [x12]
   82184:	a9013587 	stp	x7, x13, [x12, #16]
   82188:	a9021591 	stp	x17, x5, [x12, #32]
   8218c:	a903118e 	stp	x14, x4, [x12, #48]
   82190:	a904419c 	stp	x28, x16, [x12, #64]
   82194:	a9050993 	stp	x19, x2, [x12, #80]
   82198:	a9066d89 	stp	x9, x27, [x12, #96]
   8219c:	a9070583 	stp	x3, x1, [x12, #112]
   821a0:	9104018c 	add	x12, x12, #0x100
   821a4:	f8756908 	ldr	x8, [x8, x21]
   821a8:	a940fb52 	ldp	x18, x30, [x26, #8]
   821ac:	a9419f4a 	ldp	x10, x7, [x26, #24]
   821b0:	a942c74d 	ldp	x13, x17, [x26, #40]
   821b4:	a943bb45 	ldp	x5, x14, [x26, #56]
   821b8:	a944935c 	ldp	x28, x4, [x26, #72]
   821bc:	f8180188 	stur	x8, [x12, #-128]
   821c0:	8b150348 	add	x8, x26, x21
   821c4:	f9402f50 	ldr	x16, [x26, #88]
   821c8:	a900f812 	stp	x18, x30, [x0, #8]
   821cc:	f940334b 	ldr	x11, [x26, #96]
   821d0:	a9019c0a 	stp	x10, x7, [x0, #24]
   821d4:	f9403753 	ldr	x19, [x26, #104]
   821d8:	a9470b5a 	ldp	x26, x2, [x26, #112]
   821dc:	a902c40d 	stp	x13, x17, [x0, #40]
   821e0:	f94057e6 	ldr	x6, [sp, #168]
   821e4:	a903b805 	stp	x5, x14, [x0, #56]
   821e8:	a904901c 	stp	x28, x4, [x0, #72]
   821ec:	eb06019f 	cmp	x12, x6
   821f0:	f9002c10 	str	x16, [x0, #88]
   821f4:	f900300b 	str	x11, [x0, #96]
   821f8:	f9003413 	str	x19, [x0, #104]
   821fc:	a907081a 	stp	x26, x2, [x0, #112]
   82200:	54fffac1 	b.ne	82158 <lud_omp+0x308>  // b.any
   82204:	295a4fe9 	ldp	w9, w19, [sp, #208]
   82208:	b90093ef 	str	w15, [sp, #144]
   8220c:	b940a3ec 	ldr	w12, [sp, #160]
   82210:	b90197f9 	str	w25, [sp, #404]
   82214:	295d8fe8 	ldp	w8, w3, [sp, #236]
   82218:	11000520 	add	w0, w9, #0x1
   8221c:	f90047f4 	str	x20, [sp, #136]
   82220:	b940f7f2 	ldr	w18, [sp, #244]
   82224:	0b00119c 	add	w28, w12, w0, lsl #4
   82228:	a90b5ff6 	stp	x22, x23, [sp, #176]
   8222c:	2a0303f4 	mov	w20, w3
   82230:	b940fbe1 	ldr	w1, [sp, #248]
   82234:	2a1203f6 	mov	w22, w18
   82238:	b90087e8 	str	w8, [sp, #132]
   8223c:	b940ebef 	ldr	w15, [sp, #232]
   82240:	b900d3e0 	str	w0, [sp, #208]
   82244:	b940e7eb 	ldr	w11, [sp, #228]
   82248:	2a0103f7 	mov	w23, w1
   8224c:	b940e3e6 	ldr	w6, [sp, #224]
   82250:	b90083ef 	str	w15, [sp, #128]
   82254:	b940dfea 	ldr	w10, [sp, #220]
   82258:	b9007feb 	str	w11, [sp, #124]
   8225c:	b940dbe7 	ldr	w7, [sp, #216]
   82260:	b9007be6 	str	w6, [sp, #120]
   82264:	b94103fa 	ldr	w26, [sp, #256]
   82268:	b9006bea 	str	w10, [sp, #104]
   8226c:	b94107fb 	ldr	w27, [sp, #260]
   82270:	b9006fe7 	str	w7, [sp, #108]
   82274:	b9410bfe 	ldr	w30, [sp, #264]
   82278:	b940fff9 	ldr	w25, [sp, #252]
   8227c:	f94067ed 	ldr	x13, [sp, #200]
   82280:	f9003bed 	str	x13, [sp, #112]
   82284:	b9407be9 	ldr	w9, [sp, #120]
   82288:	8b3ccf04 	add	x4, x24, w28, sxtw #3
   8228c:	8b29cf07 	add	x7, x24, w9, sxtw #3
   82290:	8b34cf0b 	add	x11, x24, w20, sxtw #3
   82294:	8b36cf0c 	add	x12, x24, w22, sxtw #3
   82298:	8b37cf0d 	add	x13, x24, w23, sxtw #3
   8229c:	b94087e0 	ldr	w0, [sp, #132]
   822a0:	8b39cf0e 	add	x14, x24, w25, sxtw #3
   822a4:	8b20cf0a 	add	x10, x24, w0, sxtw #3
   822a8:	8b3acf0f 	add	x15, x24, w26, sxtw #3
   822ac:	8b3bcf10 	add	x16, x24, w27, sxtw #3
   822b0:	8b3ecf11 	add	x17, x24, w30, sxtw #3
   822b4:	b9406be2 	ldr	w2, [sp, #104]
   822b8:	8b33cf12 	add	x18, x24, w19, sxtw #3
   822bc:	8b22cf06 	add	x6, x24, w2, sxtw #3
   822c0:	2f00e400 	movi	d0, #0x0
   822c4:	52800000 	mov	w0, #0x0                   	// #0
   822c8:	b9406fe5 	ldr	w5, [sp, #108]
   822cc:	8b25cf05 	add	x5, x24, w5, sxtw #3
   822d0:	b9407fe8 	ldr	w8, [sp, #124]
   822d4:	8b28cf08 	add	x8, x24, w8, sxtw #3
   822d8:	b94083e3 	ldr	w3, [sp, #128]
   822dc:	8b23cf09 	add	x9, x24, w3, sxtw #3
   822e0:	f9403be2 	ldr	x2, [sp, #112]
   822e4:	f94097e1 	ldr	x1, [sp, #296]
   822e8:	1400004d 	b	8241c <lud_omp+0x5cc>
   822ec:	fd400022 	ldr	d2, [x1]
   822f0:	11000403 	add	w3, w0, #0x1
   822f4:	fd400083 	ldr	d3, [x4]
   822f8:	1f432040 	fmadd	d0, d2, d3, d8
   822fc:	340008a0 	cbz	w0, 82410 <lud_omp+0x5c0>
   82300:	fd4000a5 	ldr	d5, [x5]
   82304:	7100041f 	cmp	w0, #0x1
   82308:	fd400424 	ldr	d4, [x1, #8]
   8230c:	1f450080 	fmadd	d0, d4, d5, d0
   82310:	54000800 	b.eq	82410 <lud_omp+0x5c0>  // b.none
   82314:	fd4000c7 	ldr	d7, [x6]
   82318:	7100081f 	cmp	w0, #0x2
   8231c:	fd400826 	ldr	d6, [x1, #16]
   82320:	1f4700c0 	fmadd	d0, d6, d7, d0
   82324:	54000760 	b.eq	82410 <lud_omp+0x5c0>  // b.none
   82328:	fd4000f1 	ldr	d17, [x7]
   8232c:	71000c1f 	cmp	w0, #0x3
   82330:	fd400c30 	ldr	d16, [x1, #24]
   82334:	1f510200 	fmadd	d0, d16, d17, d0
   82338:	540006c0 	b.eq	82410 <lud_omp+0x5c0>  // b.none
   8233c:	fd400113 	ldr	d19, [x8]
   82340:	7100101f 	cmp	w0, #0x4
   82344:	fd401032 	ldr	d18, [x1, #32]
   82348:	1f530240 	fmadd	d0, d18, d19, d0
   8234c:	54000620 	b.eq	82410 <lud_omp+0x5c0>  // b.none
   82350:	fd400135 	ldr	d21, [x9]
   82354:	7100141f 	cmp	w0, #0x5
   82358:	fd401434 	ldr	d20, [x1, #40]
   8235c:	1f550280 	fmadd	d0, d20, d21, d0
   82360:	54000580 	b.eq	82410 <lud_omp+0x5c0>  // b.none
   82364:	fd400157 	ldr	d23, [x10]
   82368:	7100181f 	cmp	w0, #0x6
   8236c:	fd401836 	ldr	d22, [x1, #48]
   82370:	1f5702c0 	fmadd	d0, d22, d23, d0
   82374:	540004e0 	b.eq	82410 <lud_omp+0x5c0>  // b.none
   82378:	fd400179 	ldr	d25, [x11]
   8237c:	71001c1f 	cmp	w0, #0x7
   82380:	fd401c38 	ldr	d24, [x1, #56]
   82384:	1f590300 	fmadd	d0, d24, d25, d0
   82388:	54000440 	b.eq	82410 <lud_omp+0x5c0>  // b.none
   8238c:	fd40019b 	ldr	d27, [x12]
   82390:	7100201f 	cmp	w0, #0x8
   82394:	fd40203a 	ldr	d26, [x1, #64]
   82398:	1f5b0340 	fmadd	d0, d26, d27, d0
   8239c:	540003a0 	b.eq	82410 <lud_omp+0x5c0>  // b.none
   823a0:	fd4001bd 	ldr	d29, [x13]
   823a4:	7100241f 	cmp	w0, #0x9
   823a8:	fd40243c 	ldr	d28, [x1, #72]
   823ac:	1f5d0380 	fmadd	d0, d28, d29, d0
   823b0:	54000300 	b.eq	82410 <lud_omp+0x5c0>  // b.none
   823b4:	fd4001df 	ldr	d31, [x14]
   823b8:	7100281f 	cmp	w0, #0xa
   823bc:	fd40283e 	ldr	d30, [x1, #80]
   823c0:	1f5f03c0 	fmadd	d0, d30, d31, d0
   823c4:	54000260 	b.eq	82410 <lud_omp+0x5c0>  // b.none
   823c8:	fd4001e1 	ldr	d1, [x15]
   823cc:	71002c1f 	cmp	w0, #0xb
   823d0:	fd402c22 	ldr	d2, [x1, #88]
   823d4:	1f410040 	fmadd	d0, d2, d1, d0
   823d8:	540001c0 	b.eq	82410 <lud_omp+0x5c0>  // b.none
   823dc:	fd400204 	ldr	d4, [x16]
   823e0:	7100301f 	cmp	w0, #0xc
   823e4:	fd403023 	ldr	d3, [x1, #96]
   823e8:	1f440060 	fmadd	d0, d3, d4, d0
   823ec:	54000120 	b.eq	82410 <lud_omp+0x5c0>  // b.none
   823f0:	fd400226 	ldr	d6, [x17]
   823f4:	7100341f 	cmp	w0, #0xd
   823f8:	fd403425 	ldr	d5, [x1, #104]
   823fc:	1f4600a0 	fmadd	d0, d5, d6, d0
   82400:	54000080 	b.eq	82410 <lud_omp+0x5c0>  // b.none
   82404:	fd400250 	ldr	d16, [x18]
   82408:	fd403827 	ldr	d7, [x1, #112]
   8240c:	1f5000e0 	fmadd	d0, d7, d16, d0
   82410:	8b150042 	add	x2, x2, x21
   82414:	91020021 	add	x1, x1, #0x80
   82418:	2a0303e0 	mov	w0, w3
   8241c:	fd400041 	ldr	d1, [x2]
   82420:	71003c1f 	cmp	w0, #0xf
   82424:	1e603820 	fsub	d0, d1, d0
   82428:	fd000040 	str	d0, [x2]
   8242c:	54fff601 	b.ne	822ec <lud_omp+0x49c>  // b.any
   82430:	b9406fe7 	ldr	w7, [sp, #108]
   82434:	11000673 	add	w19, w19, #0x1
   82438:	1100079c 	add	w28, w28, #0x1
   8243c:	11000694 	add	w20, w20, #0x1
   82440:	110006d6 	add	w22, w22, #0x1
   82444:	b9406be9 	ldr	w9, [sp, #104]
   82448:	110006f7 	add	w23, w23, #0x1
   8244c:	11000739 	add	w25, w25, #0x1
   82450:	1100075a 	add	w26, w26, #0x1
   82454:	1100077b 	add	w27, w27, #0x1
   82458:	b9407beb 	ldr	w11, [sp, #120]
   8245c:	110007de 	add	w30, w30, #0x1
   82460:	110004e8 	add	w8, w7, #0x1
   82464:	b9407fed 	ldr	w13, [sp, #124]
   82468:	1100052a 	add	w10, w9, #0x1
   8246c:	b9006fe8 	str	w8, [sp, #108]
   82470:	b94083ef 	ldr	w15, [sp, #128]
   82474:	1100056c 	add	w12, w11, #0x1
   82478:	b9006bea 	str	w10, [sp, #104]
   8247c:	b94087f1 	ldr	w17, [sp, #132]
   82480:	110005ae 	add	w14, w13, #0x1
   82484:	b9007bec 	str	w12, [sp, #120]
   82488:	f9403be4 	ldr	x4, [sp, #112]
   8248c:	110005f0 	add	w16, w15, #0x1
   82490:	b9007fee 	str	w14, [sp, #124]
   82494:	b94097e6 	ldr	w6, [sp, #148]
   82498:	11000632 	add	w18, w17, #0x1
   8249c:	b90083f0 	str	w16, [sp, #128]
   824a0:	91002085 	add	x5, x4, #0x8
   824a4:	b90087f2 	str	w18, [sp, #132]
   824a8:	6b06027f 	cmp	w19, w6
   824ac:	f9003be5 	str	x5, [sp, #112]
   824b0:	54ffeea1 	b.ne	82284 <lud_omp+0x434>  // b.any
   824b4:	b94093f3 	ldr	w19, [sp, #144]
   824b8:	52800203 	mov	w3, #0x10                  	// #16
   824bc:	a94b5ff6 	ldp	x22, x23, [sp, #176]
   824c0:	b90093e3 	str	w3, [sp, #144]
   824c4:	f94063e4 	ldr	x4, [sp, #192]
   824c8:	11002261 	add	w1, w19, #0x8
   824cc:	11000e60 	add	w0, w19, #0x3
   824d0:	a90b5bf5 	stp	x21, x22, [sp, #176]
   824d4:	11001275 	add	w21, w19, #0x4
   824d8:	11002662 	add	w2, w19, #0x9
   824dc:	11002a65 	add	w5, w19, #0xa
   824e0:	11001666 	add	w6, w19, #0x5
   824e4:	11002e67 	add	w7, w19, #0xb
   824e8:	11003268 	add	w8, w19, #0xc
   824ec:	11003a7e 	add	w30, w19, #0xe
   824f0:	1100067c 	add	w28, w19, #0x1
   824f4:	b9006ff5 	str	w21, [sp, #108]
   824f8:	11000a7b 	add	w27, w19, #0x2
   824fc:	11001e7a 	add	w26, w19, #0x7
   82500:	f900cff7 	str	x23, [sp, #408]
   82504:	11001a76 	add	w22, w19, #0x6
   82508:	2a0103f7 	mov	w23, w1
   8250c:	b94197f9 	ldr	w25, [sp, #404]
   82510:	11003675 	add	w21, w19, #0xd
   82514:	b9006be6 	str	w6, [sp, #104]
   82518:	b90073e0 	str	w0, [sp, #112]
   8251c:	b9007bf3 	str	w19, [sp, #120]
   82520:	b9007fe8 	str	w8, [sp, #124]
   82524:	b90083e7 	str	w7, [sp, #128]
   82528:	b90087e5 	str	w5, [sp, #132]
   8252c:	b90197f3 	str	w19, [sp, #404]
   82530:	f94047f4 	ldr	x20, [sp, #136]
   82534:	b9008be2 	str	w2, [sp, #136]
   82538:	b9407be9 	ldr	w9, [sp, #120]
   8253c:	8b3ccf06 	add	x6, x24, w28, sxtw #3
   82540:	8b29cf05 	add	x5, x24, w9, sxtw #3
   82544:	8b3bcf07 	add	x7, x24, w27, sxtw #3
   82548:	8b36cf0b 	add	x11, x24, w22, sxtw #3
   8254c:	8b3acf0c 	add	x12, x24, w26, sxtw #3
   82550:	b94073ea 	ldr	w10, [sp, #112]
   82554:	8b37cf0d 	add	x13, x24, w23, sxtw #3
   82558:	8b2acf08 	add	x8, x24, w10, sxtw #3
   8255c:	8b35cf12 	add	x18, x24, w21, sxtw #3
   82560:	8b3ecf13 	add	x19, x24, w30, sxtw #3
   82564:	2f00e400 	movi	d0, #0x0
   82568:	b9406fee 	ldr	w14, [sp, #108]
   8256c:	d2800001 	mov	x1, #0x0                   	// #0
   82570:	8b2ecf09 	add	x9, x24, w14, sxtw #3
   82574:	b9406bef 	ldr	w15, [sp, #104]
   82578:	8b2fcf0a 	add	x10, x24, w15, sxtw #3
   8257c:	b9408bf0 	ldr	w16, [sp, #136]
   82580:	8b30cf0e 	add	x14, x24, w16, sxtw #3
   82584:	b94087f1 	ldr	w17, [sp, #132]
   82588:	8b31cf0f 	add	x15, x24, w17, sxtw #3
   8258c:	b94083e3 	ldr	w3, [sp, #128]
   82590:	8b23cf10 	add	x16, x24, w3, sxtw #3
   82594:	b9407fe0 	ldr	w0, [sp, #124]
   82598:	8b20cf11 	add	x17, x24, w0, sxtw #3
   8259c:	f9405fe3 	ldr	x3, [sp, #184]
   825a0:	f94093e0 	ldr	x0, [sp, #288]
   825a4:	1400004c 	b	826d4 <lud_omp+0x884>
   825a8:	fd400015 	ldr	d21, [x0]
   825ac:	fd4000b6 	ldr	d22, [x5]
   825b0:	1f5522c0 	fmadd	d0, d22, d21, d8
   825b4:	b40008a1 	cbz	x1, 826c8 <lud_omp+0x878>
   825b8:	fd4000d8 	ldr	d24, [x6]
   825bc:	7100043f 	cmp	w1, #0x1
   825c0:	fd404017 	ldr	d23, [x0, #128]
   825c4:	1f570300 	fmadd	d0, d24, d23, d0
   825c8:	54000800 	b.eq	826c8 <lud_omp+0x878>  // b.none
   825cc:	fd4000fa 	ldr	d26, [x7]
   825d0:	7100083f 	cmp	w1, #0x2
   825d4:	fd408019 	ldr	d25, [x0, #256]
   825d8:	1f590340 	fmadd	d0, d26, d25, d0
   825dc:	54000760 	b.eq	826c8 <lud_omp+0x878>  // b.none
   825e0:	fd40011c 	ldr	d28, [x8]
   825e4:	71000c3f 	cmp	w1, #0x3
   825e8:	fd40c01b 	ldr	d27, [x0, #384]
   825ec:	1f5b0380 	fmadd	d0, d28, d27, d0
   825f0:	540006c0 	b.eq	826c8 <lud_omp+0x878>  // b.none
   825f4:	fd40013e 	ldr	d30, [x9]
   825f8:	7100103f 	cmp	w1, #0x4
   825fc:	fd41001d 	ldr	d29, [x0, #512]
   82600:	1f5d03c0 	fmadd	d0, d30, d29, d0
   82604:	54000620 	b.eq	826c8 <lud_omp+0x878>  // b.none
   82608:	fd400142 	ldr	d2, [x10]
   8260c:	7100143f 	cmp	w1, #0x5
   82610:	fd41401f 	ldr	d31, [x0, #640]
   82614:	1f5f0040 	fmadd	d0, d2, d31, d0
   82618:	54000580 	b.eq	826c8 <lud_omp+0x878>  // b.none
   8261c:	fd400163 	ldr	d3, [x11]
   82620:	7100183f 	cmp	w1, #0x6
   82624:	fd418001 	ldr	d1, [x0, #768]
   82628:	1f410060 	fmadd	d0, d3, d1, d0
   8262c:	540004e0 	b.eq	826c8 <lud_omp+0x878>  // b.none
   82630:	fd400185 	ldr	d5, [x12]
   82634:	71001c3f 	cmp	w1, #0x7
   82638:	fd41c004 	ldr	d4, [x0, #896]
   8263c:	1f4400a0 	fmadd	d0, d5, d4, d0
   82640:	54000440 	b.eq	826c8 <lud_omp+0x878>  // b.none
   82644:	fd4001a7 	ldr	d7, [x13]
   82648:	7100203f 	cmp	w1, #0x8
   8264c:	fd420006 	ldr	d6, [x0, #1024]
   82650:	1f4600e0 	fmadd	d0, d7, d6, d0
   82654:	540003a0 	b.eq	826c8 <lud_omp+0x878>  // b.none
   82658:	fd4001d1 	ldr	d17, [x14]
   8265c:	7100243f 	cmp	w1, #0x9
   82660:	fd424010 	ldr	d16, [x0, #1152]
   82664:	1f500220 	fmadd	d0, d17, d16, d0
   82668:	54000300 	b.eq	826c8 <lud_omp+0x878>  // b.none
   8266c:	fd4001f3 	ldr	d19, [x15]
   82670:	7100283f 	cmp	w1, #0xa
   82674:	fd428012 	ldr	d18, [x0, #1280]
   82678:	1f520260 	fmadd	d0, d19, d18, d0
   8267c:	54000260 	b.eq	826c8 <lud_omp+0x878>  // b.none
   82680:	fd400215 	ldr	d21, [x16]
   82684:	71002c3f 	cmp	w1, #0xb
   82688:	fd42c014 	ldr	d20, [x0, #1408]
   8268c:	1f5402a0 	fmadd	d0, d21, d20, d0
   82690:	540001c0 	b.eq	826c8 <lud_omp+0x878>  // b.none
   82694:	fd400237 	ldr	d23, [x17]
   82698:	7100303f 	cmp	w1, #0xc
   8269c:	fd430016 	ldr	d22, [x0, #1536]
   826a0:	1f5602e0 	fmadd	d0, d23, d22, d0
   826a4:	54000120 	b.eq	826c8 <lud_omp+0x878>  // b.none
   826a8:	fd400259 	ldr	d25, [x18]
   826ac:	7100343f 	cmp	w1, #0xd
   826b0:	fd434018 	ldr	d24, [x0, #1664]
   826b4:	1f580320 	fmadd	d0, d25, d24, d0
   826b8:	54000080 	b.eq	826c8 <lud_omp+0x878>  // b.none
   826bc:	fd40027b 	ldr	d27, [x19]
   826c0:	fd43801a 	ldr	d26, [x0, #1792]
   826c4:	1f5a0360 	fmadd	d0, d27, d26, d0
   826c8:	91000421 	add	x1, x1, #0x1
   826cc:	8b140063 	add	x3, x3, x20
   826d0:	91002000 	add	x0, x0, #0x8
   826d4:	fc617891 	ldr	d17, [x4, x1, lsl #3]
   826d8:	f1003c3f 	cmp	x1, #0xf
   826dc:	fd400073 	ldr	d19, [x3]
   826e0:	1e603a32 	fsub	d18, d17, d0
   826e4:	1e731a54 	fdiv	d20, d18, d19
   826e8:	fc217894 	str	d20, [x4, x1, lsl #3]
   826ec:	54fff5e1 	b.ne	825a8 <lud_omp+0x758>  // b.any
   826f0:	b94093e5 	ldr	w5, [sp, #144]
   826f4:	0b1903de 	add	w30, w30, w25
   826f8:	0b19039c 	add	w28, w28, w25
   826fc:	0b19037b 	add	w27, w27, w25
   82700:	0b1902d6 	add	w22, w22, w25
   82704:	b9407be8 	ldr	w8, [sp, #120]
   82708:	0b19035a 	add	w26, w26, w25
   8270c:	0b1902f7 	add	w23, w23, w25
   82710:	0b1902b5 	add	w21, w21, w25
   82714:	b94073ea 	ldr	w10, [sp, #112]
   82718:	710004a6 	subs	w6, w5, #0x1
   8271c:	b9406fec 	ldr	w12, [sp, #108]
   82720:	0b190109 	add	w9, w8, w25
   82724:	b90093e6 	str	w6, [sp, #144]
   82728:	b9406bee 	ldr	w14, [sp, #104]
   8272c:	0b19014b 	add	w11, w10, w25
   82730:	b9007be9 	str	w9, [sp, #120]
   82734:	b9408bf0 	ldr	w16, [sp, #136]
   82738:	0b19018d 	add	w13, w12, w25
   8273c:	b90073eb 	str	w11, [sp, #112]
   82740:	b94087f2 	ldr	w18, [sp, #132]
   82744:	0b1901cf 	add	w15, w14, w25
   82748:	b9006fed 	str	w13, [sp, #108]
   8274c:	b94083e2 	ldr	w2, [sp, #128]
   82750:	0b190211 	add	w17, w16, w25
   82754:	b9006bef 	str	w15, [sp, #104]
   82758:	b9407fe3 	ldr	w3, [sp, #124]
   8275c:	0b190253 	add	w19, w18, w25
   82760:	b9008bf1 	str	w17, [sp, #136]
   82764:	f9405be7 	ldr	x7, [sp, #176]
   82768:	0b190041 	add	w1, w2, w25
   8276c:	b90087f3 	str	w19, [sp, #132]
   82770:	0b190060 	add	w0, w3, w25
   82774:	b90083e1 	str	w1, [sp, #128]
   82778:	b9007fe0 	str	w0, [sp, #124]
   8277c:	8b070084 	add	x4, x4, x7
   82780:	54ffedc1 	b.ne	82538 <lud_omp+0x6e8>  // b.any
   82784:	b940a7fa 	ldr	w26, [sp, #164]
   82788:	a94b5bf5 	ldp	x21, x22, [sp, #176]
   8278c:	b940d3fe 	ldr	w30, [sp, #208]
   82790:	b94133fc 	ldr	w28, [sp, #304]
   82794:	b94197fb 	ldr	w27, [sp, #404]
   82798:	b94097e7 	ldr	w7, [sp, #148]
   8279c:	6b1c03df 	cmp	w30, w28
   827a0:	b940d7ea 	ldr	w10, [sp, #212]
   827a4:	0b1a036f 	add	w15, w27, w26
   827a8:	b940dbec 	ldr	w12, [sp, #216]
   827ac:	110040e4 	add	w4, w7, #0x10
   827b0:	b940dfee 	ldr	w14, [sp, #220]
   827b4:	1100414b 	add	w11, w10, #0x10
   827b8:	b90097e4 	str	w4, [sp, #148]
   827bc:	b940e3f1 	ldr	w17, [sp, #224]
   827c0:	1100418d 	add	w13, w12, #0x10
   827c4:	b900d7eb 	str	w11, [sp, #212]
   827c8:	b940e7f3 	ldr	w19, [sp, #228]
   827cc:	110041d0 	add	w16, w14, #0x10
   827d0:	b900dbed 	str	w13, [sp, #216]
   827d4:	b940ebe1 	ldr	w1, [sp, #232]
   827d8:	11004232 	add	w18, w17, #0x10
   827dc:	b900dff0 	str	w16, [sp, #220]
   827e0:	b940efe0 	ldr	w0, [sp, #236]
   827e4:	11004262 	add	w2, w19, #0x10
   827e8:	b900e3f2 	str	w18, [sp, #224]
   827ec:	b940f3fc 	ldr	w28, [sp, #240]
   827f0:	11004023 	add	w3, w1, #0x10
   827f4:	b900e7e2 	str	w2, [sp, #228]
   827f8:	f94063e5 	ldr	x5, [sp, #192]
   827fc:	8b3acca6 	add	x6, x5, w26, sxtw #3
   82800:	f90063e6 	str	x6, [sp, #192]
   82804:	1100401e 	add	w30, w0, #0x10
   82808:	b940f7fa 	ldr	w26, [sp, #244]
   8280c:	1100439b 	add	w27, w28, #0x10
   82810:	b900ebe3 	str	w3, [sp, #232]
   82814:	f94067e8 	ldr	x8, [sp, #200]
   82818:	b900effe 	str	w30, [sp, #236]
   8281c:	b940fbe6 	ldr	w6, [sp, #248]
   82820:	11004345 	add	w5, w26, #0x10
   82824:	b900f3fb 	str	w27, [sp, #240]
   82828:	f940cff7 	ldr	x23, [sp, #408]
   8282c:	91020109 	add	x9, x8, #0x80
   82830:	b900f7e5 	str	w5, [sp, #244]
   82834:	110040c7 	add	w7, w6, #0x10
   82838:	f90067e9 	str	x9, [sp, #200]
   8283c:	b900fbe7 	str	w7, [sp, #248]
   82840:	b940ffe4 	ldr	w4, [sp, #252]
   82844:	b94103e9 	ldr	w9, [sp, #256]
   82848:	b94107eb 	ldr	w11, [sp, #260]
   8284c:	11004088 	add	w8, w4, #0x10
   82850:	b9410bed 	ldr	w13, [sp, #264]
   82854:	1100412a 	add	w10, w9, #0x10
   82858:	b900ffe8 	str	w8, [sp, #252]
   8285c:	1100416c 	add	w12, w11, #0x10
   82860:	b90103ea 	str	w10, [sp, #256]
   82864:	110041ae 	add	w14, w13, #0x10
   82868:	b90107ec 	str	w12, [sp, #260]
   8286c:	b9010bee 	str	w14, [sp, #264]
   82870:	54ffc3eb 	b.lt	820ec <lud_omp+0x29c>  // b.tstop
   82874:	f94057fa 	ldr	x26, [sp, #168]
   82878:	52800008 	mov	w8, #0x0                   	// #0
   8287c:	914006fe 	add	x30, x23, #0x1, lsl #12
   82880:	b94133fb 	ldr	w27, [sp, #304]
   82884:	9120035c 	add	x28, x26, #0x800
   82888:	b94153e5 	ldr	w5, [sp, #336]
   8288c:	1adb0d02 	sdiv	w2, w8, w27
   82890:	aa1703e7 	mov	x7, x23
   82894:	aa1703e4 	mov	x4, x23
   82898:	f9408bed 	ldr	x13, [sp, #272]
   8289c:	aa1a03e1 	mov	x1, x26
   828a0:	a9007fdf 	stp	xzr, xzr, [x30]
   828a4:	f9409fef 	ldr	x15, [sp, #312]
   828a8:	a9017fdf 	stp	xzr, xzr, [x30, #16]
   828ac:	a9027fdf 	stp	xzr, xzr, [x30, #32]
   828b0:	11000443 	add	w3, w2, #0x1
   828b4:	1b1ba040 	msub	w0, w2, w27, w8
   828b8:	0b0310a6 	add	w6, w5, w3, lsl #4
   828bc:	a9037fdf 	stp	xzr, xzr, [x30, #48]
   828c0:	11000409 	add	w9, w0, #0x1
   828c4:	1b197cca 	mul	w10, w6, w25
   828c8:	0b0910ac 	add	w12, w5, w9, lsl #4
   828cc:	a9047fdf 	stp	xzr, xzr, [x30, #64]
   828d0:	93407d4b 	sxtw	x11, w10
   828d4:	93407d90 	sxtw	x16, w12
   828d8:	8b0d020e 	add	x14, x16, x13
   828dc:	8b0f0171 	add	x17, x11, x15
   828e0:	a9057fdf 	stp	xzr, xzr, [x30, #80]
   828e4:	8b0e0f03 	add	x3, x24, x14, lsl #3
   828e8:	8b110f02 	add	x2, x24, x17, lsl #3
   828ec:	a9067fdf 	stp	xzr, xzr, [x30, #96]
   828f0:	a9077fdf 	stp	xzr, xzr, [x30, #112]
   828f4:	a9404c52 	ldp	x18, x19, [x2]
   828f8:	a9401860 	ldp	x0, x6, [x3]
   828fc:	a9412869 	ldp	x9, x10, [x3, #16]
   82900:	a9001820 	stp	x0, x6, [x1]
   82904:	a9004c92 	stp	x18, x19, [x4]
   82908:	a9012829 	stp	x9, x10, [x1, #16]
   8290c:	a9414851 	ldp	x17, x18, [x2, #16]
   82910:	a9420053 	ldp	x19, x0, [x2, #32]
   82914:	a942346c 	ldp	x12, x13, [x3, #32]
   82918:	a9432446 	ldp	x6, x9, [x2, #48]
   8291c:	a9433c6e 	ldp	x14, x15, [x3, #48]
   82920:	a9014891 	stp	x17, x18, [x4, #16]
   82924:	a9020093 	stp	x19, x0, [x4, #32]
   82928:	a902342c 	stp	x12, x13, [x1, #32]
   8292c:	a9032486 	stp	x6, x9, [x4, #48]
   82930:	a9033c2e 	stp	x14, x15, [x1, #48]
   82934:	a944386a 	ldp	x10, x14, [x3, #64]
   82938:	a945306d 	ldp	x13, x12, [x3, #80]
   8293c:	a946446f 	ldp	x15, x17, [x3, #96]
   82940:	a9474c72 	ldp	x18, x19, [x3, #112]
   82944:	8b150063 	add	x3, x3, x21
   82948:	a904382a 	stp	x10, x14, [x1, #64]
   8294c:	a905302d 	stp	x13, x12, [x1, #80]
   82950:	a906442f 	stp	x15, x17, [x1, #96]
   82954:	a9441840 	ldp	x0, x6, [x2, #64]
   82958:	a9452849 	ldp	x9, x10, [x2, #80]
   8295c:	a946384f 	ldp	x15, x14, [x2, #96]
   82960:	a947304d 	ldp	x13, x12, [x2, #112]
   82964:	8b150042 	add	x2, x2, x21
   82968:	a9074c32 	stp	x18, x19, [x1, #112]
   8296c:	91020021 	add	x1, x1, #0x80
   82970:	eb01039f 	cmp	x28, x1
   82974:	a9041880 	stp	x0, x6, [x4, #64]
   82978:	a9052889 	stp	x9, x10, [x4, #80]
   8297c:	a906388f 	stp	x15, x14, [x4, #96]
   82980:	a907308d 	stp	x13, x12, [x4, #112]
   82984:	91020084 	add	x4, x4, #0x80
   82988:	54fffb61 	b.ne	828f4 <lud_omp+0xaa4>  // b.any
   8298c:	6d40e3c3 	ldp	d3, d24, [x30, #8]
   82990:	8b0b020b 	add	x11, x16, x11
   82994:	8b0b0f01 	add	x1, x24, x11, lsl #3
   82998:	6d41dbd7 	ldp	d23, d22, [x30, #24]
   8299c:	6d42d3d5 	ldp	d21, d20, [x30, #40]
   829a0:	6d43cbd3 	ldp	d19, d18, [x30, #56]
   829a4:	6d44c3d1 	ldp	d17, d16, [x30, #72]
   829a8:	6d459bc7 	ldp	d7, d6, [x30, #88]
   829ac:	6d4693c5 	ldp	d5, d4, [x30, #104]
   829b0:	fd403fc2 	ldr	d2, [x30, #120]
   829b4:	cb1a0390 	sub	x16, x28, x26
   829b8:	aa1a03f2 	mov	x18, x26
   829bc:	2f00e419 	movi	d25, #0x0
   829c0:	aa0703f1 	mov	x17, x7
   829c4:	363803b0 	tbz	w16, #7, 82a38 <lud_omp+0xbe8>
   829c8:	fc40863d 	ldr	d29, [x17], #8
   829cc:	91020352 	add	x18, x26, #0x80
   829d0:	eb1c025f 	cmp	x18, x28
   829d4:	6d407b5c 	ldp	d28, d30, [x26]
   829d8:	6d41075f 	ldp	d31, d1, [x26, #16]
   829dc:	6d426f40 	ldp	d0, d27, [x26, #32]
   829e0:	1f5c67b9 	fmadd	d25, d29, d28, d25
   829e4:	1f5e0fa3 	fmadd	d3, d29, d30, d3
   829e8:	6d43735a 	ldp	d26, d28, [x26, #48]
   829ec:	1f5f63b8 	fmadd	d24, d29, d31, d24
   829f0:	6d447f5e 	ldp	d30, d31, [x26, #64]
   829f4:	1f415fb7 	fmadd	d23, d29, d1, d23
   829f8:	1f405bb6 	fmadd	d22, d29, d0, d22
   829fc:	1f5b57b5 	fmadd	d21, d29, d27, d21
   82a00:	6d450740 	ldp	d0, d1, [x26, #80]
   82a04:	1f5a53b4 	fmadd	d20, d29, d26, d20
   82a08:	1f5c4fb3 	fmadd	d19, d29, d28, d19
   82a0c:	6d466f5c 	ldp	d28, d27, [x26, #96]
   82a10:	1f5e4bb2 	fmadd	d18, d29, d30, d18
   82a14:	6d477b5a 	ldp	d26, d30, [x26, #112]
   82a18:	1f5f47b1 	fmadd	d17, d29, d31, d17
   82a1c:	1f4043b0 	fmadd	d16, d29, d0, d16
   82a20:	1f411fa7 	fmadd	d7, d29, d1, d7
   82a24:	1f5c1ba6 	fmadd	d6, d29, d28, d6
   82a28:	1f5b17a5 	fmadd	d5, d29, d27, d5
   82a2c:	1f5a13a4 	fmadd	d4, d29, d26, d4
   82a30:	1f5e0ba2 	fmadd	d2, d29, d30, d2
   82a34:	54000740 	b.eq	82b1c <lud_omp+0xccc>  // b.none
   82a38:	aa1103f3 	mov	x19, x17
   82a3c:	6d40025f 	ldp	d31, d0, [x18]
   82a40:	91020243 	add	x3, x18, #0x80
   82a44:	fc40867d 	ldr	d29, [x19], #8
   82a48:	6d417241 	ldp	d1, d28, [x18, #16]
   82a4c:	6d436a5b 	ldp	d27, d26, [x18, #48]
   82a50:	1f5f67b9 	fmadd	d25, d29, d31, d25
   82a54:	1f400fa3 	fmadd	d3, d29, d0, d3
   82a58:	6d427e5e 	ldp	d30, d31, [x18, #32]
   82a5c:	1f4163b8 	fmadd	d24, d29, d1, d24
   82a60:	6d440640 	ldp	d0, d1, [x18, #64]
   82a64:	1f5c5fb7 	fmadd	d23, d29, d28, d23
   82a68:	1f5b53b4 	fmadd	d20, d29, d27, d20
   82a6c:	1f5a4fb3 	fmadd	d19, d29, d26, d19
   82a70:	6d476a5b 	ldp	d27, d26, [x18, #112]
   82a74:	1f5e5bb6 	fmadd	d22, d29, d30, d22
   82a78:	1f5f57b5 	fmadd	d21, d29, d31, d21
   82a7c:	6d457a5c 	ldp	d28, d30, [x18, #80]
   82a80:	1f404bb2 	fmadd	d18, d29, d0, d18
   82a84:	6d46025f 	ldp	d31, d0, [x18, #96]
   82a88:	1f4147b1 	fmadd	d17, d29, d1, d17
   82a8c:	1f5b13a4 	fmadd	d4, d29, d27, d4
   82a90:	1f5a0ba2 	fmadd	d2, d29, d26, d2
   82a94:	1f5e1fa7 	fmadd	d7, d29, d30, d7
   82a98:	1f5c43b0 	fmadd	d16, d29, d28, d16
   82a9c:	6d49865e 	ldp	d30, d1, [x18, #152]
   82aa0:	1f5f1ba6 	fmadd	d6, d29, d31, d6
   82aa4:	1f4017a5 	fmadd	d5, d29, d0, d5
   82aa8:	fd40063f 	ldr	d31, [x17, #8]
   82aac:	91002271 	add	x17, x19, #0x8
   82ab0:	6d48f25d 	ldp	d29, d28, [x18, #136]
   82ab4:	6d4aee40 	ldp	d0, d27, [x18, #168]
   82ab8:	1f5e5ff7 	fmadd	d23, d31, d30, d23
   82abc:	1f415bf6 	fmadd	d22, d31, d1, d22
   82ac0:	1f5d0fe3 	fmadd	d3, d31, d29, d3
   82ac4:	1f5c63f8 	fmadd	d24, d31, d28, d24
   82ac8:	6d4bf65a 	ldp	d26, d29, [x18, #184]
   82acc:	6d4cfa5c 	ldp	d28, d30, [x18, #200]
   82ad0:	1f4057f5 	fmadd	d21, d31, d0, d21
   82ad4:	1f5b53f4 	fmadd	d20, d31, d27, d20
   82ad8:	fd40425b 	ldr	d27, [x18, #128]
   82adc:	1f5a4ff3 	fmadd	d19, d31, d26, d19
   82ae0:	1f5d4bf2 	fmadd	d18, d31, d29, d18
   82ae4:	6d4d8640 	ldp	d0, d1, [x18, #216]
   82ae8:	91040252 	add	x18, x18, #0x100
   82aec:	1f5c47f1 	fmadd	d17, d31, d28, d17
   82af0:	fc5e825a 	ldur	d26, [x18, #-24]
   82af4:	eb1c025f 	cmp	x18, x28
   82af8:	6d47707d 	ldp	d29, d28, [x3, #112]
   82afc:	1f5e43f0 	fmadd	d16, d31, d30, d16
   82b00:	1f5b67f9 	fmadd	d25, d31, d27, d25
   82b04:	1f401fe7 	fmadd	d7, d31, d0, d7
   82b08:	1f411be6 	fmadd	d6, d31, d1, d6
   82b0c:	1f5a17e5 	fmadd	d5, d31, d26, d5
   82b10:	1f5d13e4 	fmadd	d4, d31, d29, d4
   82b14:	1f5c0be2 	fmadd	d2, d31, d28, d2
   82b18:	54fff901 	b.ne	82a38 <lud_omp+0xbe8>  // b.any
   82b1c:	6d40783f 	ldp	d31, d30, [x1]
   82b20:	910200e7 	add	x7, x7, #0x80
   82b24:	eb07035f 	cmp	x26, x7
   82b28:	6d410021 	ldp	d1, d0, [x1, #16]
   82b2c:	fd40143a 	ldr	d26, [x1, #40]
   82b30:	1e793bfd 	fsub	d29, d31, d25
   82b34:	1e633bdb 	fsub	d27, d30, d3
   82b38:	fd401039 	ldr	d25, [x1, #32]
   82b3c:	2f00e403 	movi	d3, #0x0
   82b40:	1e783838 	fsub	d24, d1, d24
   82b44:	1e773817 	fsub	d23, d0, d23
   82b48:	6d437c3c 	ldp	d28, d31, [x1, #48]
   82b4c:	1e753b55 	fsub	d21, d26, d21
   82b50:	fd40203e 	ldr	d30, [x1, #64]
   82b54:	1e763b36 	fsub	d22, d25, d22
   82b58:	6d006c3d 	stp	d29, d27, [x1]
   82b5c:	fd40243d 	ldr	d29, [x1, #72]
   82b60:	6d015c38 	stp	d24, d23, [x1, #16]
   82b64:	1e743b94 	fsub	d20, d28, d20
   82b68:	1e733bf3 	fsub	d19, d31, d19
   82b6c:	6d450021 	ldp	d1, d0, [x1, #80]
   82b70:	1e604077 	fmov	d23, d3
   82b74:	1e723bd2 	fsub	d18, d30, d18
   82b78:	6d46603b 	ldp	d27, d24, [x1, #96]
   82b7c:	6d025436 	stp	d22, d21, [x1, #32]
   82b80:	1e604076 	fmov	d22, d3
   82b84:	1e604075 	fmov	d21, d3
   82b88:	6d47643a 	ldp	d26, d25, [x1, #112]
   82b8c:	1e713bb1 	fsub	d17, d29, d17
   82b90:	6d034c34 	stp	d20, d19, [x1, #48]
   82b94:	1e604073 	fmov	d19, d3
   82b98:	1e604074 	fmov	d20, d3
   82b9c:	1e703830 	fsub	d16, d1, d16
   82ba0:	1e673807 	fsub	d7, d0, d7
   82ba4:	fd002032 	str	d18, [x1, #64]
   82ba8:	1e604072 	fmov	d18, d3
   82bac:	1e653b05 	fsub	d5, d24, d5
   82bb0:	1e663b66 	fsub	d6, d27, d6
   82bb4:	1e604078 	fmov	d24, d3
   82bb8:	1e643b44 	fsub	d4, d26, d4
   82bbc:	1e623b22 	fsub	d2, d25, d2
   82bc0:	fd002431 	str	d17, [x1, #72]
   82bc4:	1e604071 	fmov	d17, d3
   82bc8:	6d051c30 	stp	d16, d7, [x1, #80]
   82bcc:	1e604070 	fmov	d16, d3
   82bd0:	1e604067 	fmov	d7, d3
   82bd4:	6d061426 	stp	d6, d5, [x1, #96]
   82bd8:	1e604066 	fmov	d6, d3
   82bdc:	1e604065 	fmov	d5, d3
   82be0:	6d070824 	stp	d4, d2, [x1, #112]
   82be4:	1e604064 	fmov	d4, d3
   82be8:	1e604062 	fmov	d2, d3
   82bec:	8b150021 	add	x1, x1, x21
   82bf0:	54ffee21 	b.ne	829b4 <lud_omp+0xb64>  // b.any
   82bf4:	b94137e0 	ldr	w0, [sp, #308]
   82bf8:	11000508 	add	w8, w8, #0x1
   82bfc:	6b00011f 	cmp	w8, w0
   82c00:	54ffe46b 	b.lt	8288c <lud_omp+0xa3c>  // b.tstop
   82c04:	14000006 	b	82c1c <lud_omp+0xdcc>
   82c08:	b94137ef 	ldr	w15, [sp, #308]
   82c0c:	350006cf 	cbnz	w15, 82ce4 <lud_omp+0xe94>
   82c10:	b940a7fe 	ldr	w30, [sp, #164]
   82c14:	0b1e027c 	add	w28, w19, w30
   82c18:	b9011ffc 	str	w28, [sp, #284]
   82c1c:	b9410fea 	ldr	w10, [sp, #268]
   82c20:	b940a3ec 	ldr	w12, [sp, #160]
   82c24:	b94157e4 	ldr	w4, [sp, #340]
   82c28:	5100414f 	sub	w15, w10, #0x10
   82c2c:	b9411bf0 	ldr	w16, [sp, #280]
   82c30:	b9010fef 	str	w15, [sp, #268]
   82c34:	f9408bee 	ldr	x14, [sp, #272]
   82c38:	0b04018b 	add	w11, w12, w4
   82c3c:	f940a3e5 	ldr	x5, [sp, #320]
   82c40:	0b040211 	add	w17, w16, w4
   82c44:	b900a3eb 	str	w11, [sp, #160]
   82c48:	f9404ffb 	ldr	x27, [sp, #152]
   82c4c:	b9011bf1 	str	w17, [sp, #280]
   82c50:	f940afe6 	ldr	x6, [sp, #344]
   82c54:	8b0501cd 	add	x13, x14, x5
   82c58:	f940a7e2 	ldr	x2, [sp, #328]
   82c5c:	f9008bed 	str	x13, [sp, #272]
   82c60:	91000769 	add	x9, x27, #0x1
   82c64:	b9411ff3 	ldr	w19, [sp, #284]
   82c68:	eb06037f 	cmp	x27, x6
   82c6c:	8b0202d6 	add	x22, x22, x2
   82c70:	54000060 	b.eq	82c7c <lud_omp+0xe2c>  // b.none
   82c74:	f9004fe9 	str	x9, [sp, #152]
   82c78:	17fffcc0 	b	81f78 <lud_omp+0x128>
   82c7c:	b94163f4 	ldr	w20, [sp, #352]
   82c80:	aa1803ef 	mov	x15, x24
   82c84:	2a1903f5 	mov	w21, w25
   82c88:	d2824a03 	mov	x3, #0x1250                	// #4688
   82c8c:	2a1503e1 	mov	w1, w21
   82c90:	a9415bf5 	ldp	x21, x22, [sp, #16]
   82c94:	aa0f03e0 	mov	x0, x15
   82c98:	a94263f7 	ldp	x23, x24, [sp, #32]
   82c9c:	11000692 	add	w18, w20, #0x1
   82ca0:	531c6e42 	lsl	w2, w18, #4
   82ca4:	a94053f3 	ldp	x19, x20, [sp]
   82ca8:	a9436bf9 	ldp	x25, x26, [sp, #48]
   82cac:	a94473fb 	ldp	x27, x28, [sp, #64]
   82cb0:	f9402bfe 	ldr	x30, [sp, #80]
   82cb4:	fd402fe8 	ldr	d8, [sp, #88]
   82cb8:	8b2363ff 	add	sp, sp, x3
   82cbc:	17fffab9 	b	817a0 <lud_diagonal_omp(double*, int, int)>
   82cc0:	d2824a03 	mov	x3, #0x1250                	// #4688
   82cc4:	2a1503e1 	mov	w1, w21
   82cc8:	a94053f3 	ldp	x19, x20, [sp]
   82ccc:	52800002 	mov	w2, #0x0                   	// #0
   82cd0:	aa0f03e0 	mov	x0, x15
   82cd4:	a9415bf5 	ldp	x21, x22, [sp, #16]
   82cd8:	f9402bfe 	ldr	x30, [sp, #80]
   82cdc:	8b2363ff 	add	sp, sp, x3
   82ce0:	17fffab0 	b	817a0 <lud_diagonal_omp(double*, int, int)>
   82ce4:	b940a7f0 	ldr	w16, [sp, #164]
   82ce8:	f9404ff2 	ldr	x18, [sp, #152]
   82cec:	0b100271 	add	w17, w19, w16
   82cf0:	d37cee53 	lsl	x19, x18, #4
   82cf4:	b9011ff1 	str	w17, [sp, #284]
   82cf8:	f9009ff3 	str	x19, [sp, #312]
   82cfc:	17fffedf 	b	82878 <lud_omp+0xa28>

0000000000082d00 <CEMMCDevice::CEMMCDevice(CInterruptSystem*, CTimer*, CActLED*)>:
   82d00:	a9bb53f3 	stp	x19, x20, [sp, #-80]!
   82d04:	9100c014 	add	x20, x0, #0x30
   82d08:	aa1403f3 	mov	x19, x20
   82d0c:	a9015bf5 	stp	x21, x22, [sp, #16]
   82d10:	aa0003f5 	mov	x21, x0
   82d14:	91078016 	add	x22, x0, #0x1e0
   82d18:	f90013fe 	str	x30, [sp, #32]
   82d1c:	a9038be3 	stp	x3, x2, [sp, #56]
   82d20:	f90027e1 	str	x1, [sp, #72]
   82d24:	94001b2f 	bl	899e0 <CDevice::CDevice()>
   82d28:	a9438be3 	ldp	x3, x2, [sp, #56]
   82d2c:	900000c0 	adrp	x0, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   82d30:	9113c004 	add	x4, x0, #0x4f0
   82d34:	f90002a4 	str	x4, [x21]
   82d38:	f94027e1 	ldr	x1, [sp, #72]
   82d3c:	f90016a3 	str	x3, [x21, #40]
   82d40:	a9018aa1 	stp	x1, x2, [x21, #24]
   82d44:	d503201f 	nop
   82d48:	aa1303e0 	mov	x0, x19
   82d4c:	91012273 	add	x19, x19, #0x48
   82d50:	94001de4 	bl	8a4e0 <CGPIOPin::CGPIOPin()>
   82d54:	eb16027f 	cmp	x19, x22
   82d58:	54ffff81 	b.ne	82d48 <CEMMCDevice::CEMMCDevice(CInterruptSystem*, CTimer*, CActLED*)+0x48>  // b.any
   82d5c:	910e42b6 	add	x22, x21, #0x390
   82d60:	aa1303e0 	mov	x0, x19
   82d64:	91012273 	add	x19, x19, #0x48
   82d68:	94001dde 	bl	8a4e0 <CGPIOPin::CGPIOPin()>
   82d6c:	eb16027f 	cmp	x19, x22
   82d70:	54ffff81 	b.ne	82d60 <CEMMCDevice::CEMMCDevice(CInterruptSystem*, CTimer*, CActLED*)+0x60>  // b.any
   82d74:	f901cabf 	str	xzr, [x21, #912]
   82d78:	f901cebf 	str	xzr, [x21, #920]
   82d7c:	b903a2bf 	str	wzr, [x21, #928]
   82d80:	f901eabf 	str	xzr, [x21, #976]
   82d84:	f9400ea5 	ldr	x5, [x21, #24]
   82d88:	b40005e5 	cbz	x5, 82e44 <CEMMCDevice::CEMMCDevice(CInterruptSystem*, CTimer*, CActLED*)+0x144>
   82d8c:	f94012a8 	ldr	x8, [x21, #32]
   82d90:	b4000668 	cbz	x8, 82e5c <CEMMCDevice::CEMMCDevice(CInterruptSystem*, CTimer*, CActLED*)+0x15c>
   82d94:	d2800200 	mov	x0, #0x10                  	// #16
   82d98:	94004726 	bl	94a30 <operator new(unsigned long)>
   82d9c:	f901eaa0 	str	x0, [x21, #976]
   82da0:	940028ab 	bl	8d04c <CMachineInfo::Get()>
   82da4:	940026e2 	bl	8c92c <CMachineInfo::GetMachineModel() const>
   82da8:	7100241f 	cmp	w0, #0x9
   82dac:	54000341 	b.ne	82e14 <CEMMCDevice::CEMMCDevice(CInterruptSystem*, CTimer*, CActLED*)+0x114>  // b.any
   82db0:	52800456 	mov	w22, #0x22                  	// #34
   82db4:	d503201f 	nop
   82db8:	2a1603e1 	mov	w1, w22
   82dbc:	aa1403e0 	mov	x0, x20
   82dc0:	94001df0 	bl	8a580 <CGPIOPin::AssignPin(unsigned int)>
   82dc4:	52800002 	mov	w2, #0x0                   	// #0
   82dc8:	aa1403e0 	mov	x0, x20
   82dcc:	52800001 	mov	w1, #0x0                   	// #0
   82dd0:	9106c295 	add	x21, x20, #0x1b0
   82dd4:	94001e0f 	bl	8a610 <CGPIOPin::SetMode(TGPIOMode, bool)>
   82dd8:	11003ac1 	add	w1, w22, #0xe
   82ddc:	aa1503e0 	mov	x0, x21
   82de0:	94001de8 	bl	8a580 <CGPIOPin::AssignPin(unsigned int)>
   82de4:	aa1503e0 	mov	x0, x21
   82de8:	52800002 	mov	w2, #0x0                   	// #0
   82dec:	528000e1 	mov	w1, #0x7                   	// #7
   82df0:	110006d6 	add	w22, w22, #0x1
   82df4:	94001e07 	bl	8a610 <CGPIOPin::SetMode(TGPIOMode, bool)>
   82df8:	7100a2df 	cmp	w22, #0x28
   82dfc:	91012294 	add	x20, x20, #0x48
   82e00:	54fffdc1 	b.ne	82db8 <CEMMCDevice::CEMMCDevice(CInterruptSystem*, CTimer*, CActLED*)+0xb8>  // b.any
   82e04:	a9415bf5 	ldp	x21, x22, [sp, #16]
   82e08:	f94013fe 	ldr	x30, [sp, #32]
   82e0c:	a8c553f3 	ldp	x19, x20, [sp], #80
   82e10:	d65f03c0 	ret
   82e14:	9400288e 	bl	8d04c <CMachineInfo::Get()>
   82e18:	940026c5 	bl	8c92c <CMachineInfo::GetMachineModel() const>
   82e1c:	7100281f 	cmp	w0, #0xa
   82e20:	54fffc80 	b.eq	82db0 <CEMMCDevice::CEMMCDevice(CInterruptSystem*, CTimer*, CActLED*)+0xb0>  // b.none
   82e24:	9400288a 	bl	8d04c <CMachineInfo::Get()>
   82e28:	940026c1 	bl	8c92c <CMachineInfo::GetMachineModel() const>
   82e2c:	71002c1f 	cmp	w0, #0xb
   82e30:	54fffc00 	b.eq	82db0 <CEMMCDevice::CEMMCDevice(CInterruptSystem*, CTimer*, CActLED*)+0xb0>  // b.none
   82e34:	a9415bf5 	ldp	x21, x22, [sp, #16]
   82e38:	f94013fe 	ldr	x30, [sp, #32]
   82e3c:	a8c553f3 	ldp	x19, x20, [sp], #80
   82e40:	d65f03c0 	ret
   82e44:	900000c6 	adrp	x6, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   82e48:	911480c7 	add	x7, x6, #0x520
   82e4c:	9108e0e1 	add	x1, x7, #0x238
   82e50:	910920e0 	add	x0, x7, #0x248
   82e54:	52803d82 	mov	w2, #0x1ec                 	// #492
   82e58:	94001946 	bl	89370 <assertion_failed>
   82e5c:	900000c9 	adrp	x9, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   82e60:	9114812a 	add	x10, x9, #0x520
   82e64:	9108e141 	add	x1, x10, #0x238
   82e68:	91098140 	add	x0, x10, #0x260
   82e6c:	52803da2 	mov	w2, #0x1ed                 	// #493
   82e70:	94001940 	bl	89370 <assertion_failed>
   82e74:	d503201f 	nop
   82e78:	d503201f 	nop
   82e7c:	d503201f 	nop

0000000000082e80 <CEMMCDevice::~CEMMCDevice()>:
   82e80:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   82e84:	900000c2 	adrp	x2, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   82e88:	9113c043 	add	x3, x2, #0x4f0
   82e8c:	d2800201 	mov	x1, #0x10                  	// #16
   82e90:	a9015bf5 	stp	x21, x22, [sp, #16]
   82e94:	aa0003f5 	mov	x21, x0
   82e98:	f941e800 	ldr	x0, [x0, #976]
   82e9c:	f90013fe 	str	x30, [sp, #32]
   82ea0:	f90002a3 	str	x3, [x21]
   82ea4:	94004707 	bl	94ac0 <operator delete(void*, unsigned long)>
   82ea8:	f901eabf 	str	xzr, [x21, #976]
   82eac:	f941ceb3 	ldr	x19, [x21, #920]
   82eb0:	b40000d3 	cbz	x19, 82ec8 <CEMMCDevice::~CEMMCDevice()+0x48>
   82eb4:	aa1303e0 	mov	x0, x19
   82eb8:	940016be 	bl	889b0 <CPartitionManager::~CPartitionManager()>
   82ebc:	aa1303e0 	mov	x0, x19
   82ec0:	d2800901 	mov	x1, #0x48                  	// #72
   82ec4:	940046ff 	bl	94ac0 <operator delete(void*, unsigned long)>
   82ec8:	910782b4 	add	x20, x21, #0x1e0
   82ecc:	910d22b3 	add	x19, x21, #0x348
   82ed0:	a901febf 	stp	xzr, xzr, [x21, #24]
   82ed4:	910662b6 	add	x22, x21, #0x198
   82ed8:	f901cebf 	str	xzr, [x21, #920]
   82edc:	d503201f 	nop
   82ee0:	f9400261 	ldr	x1, [x19]
   82ee4:	aa1303e0 	mov	x0, x19
   82ee8:	d1012273 	sub	x19, x19, #0x48
   82eec:	f9400024 	ldr	x4, [x1]
   82ef0:	d63f0080 	blr	x4
   82ef4:	eb16027f 	cmp	x19, x22
   82ef8:	54ffff41 	b.ne	82ee0 <CEMMCDevice::~CEMMCDevice()+0x60>  // b.any
   82efc:	9100c2b6 	add	x22, x21, #0x30
   82f00:	f85b8e85 	ldr	x5, [x20, #-72]!
   82f04:	aa1403e0 	mov	x0, x20
   82f08:	f94000a6 	ldr	x6, [x5]
   82f0c:	d63f00c0 	blr	x6
   82f10:	eb1402df 	cmp	x22, x20
   82f14:	54ffff61 	b.ne	82f00 <CEMMCDevice::~CEMMCDevice()+0x80>  // b.any
   82f18:	aa1503e0 	mov	x0, x21
   82f1c:	a9415bf5 	ldp	x21, x22, [sp, #16]
   82f20:	f94013fe 	ldr	x30, [sp, #32]
   82f24:	a8c353f3 	ldp	x19, x20, [sp], #48
   82f28:	14001a8a 	b	89950 <CDevice::~CDevice()>
   82f2c:	d503201f 	nop

0000000000082f30 <CEMMCDevice::~CEMMCDevice()>:
   82f30:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   82f34:	aa0003f3 	mov	x19, x0
   82f38:	97ffffd2 	bl	82e80 <CEMMCDevice::~CEMMCDevice()>
   82f3c:	aa1303e0 	mov	x0, x19
   82f40:	d2808301 	mov	x1, #0x418                 	// #1048
   82f44:	a8c17bf3 	ldp	x19, x30, [sp], #16
   82f48:	140046de 	b	94ac0 <operator delete(void*, unsigned long)>
   82f4c:	d503201f 	nop

0000000000082f50 <CEMMCDevice::Initialize()>:
   82f50:	a9bb53f3 	stp	x19, x20, [sp, #-80]!
   82f54:	52800001 	mov	w1, #0x0                   	// #0
   82f58:	aa0003f3 	mov	x19, x0
   82f5c:	9100c3e0 	add	x0, sp, #0x30
   82f60:	f9000bfe 	str	x30, [sp, #16]
   82f64:	94001923 	bl	893f0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   82f68:	d2801082 	mov	x2, #0x84                  	// #132
   82f6c:	9100c3e0 	add	x0, sp, #0x30
   82f70:	52900821 	mov	w1, #0x8041                	// #32833
   82f74:	72a00061 	movk	w1, #0x3, lsl #16
   82f78:	52800104 	mov	w4, #0x8                   	// #8
   82f7c:	52800283 	mov	w3, #0x14                  	// #20
   82f80:	f80443e2 	stur	x2, [sp, #68]
   82f84:	9100e3e2 	add	x2, sp, #0x38
   82f88:	94001922 	bl	89410 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   82f8c:	72001c1f 	tst	w0, #0xff
   82f90:	54000380 	b.eq	83000 <CEMMCDevice::Initialize()+0xb0>  // b.none
   82f94:	f9401260 	ldr	x0, [x19, #32]
   82f98:	b4000580 	cbz	x0, 83048 <CEMMCDevice::Initialize()+0xf8>
   82f9c:	52827100 	mov	w0, #0x1388                	// #5000
   82fa0:	94004158 	bl	93500 <CTimer::SimpleusDelay(unsigned int)>
   82fa4:	aa1303e0 	mov	x0, x19
   82fa8:	940005d2 	bl	846f0 <CEMMCDevice::CardInit()>
   82fac:	350002a0 	cbnz	w0, 83000 <CEMMCDevice::Initialize()+0xb0>
   82fb0:	900000c1 	adrp	x1, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   82fb4:	91148024 	add	x4, x1, #0x520
   82fb8:	f941ce67 	ldr	x7, [x19, #920]
   82fbc:	9109c085 	add	x5, x4, #0x270
   82fc0:	b9427083 	ldr	w3, [x4, #624]
   82fc4:	b84020a6 	ldur	w6, [x5, #2]
   82fc8:	b9002be3 	str	w3, [sp, #40]
   82fcc:	b802a3e6 	stur	w6, [sp, #42]
   82fd0:	b50003e7 	cbnz	x7, 8304c <CEMMCDevice::Initialize()+0xfc>
   82fd4:	d2800900 	mov	x0, #0x48                  	// #72
   82fd8:	94004696 	bl	94a30 <operator new(unsigned long)>
   82fdc:	aa0003f4 	mov	x20, x0
   82fe0:	9100a3e2 	add	x2, sp, #0x28
   82fe4:	aa1303e1 	mov	x1, x19
   82fe8:	94001666 	bl	88980 <CPartitionManager::CPartitionManager(CDevice*, char const*)>
   82fec:	aa1403e0 	mov	x0, x20
   82ff0:	f901ce74 	str	x20, [x19, #920]
   82ff4:	940016a3 	bl	88a80 <CPartitionManager::Initialize()>
   82ff8:	72001c14 	ands	w20, w0, #0xff
   82ffc:	54000101 	b.ne	8301c <CEMMCDevice::Initialize()+0xcc>  // b.any
   83000:	9100c3e0 	add	x0, sp, #0x30
   83004:	52800014 	mov	w20, #0x0                   	// #0
   83008:	940018fe 	bl	89400 <CBcmPropertyTags::~CBcmPropertyTags()>
   8300c:	2a1403e0 	mov	w0, w20
   83010:	f9400bfe 	ldr	x30, [sp, #16]
   83014:	a8c553f3 	ldp	x19, x20, [sp], #80
   83018:	d65f03c0 	ret
   8301c:	94001c05 	bl	8a030 <CDeviceNameService::Get()>
   83020:	aa1303e2 	mov	x2, x19
   83024:	9100a3e1 	add	x1, sp, #0x28
   83028:	52800023 	mov	w3, #0x1                   	// #1
   8302c:	94001aa1 	bl	89ab0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   83030:	9100c3e0 	add	x0, sp, #0x30
   83034:	940018f3 	bl	89400 <CBcmPropertyTags::~CBcmPropertyTags()>
   83038:	2a1403e0 	mov	w0, w20
   8303c:	f9400bfe 	ldr	x30, [sp, #16]
   83040:	a8c553f3 	ldp	x19, x20, [sp], #80
   83044:	d65f03c0 	ret
   83048:	9400072e 	bl	84d00 <CEMMCDevice::usDelay(unsigned int) [clone .part.2]>
   8304c:	52804782 	mov	w2, #0x23c                 	// #572
   83050:	9108e081 	add	x1, x4, #0x238
   83054:	9109e080 	add	x0, x4, #0x278
   83058:	940018c6 	bl	89370 <assertion_failed>
   8305c:	d503201f 	nop

0000000000083060 <CEMMCDevice::Read(void*, unsigned long)>:
   83060:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   83064:	f941c803 	ldr	x3, [x0, #912]
   83068:	f90013fe 	str	x30, [sp, #32]
   8306c:	f240207f 	tst	x3, #0x1ff
   83070:	54000461 	b.ne	830fc <CEMMCDevice::Read(void*, unsigned long)+0x9c>  // b.any
   83074:	aa0003f4 	mov	x20, x0
   83078:	a9015bf5 	stp	x21, x22, [sp, #16]
   8307c:	aa0203f3 	mov	x19, x2
   83080:	aa0103f6 	mov	x22, x1
   83084:	d349fc75 	lsr	x21, x3, #9
   83088:	f9401400 	ldr	x0, [x0, #40]
   8308c:	b4000040 	cbz	x0, 83094 <CEMMCDevice::Read(void*, unsigned long)+0x34>
   83090:	94001840 	bl	89190 <CActLED::On()>
   83094:	2a1503e3 	mov	w3, w21
   83098:	aa1603e1 	mov	x1, x22
   8309c:	aa1303e2 	mov	x2, x19
   830a0:	aa1403e0 	mov	x0, x20
   830a4:	94000683 	bl	84ab0 <CEMMCDevice::DoRead(unsigned char*, unsigned long, unsigned int)>
   830a8:	6b13001f 	cmp	w0, w19
   830ac:	f9401680 	ldr	x0, [x20, #40]
   830b0:	540001a1 	b.ne	830e4 <CEMMCDevice::Read(void*, unsigned long)+0x84>  // b.any
   830b4:	b40000e0 	cbz	x0, 830d0 <CEMMCDevice::Read(void*, unsigned long)+0x70>
   830b8:	94001842 	bl	891c0 <CActLED::Off()>
   830bc:	a9415bf5 	ldp	x21, x22, [sp, #16]
   830c0:	2a1303e0 	mov	w0, w19
   830c4:	f94013fe 	ldr	x30, [sp, #32]
   830c8:	a8c353f3 	ldp	x19, x20, [sp], #48
   830cc:	d65f03c0 	ret
   830d0:	2a1303e0 	mov	w0, w19
   830d4:	a9415bf5 	ldp	x21, x22, [sp, #16]
   830d8:	f94013fe 	ldr	x30, [sp, #32]
   830dc:	a8c353f3 	ldp	x19, x20, [sp], #48
   830e0:	d65f03c0 	ret
   830e4:	b40000a0 	cbz	x0, 830f8 <CEMMCDevice::Read(void*, unsigned long)+0x98>
   830e8:	94001836 	bl	891c0 <CActLED::Off()>
   830ec:	12800013 	mov	w19, #0xffffffff            	// #-1
   830f0:	a9415bf5 	ldp	x21, x22, [sp, #16]
   830f4:	17fffff3 	b	830c0 <CEMMCDevice::Read(void*, unsigned long)+0x60>
   830f8:	a9415bf5 	ldp	x21, x22, [sp, #16]
   830fc:	12800013 	mov	w19, #0xffffffff            	// #-1
   83100:	17fffff0 	b	830c0 <CEMMCDevice::Read(void*, unsigned long)+0x60>
   83104:	d503201f 	nop
   83108:	d503201f 	nop
   8310c:	d503201f 	nop

0000000000083110 <CEMMCDevice::Write(void const*, unsigned long)>:
   83110:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   83114:	f941c803 	ldr	x3, [x0, #912]
   83118:	f90013fe 	str	x30, [sp, #32]
   8311c:	f240207f 	tst	x3, #0x1ff
   83120:	54000461 	b.ne	831ac <CEMMCDevice::Write(void const*, unsigned long)+0x9c>  // b.any
   83124:	aa0003f4 	mov	x20, x0
   83128:	a9015bf5 	stp	x21, x22, [sp, #16]
   8312c:	aa0203f3 	mov	x19, x2
   83130:	aa0103f6 	mov	x22, x1
   83134:	d349fc75 	lsr	x21, x3, #9
   83138:	f9401400 	ldr	x0, [x0, #40]
   8313c:	b4000040 	cbz	x0, 83144 <CEMMCDevice::Write(void const*, unsigned long)+0x34>
   83140:	94001814 	bl	89190 <CActLED::On()>
   83144:	2a1503e3 	mov	w3, w21
   83148:	aa1603e1 	mov	x1, x22
   8314c:	aa1303e2 	mov	x2, x19
   83150:	aa1403e0 	mov	x0, x20
   83154:	9400066f 	bl	84b10 <CEMMCDevice::DoWrite(unsigned char*, unsigned long, unsigned int)>
   83158:	6b13001f 	cmp	w0, w19
   8315c:	f9401680 	ldr	x0, [x20, #40]
   83160:	540001a1 	b.ne	83194 <CEMMCDevice::Write(void const*, unsigned long)+0x84>  // b.any
   83164:	b40000e0 	cbz	x0, 83180 <CEMMCDevice::Write(void const*, unsigned long)+0x70>
   83168:	94001816 	bl	891c0 <CActLED::Off()>
   8316c:	a9415bf5 	ldp	x21, x22, [sp, #16]
   83170:	2a1303e0 	mov	w0, w19
   83174:	f94013fe 	ldr	x30, [sp, #32]
   83178:	a8c353f3 	ldp	x19, x20, [sp], #48
   8317c:	d65f03c0 	ret
   83180:	2a1303e0 	mov	w0, w19
   83184:	a9415bf5 	ldp	x21, x22, [sp, #16]
   83188:	f94013fe 	ldr	x30, [sp, #32]
   8318c:	a8c353f3 	ldp	x19, x20, [sp], #48
   83190:	d65f03c0 	ret
   83194:	b40000a0 	cbz	x0, 831a8 <CEMMCDevice::Write(void const*, unsigned long)+0x98>
   83198:	9400180a 	bl	891c0 <CActLED::Off()>
   8319c:	12800013 	mov	w19, #0xffffffff            	// #-1
   831a0:	a9415bf5 	ldp	x21, x22, [sp, #16]
   831a4:	17fffff3 	b	83170 <CEMMCDevice::Write(void const*, unsigned long)+0x60>
   831a8:	a9415bf5 	ldp	x21, x22, [sp, #16]
   831ac:	12800013 	mov	w19, #0xffffffff            	// #-1
   831b0:	17fffff0 	b	83170 <CEMMCDevice::Write(void const*, unsigned long)+0x60>
   831b4:	d503201f 	nop
   831b8:	d503201f 	nop
   831bc:	d503201f 	nop

00000000000831c0 <CEMMCDevice::Seek(unsigned long)>:
   831c0:	f901c801 	str	x1, [x0, #912]
   831c4:	aa0103e0 	mov	x0, x1
   831c8:	d65f03c0 	ret
   831cc:	d503201f 	nop

00000000000831d0 <CEMMCDevice::PowerOn()>:
   831d0:	a9bd7bf3 	stp	x19, x30, [sp, #-48]!
   831d4:	52800001 	mov	w1, #0x0                   	// #0
   831d8:	910043e0 	add	x0, sp, #0x10
   831dc:	94001885 	bl	893f0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   831e0:	d2c00062 	mov	x2, #0x300000000           	// #12884901888
   831e4:	910043e0 	add	x0, sp, #0x10
   831e8:	52900021 	mov	w1, #0x8001                	// #32769
   831ec:	72a00041 	movk	w1, #0x2, lsl #16
   831f0:	52800004 	mov	w4, #0x0                   	// #0
   831f4:	52800283 	mov	w3, #0x14                  	// #20
   831f8:	f80243e2 	stur	x2, [sp, #36]
   831fc:	910063e2 	add	x2, sp, #0x18
   83200:	94001884 	bl	89410 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   83204:	72001c1f 	tst	w0, #0xff
   83208:	54000140 	b.eq	83230 <CEMMCDevice::PowerOn()+0x60>  // b.none
   8320c:	b9402be0 	ldr	w0, [sp, #40]
   83210:	37080100 	tbnz	w0, #1, 83230 <CEMMCDevice::PowerOn()+0x60>
   83214:	52800013 	mov	w19, #0x0                   	// #0
   83218:	360000c0 	tbz	w0, #0, 83230 <CEMMCDevice::PowerOn()+0x60>
   8321c:	910043e0 	add	x0, sp, #0x10
   83220:	94001878 	bl	89400 <CBcmPropertyTags::~CBcmPropertyTags()>
   83224:	2a1303e0 	mov	w0, w19
   83228:	a8c37bf3 	ldp	x19, x30, [sp], #48
   8322c:	d65f03c0 	ret
   83230:	f00000a1 	adrp	x1, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   83234:	91148023 	add	x3, x1, #0x520
   83238:	910a6061 	add	x1, x3, #0x298
   8323c:	52800020 	mov	w0, #0x1                   	// #1
   83240:	12800013 	mov	w19, #0xffffffff            	// #-1
   83244:	9400067b 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   83248:	17fffff5 	b	8321c <CEMMCDevice::PowerOn()+0x4c>
   8324c:	d503201f 	nop

0000000000083250 <CEMMCDevice::PowerOff()>:
   83250:	d2800501 	mov	x1, #0x28                  	// #40
   83254:	f2bfc681 	movk	x1, #0xfe34, lsl #16
   83258:	b9400020 	ldr	w0, [x1]
   8325c:	12177802 	and	w2, w0, #0xfffffeff
   83260:	b9000022 	str	w2, [x1]
   83264:	d65f03c0 	ret
   83268:	d503201f 	nop
   8326c:	d503201f 	nop

0000000000083270 <CEMMCDevice::GetBaseClock()>:
   83270:	a9bd7bf3 	stp	x19, x30, [sp, #-48]!
   83274:	52800001 	mov	w1, #0x0                   	// #0
   83278:	910043e0 	add	x0, sp, #0x10
   8327c:	9400185d 	bl	893f0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   83280:	52800182 	mov	w2, #0xc                   	// #12
   83284:	910043e0 	add	x0, sp, #0x10
   83288:	52800041 	mov	w1, #0x2                   	// #2
   8328c:	72a00061 	movk	w1, #0x3, lsl #16
   83290:	52800004 	mov	w4, #0x0                   	// #0
   83294:	52800283 	mov	w3, #0x14                  	// #20
   83298:	b90027e2 	str	w2, [sp, #36]
   8329c:	910063e2 	add	x2, sp, #0x18
   832a0:	9400185c 	bl	89410 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   832a4:	72001c1f 	tst	w0, #0xff
   832a8:	540000e0 	b.eq	832c4 <CEMMCDevice::GetBaseClock()+0x54>  // b.none
   832ac:	b9402bf3 	ldr	w19, [sp, #40]
   832b0:	910043e0 	add	x0, sp, #0x10
   832b4:	94001853 	bl	89400 <CBcmPropertyTags::~CBcmPropertyTags()>
   832b8:	2a1303e0 	mov	w0, w19
   832bc:	a8c37bf3 	ldp	x19, x30, [sp], #48
   832c0:	d65f03c0 	ret
   832c4:	f00000a1 	adrp	x1, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   832c8:	91148020 	add	x0, x1, #0x520
   832cc:	910b0001 	add	x1, x0, #0x2c0
   832d0:	52800020 	mov	w0, #0x1                   	// #1
   832d4:	94000657 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   832d8:	910043e0 	add	x0, sp, #0x10
   832dc:	52800013 	mov	w19, #0x0                   	// #0
   832e0:	b9002bff 	str	wzr, [sp, #40]
   832e4:	94001847 	bl	89400 <CBcmPropertyTags::~CBcmPropertyTags()>
   832e8:	2a1303e0 	mov	w0, w19
   832ec:	a8c37bf3 	ldp	x19, x30, [sp], #48
   832f0:	d65f03c0 	ret
   832f4:	d503201f 	nop
   832f8:	d503201f 	nop
   832fc:	d503201f 	nop

0000000000083300 <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)>:
   83300:	6b01005f 	cmp	w2, w1
   83304:	52800025 	mov	w5, #0x1                   	// #1
   83308:	540000c8 	b.hi	83320 <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)+0x20>  // b.pmore
   8330c:	1ac20823 	udiv	w3, w1, w2
   83310:	1b028462 	msub	w2, w3, w2, w1
   83314:	7100005f 	cmp	w2, #0x0
   83318:	1a9f07e0 	cset	w0, ne  // ne = any
   8331c:	4b000065 	sub	w5, w3, w0
   83320:	528003e1 	mov	w1, #0x1f                  	// #31
   83324:	52800026 	mov	w6, #0x1                   	// #1
   83328:	1ac120c7 	lsl	w7, w6, w1
   8332c:	6a0700bf 	tst	w5, w7
   83330:	54000461 	b.ne	833bc <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)+0xbc>  // b.any
   83334:	51000421 	sub	w1, w1, #0x1
   83338:	1ac120c7 	lsl	w7, w6, w1
   8333c:	2a0103e4 	mov	w4, w1
   83340:	6a0700bf 	tst	w5, w7
   83344:	540003c1 	b.ne	833bc <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)+0xbc>  // b.any
   83348:	51000421 	sub	w1, w1, #0x1
   8334c:	1ac120c7 	lsl	w7, w6, w1
   83350:	6a0700bf 	tst	w5, w7
   83354:	54000341 	b.ne	833bc <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)+0xbc>  // b.any
   83358:	51000881 	sub	w1, w4, #0x2
   8335c:	1ac120c7 	lsl	w7, w6, w1
   83360:	6a0700bf 	tst	w5, w7
   83364:	540002c1 	b.ne	833bc <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)+0xbc>  // b.any
   83368:	51000c81 	sub	w1, w4, #0x3
   8336c:	1ac120c7 	lsl	w7, w6, w1
   83370:	6a0700bf 	tst	w5, w7
   83374:	54000241 	b.ne	833bc <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)+0xbc>  // b.any
   83378:	51001081 	sub	w1, w4, #0x4
   8337c:	1ac120c7 	lsl	w7, w6, w1
   83380:	6a0700bf 	tst	w5, w7
   83384:	540001c1 	b.ne	833bc <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)+0xbc>  // b.any
   83388:	51001481 	sub	w1, w4, #0x5
   8338c:	1ac120c7 	lsl	w7, w6, w1
   83390:	6a0700bf 	tst	w5, w7
   83394:	54000141 	b.ne	833bc <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)+0xbc>  // b.any
   83398:	51001881 	sub	w1, w4, #0x6
   8339c:	1ac120c7 	lsl	w7, w6, w1
   833a0:	6a0700bf 	tst	w5, w7
   833a4:	540000c1 	b.ne	833bc <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)+0xbc>  // b.any
   833a8:	51001c81 	sub	w1, w4, #0x7
   833ac:	3100043f 	cmn	w1, #0x1
   833b0:	54fffbc1 	b.ne	83328 <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)+0x28>  // b.any
   833b4:	529ff800 	mov	w0, #0xffc0                	// #65472
   833b8:	d65f03c0 	ret
   833bc:	6a2700bf 	bics	wzr, w5, w7
   833c0:	540001e0 	b.eq	833fc <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)+0xfc>  // b.none
   833c4:	11000421 	add	w1, w1, #0x1
   833c8:	529ff800 	mov	w0, #0xffc0                	// #65472
   833cc:	7100803f 	cmp	w1, #0x20
   833d0:	54ffff40 	b.eq	833b8 <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)+0xb8>  // b.none
   833d4:	51000428 	sub	w8, w1, #0x1
   833d8:	52800029 	mov	w9, #0x1                   	// #1
   833dc:	1ac8212a 	lsl	w10, w9, w8
   833e0:	52807feb 	mov	w11, #0x3ff                 	// #1023
   833e4:	6b0b015f 	cmp	w10, w11
   833e8:	1a8bd14c 	csel	w12, w10, w11, le
   833ec:	53181d8d 	ubfiz	w13, w12, #8, #8
   833f0:	13087d8e 	asr	w14, w12, #8
   833f4:	2a0e19a0 	orr	w0, w13, w14, lsl #6
   833f8:	d65f03c0 	ret
   833fc:	52800000 	mov	w0, #0x0                   	// #0
   83400:	35fffea1 	cbnz	w1, 833d4 <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)+0xd4>
   83404:	d65f03c0 	ret
   83408:	d503201f 	nop
   8340c:	d503201f 	nop

0000000000083410 <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)>:
   83410:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   83414:	2a0203ef 	mov	w15, w2
   83418:	aa0003f4 	mov	x20, x0
   8341c:	a9015bf5 	stp	x21, x22, [sp, #16]
   83420:	f90013fe 	str	x30, [sp, #32]
   83424:	97ffffb7 	bl	83300 <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)>
   83428:	3100041f 	cmn	w0, #0x1
   8342c:	2a0003f5 	mov	w21, w0
   83430:	54000580 	b.eq	834e0 <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)+0xd0>  // b.none
   83434:	d2800493 	mov	x19, #0x24                  	// #36
   83438:	f2bfc693 	movk	x19, #0xfe34, lsl #16
   8343c:	f9401282 	ldr	x2, [x20, #32]
   83440:	b9400261 	ldr	w1, [x19]
   83444:	f240043f 	tst	x1, #0x3
   83448:	54000160 	b.eq	83474 <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)+0x64>  // b.none
   8344c:	b4000102 	cbz	x2, 8346c <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)+0x5c>
   83450:	52807d00 	mov	w0, #0x3e8                 	// #1000
   83454:	9400402b 	bl	93500 <CTimer::SimpleusDelay(unsigned int)>
   83458:	b9400260 	ldr	w0, [x19]
   8345c:	f240041f 	tst	x0, #0x3
   83460:	54000080 	b.eq	83470 <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)+0x60>  // b.none
   83464:	f9401289 	ldr	x9, [x20, #32]
   83468:	b5ffff49 	cbnz	x9, 83450 <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)+0x40>
   8346c:	94000625 	bl	84d00 <CEMMCDevice::usDelay(unsigned int) [clone .part.2]>
   83470:	f9401282 	ldr	x2, [x20, #32]
   83474:	d2800593 	mov	x19, #0x2c                  	// #44
   83478:	f2bfc693 	movk	x19, #0xfe34, lsl #16
   8347c:	b9400276 	ldr	w22, [x19]
   83480:	121d7ac3 	and	w3, w22, #0xfffffffb
   83484:	b9000263 	str	w3, [x19]
   83488:	b4ffff22 	cbz	x2, 8346c <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)+0x5c>
   8348c:	5280fa00 	mov	w0, #0x7d0                 	// #2000
   83490:	9400401c 	bl	93500 <CTimer::SimpleusDelay(unsigned int)>
   83494:	129ffc84 	mov	w4, #0xffff001b            	// #-65509
   83498:	f9401286 	ldr	x6, [x20, #32]
   8349c:	0a0402c5 	and	w5, w22, w4
   834a0:	2a0502b5 	orr	w21, w21, w5
   834a4:	b9000275 	str	w21, [x19]
   834a8:	b4fffe26 	cbz	x6, 8346c <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)+0x5c>
   834ac:	5280fa00 	mov	w0, #0x7d0                 	// #2000
   834b0:	94004014 	bl	93500 <CTimer::SimpleusDelay(unsigned int)>
   834b4:	321e02a7 	orr	w7, w21, #0x4
   834b8:	f9401288 	ldr	x8, [x20, #32]
   834bc:	b9000267 	str	w7, [x19]
   834c0:	b4fffd68 	cbz	x8, 8346c <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)+0x5c>
   834c4:	5280fa00 	mov	w0, #0x7d0                 	// #2000
   834c8:	9400400e 	bl	93500 <CTimer::SimpleusDelay(unsigned int)>
   834cc:	52800000 	mov	w0, #0x0                   	// #0
   834d0:	a9415bf5 	ldp	x21, x22, [sp, #16]
   834d4:	f94013fe 	ldr	x30, [sp, #32]
   834d8:	a8c353f3 	ldp	x19, x20, [sp], #48
   834dc:	d65f03c0 	ret
   834e0:	f00000aa 	adrp	x10, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   834e4:	9114814b 	add	x11, x10, #0x520
   834e8:	52800080 	mov	w0, #0x4                   	// #4
   834ec:	2a0f03e2 	mov	w2, w15
   834f0:	910b6161 	add	x1, x11, #0x2d8
   834f4:	940005cf 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   834f8:	2a1503e0 	mov	w0, w21
   834fc:	17fffff5 	b	834d0 <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)+0xc0>

0000000000083500 <CEMMCDevice::ResetCmd()>:
   83500:	d2800586 	mov	x6, #0x2c                  	// #44
   83504:	f2bfc686 	movk	x6, #0xfe34, lsl #16
   83508:	f81f0ffe 	str	x30, [sp, #-16]!
   8350c:	b94000c5 	ldr	w5, [x6]
   83510:	52a04002 	mov	w2, #0x2000000             	// #33554432
   83514:	52884804 	mov	w4, #0x4240                	// #16960
   83518:	72a001e4 	movk	w4, #0xf, lsl #16
   8351c:	52800581 	mov	w1, #0x2c                  	// #44
   83520:	72bfc681 	movk	w1, #0xfe34, lsl #16
   83524:	52800003 	mov	w3, #0x0                   	// #0
   83528:	2a0200a7 	orr	w7, w5, w2
   8352c:	b90000c7 	str	w7, [x6]
   83530:	94000590 	bl	84b70 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)>
   83534:	37f80080 	tbnz	w0, #31, 83544 <CEMMCDevice::ResetCmd()+0x44>
   83538:	52800000 	mov	w0, #0x0                   	// #0
   8353c:	f84107fe 	ldr	x30, [sp], #16
   83540:	d65f03c0 	ret
   83544:	f00000a1 	adrp	x1, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   83548:	91148020 	add	x0, x1, #0x520
   8354c:	910c4001 	add	x1, x0, #0x310
   83550:	52800020 	mov	w0, #0x1                   	// #1
   83554:	940005b7 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   83558:	12800000 	mov	w0, #0xffffffff            	// #-1
   8355c:	17fffff8 	b	8353c <CEMMCDevice::ResetCmd()+0x3c>

0000000000083560 <CEMMCDevice::ResetDat()>:
   83560:	d2800586 	mov	x6, #0x2c                  	// #44
   83564:	f2bfc686 	movk	x6, #0xfe34, lsl #16
   83568:	f81f0ffe 	str	x30, [sp, #-16]!
   8356c:	b94000c5 	ldr	w5, [x6]
   83570:	52a08002 	mov	w2, #0x4000000             	// #67108864
   83574:	52884804 	mov	w4, #0x4240                	// #16960
   83578:	72a001e4 	movk	w4, #0xf, lsl #16
   8357c:	52800581 	mov	w1, #0x2c                  	// #44
   83580:	72bfc681 	movk	w1, #0xfe34, lsl #16
   83584:	52800003 	mov	w3, #0x0                   	// #0
   83588:	2a0200a7 	orr	w7, w5, w2
   8358c:	b90000c7 	str	w7, [x6]
   83590:	94000578 	bl	84b70 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)>
   83594:	37f80080 	tbnz	w0, #31, 835a4 <CEMMCDevice::ResetDat()+0x44>
   83598:	52800000 	mov	w0, #0x0                   	// #0
   8359c:	f84107fe 	ldr	x30, [sp], #16
   835a0:	d65f03c0 	ret
   835a4:	f00000a1 	adrp	x1, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   835a8:	91148020 	add	x0, x1, #0x520
   835ac:	910cc001 	add	x1, x0, #0x330
   835b0:	52800020 	mov	w0, #0x1                   	// #1
   835b4:	9400059f 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   835b8:	12800000 	mov	w0, #0xffffffff            	// #-1
   835bc:	17fffff8 	b	8359c <CEMMCDevice::ResetDat()+0x3c>

00000000000835c0 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)>:
   835c0:	a9ba53f3 	stp	x19, x20, [sp, #-96]!
   835c4:	2a0103f4 	mov	w20, w1
   835c8:	529fffe1 	mov	w1, #0xffff                	// #65535
   835cc:	aa0003f3 	mov	x19, x0
   835d0:	b9440005 	ldr	w5, [x0, #1024]
   835d4:	f9002bfe 	str	x30, [sp, #80]
   835d8:	b903dc14 	str	w20, [x0, #988]
   835dc:	b903e41f 	str	wzr, [x0, #996]
   835e0:	6b0100bf 	cmp	w5, w1
   835e4:	540008ec 	b.gt	83700 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x140>
   835e8:	f942040a 	ldr	x10, [x0, #1032]
   835ec:	d2800089 	mov	x9, #0x4                   	// #4
   835f0:	f2bfc689 	movk	x9, #0xfe34, lsl #16
   835f4:	fd002fe8 	str	d8, [sp, #88]
   835f8:	2a0203e6 	mov	w6, w2
   835fc:	d2800108 	mov	x8, #0x8                   	// #8
   83600:	f2bfc688 	movk	x8, #0xfe34, lsl #16
   83604:	1e270068 	fmov	s8, w3
   83608:	d2800187 	mov	x7, #0xc                   	// #12
   8360c:	f2bfc687 	movk	x7, #0xfe34, lsl #16
   83610:	2a0303e4 	mov	w4, w3
   83614:	52900022 	mov	w2, #0x8001                	// #32769
   83618:	52800023 	mov	w3, #0x1                   	// #1
   8361c:	2a05414b 	orr	w11, w10, w5, lsl #16
   83620:	52800601 	mov	w1, #0x30                  	// #48
   83624:	72bfc681 	movk	w1, #0xfe34, lsl #16
   83628:	b900012b 	str	w11, [x9]
   8362c:	b9000106 	str	w6, [x8]
   83630:	b90000f4 	str	w20, [x7]
   83634:	9400054f 	bl	84b70 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)>
   83638:	d2800603 	mov	x3, #0x30                  	// #48
   8363c:	f2bfc683 	movk	x3, #0xfe34, lsl #16
   83640:	b9400060 	ldr	w0, [x3]
   83644:	129fffc2 	mov	w2, #0xffff0001            	// #-65535
   83648:	b9000062 	str	w2, [x3]
   8364c:	0a020004 	and	w4, w0, w2
   83650:	7100049f 	cmp	w4, #0x1
   83654:	54000481 	b.ne	836e4 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x124>  // b.any
   83658:	1210068c 	and	w12, w20, #0x30000
   8365c:	120b028d 	and	w13, w20, #0x200000
   83660:	7140819f 	cmp	w12, #0x20, lsl #12
   83664:	54001c80 	b.eq	839f4 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x434>  // b.none
   83668:	7140c19f 	cmp	w12, #0x30, lsl #12
   8366c:	54001c40 	b.eq	839f4 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x434>  // b.none
   83670:	7140419f 	cmp	w12, #0x10, lsl #12
   83674:	540005a0 	b.eq	83728 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x168>  // b.none
   83678:	3500078d 	cbnz	w13, 83768 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x1a8>
   8367c:	7140c19f 	cmp	w12, #0x30, lsl #12
   83680:	54000261 	b.ne	836cc <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x10c>  // b.any
   83684:	1e260104 	fmov	w4, s8
   83688:	52800601 	mov	w1, #0x30                  	// #48
   8368c:	72bfc681 	movk	w1, #0xfe34, lsl #16
   83690:	52800023 	mov	w3, #0x1                   	// #1
   83694:	52900042 	mov	w2, #0x8002                	// #32770
   83698:	aa1303e0 	mov	x0, x19
   8369c:	94000535 	bl	84b70 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)>
   836a0:	d2800601 	mov	x1, #0x30                  	// #48
   836a4:	f2bfc681 	movk	x1, #0xfe34, lsl #16
   836a8:	b9400034 	ldr	w20, [x1]
   836ac:	52800040 	mov	w0, #0x2                   	// #2
   836b0:	72bffde0 	movk	w0, #0xffef, lsl #16
   836b4:	129fffa5 	mov	w5, #0xffff0002            	// #-65534
   836b8:	b9000025 	str	w5, [x1]
   836bc:	0a000286 	and	w6, w20, w0
   836c0:	710008df 	cmp	w6, #0x2
   836c4:	54001c81 	b.ne	83a54 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x494>  // b.any
   836c8:	b9000025 	str	w5, [x1]
   836cc:	5280003e 	mov	w30, #0x1                   	// #1
   836d0:	fd402fe8 	ldr	d8, [sp, #88]
   836d4:	b903e67e 	str	w30, [x19, #996]
   836d8:	f9402bfe 	ldr	x30, [sp, #80]
   836dc:	a8c653f3 	ldp	x19, x20, [sp], #96
   836e0:	d65f03c0 	ret
   836e4:	12103c0b 	and	w11, w0, #0xffff0000
   836e8:	fd402fe8 	ldr	d8, [sp, #88]
   836ec:	b903ca60 	str	w0, [x19, #968]
   836f0:	b903ce6b 	str	w11, [x19, #972]
   836f4:	f9402bfe 	ldr	x30, [sp, #80]
   836f8:	a8c653f3 	ldp	x19, x20, [sp], #96
   836fc:	d65f03c0 	ret
   83700:	f00000a2 	adrp	x2, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   83704:	91148043 	add	x3, x2, #0x520
   83708:	910d4061 	add	x1, x3, #0x350
   8370c:	2a0503e2 	mov	w2, w5
   83710:	52800080 	mov	w0, #0x4                   	// #4
   83714:	94000547 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   83718:	b903e67f 	str	wzr, [x19, #996]
   8371c:	f9402bfe 	ldr	x30, [sp, #80]
   83720:	a8c653f3 	ldp	x19, x20, [sp], #96
   83724:	d65f03c0 	ret
   83728:	d2800210 	mov	x16, #0x10                  	// #16
   8372c:	f2bfc690 	movk	x16, #0xfe34, lsl #16
   83730:	b940021e 	ldr	w30, [x16]
   83734:	d2800291 	mov	x17, #0x14                  	// #20
   83738:	f2bfc691 	movk	x17, #0xfe34, lsl #16
   8373c:	d2800312 	mov	x18, #0x18                  	// #24
   83740:	f2bfc692 	movk	x18, #0xfe34, lsl #16
   83744:	91003201 	add	x1, x16, #0xc
   83748:	b903ea7e 	str	w30, [x19, #1000]
   8374c:	b9400225 	ldr	w5, [x17]
   83750:	b903ee65 	str	w5, [x19, #1004]
   83754:	b9400246 	ldr	w6, [x18]
   83758:	b903f266 	str	w6, [x19, #1008]
   8375c:	b9400029 	ldr	w9, [x1]
   83760:	b903f669 	str	w9, [x19, #1012]
   83764:	34fffb4d 	cbz	w13, 836cc <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x10c>
   83768:	a9036bf9 	stp	x25, x26, [sp, #48]
   8376c:	f941fe79 	ldr	x25, [x19, #1016]
   83770:	a9015bf5 	stp	x21, x22, [sp, #16]
   83774:	721c0295 	ands	w21, w20, #0x10
   83778:	52800416 	mov	w22, #0x20                  	// #32
   8377c:	a90263f7 	stp	x23, x24, [sp, #32]
   83780:	1a9f17f8 	cset	w24, eq  // eq = none
   83784:	710002bf 	cmp	w21, #0x0
   83788:	52800217 	mov	w23, #0x10                  	// #16
   8378c:	1a9712d5 	csel	w21, w22, w23, ne  // ne = any
   83790:	f240073f 	tst	x25, #0x3
   83794:	a90473fb 	stp	x27, x28, [sp, #64]
   83798:	54001841 	b.ne	83aa0 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x4e0>  // b.any
   8379c:	321102b6 	orr	w22, w21, #0x8000
   837a0:	32103ebb 	orr	w27, w21, #0xffff0000
   837a4:	b944027c 	ldr	w28, [x19, #1024]
   837a8:	5280001a 	mov	w26, #0x0                   	// #0
   837ac:	7100039f 	cmp	w28, #0x0
   837b0:	54000a8d 	b.le	83900 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x340>
   837b4:	52800617 	mov	w23, #0x30                  	// #48
   837b8:	72bfc697 	movk	w23, #0xfe34, lsl #16
   837bc:	d280061c 	mov	x28, #0x30                  	// #48
   837c0:	f2bfc69c 	movk	x28, #0xfe34, lsl #16
   837c4:	d2800414 	mov	x20, #0x20                  	// #32
   837c8:	f2bfc694 	movk	x20, #0xfe34, lsl #16
   837cc:	1e260104 	fmov	w4, s8
   837d0:	52800023 	mov	w3, #0x1                   	// #1
   837d4:	2a1603e2 	mov	w2, w22
   837d8:	2a1703e1 	mov	w1, w23
   837dc:	aa1303e0 	mov	x0, x19
   837e0:	940004e4 	bl	84b70 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)>
   837e4:	b9400388 	ldr	w8, [x28]
   837e8:	b900039b 	str	w27, [x28]
   837ec:	0a080367 	and	w7, w27, w8
   837f0:	6b1500ff 	cmp	w7, w21
   837f4:	54001441 	b.ne	83a7c <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x4bc>  // b.any
   837f8:	f942066a 	ldr	x10, [x19, #1032]
   837fc:	f110015f 	cmp	x10, #0x400
   83800:	54001068 	b.hi	83a0c <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x44c>  // b.pmore
   83804:	f240055f 	tst	x10, #0x3
   83808:	540010e1 	b.ne	83a24 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x464>  // b.any
   8380c:	34000858 	cbz	w24, 83914 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x354>
   83810:	b400070a 	cbz	x10, 838f0 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x330>
   83814:	d100114f 	sub	x15, x10, #0x4
   83818:	aa1903e0 	mov	x0, x25
   8381c:	d342fdf0 	lsr	x16, x15, #2
   83820:	91000611 	add	x17, x16, #0x1
   83824:	f2400a32 	ands	x18, x17, #0x7
   83828:	54000380 	b.eq	83898 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x2d8>  // b.none
   8382c:	f100065f 	cmp	x18, #0x1
   83830:	540002a0 	b.eq	83884 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x2c4>  // b.none
   83834:	f1000a5f 	cmp	x18, #0x2
   83838:	54000220 	b.eq	8387c <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x2bc>  // b.none
   8383c:	f1000e5f 	cmp	x18, #0x3
   83840:	540001a0 	b.eq	83874 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x2b4>  // b.none
   83844:	f100125f 	cmp	x18, #0x4
   83848:	54000120 	b.eq	8386c <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x2ac>  // b.none
   8384c:	f100165f 	cmp	x18, #0x5
   83850:	540000a0 	b.eq	83864 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x2a4>  // b.none
   83854:	f1001a5f 	cmp	x18, #0x6
   83858:	54000f81 	b.ne	83a48 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x488>  // b.any
   8385c:	b8404401 	ldr	w1, [x0], #4
   83860:	b9000281 	str	w1, [x20]
   83864:	b8404405 	ldr	w5, [x0], #4
   83868:	b9000285 	str	w5, [x20]
   8386c:	b8404406 	ldr	w6, [x0], #4
   83870:	b9000286 	str	w6, [x20]
   83874:	b8404409 	ldr	w9, [x0], #4
   83878:	b9000289 	str	w9, [x20]
   8387c:	b8404408 	ldr	w8, [x0], #4
   83880:	b9000288 	str	w8, [x20]
   83884:	b8404407 	ldr	w7, [x0], #4
   83888:	cb00014b 	sub	x11, x10, x0
   8388c:	b9000287 	str	w7, [x20]
   83890:	ab0b033f 	cmn	x25, x11
   83894:	540002c0 	b.eq	838ec <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x32c>  // b.none
   83898:	aa0003e2 	mov	x2, x0
   8389c:	91008000 	add	x0, x0, #0x20
   838a0:	b8404443 	ldr	w3, [x2], #4
   838a4:	b9000283 	str	w3, [x20]
   838a8:	b9400044 	ldr	w4, [x2]
   838ac:	b9000284 	str	w4, [x20]
   838b0:	b85e800c 	ldur	w12, [x0, #-24]
   838b4:	b900028c 	str	w12, [x20]
   838b8:	b85ec00d 	ldur	w13, [x0, #-20]
   838bc:	b900028d 	str	w13, [x20]
   838c0:	b85f000e 	ldur	w14, [x0, #-16]
   838c4:	b900028e 	str	w14, [x20]
   838c8:	b85f400f 	ldur	w15, [x0, #-12]
   838cc:	b900028f 	str	w15, [x20]
   838d0:	b85f8010 	ldur	w16, [x0, #-8]
   838d4:	cb000151 	sub	x17, x10, x0
   838d8:	ab11033f 	cmn	x25, x17
   838dc:	b9000290 	str	w16, [x20]
   838e0:	b85fc012 	ldur	w18, [x0, #-4]
   838e4:	b9000292 	str	w18, [x20]
   838e8:	54fffd81 	b.ne	83898 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x2d8>  // b.any
   838ec:	aa0003f9 	mov	x25, x0
   838f0:	b944026a 	ldr	w10, [x19, #1024]
   838f4:	1100075a 	add	w26, w26, #0x1
   838f8:	6b1a015f 	cmp	w10, w26
   838fc:	54fff68c 	b.gt	837cc <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x20c>
   83900:	a9415bf5 	ldp	x21, x22, [sp, #16]
   83904:	a94263f7 	ldp	x23, x24, [sp, #32]
   83908:	a9436bf9 	ldp	x25, x26, [sp, #48]
   8390c:	a94473fb 	ldp	x27, x28, [sp, #64]
   83910:	17ffff5d 	b	83684 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0xc4>
   83914:	b4fffeea 	cbz	x10, 838f0 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x330>
   83918:	d1001144 	sub	x4, x10, #0x4
   8391c:	aa1903e0 	mov	x0, x25
   83920:	d342fc8c 	lsr	x12, x4, #2
   83924:	9100058d 	add	x13, x12, #0x1
   83928:	f24009ae 	ands	x14, x13, #0x7
   8392c:	54000380 	b.eq	8399c <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x3dc>  // b.none
   83930:	f10005df 	cmp	x14, #0x1
   83934:	540002a0 	b.eq	83988 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x3c8>  // b.none
   83938:	f10009df 	cmp	x14, #0x2
   8393c:	54000220 	b.eq	83980 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x3c0>  // b.none
   83940:	f1000ddf 	cmp	x14, #0x3
   83944:	540001a0 	b.eq	83978 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x3b8>  // b.none
   83948:	f10011df 	cmp	x14, #0x4
   8394c:	54000120 	b.eq	83970 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x3b0>  // b.none
   83950:	f10015df 	cmp	x14, #0x5
   83954:	540000a0 	b.eq	83968 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x3a8>  // b.none
   83958:	f10019df 	cmp	x14, #0x6
   8395c:	54000701 	b.ne	83a3c <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x47c>  // b.any
   83960:	b9400290 	ldr	w16, [x20]
   83964:	b8004410 	str	w16, [x0], #4
   83968:	b9400291 	ldr	w17, [x20]
   8396c:	b8004411 	str	w17, [x0], #4
   83970:	b9400292 	ldr	w18, [x20]
   83974:	b8004412 	str	w18, [x0], #4
   83978:	b940029e 	ldr	w30, [x20]
   8397c:	b800441e 	str	w30, [x0], #4
   83980:	b9400281 	ldr	w1, [x20]
   83984:	b8004401 	str	w1, [x0], #4
   83988:	b9400285 	ldr	w5, [x20]
   8398c:	b8004405 	str	w5, [x0], #4
   83990:	cb000146 	sub	x6, x10, x0
   83994:	ab06033f 	cmn	x25, x6
   83998:	54fffaa0 	b.eq	838ec <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x32c>  // b.none
   8399c:	b9400288 	ldr	w8, [x20]
   839a0:	aa0003e9 	mov	x9, x0
   839a4:	91008000 	add	x0, x0, #0x20
   839a8:	b8004528 	str	w8, [x9], #4
   839ac:	b9400287 	ldr	w7, [x20]
   839b0:	b9000127 	str	w7, [x9]
   839b4:	b940028b 	ldr	w11, [x20]
   839b8:	b81e800b 	stur	w11, [x0, #-24]
   839bc:	b9400283 	ldr	w3, [x20]
   839c0:	b81ec003 	stur	w3, [x0, #-20]
   839c4:	b9400282 	ldr	w2, [x20]
   839c8:	b81f0002 	stur	w2, [x0, #-16]
   839cc:	b9400284 	ldr	w4, [x20]
   839d0:	b81f4004 	stur	w4, [x0, #-12]
   839d4:	b940028c 	ldr	w12, [x20]
   839d8:	b81f800c 	stur	w12, [x0, #-8]
   839dc:	cb00014d 	sub	x13, x10, x0
   839e0:	b940028e 	ldr	w14, [x20]
   839e4:	ab0d033f 	cmn	x25, x13
   839e8:	b81fc00e 	stur	w14, [x0, #-4]
   839ec:	54fffd81 	b.ne	8399c <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x3dc>  // b.any
   839f0:	17ffffbf 	b	838ec <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x32c>
   839f4:	d280020e 	mov	x14, #0x10                  	// #16
   839f8:	f2bfc68e 	movk	x14, #0xfe34, lsl #16
   839fc:	b94001cf 	ldr	w15, [x14]
   83a00:	b903ea6f 	str	w15, [x19, #1000]
   83a04:	34ffe3cd 	cbz	w13, 8367c <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0xbc>
   83a08:	17ffff58 	b	83768 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x1a8>
   83a0c:	f00000b3 	adrp	x19, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   83a10:	9114826b 	add	x11, x19, #0x520
   83a14:	9108e161 	add	x1, x11, #0x238
   83a18:	910e6160 	add	x0, x11, #0x398
   83a1c:	52807e62 	mov	w2, #0x3f3                 	// #1011
   83a20:	94001654 	bl	89370 <assertion_failed>
   83a24:	f00000a3 	adrp	x3, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   83a28:	91148062 	add	x2, x3, #0x520
   83a2c:	9108e041 	add	x1, x2, #0x238
   83a30:	910ec040 	add	x0, x2, #0x3b0
   83a34:	52807ea2 	mov	w2, #0x3f5                 	// #1013
   83a38:	9400164e 	bl	89370 <assertion_failed>
   83a3c:	b940028f 	ldr	w15, [x20]
   83a40:	b800440f 	str	w15, [x0], #4
   83a44:	17ffffc7 	b	83960 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x3a0>
   83a48:	b840441e 	ldr	w30, [x0], #4
   83a4c:	b900029e 	str	w30, [x20]
   83a50:	17ffff83 	b	8385c <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x29c>
   83a54:	f00000a9 	adrp	x9, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   83a58:	91148128 	add	x8, x9, #0x520
   83a5c:	910f2101 	add	x1, x8, #0x3c8
   83a60:	52800040 	mov	w0, #0x2                   	// #2
   83a64:	94000473 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   83a68:	12103e87 	and	w7, w20, #0xffff0000
   83a6c:	fd402fe8 	ldr	d8, [sp, #88]
   83a70:	b903ca74 	str	w20, [x19, #968]
   83a74:	b903ce67 	str	w7, [x19, #972]
   83a78:	17ffff1f 	b	836f4 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x134>
   83a7c:	12103d14 	and	w20, w8, #0xffff0000
   83a80:	a9415bf5 	ldp	x21, x22, [sp, #16]
   83a84:	a94263f7 	ldp	x23, x24, [sp, #32]
   83a88:	a9436bf9 	ldp	x25, x26, [sp, #48]
   83a8c:	a94473fb 	ldp	x27, x28, [sp, #64]
   83a90:	fd402fe8 	ldr	d8, [sp, #88]
   83a94:	b903ca68 	str	w8, [x19, #968]
   83a98:	b903ce74 	str	w20, [x19, #972]
   83a9c:	17ffff16 	b	836f4 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x134>
   83aa0:	f00000b9 	adrp	x25, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   83aa4:	9114833a 	add	x26, x25, #0x520
   83aa8:	9108e341 	add	x1, x26, #0x238
   83aac:	910de340 	add	x0, x26, #0x378
   83ab0:	52807bc2 	mov	w2, #0x3de                 	// #990
   83ab4:	9400162f 	bl	89370 <assertion_failed>
   83ab8:	d503201f 	nop
   83abc:	d503201f 	nop

0000000000083ac0 <CEMMCDevice::HandleCardInterrupt()>:
   83ac0:	b943c402 	ldr	w2, [x0, #964]
   83ac4:	3140405f 	cmn	w2, #0x10, lsl #12
   83ac8:	54000041 	b.ne	83ad0 <CEMMCDevice::HandleCardInterrupt()+0x10>  // b.any
   83acc:	d65f03c0 	ret
   83ad0:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   83ad4:	53103c42 	lsl	w2, w2, #16
   83ad8:	52942403 	mov	w3, #0xa120                	// #41248
   83adc:	72a000e3 	movk	w3, #0x7, lsl #16
   83ae0:	52a1a141 	mov	w1, #0xd0a0000             	// #218759168
   83ae4:	aa0003f3 	mov	x19, x0
   83ae8:	97fffeb6 	bl	835c0 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)>
   83aec:	b943e660 	ldr	w0, [x19, #996]
   83af0:	34000060 	cbz	w0, 83afc <CEMMCDevice::HandleCardInterrupt()+0x3c>
   83af4:	a8c17bf3 	ldp	x19, x30, [sp], #16
   83af8:	d65f03c0 	ret
   83afc:	f00000a1 	adrp	x1, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   83b00:	91148023 	add	x3, x1, #0x520
   83b04:	a8c17bf3 	ldp	x19, x30, [sp], #16
   83b08:	91102061 	add	x1, x3, #0x408
   83b0c:	52800040 	mov	w0, #0x2                   	// #2
   83b10:	14000448 	b	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   83b14:	d503201f 	nop
   83b18:	d503201f 	nop
   83b1c:	d503201f 	nop

0000000000083b20 <CEMMCDevice::HandleInterrupts()>:
   83b20:	d2800601 	mov	x1, #0x30                  	// #48
   83b24:	f2bfc681 	movk	x1, #0xfe34, lsl #16
   83b28:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   83b2c:	b9400033 	ldr	w19, [x1]
   83b30:	a9015bf5 	stp	x21, x22, [sp, #16]
   83b34:	aa0003f6 	mov	x22, x0
   83b38:	f90013fe 	str	x30, [sp, #32]
   83b3c:	12000e75 	and	w21, w19, #0xf
   83b40:	37200333 	tbnz	w19, #4, 83ba4 <CEMMCDevice::HandleInterrupts()+0x84>
   83b44:	37280373 	tbnz	w19, #5, 83bb0 <CEMMCDevice::HandleInterrupts()+0x90>
   83b48:	f27a027f 	tst	x19, #0x40
   83b4c:	321a02b4 	orr	w20, w21, #0x40
   83b50:	1a951295 	csel	w21, w20, w21, ne  // ne = any
   83b54:	37380193 	tbnz	w19, #7, 83b84 <CEMMCDevice::HandleInterrupts()+0x64>
   83b58:	374001f3 	tbnz	w19, #8, 83b94 <CEMMCDevice::HandleInterrupts()+0x74>
   83b5c:	d2800602 	mov	x2, #0x30                  	// #48
   83b60:	f2bfc682 	movk	x2, #0xfe34, lsl #16
   83b64:	f271027f 	tst	x19, #0x8000
   83b68:	32103ea3 	orr	w3, w21, #0xffff0000
   83b6c:	1a951064 	csel	w4, w3, w21, ne  // ne = any
   83b70:	a9415bf5 	ldp	x21, x22, [sp, #16]
   83b74:	f94013fe 	ldr	x30, [sp, #32]
   83b78:	b9000044 	str	w4, [x2]
   83b7c:	a8c353f3 	ldp	x19, x20, [sp], #48
   83b80:	d65f03c0 	ret
   83b84:	52800020 	mov	w0, #0x1                   	// #1
   83b88:	321902b5 	orr	w21, w21, #0x80
   83b8c:	b90412c0 	str	w0, [x22, #1040]
   83b90:	3647fe73 	tbz	w19, #8, 83b5c <CEMMCDevice::HandleInterrupts()+0x3c>
   83b94:	aa1603e0 	mov	x0, x22
   83b98:	321802b5 	orr	w21, w21, #0x100
   83b9c:	97ffffc9 	bl	83ac0 <CEMMCDevice::HandleCardInterrupt()>
   83ba0:	17ffffef 	b	83b5c <CEMMCDevice::HandleInterrupts()+0x3c>
   83ba4:	321c02b5 	orr	w21, w21, #0x10
   83ba8:	97fffe6e 	bl	83560 <CEMMCDevice::ResetDat()>
   83bac:	362ffcf3 	tbz	w19, #5, 83b48 <CEMMCDevice::HandleInterrupts()+0x28>
   83bb0:	aa1603e0 	mov	x0, x22
   83bb4:	321b02b5 	orr	w21, w21, #0x20
   83bb8:	97fffe6a 	bl	83560 <CEMMCDevice::ResetDat()>
   83bbc:	17ffffe3 	b	83b48 <CEMMCDevice::HandleInterrupts()+0x28>

0000000000083bc0 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>:
   83bc0:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   83bc4:	aa0003f3 	mov	x19, x0
   83bc8:	2a0103f4 	mov	w20, w1
   83bcc:	a9015bf5 	stp	x21, x22, [sp, #16]
   83bd0:	2a0203f6 	mov	w22, w2
   83bd4:	2a0303f5 	mov	w21, w3
   83bd8:	f90017fe 	str	x30, [sp, #40]
   83bdc:	97ffffd1 	bl	83b20 <CEMMCDevice::HandleInterrupts()>
   83be0:	b9441260 	ldr	w0, [x19, #1040]
   83be4:	350005e0 	cbnz	w0, 83ca0 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)+0xe0>
   83be8:	37f80274 	tbnz	w20, #31, 83c34 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)+0x74>
   83bec:	f00000a1 	adrp	x1, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   83bf0:	91148023 	add	x3, x1, #0x520
   83bf4:	9100e062 	add	x2, x3, #0x38
   83bf8:	b8745841 	ldr	w1, [x2, w20, uxtw #2]
   83bfc:	3100043f 	cmn	w1, #0x1
   83c00:	54000480 	b.eq	83c90 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)+0xd0>  // b.none
   83c04:	2a1503e3 	mov	w3, w21
   83c08:	2a1603e2 	mov	w2, w22
   83c0c:	b903e274 	str	w20, [x19, #992]
   83c10:	aa1303e0 	mov	x0, x19
   83c14:	97fffe6b 	bl	835c0 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)>
   83c18:	b943e66b 	ldr	w11, [x19, #996]
   83c1c:	7100017f 	cmp	w11, #0x0
   83c20:	1a9f07e0 	cset	w0, ne  // ne = any
   83c24:	a9415bf5 	ldp	x21, x22, [sp, #16]
   83c28:	f94017fe 	ldr	x30, [sp, #40]
   83c2c:	a8c353f3 	ldp	x19, x20, [sp], #48
   83c30:	d65f03c0 	ret
   83c34:	12001e94 	and	w20, w20, #0xff
   83c38:	f00000a4 	adrp	x4, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   83c3c:	91148085 	add	x5, x4, #0x520
   83c40:	2a1403e6 	mov	w6, w20
   83c44:	f90013f7 	str	x23, [sp, #32]
   83c48:	9104e0a7 	add	x7, x5, #0x138
   83c4c:	b86678f7 	ldr	w23, [x7, x6, lsl #2]
   83c50:	310006ff 	cmn	w23, #0x1
   83c54:	54000460 	b.eq	83ce0 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)+0x120>  // b.none
   83c58:	b943c669 	ldr	w9, [x19, #964]
   83c5c:	528006e8 	mov	w8, #0x37                  	// #55
   83c60:	2a1503e3 	mov	w3, w21
   83c64:	52a6e141 	mov	w1, #0x370a0000            	// #923402240
   83c68:	aa1303e0 	mov	x0, x19
   83c6c:	b903e268 	str	w8, [x19, #992]
   83c70:	3140413f 	cmn	w9, #0x10, lsl #12
   83c74:	53103d2a 	lsl	w10, w9, #16
   83c78:	1a9f1142 	csel	w2, w10, wzr, ne  // ne = any
   83c7c:	97fffe51 	bl	835c0 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)>
   83c80:	b943e66b 	ldr	w11, [x19, #996]
   83c84:	350001ab 	cbnz	w11, 83cb8 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)+0xf8>
   83c88:	f94013f7 	ldr	x23, [sp, #32]
   83c8c:	17ffffe4 	b	83c1c <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)+0x5c>
   83c90:	2a1403e2 	mov	w2, w20
   83c94:	91110061 	add	x1, x3, #0x440
   83c98:	52800020 	mov	w0, #0x1                   	// #1
   83c9c:	940003e5 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   83ca0:	52800000 	mov	w0, #0x0                   	// #0
   83ca4:	b903e67f 	str	wzr, [x19, #996]
   83ca8:	a9415bf5 	ldp	x21, x22, [sp, #16]
   83cac:	f94017fe 	ldr	x30, [sp, #40]
   83cb0:	a8c353f3 	ldp	x19, x20, [sp], #48
   83cb4:	d65f03c0 	ret
   83cb8:	3201028c 	orr	w12, w20, #0x80000000
   83cbc:	2a1703e1 	mov	w1, w23
   83cc0:	2a1503e3 	mov	w3, w21
   83cc4:	2a1603e2 	mov	w2, w22
   83cc8:	aa1303e0 	mov	x0, x19
   83ccc:	b903e26c 	str	w12, [x19, #992]
   83cd0:	97fffe3c 	bl	835c0 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)>
   83cd4:	b943e66b 	ldr	w11, [x19, #996]
   83cd8:	f94013f7 	ldr	x23, [sp, #32]
   83cdc:	17ffffd0 	b	83c1c <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)+0x5c>
   83ce0:	52800020 	mov	w0, #0x1                   	// #1
   83ce4:	2a1403e2 	mov	w2, w20
   83ce8:	9110a0a1 	add	x1, x5, #0x428
   83cec:	940003d1 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   83cf0:	52800000 	mov	w0, #0x0                   	// #0
   83cf4:	f94013f7 	ldr	x23, [sp, #32]
   83cf8:	b903e67f 	str	wzr, [x19, #996]
   83cfc:	17ffffca 	b	83c24 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)+0x64>

0000000000083d00 <CEMMCDevice::CardReset()>:
   83d00:	d2800586 	mov	x6, #0x2c                  	// #44
   83d04:	f2bfc686 	movk	x6, #0xfe34, lsl #16
   83d08:	a9b953f3 	stp	x19, x20, [sp, #-112]!
   83d0c:	128000a7 	mov	w7, #0xfffffffa            	// #-6
   83d10:	52884804 	mov	w4, #0x4240                	// #16960
   83d14:	72a001e4 	movk	w4, #0xf, lsl #16
   83d18:	52800581 	mov	w1, #0x2c                  	// #44
   83d1c:	72bfc681 	movk	w1, #0xfe34, lsl #16
   83d20:	b94000c5 	ldr	w5, [x6]
   83d24:	52800003 	mov	w3, #0x0                   	// #0
   83d28:	f90017fe 	str	x30, [sp, #40]
   83d2c:	52a0e002 	mov	w2, #0x7000000             	// #117440512
   83d30:	aa0003f3 	mov	x19, x0
   83d34:	0a0700a8 	and	w8, w5, w7
   83d38:	32080109 	orr	w9, w8, #0x1000000
   83d3c:	b90000c9 	str	w9, [x6]
   83d40:	9400038c 	bl	84b70 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)>
   83d44:	37f84420 	tbnz	w0, #31, 845c8 <CEMMCDevice::CardReset()+0x8c8>
   83d48:	d2800501 	mov	x1, #0x28                  	// #40
   83d4c:	f2bfc681 	movk	x1, #0xfe34, lsl #16
   83d50:	a9015bf5 	stp	x21, x22, [sp, #16]
   83d54:	b9400020 	ldr	w0, [x1]
   83d58:	f9401262 	ldr	x2, [x19, #32]
   83d5c:	f90013f7 	str	x23, [sp, #32]
   83d60:	32180c03 	orr	w3, w0, #0xf00
   83d64:	b9000023 	str	w3, [x1]
   83d68:	b4001542 	cbz	x2, 84010 <CEMMCDevice::CardReset()+0x310>
   83d6c:	5280fa00 	mov	w0, #0x7d0                 	// #2000
   83d70:	94003de4 	bl	93500 <CTimer::SimpleusDelay(unsigned int)>
   83d74:	52942404 	mov	w4, #0xa120                	// #41248
   83d78:	72a000e4 	movk	w4, #0x7, lsl #16
   83d7c:	52800481 	mov	w1, #0x24                  	// #36
   83d80:	72bfc681 	movk	w1, #0xfe34, lsl #16
   83d84:	52800023 	mov	w3, #0x1                   	// #1
   83d88:	52a00022 	mov	w2, #0x10000               	// #65536
   83d8c:	aa1303e0 	mov	x0, x19
   83d90:	94000378 	bl	84b70 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)>
   83d94:	d2800484 	mov	x4, #0x24                  	// #36
   83d98:	f2bfc684 	movk	x4, #0xfe34, lsl #16
   83d9c:	b940008a 	ldr	w10, [x4]
   83da0:	3680376a 	tbz	w10, #16, 8448c <CEMMCDevice::CardReset()+0x78c>
   83da4:	d280078b 	mov	x11, #0x3c                  	// #60
   83da8:	f2bfc68b 	movk	x11, #0xfe34, lsl #16
   83dac:	aa1303e0 	mov	x0, x19
   83db0:	b900017f 	str	wzr, [x11]
   83db4:	97fffd2f 	bl	83270 <CEMMCDevice::GetBaseClock()>
   83db8:	2a0003f5 	mov	w21, w0
   83dbc:	34001480 	cbz	w0, 8404c <CEMMCDevice::CardReset()+0x34c>
   83dc0:	d2800596 	mov	x22, #0x2c                  	// #44
   83dc4:	f2bfc696 	movk	x22, #0xfe34, lsl #16
   83dc8:	b94002cf 	ldr	w15, [x22]
   83dcc:	52835002 	mov	w2, #0x1a80                	// #6784
   83dd0:	72a000c2 	movk	w2, #0x6, lsl #16
   83dd4:	2a1503e1 	mov	w1, w21
   83dd8:	aa1303e0 	mov	x0, x19
   83ddc:	97fffd49 	bl	83300 <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)>
   83de0:	3100041f 	cmn	w0, #0x1
   83de4:	2a0003f4 	mov	w20, w0
   83de8:	2a0f000e 	orr	w14, w0, w15
   83dec:	54003c20 	b.eq	84570 <CEMMCDevice::CardReset()+0x870>  // b.none
   83df0:	120c6dd0 	and	w16, w14, #0xfff0ffff
   83df4:	52800031 	mov	w17, #0x1                   	// #1
   83df8:	72a00171 	movk	w17, #0xb, lsl #16
   83dfc:	52884804 	mov	w4, #0x4240                	// #16960
   83e00:	72a001e4 	movk	w4, #0xf, lsl #16
   83e04:	2a110212 	orr	w18, w16, w17
   83e08:	52800581 	mov	w1, #0x2c                  	// #44
   83e0c:	72bfc681 	movk	w1, #0xfe34, lsl #16
   83e10:	52800023 	mov	w3, #0x1                   	// #1
   83e14:	52800042 	mov	w2, #0x2                   	// #2
   83e18:	b90002d2 	str	w18, [x22]
   83e1c:	aa1303e0 	mov	x0, x19
   83e20:	94000354 	bl	84b70 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)>
   83e24:	37f83e00 	tbnz	w0, #31, 845e4 <CEMMCDevice::CardReset()+0x8e4>
   83e28:	f9401277 	ldr	x23, [x19, #32]
   83e2c:	b4000f37 	cbz	x23, 84010 <CEMMCDevice::CardReset()+0x310>
   83e30:	5280fa00 	mov	w0, #0x7d0                 	// #2000
   83e34:	94003db3 	bl	93500 <CTimer::SimpleusDelay(unsigned int)>
   83e38:	b94002c6 	ldr	w6, [x22]
   83e3c:	f9401265 	ldr	x5, [x19, #32]
   83e40:	321e00c7 	orr	w7, w6, #0x4
   83e44:	b90002c7 	str	w7, [x22]
   83e48:	b4000e45 	cbz	x5, 84010 <CEMMCDevice::CardReset()+0x310>
   83e4c:	5280fa00 	mov	w0, #0x7d0                 	// #2000
   83e50:	12800014 	mov	w20, #0xffffffff            	// #-1
   83e54:	94003dab 	bl	93500 <CTimer::SimpleusDelay(unsigned int)>
   83e58:	d2800708 	mov	x8, #0x38                  	// #56
   83e5c:	f2bfc688 	movk	x8, #0xfe34, lsl #16
   83e60:	f9401260 	ldr	x0, [x19, #32]
   83e64:	d2800609 	mov	x9, #0x30                  	// #48
   83e68:	f2bfc689 	movk	x9, #0xfe34, lsl #16
   83e6c:	d2800681 	mov	x1, #0x34                  	// #52
   83e70:	f2bfc681 	movk	x1, #0xfe34, lsl #16
   83e74:	b900011f 	str	wzr, [x8]
   83e78:	12802003 	mov	w3, #0xfffffeff            	// #-257
   83e7c:	b9000134 	str	w20, [x9]
   83e80:	b9000023 	str	w3, [x1]
   83e84:	b4000c60 	cbz	x0, 84010 <CEMMCDevice::CardReset()+0x310>
   83e88:	5280fa00 	mov	w0, #0x7d0                 	// #2000
   83e8c:	94003d9d 	bl	93500 <CTimer::SimpleusDelay(unsigned int)>
   83e90:	9108026a 	add	x10, x19, #0x200
   83e94:	d2ffffe4 	mov	x4, #0xffff000000000000    	// #-281474976710656
   83e98:	b903a67f 	str	wzr, [x19, #932]
   83e9c:	9108026b 	add	x11, x19, #0x200
   83ea0:	52942403 	mov	w3, #0xa120                	// #41248
   83ea4:	72a000e3 	movk	w3, #0x7, lsl #16
   83ea8:	a91afd5f 	stp	xzr, xzr, [x10, #424]
   83eac:	52800002 	mov	w2, #0x0                   	// #0
   83eb0:	52800001 	mov	w1, #0x0                   	// #0
   83eb4:	aa1303e0 	mov	x0, x19
   83eb8:	a91b915f 	stp	xzr, x4, [x10, #440]
   83ebc:	f901e67f 	str	xzr, [x19, #968]
   83ec0:	a91dfd7f 	stp	xzr, xzr, [x11, #472]
   83ec4:	a91efd7f 	stp	xzr, xzr, [x11, #488]
   83ec8:	f901fe7f 	str	xzr, [x19, #1016]
   83ecc:	b904027f 	str	wzr, [x19, #1024]
   83ed0:	f902067f 	str	xzr, [x19, #1032]
   83ed4:	b904127f 	str	wzr, [x19, #1040]
   83ed8:	b9041675 	str	w21, [x19, #1044]
   83edc:	97ffff39 	bl	83bc0 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   83ee0:	72001c1f 	tst	w0, #0xff
   83ee4:	540031a0 	b.eq	84518 <CEMMCDevice::CardReset()+0x818>  // b.none
   83ee8:	52803542 	mov	w2, #0x1aa                 	// #426
   83eec:	52942403 	mov	w3, #0xa120                	// #41248
   83ef0:	72a000e3 	movk	w3, #0x7, lsl #16
   83ef4:	52800101 	mov	w1, #0x8                   	// #8
   83ef8:	aa1303e0 	mov	x0, x19
   83efc:	97ffff31 	bl	83bc0 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   83f00:	b943e662 	ldr	w2, [x19, #996]
   83f04:	34000882 	cbz	w2, 84014 <CEMMCDevice::CardReset()+0x314>
   83f08:	b943ea7e 	ldr	w30, [x19, #1000]
   83f0c:	52800037 	mov	w23, #0x1                   	// #1
   83f10:	12002fcc 	and	w12, w30, #0xfff
   83f14:	7106a99f 	cmp	w12, #0x1aa
   83f18:	540033e1 	b.ne	84594 <CEMMCDevice::CardReset()+0x894>  // b.any
   83f1c:	5284e203 	mov	w3, #0x2710                	// #10000
   83f20:	52800002 	mov	w2, #0x0                   	// #0
   83f24:	528000a1 	mov	w1, #0x5                   	// #5
   83f28:	aa1303e0 	mov	x0, x19
   83f2c:	97ffff25 	bl	83bc0 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   83f30:	b943e671 	ldr	w17, [x19, #996]
   83f34:	340001b1 	cbz	w17, 83f68 <CEMMCDevice::CardReset()+0x268>
   83f38:	f00000ae 	adrp	x14, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   83f3c:	911481d4 	add	x20, x14, #0x520
   83f40:	91164281 	add	x1, x20, #0x590
   83f44:	d503201f 	nop
   83f48:	52800020 	mov	w0, #0x1                   	// #1
   83f4c:	94000339 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   83f50:	a9415bf5 	ldp	x21, x22, [sp, #16]
   83f54:	12800000 	mov	w0, #0xffffffff            	// #-1
   83f58:	f94013f7 	ldr	x23, [sp, #32]
   83f5c:	f94017fe 	ldr	x30, [sp, #40]
   83f60:	a8c753f3 	ldp	x19, x20, [sp], #112
   83f64:	d65f03c0 	ret
   83f68:	b943ce72 	ldr	w18, [x19, #972]
   83f6c:	34000152 	cbz	w18, 83f94 <CEMMCDevice::CardReset()+0x294>
   83f70:	3687fe52 	tbz	w18, #16, 83f38 <CEMMCDevice::CardReset()+0x238>
   83f74:	aa1303e0 	mov	x0, x19
   83f78:	97fffd62 	bl	83500 <CEMMCDevice::ResetCmd()>
   83f7c:	3100041f 	cmn	w0, #0x1
   83f80:	54fffe80 	b.eq	83f50 <CEMMCDevice::CardReset()+0x250>  // b.none
   83f84:	d2800606 	mov	x6, #0x30                  	// #48
   83f88:	f2bfc686 	movk	x6, #0xfe34, lsl #16
   83f8c:	52a00027 	mov	w7, #0x10000               	// #65536
   83f90:	b90000c7 	str	w7, [x6]
   83f94:	52942403 	mov	w3, #0xa120                	// #41248
   83f98:	72a000e3 	movk	w3, #0x7, lsl #16
   83f9c:	52800521 	mov	w1, #0x29                  	// #41
   83fa0:	72b00001 	movk	w1, #0x8000, lsl #16
   83fa4:	52800002 	mov	w2, #0x0                   	// #0
   83fa8:	aa1303e0 	mov	x0, x19
   83fac:	97ffff05 	bl	83bc0 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   83fb0:	72001c1f 	tst	w0, #0xff
   83fb4:	540032c0 	b.eq	8460c <CEMMCDevice::CardReset()+0x90c>  // b.none
   83fb8:	710002ff 	cmp	w23, #0x0
   83fbc:	52aa0005 	mov	w5, #0x50000000            	// #1342177280
   83fc0:	1a9f10a8 	csel	w8, w5, wzr, ne  // ne = any
   83fc4:	52942414 	mov	w20, #0xa120                	// #41248
   83fc8:	72a000f4 	movk	w20, #0x7, lsl #16
   83fcc:	52800537 	mov	w23, #0x29                  	// #41
   83fd0:	72b00017 	movk	w23, #0x8000, lsl #16
   83fd4:	32112116 	orr	w22, w8, #0xff8000
   83fd8:	14000003 	b	83fe4 <CEMMCDevice::CardReset()+0x2e4>
   83fdc:	2a1403e0 	mov	w0, w20
   83fe0:	94003d48 	bl	93500 <CTimer::SimpleusDelay(unsigned int)>
   83fe4:	2a1403e3 	mov	w3, w20
   83fe8:	2a1603e2 	mov	w2, w22
   83fec:	2a1703e1 	mov	w1, w23
   83ff0:	aa1303e0 	mov	x0, x19
   83ff4:	97fffef3 	bl	83bc0 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   83ff8:	72001c1f 	tst	w0, #0xff
   83ffc:	540004c0 	b.eq	84094 <CEMMCDevice::CardReset()+0x394>  // b.none
   84000:	b943ea69 	ldr	w9, [x19, #1000]
   84004:	37f80509 	tbnz	w9, #31, 840a4 <CEMMCDevice::CardReset()+0x3a4>
   84008:	f9401261 	ldr	x1, [x19, #32]
   8400c:	b5fffe81 	cbnz	x1, 83fdc <CEMMCDevice::CardReset()+0x2dc>
   84010:	9400033c 	bl	84d00 <CEMMCDevice::usDelay(unsigned int) [clone .part.2]>
   84014:	b943ce76 	ldr	w22, [x19, #972]
   84018:	35000076 	cbnz	w22, 84024 <CEMMCDevice::CardReset()+0x324>
   8401c:	52800017 	mov	w23, #0x0                   	// #0
   84020:	17ffffbf 	b	83f1c <CEMMCDevice::CardReset()+0x21c>
   84024:	37800256 	tbnz	w22, #16, 8406c <CEMMCDevice::CardReset()+0x36c>
   84028:	d00000b3 	adrp	x19, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   8402c:	9114826f 	add	x15, x19, #0x520
   84030:	911541e1 	add	x1, x15, #0x550
   84034:	52800020 	mov	w0, #0x1                   	// #1
   84038:	940002fe 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   8403c:	2a1403e0 	mov	w0, w20
   84040:	a9415bf5 	ldp	x21, x22, [sp, #16]
   84044:	f94013f7 	ldr	x23, [sp, #32]
   84048:	17ffffc5 	b	83f5c <CEMMCDevice::CardReset()+0x25c>
   8404c:	d00000ac 	adrp	x12, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   84050:	9114818d 	add	x13, x12, #0x520
   84054:	9112c1a1 	add	x1, x13, #0x4b0
   84058:	52800040 	mov	w0, #0x2                   	// #2
   8405c:	529c2015 	mov	w21, #0xe100                	// #57600
   84060:	72a0beb5 	movk	w21, #0x5f5, lsl #16
   84064:	940002f3 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   84068:	17ffff56 	b	83dc0 <CEMMCDevice::CardReset()+0xc0>
   8406c:	aa1303e0 	mov	x0, x19
   84070:	97fffd24 	bl	83500 <CEMMCDevice::ResetCmd()>
   84074:	3100041f 	cmn	w0, #0x1
   84078:	54fff6c0 	b.eq	83f50 <CEMMCDevice::CardReset()+0x250>  // b.none
   8407c:	d280060e 	mov	x14, #0x30                  	// #48
   84080:	f2bfc68e 	movk	x14, #0xfe34, lsl #16
   84084:	52a00030 	mov	w16, #0x10000               	// #65536
   84088:	52800017 	mov	w23, #0x0                   	// #0
   8408c:	b90001d0 	str	w16, [x14]
   84090:	17ffffa3 	b	83f1c <CEMMCDevice::CardReset()+0x21c>
   84094:	d00000b6 	adrp	x22, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   84098:	911482cc 	add	x12, x22, #0x520
   8409c:	91176181 	add	x1, x12, #0x5d8
   840a0:	17ffffaa 	b	83f48 <CEMMCDevice::CardReset()+0x248>
   840a4:	d3485d24 	ubfx	x4, x9, #8, #16
   840a8:	d35e7923 	ubfx	x3, x9, #30, #1
   840ac:	528f0802 	mov	w2, #0x7840                	// #30784
   840b0:	72a02fa2 	movk	w2, #0x17d, lsl #16
   840b4:	2a1503e1 	mov	w1, w21
   840b8:	aa1303e0 	mov	x0, x19
   840bc:	b903b663 	str	w3, [x19, #948]
   840c0:	b903c264 	str	w4, [x19, #960]
   840c4:	97fffcd3 	bl	83410 <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)>
   840c8:	f9401260 	ldr	x0, [x19, #32]
   840cc:	b4fffa20 	cbz	x0, 84010 <CEMMCDevice::CardReset()+0x310>
   840d0:	52827100 	mov	w0, #0x1388                	// #5000
   840d4:	94003d0b 	bl	93500 <CTimer::SimpleusDelay(unsigned int)>
   840d8:	b943be6a 	ldr	w10, [x19, #956]
   840dc:	3400076a 	cbz	w10, 841c8 <CEMMCDevice::CardReset()+0x4c8>
   840e0:	52942403 	mov	w3, #0xa120                	// #41248
   840e4:	72a000e3 	movk	w3, #0x7, lsl #16
   840e8:	52800002 	mov	w2, #0x0                   	// #0
   840ec:	52800161 	mov	w1, #0xb                   	// #11
   840f0:	aa1303e0 	mov	x0, x19
   840f4:	97fffeb3 	bl	83bc0 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   840f8:	72001c1f 	tst	w0, #0xff
   840fc:	540014a0 	b.eq	84390 <CEMMCDevice::CardReset()+0x690>  // b.none
   84100:	d2800594 	mov	x20, #0x2c                  	// #44
   84104:	f2bfc694 	movk	x20, #0xfe34, lsl #16
   84108:	b940028b 	ldr	w11, [x20]
   8410c:	d2800497 	mov	x23, #0x24                  	// #36
   84110:	f2bfc697 	movk	x23, #0xfe34, lsl #16
   84114:	121d7962 	and	w2, w11, #0xfffffffb
   84118:	b9000282 	str	w2, [x20]
   8411c:	b94002fe 	ldr	w30, [x23]
   84120:	f26c0fdf 	tst	x30, #0xf00000
   84124:	54001a21 	b.ne	84468 <CEMMCDevice::CardReset()+0x768>  // b.any
   84128:	d2800516 	mov	x22, #0x28                  	// #40
   8412c:	f2bfc696 	movk	x22, #0xfe34, lsl #16
   84130:	f940126f 	ldr	x15, [x19, #32]
   84134:	b94002cc 	ldr	w12, [x22]
   84138:	3218018d 	orr	w13, w12, #0x100
   8413c:	b90002cd 	str	w13, [x22]
   84140:	b4fff68f 	cbz	x15, 84010 <CEMMCDevice::CardReset()+0x310>
   84144:	52827100 	mov	w0, #0x1388                	// #5000
   84148:	94003cee 	bl	93500 <CTimer::SimpleusDelay(unsigned int)>
   8414c:	b94002ce 	ldr	w14, [x22]
   84150:	36401bce 	tbz	w14, #8, 844c8 <CEMMCDevice::CardReset()+0x7c8>
   84154:	b9400290 	ldr	w16, [x20]
   84158:	f9401272 	ldr	x18, [x19, #32]
   8415c:	321e0211 	orr	w17, w16, #0x4
   84160:	b9000291 	str	w17, [x20]
   84164:	b4fff572 	cbz	x18, 84010 <CEMMCDevice::CardReset()+0x310>
   84168:	5284e200 	mov	w0, #0x2710                	// #10000
   8416c:	94003ce5 	bl	93500 <CTimer::SimpleusDelay(unsigned int)>
   84170:	b94002e6 	ldr	w6, [x23]
   84174:	d3545cc2 	ubfx	x2, x6, #20, #4
   84178:	71003c5f 	cmp	w2, #0xf
   8417c:	54000260 	b.eq	841c8 <CEMMCDevice::CardReset()+0x4c8>  // b.none
   84180:	d00000b2 	adrp	x18, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   84184:	91148240 	add	x0, x18, #0x520
   84188:	91198001 	add	x1, x0, #0x660
   8418c:	52800080 	mov	w0, #0x4                   	// #4
   84190:	940002a8 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   84194:	d503201f 	nop
   84198:	52800037 	mov	w23, #0x1                   	// #1
   8419c:	d280050b 	mov	x11, #0x28                  	// #40
   841a0:	f2bfc68b 	movk	x11, #0xfe34, lsl #16
   841a4:	aa1303e0 	mov	x0, x19
   841a8:	b903da77 	str	w23, [x19, #984]
   841ac:	b9400173 	ldr	w19, [x11]
   841b0:	12177a7e 	and	w30, w19, #0xfffffeff
   841b4:	b900017e 	str	w30, [x11]
   841b8:	97fffed2 	bl	83d00 <CEMMCDevice::CardReset()>
   841bc:	a9415bf5 	ldp	x21, x22, [sp, #16]
   841c0:	f94013f7 	ldr	x23, [sp, #32]
   841c4:	17ffff66 	b	83f5c <CEMMCDevice::CardReset()+0x25c>
   841c8:	52942403 	mov	w3, #0xa120                	// #41248
   841cc:	72a000e3 	movk	w3, #0x7, lsl #16
   841d0:	52800002 	mov	w2, #0x0                   	// #0
   841d4:	52800041 	mov	w1, #0x2                   	// #2
   841d8:	aa1303e0 	mov	x0, x19
   841dc:	97fffe79 	bl	83bc0 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   841e0:	72001c1f 	tst	w0, #0xff
   841e4:	54002300 	b.eq	84644 <CEMMCDevice::CardReset()+0x944>  // b.none
   841e8:	f941f665 	ldr	x5, [x19, #1000]
   841ec:	91100267 	add	x7, x19, #0x400
   841f0:	52942403 	mov	w3, #0xa120                	// #41248
   841f4:	72a000e3 	movk	w3, #0x7, lsl #16
   841f8:	52800002 	mov	w2, #0x0                   	// #0
   841fc:	52800061 	mov	w1, #0x3                   	// #3
   84200:	aa1303e0 	mov	x0, x19
   84204:	f81a40e5 	stur	x5, [x7, #-92]
   84208:	f941fa68 	ldr	x8, [x19, #1008]
   8420c:	f81ac0e8 	stur	x8, [x7, #-84]
   84210:	97fffe6c 	bl	83bc0 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   84214:	72001c1f 	tst	w0, #0xff
   84218:	540024a0 	b.eq	846ac <CEMMCDevice::CardReset()+0x9ac>  // b.none
   8421c:	b943ea69 	ldr	w9, [x19, #1000]
   84220:	53107d24 	lsr	w4, w9, #16
   84224:	d34e3923 	ubfx	x3, x9, #14, #1
   84228:	d34d3521 	ubfx	x1, x9, #13, #1
   8422c:	d3482120 	ubfx	x0, x9, #8, #1
   84230:	b903c664 	str	w4, [x19, #964]
   84234:	37782549 	tbnz	w9, #15, 846dc <CEMMCDevice::CardReset()+0x9dc>
   84238:	350024a3 	cbnz	w3, 846cc <CEMMCDevice::CardReset()+0x9cc>
   8423c:	35002401 	cbnz	w1, 846bc <CEMMCDevice::CardReset()+0x9bc>
   84240:	340020a0 	cbz	w0, 84654 <CEMMCDevice::CardReset()+0x954>
   84244:	12103d22 	and	w2, w9, #0xffff0000
   84248:	52942403 	mov	w3, #0xa120                	// #41248
   8424c:	72a000e3 	movk	w3, #0x7, lsl #16
   84250:	528000e1 	mov	w1, #0x7                   	// #7
   84254:	aa1303e0 	mov	x0, x19
   84258:	97fffe5a 	bl	83bc0 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   8425c:	72001c1f 	tst	w0, #0xff
   84260:	54002140 	b.eq	84688 <CEMMCDevice::CardReset()+0x988>  // b.none
   84264:	b943ea6a 	ldr	w10, [x19, #1000]
   84268:	d3493142 	ubfx	x2, x10, #9, #4
   8426c:	51000c54 	sub	w20, w2, #0x3
   84270:	7100069f 	cmp	w20, #0x1
   84274:	54001f88 	b.hi	84664 <CEMMCDevice::CardReset()+0x964>  // b.pmore
   84278:	b943b677 	ldr	w23, [x19, #948]
   8427c:	350001b7 	cbnz	w23, 842b0 <CEMMCDevice::CardReset()+0x5b0>
   84280:	52942403 	mov	w3, #0xa120                	// #41248
   84284:	72a000e3 	movk	w3, #0x7, lsl #16
   84288:	52804002 	mov	w2, #0x200                 	// #512
   8428c:	52800201 	mov	w1, #0x10                  	// #16
   84290:	aa1303e0 	mov	x0, x19
   84294:	97fffe4b 	bl	83bc0 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   84298:	72001c1f 	tst	w0, #0xff
   8429c:	540000a1 	b.ne	842b0 <CEMMCDevice::CardReset()+0x5b0>  // b.any
   842a0:	d00000a4 	adrp	x4, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   842a4:	91148083 	add	x3, x4, #0x520
   842a8:	911d2061 	add	x1, x3, #0x748
   842ac:	17ffff27 	b	83f48 <CEMMCDevice::CardReset()+0x248>
   842b0:	d280008b 	mov	x11, #0x4                   	// #4
   842b4:	f2bfc68b 	movk	x11, #0xfe34, lsl #16
   842b8:	f941ea6e 	ldr	x14, [x19, #976]
   842bc:	d280011e 	mov	x30, #0x8                   	// #8
   842c0:	52800036 	mov	w22, #0x1                   	// #1
   842c4:	b940016c 	ldr	w12, [x11]
   842c8:	52800002 	mov	w2, #0x0                   	// #0
   842cc:	52884803 	mov	w3, #0x4240                	// #16960
   842d0:	72a001e3 	movk	w3, #0xf, lsl #16
   842d4:	52800661 	mov	w1, #0x33                  	// #51
   842d8:	72b00001 	movk	w1, #0x8000, lsl #16
   842dc:	aa1303e0 	mov	x0, x19
   842e0:	12144d8d 	and	w13, w12, #0xfffff000
   842e4:	321701af 	orr	w15, w13, #0x200
   842e8:	b900016f 	str	w15, [x11]
   842ec:	f901fe6e 	str	x14, [x19, #1016]
   842f0:	b9040276 	str	w22, [x19, #1024]
   842f4:	f902067e 	str	x30, [x19, #1032]
   842f8:	97fffe32 	bl	83bc0 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   842fc:	d2804002 	mov	x2, #0x200                 	// #512
   84300:	b943e670 	ldr	w16, [x19, #996]
   84304:	f9020662 	str	x2, [x19, #1032]
   84308:	34001970 	cbz	w16, 84634 <CEMMCDevice::CardReset()+0x934>
   8430c:	f941ea60 	ldr	x0, [x19, #976]
   84310:	b9400011 	ldr	w17, [x0]
   84314:	5ac00a32 	rev	w18, w17
   84318:	d3504e4f 	ubfx	x15, x18, #16, #4
   8431c:	d3586e46 	ubfx	x6, x18, #24, #4
   84320:	29017c0f 	stp	w15, wzr, [x0, #8]
   84324:	340002e6 	cbz	w6, 84380 <CEMMCDevice::CardReset()+0x680>
   84328:	710004df 	cmp	w6, #0x1
   8432c:	54000aa0 	b.eq	84480 <CEMMCDevice::CardReset()+0x780>  // b.none
   84330:	710008df 	cmp	w6, #0x2
   84334:	d00000a7 	adrp	x7, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   84338:	911480f7 	add	x23, x7, #0x520
   8433c:	54000360 	b.eq	843a8 <CEMMCDevice::CardReset()+0x6a8>  // b.none
   84340:	3710068f 	tbnz	w15, #2, 84410 <CEMMCDevice::CardReset()+0x710>
   84344:	b9800c05 	ldrsw	x5, [x0, #12]
   84348:	d00000c6 	adrp	x6, 9e000 <font_data+0x1558>
   8434c:	9107e0c7 	add	x7, x6, #0x1f8
   84350:	911f62e1 	add	x1, x23, #0x7d8
   84354:	52800060 	mov	w0, #0x3                   	// #3
   84358:	f86578e2 	ldr	x2, [x7, x5, lsl #3]
   8435c:	94000235 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   84360:	d2800608 	mov	x8, #0x30                  	// #48
   84364:	f2bfc688 	movk	x8, #0xfe34, lsl #16
   84368:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8436c:	12800009 	mov	w9, #0xffffffff            	// #-1
   84370:	52800000 	mov	w0, #0x0                   	// #0
   84374:	f94013f7 	ldr	x23, [sp, #32]
   84378:	b9000109 	str	w9, [x8]
   8437c:	17fffef8 	b	83f5c <CEMMCDevice::CardReset()+0x25c>
   84380:	d00000ae 	adrp	x14, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   84384:	911481d7 	add	x23, x14, #0x520
   84388:	b9000c16 	str	w22, [x0, #12]
   8438c:	17ffffed 	b	84340 <CEMMCDevice::CardReset()+0x640>
   84390:	d00000aa 	adrp	x10, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   84394:	91148141 	add	x1, x10, #0x520
   84398:	9117c021 	add	x1, x1, #0x5f0
   8439c:	52800080 	mov	w0, #0x4                   	// #4
   843a0:	94000224 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   843a4:	17ffff7d 	b	84198 <CEMMCDevice::CardReset()+0x498>
   843a8:	37781272 	tbnz	w18, #15, 845f4 <CEMMCDevice::CardReset()+0x8f4>
   843ac:	52800064 	mov	w4, #0x3                   	// #3
   843b0:	b9000c04 	str	w4, [x0, #12]
   843b4:	9100c3e0 	add	x0, sp, #0x30
   843b8:	d280080a 	mov	x10, #0x40                  	// #64
   843bc:	5290d403 	mov	w3, #0x86a0                	// #34464
   843c0:	72a00023 	movk	w3, #0x1, lsl #16
   843c4:	321c4fe2 	mov	w2, #0xfffff0              	// #16777200
   843c8:	528000c1 	mov	w1, #0x6                   	// #6
   843cc:	f901fe60 	str	x0, [x19, #1016]
   843d0:	aa1303e0 	mov	x0, x19
   843d4:	f902066a 	str	x10, [x19, #1032]
   843d8:	97fffdfa 	bl	83bc0 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   843dc:	72001c1f 	tst	w0, #0xff
   843e0:	54000680 	b.eq	844b0 <CEMMCDevice::CardReset()+0x7b0>  // b.none
   843e4:	3940f7e1 	ldrb	w1, [sp, #61]
   843e8:	d00000b4 	adrp	x20, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   843ec:	91148297 	add	x23, x20, #0x520
   843f0:	d341042b 	ubfx	x11, x1, #1, #1
   843f4:	b903ba6b 	str	w11, [x19, #952]
   843f8:	3500098b 	cbnz	w11, 84528 <CEMMCDevice::CardReset()+0x828>
   843fc:	f941ea60 	ldr	x0, [x19, #976]
   84400:	d280400d 	mov	x13, #0x200                 	// #512
   84404:	b940080f 	ldr	w15, [x0, #8]
   84408:	f902066d 	str	x13, [x19, #1032]
   8440c:	17ffffcd 	b	84340 <CEMMCDevice::CardReset()+0x640>
   84410:	d2800694 	mov	x20, #0x34                  	// #52
   84414:	f2bfc694 	movk	x20, #0xfe34, lsl #16
   84418:	b9400295 	ldr	w21, [x20]
   8441c:	52942403 	mov	w3, #0xa120                	// #41248
   84420:	72a000e3 	movk	w3, #0x7, lsl #16
   84424:	528000c1 	mov	w1, #0x6                   	// #6
   84428:	72b00001 	movk	w1, #0x8000, lsl #16
   8442c:	52800042 	mov	w2, #0x2                   	// #2
   84430:	aa1303e0 	mov	x0, x19
   84434:	12177ab0 	and	w16, w21, #0xfffffeff
   84438:	b9000290 	str	w16, [x20]
   8443c:	97fffde1 	bl	83bc0 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   84440:	72001c1f 	tst	w0, #0xff
   84444:	54000600 	b.eq	84504 <CEMMCDevice::CardReset()+0x804>  // b.none
   84448:	d2800502 	mov	x2, #0x28                  	// #40
   8444c:	f2bfc682 	movk	x2, #0xfe34, lsl #16
   84450:	f941ea60 	ldr	x0, [x19, #976]
   84454:	b9400051 	ldr	w17, [x2]
   84458:	321f0232 	orr	w18, w17, #0x2
   8445c:	b9000052 	str	w18, [x2]
   84460:	b9000295 	str	w21, [x20]
   84464:	17ffffb8 	b	84344 <CEMMCDevice::CardReset()+0x644>
   84468:	d00000a4 	adrp	x4, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   8446c:	91148083 	add	x3, x4, #0x520
   84470:	91184061 	add	x1, x3, #0x610
   84474:	52800080 	mov	w0, #0x4                   	// #4
   84478:	940001ee 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   8447c:	17ffff47 	b	84198 <CEMMCDevice::CardReset()+0x498>
   84480:	52800043 	mov	w3, #0x2                   	// #2
   84484:	b9000c03 	str	w3, [x0, #12]
   84488:	17ffffcb 	b	843b4 <CEMMCDevice::CardReset()+0x6b4>
   8448c:	d00000a6 	adrp	x6, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   84490:	911480c7 	add	x7, x6, #0x520
   84494:	52800040 	mov	w0, #0x2                   	// #2
   84498:	911260e1 	add	x1, x7, #0x498
   8449c:	940001e5 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   844a0:	12800000 	mov	w0, #0xffffffff            	// #-1
   844a4:	a9415bf5 	ldp	x21, x22, [sp, #16]
   844a8:	f94013f7 	ldr	x23, [sp, #32]
   844ac:	17fffeac 	b	83f5c <CEMMCDevice::CardReset()+0x25c>
   844b0:	d00000ac 	adrp	x12, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   844b4:	91148197 	add	x23, x12, #0x520
   844b8:	911da2e1 	add	x1, x23, #0x768
   844bc:	52800020 	mov	w0, #0x1                   	// #1
   844c0:	940001dc 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   844c4:	17ffffce 	b	843fc <CEMMCDevice::CardReset()+0x6fc>
   844c8:	d00000a6 	adrp	x6, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   844cc:	911480c7 	add	x7, x6, #0x520
   844d0:	9118c0e1 	add	x1, x7, #0x630
   844d4:	52800080 	mov	w0, #0x4                   	// #4
   844d8:	940001d6 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   844dc:	52800025 	mov	w5, #0x1                   	// #1
   844e0:	aa1303e0 	mov	x0, x19
   844e4:	b903da65 	str	w5, [x19, #984]
   844e8:	b94002c8 	ldr	w8, [x22]
   844ec:	12177909 	and	w9, w8, #0xfffffeff
   844f0:	b90002c9 	str	w9, [x22]
   844f4:	97fffe03 	bl	83d00 <CEMMCDevice::CardReset()>
   844f8:	a9415bf5 	ldp	x21, x22, [sp, #16]
   844fc:	f94013f7 	ldr	x23, [sp, #32]
   84500:	17fffe97 	b	83f5c <CEMMCDevice::CardReset()+0x25c>
   84504:	52800020 	mov	w0, #0x1                   	// #1
   84508:	911ec2e1 	add	x1, x23, #0x7b0
   8450c:	940001c9 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   84510:	f941ea60 	ldr	x0, [x19, #976]
   84514:	17ffff8c 	b	84344 <CEMMCDevice::CardReset()+0x644>
   84518:	d00000b5 	adrp	x21, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   8451c:	911482b0 	add	x16, x21, #0x520
   84520:	9114e201 	add	x1, x16, #0x538
   84524:	17fffec4 	b	84034 <CEMMCDevice::CardReset()+0x334>
   84528:	5290d403 	mov	w3, #0x86a0                	// #34464
   8452c:	72a00023 	movk	w3, #0x1, lsl #16
   84530:	529ffe22 	mov	w2, #0xfff1                	// #65521
   84534:	72b01fe2 	movk	w2, #0x80ff, lsl #16
   84538:	528000c1 	mov	w1, #0x6                   	// #6
   8453c:	aa1303e0 	mov	x0, x19
   84540:	97fffda0 	bl	83bc0 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   84544:	72001c1f 	tst	w0, #0xff
   84548:	540006a1 	b.ne	8461c <CEMMCDevice::CardReset()+0x91c>  // b.any
   8454c:	b943be76 	ldr	w22, [x19, #956]
   84550:	911162fe 	add	x30, x23, #0x458
   84554:	911e42e1 	add	x1, x23, #0x790
   84558:	52800020 	mov	w0, #0x1                   	// #1
   8455c:	911182f5 	add	x21, x23, #0x460
   84560:	710002df 	cmp	w22, #0x0
   84564:	9a9513c2 	csel	x2, x30, x21, ne  // ne = any
   84568:	940001b2 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   8456c:	17ffffa4 	b	843fc <CEMMCDevice::CardReset()+0x6fc>
   84570:	d00000b2 	adrp	x18, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   84574:	91148240 	add	x0, x18, #0x520
   84578:	91136001 	add	x1, x0, #0x4d8
   8457c:	52800080 	mov	w0, #0x4                   	// #4
   84580:	940001ac 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   84584:	2a1403e0 	mov	w0, w20
   84588:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8458c:	f94013f7 	ldr	x23, [sp, #32]
   84590:	17fffe73 	b	83f5c <CEMMCDevice::CardReset()+0x25c>
   84594:	d00000ad 	adrp	x13, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   84598:	911481b5 	add	x21, x13, #0x520
   8459c:	2a1703e0 	mov	w0, w23
   845a0:	9115a2a1 	add	x1, x21, #0x568
   845a4:	940001a3 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   845a8:	9115e2a1 	add	x1, x21, #0x578
   845ac:	52800080 	mov	w0, #0x4                   	// #4
   845b0:	b943ea62 	ldr	w2, [x19, #1000]
   845b4:	9400019f 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   845b8:	2a1403e0 	mov	w0, w20
   845bc:	a9415bf5 	ldp	x21, x22, [sp, #16]
   845c0:	f94013f7 	ldr	x23, [sp, #32]
   845c4:	17fffe66 	b	83f5c <CEMMCDevice::CardReset()+0x25c>
   845c8:	d00000a5 	adrp	x5, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   845cc:	911480a8 	add	x8, x5, #0x520
   845d0:	52800020 	mov	w0, #0x1                   	// #1
   845d4:	9111c101 	add	x1, x8, #0x470
   845d8:	94000196 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   845dc:	12800000 	mov	w0, #0xffffffff            	// #-1
   845e0:	17fffe5f 	b	83f5c <CEMMCDevice::CardReset()+0x25c>
   845e4:	d00000a2 	adrp	x2, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   845e8:	91148051 	add	x17, x2, #0x520
   845ec:	91144221 	add	x1, x17, #0x510
   845f0:	17fffe56 	b	83f48 <CEMMCDevice::CardReset()+0x248>
   845f4:	f276025f 	tst	x18, #0x400
   845f8:	528000a5 	mov	w5, #0x5                   	// #5
   845fc:	52800088 	mov	w8, #0x4                   	// #4
   84600:	1a850109 	csel	w9, w8, w5, eq  // eq = none
   84604:	b9000c09 	str	w9, [x0, #12]
   84608:	17ffff6b 	b	843b4 <CEMMCDevice::CardReset()+0x6b4>
   8460c:	d00000ad 	adrp	x13, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   84610:	911481af 	add	x15, x13, #0x520
   84614:	911701e1 	add	x1, x15, #0x5c0
   84618:	17fffe4c 	b	83f48 <CEMMCDevice::CardReset()+0x248>
   8461c:	2a1503e1 	mov	w1, w21
   84620:	529e1002 	mov	w2, #0xf080                	// #61568
   84624:	72a05f42 	movk	w2, #0x2fa, lsl #16
   84628:	aa1303e0 	mov	x0, x19
   8462c:	97fffb79 	bl	83410 <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)>
   84630:	17ffff73 	b	843fc <CEMMCDevice::CardReset()+0x6fc>
   84634:	12800020 	mov	w0, #0xfffffffe            	// #-2
   84638:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8463c:	f94013f7 	ldr	x23, [sp, #32]
   84640:	17fffe47 	b	83f5c <CEMMCDevice::CardReset()+0x25c>
   84644:	d00000a2 	adrp	x2, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   84648:	91148051 	add	x17, x2, #0x520
   8464c:	911a2221 	add	x1, x17, #0x688
   84650:	17fffe3e 	b	83f48 <CEMMCDevice::CardReset()+0x248>
   84654:	d00000ab 	adrp	x11, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   84658:	9114817e 	add	x30, x11, #0x520
   8465c:	911c03c1 	add	x1, x30, #0x700
   84660:	17fffe3a 	b	83f48 <CEMMCDevice::CardReset()+0x248>
   84664:	d00000aa 	adrp	x10, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   84668:	91148153 	add	x19, x10, #0x520
   8466c:	52800020 	mov	w0, #0x1                   	// #1
   84670:	911cc261 	add	x1, x19, #0x730
   84674:	9400016f 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   84678:	12800000 	mov	w0, #0xffffffff            	// #-1
   8467c:	a9415bf5 	ldp	x21, x22, [sp, #16]
   84680:	f94013f7 	ldr	x23, [sp, #32]
   84684:	17fffe36 	b	83f5c <CEMMCDevice::CardReset()+0x25c>
   84688:	d00000a1 	adrp	x1, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   8468c:	91148037 	add	x23, x1, #0x520
   84690:	911c62e1 	add	x1, x23, #0x718
   84694:	52800080 	mov	w0, #0x4                   	// #4
   84698:	94000166 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   8469c:	12800000 	mov	w0, #0xffffffff            	// #-1
   846a0:	a9415bf5 	ldp	x21, x22, [sp, #16]
   846a4:	f94013f7 	ldr	x23, [sp, #32]
   846a8:	17fffe2d 	b	83f5c <CEMMCDevice::CardReset()+0x25c>
   846ac:	d00000b5 	adrp	x21, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   846b0:	911482b0 	add	x16, x21, #0x520
   846b4:	911aa201 	add	x1, x16, #0x6a8
   846b8:	17fffe24 	b	83f48 <CEMMCDevice::CardReset()+0x248>
   846bc:	d00000b6 	adrp	x22, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   846c0:	911482cc 	add	x12, x22, #0x520
   846c4:	911bc181 	add	x1, x12, #0x6f0
   846c8:	17fffe20 	b	83f48 <CEMMCDevice::CardReset()+0x248>
   846cc:	d00000ad 	adrp	x13, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   846d0:	911481af 	add	x15, x13, #0x520
   846d4:	911b81e1 	add	x1, x15, #0x6e0
   846d8:	17fffe1c 	b	83f48 <CEMMCDevice::CardReset()+0x248>
   846dc:	d00000ae 	adrp	x14, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   846e0:	911481d4 	add	x20, x14, #0x520
   846e4:	911b4281 	add	x1, x20, #0x6d0
   846e8:	17fffe18 	b	83f48 <CEMMCDevice::CardReset()+0x248>
   846ec:	d503201f 	nop

00000000000846f0 <CEMMCDevice::CardInit()>:
   846f0:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   846f4:	a9015bf5 	stp	x21, x22, [sp, #16]
   846f8:	aa0003f6 	mov	x22, x0
   846fc:	f90013fe 	str	x30, [sp, #32]
   84700:	97fffab4 	bl	831d0 <CEMMCDevice::PowerOn()>
   84704:	35000440 	cbnz	w0, 8478c <CEMMCDevice::CardInit()+0x9c>
   84708:	d2801f80 	mov	x0, #0xfc                  	// #252
   8470c:	f2bfc680 	movk	x0, #0xfe34, lsl #16
   84710:	b9400001 	ldr	w1, [x0]
   84714:	53107c22 	lsr	w2, w1, #16
   84718:	12001c43 	and	w3, w2, #0xff
   8471c:	721f185f 	tst	w2, #0xfe
   84720:	b903a2c3 	str	w3, [x22, #928]
   84724:	54000280 	b.eq	84774 <CEMMCDevice::CardInit()+0x84>  // b.none
   84728:	d00000b4 	adrp	x20, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   8472c:	91148286 	add	x6, x20, #0x520
   84730:	912160d4 	add	x20, x6, #0x858
   84734:	52800073 	mov	w19, #0x3                   	// #3
   84738:	aa1603e0 	mov	x0, x22
   8473c:	97fffd71 	bl	83d00 <CEMMCDevice::CardReset()>
   84740:	2a0003f5 	mov	w21, w0
   84744:	aa1403e1 	mov	x1, x20
   84748:	31000abf 	cmn	w21, #0x2
   8474c:	52800040 	mov	w0, #0x2                   	// #2
   84750:	54000081 	b.ne	84760 <CEMMCDevice::CardInit()+0x70>  // b.any
   84754:	94000137 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   84758:	71000673 	subs	w19, w19, #0x1
   8475c:	54fffee1 	b.ne	84738 <CEMMCDevice::CardInit()+0x48>  // b.any
   84760:	2a1503e0 	mov	w0, w21
   84764:	a9415bf5 	ldp	x21, x22, [sp, #16]
   84768:	f94013fe 	ldr	x30, [sp, #32]
   8476c:	a8c353f3 	ldp	x19, x20, [sp], #48
   84770:	d65f03c0 	ret
   84774:	d00000a4 	adrp	x4, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   84778:	91148085 	add	x5, x4, #0x520
   8477c:	9120e0a1 	add	x1, x5, #0x838
   84780:	52800040 	mov	w0, #0x2                   	// #2
   84784:	9400012b 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   84788:	17ffffe8 	b	84728 <CEMMCDevice::CardInit()+0x38>
   8478c:	d00000a7 	adrp	x7, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   84790:	911480e8 	add	x8, x7, #0x520
   84794:	91200101 	add	x1, x8, #0x800
   84798:	52800020 	mov	w0, #0x1                   	// #1
   8479c:	94000125 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   847a0:	12800015 	mov	w21, #0xffffffff            	// #-1
   847a4:	17ffffef 	b	84760 <CEMMCDevice::CardInit()+0x70>
   847a8:	d503201f 	nop
   847ac:	d503201f 	nop

00000000000847b0 <CEMMCDevice::EnsureDataMode()>:
   847b0:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   847b4:	aa0003f3 	mov	x19, x0
   847b8:	b943c402 	ldr	w2, [x0, #964]
   847bc:	3140405f 	cmn	w2, #0x10, lsl #12
   847c0:	540005a0 	b.eq	84874 <CEMMCDevice::EnsureDataMode()+0xc4>  // b.none
   847c4:	53103c42 	lsl	w2, w2, #16
   847c8:	52942403 	mov	w3, #0xa120                	// #41248
   847cc:	72a000e3 	movk	w3, #0x7, lsl #16
   847d0:	528001a1 	mov	w1, #0xd                   	// #13
   847d4:	aa1303e0 	mov	x0, x19
   847d8:	97fffcfa 	bl	83bc0 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   847dc:	72001c1f 	tst	w0, #0xff
   847e0:	540008c0 	b.eq	848f8 <CEMMCDevice::EnsureDataMode()+0x148>  // b.none
   847e4:	b943ea60 	ldr	w0, [x19, #1000]
   847e8:	d3493001 	ubfx	x1, x0, #9, #4
   847ec:	71000c3f 	cmp	w1, #0x3
   847f0:	540004a0 	b.eq	84884 <CEMMCDevice::EnsureDataMode()+0xd4>  // b.none
   847f4:	7100143f 	cmp	w1, #0x5
   847f8:	540006a0 	b.eq	848cc <CEMMCDevice::EnsureDataMode()+0x11c>  // b.none
   847fc:	7100103f 	cmp	w1, #0x4
   84800:	54000081 	b.ne	84810 <CEMMCDevice::EnsureDataMode()+0x60>  // b.any
   84804:	52800000 	mov	w0, #0x0                   	// #0
   84808:	a8c17bf3 	ldp	x19, x30, [sp], #16
   8480c:	d65f03c0 	ret
   84810:	aa1303e0 	mov	x0, x19
   84814:	97fffd3b 	bl	83d00 <CEMMCDevice::CardReset()>
   84818:	35ffff80 	cbnz	w0, 84808 <CEMMCDevice::EnsureDataMode()+0x58>
   8481c:	b943c666 	ldr	w6, [x19, #964]
   84820:	52942403 	mov	w3, #0xa120                	// #41248
   84824:	72a000e3 	movk	w3, #0x7, lsl #16
   84828:	528001a1 	mov	w1, #0xd                   	// #13
   8482c:	aa1303e0 	mov	x0, x19
   84830:	53103cc2 	lsl	w2, w6, #16
   84834:	97fffce3 	bl	83bc0 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   84838:	72001c1f 	tst	w0, #0xff
   8483c:	54000660 	b.eq	84908 <CEMMCDevice::EnsureDataMode()+0x158>  // b.none
   84840:	b943ea67 	ldr	w7, [x19, #1000]
   84844:	d34930e2 	ubfx	x2, x7, #9, #4
   84848:	7100105f 	cmp	w2, #0x4
   8484c:	54fffdc0 	b.eq	84804 <CEMMCDevice::EnsureDataMode()+0x54>  // b.none
   84850:	d00000a8 	adrp	x8, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   84854:	91148109 	add	x9, x8, #0x520
   84858:	52800040 	mov	w0, #0x2                   	// #2
   8485c:	91246121 	add	x1, x9, #0x918
   84860:	940000f4 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   84864:	52bfffea 	mov	w10, #0xffff0000            	// #-65536
   84868:	12800000 	mov	w0, #0xffffffff            	// #-1
   8486c:	b903c66a 	str	w10, [x19, #964]
   84870:	17ffffe6 	b	84808 <CEMMCDevice::EnsureDataMode()+0x58>
   84874:	97fffd23 	bl	83d00 <CEMMCDevice::CardReset()>
   84878:	35fffc80 	cbnz	w0, 84808 <CEMMCDevice::EnsureDataMode()+0x58>
   8487c:	b943c662 	ldr	w2, [x19, #964]
   84880:	17ffffd1 	b	847c4 <CEMMCDevice::EnsureDataMode()+0x14>
   84884:	b943c665 	ldr	w5, [x19, #964]
   84888:	52942403 	mov	w3, #0xa120                	// #41248
   8488c:	72a000e3 	movk	w3, #0x7, lsl #16
   84890:	528000e1 	mov	w1, #0x7                   	// #7
   84894:	aa1303e0 	mov	x0, x19
   84898:	53103ca2 	lsl	w2, w5, #16
   8489c:	97fffcc9 	bl	83bc0 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   848a0:	72001c1f 	tst	w0, #0xff
   848a4:	54fffbc1 	b.ne	8481c <CEMMCDevice::EnsureDataMode()+0x6c>  // b.any
   848a8:	d00000ad 	adrp	x13, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   848ac:	911481ae 	add	x14, x13, #0x520
   848b0:	912281c1 	add	x1, x14, #0x8a0
   848b4:	52800040 	mov	w0, #0x2                   	// #2
   848b8:	940000de 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   848bc:	52bffff1 	mov	w17, #0xffff0000            	// #-65536
   848c0:	12800000 	mov	w0, #0xffffffff            	// #-1
   848c4:	b903c671 	str	w17, [x19, #964]
   848c8:	17ffffd0 	b	84808 <CEMMCDevice::EnsureDataMode()+0x58>
   848cc:	52942403 	mov	w3, #0xa120                	// #41248
   848d0:	72a000e3 	movk	w3, #0x7, lsl #16
   848d4:	52800002 	mov	w2, #0x0                   	// #0
   848d8:	52800181 	mov	w1, #0xc                   	// #12
   848dc:	aa1303e0 	mov	x0, x19
   848e0:	97fffcb8 	bl	83bc0 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   848e4:	72001c1f 	tst	w0, #0xff
   848e8:	54000180 	b.eq	84918 <CEMMCDevice::EnsureDataMode()+0x168>  // b.none
   848ec:	aa1303e0 	mov	x0, x19
   848f0:	97fffb1c 	bl	83560 <CEMMCDevice::ResetDat()>
   848f4:	17ffffca 	b	8481c <CEMMCDevice::EnsureDataMode()+0x6c>
   848f8:	d00000af 	adrp	x15, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   848fc:	911481f0 	add	x16, x15, #0x520
   84900:	9121e201 	add	x1, x16, #0x878
   84904:	17ffffec 	b	848b4 <CEMMCDevice::EnsureDataMode()+0x104>
   84908:	d00000ab 	adrp	x11, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   8490c:	9114816c 	add	x12, x11, #0x520
   84910:	9123c181 	add	x1, x12, #0x8f0
   84914:	17ffffe8 	b	848b4 <CEMMCDevice::EnsureDataMode()+0x104>
   84918:	d00000a3 	adrp	x3, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   8491c:	91148064 	add	x4, x3, #0x520
   84920:	91232081 	add	x1, x4, #0x8c8
   84924:	17ffffe4 	b	848b4 <CEMMCDevice::EnsureDataMode()+0x104>
   84928:	d503201f 	nop
   8492c:	d503201f 	nop

0000000000084930 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned long, unsigned int)>:
   84930:	a9bb53f3 	stp	x19, x20, [sp, #-80]!
   84934:	aa0003f3 	mov	x19, x0
   84938:	b943b405 	ldr	w5, [x0, #948]
   8493c:	aa0303e0 	mov	x0, x3
   84940:	a9015bf5 	stp	x21, x22, [sp, #16]
   84944:	53175896 	lsl	w22, w4, #9
   84948:	f9420663 	ldr	x3, [x19, #1032]
   8494c:	710000bf 	cmp	w5, #0x0
   84950:	1a8402d6 	csel	w22, w22, w4, eq  // eq = none
   84954:	f90023fe 	str	x30, [sp, #64]
   84958:	eb00007f 	cmp	x3, x0
   8495c:	54000968 	b.hi	84a88 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned long, unsigned int)+0x158>  // b.pmore
   84960:	9ac30804 	udiv	x4, x0, x3
   84964:	9b038086 	msub	x6, x4, x3, x0
   84968:	b9040264 	str	w4, [x19, #1024]
   8496c:	b50007e6 	cbnz	x6, 84a68 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned long, unsigned int)+0x138>
   84970:	a90263f7 	stp	x23, x24, [sp, #32]
   84974:	7100049f 	cmp	w4, #0x1
   84978:	a9036bf9 	stp	x25, x26, [sp, #48]
   8497c:	f901fe62 	str	x2, [x19, #1016]
   84980:	35000421 	cbnz	w1, 84a04 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned long, unsigned int)+0xd4>
   84984:	52800257 	mov	w23, #0x12                  	// #18
   84988:	2a1703f8 	mov	w24, w23
   8498c:	5400006c 	b.gt	84998 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned long, unsigned int)+0x68>
   84990:	52800237 	mov	w23, #0x11                  	// #17
   84994:	2a1703f8 	mov	w24, w23
   84998:	d00000b5 	adrp	x21, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   8499c:	911482b5 	add	x21, x21, #0x520
   849a0:	52896819 	mov	w25, #0x4b40                	// #19264
   849a4:	72a00999 	movk	w25, #0x4c, lsl #16
   849a8:	9127c2ba 	add	x26, x21, #0x9f0
   849ac:	52800074 	mov	w20, #0x3                   	// #3
   849b0:	2a1603e2 	mov	w2, w22
   849b4:	2a1703e1 	mov	w1, w23
   849b8:	2a1903e3 	mov	w3, w25
   849bc:	aa1303e0 	mov	x0, x19
   849c0:	97fffc80 	bl	83bc0 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   849c4:	72001c1f 	tst	w0, #0xff
   849c8:	2a1803e2 	mov	w2, w24
   849cc:	aa1a03e1 	mov	x1, x26
   849d0:	52800040 	mov	w0, #0x2                   	// #2
   849d4:	540003c1 	b.ne	84a4c <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned long, unsigned int)+0x11c>  // b.any
   849d8:	94000096 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   849dc:	912822a1 	add	x1, x21, #0xa08
   849e0:	52800080 	mov	w0, #0x4                   	// #4
   849e4:	b943ce62 	ldr	w2, [x19, #972]
   849e8:	94000092 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   849ec:	71000694 	subs	w20, w20, #0x1
   849f0:	912862a1 	add	x1, x21, #0xa18
   849f4:	52800080 	mov	w0, #0x4                   	// #4
   849f8:	54000120 	b.eq	84a1c <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned long, unsigned int)+0xec>  // b.none
   849fc:	9400008d 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   84a00:	17ffffec 	b	849b0 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned long, unsigned int)+0x80>
   84a04:	52800337 	mov	w23, #0x19                  	// #25
   84a08:	2a1703f8 	mov	w24, w23
   84a0c:	54fffc6c 	b.gt	84998 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned long, unsigned int)+0x68>
   84a10:	52800317 	mov	w23, #0x18                  	// #24
   84a14:	2a1703f8 	mov	w24, w23
   84a18:	17ffffe0 	b	84998 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned long, unsigned int)+0x68>
   84a1c:	9128a2a1 	add	x1, x21, #0xa28
   84a20:	52800080 	mov	w0, #0x4                   	// #4
   84a24:	94000083 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   84a28:	52bfffe1 	mov	w1, #0xffff0000            	// #-65536
   84a2c:	12800000 	mov	w0, #0xffffffff            	// #-1
   84a30:	a94263f7 	ldp	x23, x24, [sp, #32]
   84a34:	a9436bf9 	ldp	x25, x26, [sp, #48]
   84a38:	b903c661 	str	w1, [x19, #964]
   84a3c:	a9415bf5 	ldp	x21, x22, [sp, #16]
   84a40:	f94023fe 	ldr	x30, [sp, #64]
   84a44:	a8c553f3 	ldp	x19, x20, [sp], #80
   84a48:	d65f03c0 	ret
   84a4c:	52800000 	mov	w0, #0x0                   	// #0
   84a50:	a9415bf5 	ldp	x21, x22, [sp, #16]
   84a54:	a94263f7 	ldp	x23, x24, [sp, #32]
   84a58:	a9436bf9 	ldp	x25, x26, [sp, #48]
   84a5c:	f94023fe 	ldr	x30, [sp, #64]
   84a60:	a8c553f3 	ldp	x19, x20, [sp], #80
   84a64:	d65f03c0 	ret
   84a68:	d00000a2 	adrp	x2, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   84a6c:	91148047 	add	x7, x2, #0x520
   84a70:	912660e1 	add	x1, x7, #0x998
   84a74:	aa0003e2 	mov	x2, x0
   84a78:	52800040 	mov	w0, #0x2                   	// #2
   84a7c:	9400006d 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   84a80:	12800000 	mov	w0, #0xffffffff            	// #-1
   84a84:	17ffffee 	b	84a3c <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned long, unsigned int)+0x10c>
   84a88:	d00000a8 	adrp	x8, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   84a8c:	91148109 	add	x9, x8, #0x520
   84a90:	aa0003e2 	mov	x2, x0
   84a94:	91254121 	add	x1, x9, #0x950
   84a98:	52800040 	mov	w0, #0x2                   	// #2
   84a9c:	94000065 	bl	84c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   84aa0:	12800000 	mov	w0, #0xffffffff            	// #-1
   84aa4:	17ffffe6 	b	84a3c <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned long, unsigned int)+0x10c>
   84aa8:	d503201f 	nop
   84aac:	d503201f 	nop

0000000000084ab0 <CEMMCDevice::DoRead(unsigned char*, unsigned long, unsigned int)>:
   84ab0:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   84ab4:	aa0203f3 	mov	x19, x2
   84ab8:	aa0003f4 	mov	x20, x0
   84abc:	f9000bfe 	str	x30, [sp, #16]
   84ac0:	b90027e3 	str	w3, [sp, #36]
   84ac4:	f90017e1 	str	x1, [sp, #40]
   84ac8:	97ffff3a 	bl	847b0 <CEMMCDevice::EnsureDataMode()>
   84acc:	b94027e3 	ldr	w3, [sp, #36]
   84ad0:	f94017e1 	ldr	x1, [sp, #40]
   84ad4:	35000180 	cbnz	w0, 84b04 <CEMMCDevice::DoRead(unsigned char*, unsigned long, unsigned int)+0x54>
   84ad8:	2a0303e4 	mov	w4, w3
   84adc:	aa0103e2 	mov	x2, x1
   84ae0:	aa1403e0 	mov	x0, x20
   84ae4:	aa1303e3 	mov	x3, x19
   84ae8:	52800001 	mov	w1, #0x0                   	// #0
   84aec:	97ffff91 	bl	84930 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned long, unsigned int)>
   84af0:	37f800a0 	tbnz	w0, #31, 84b04 <CEMMCDevice::DoRead(unsigned char*, unsigned long, unsigned int)+0x54>
   84af4:	2a1303e0 	mov	w0, w19
   84af8:	f9400bfe 	ldr	x30, [sp, #16]
   84afc:	a8c353f3 	ldp	x19, x20, [sp], #48
   84b00:	d65f03c0 	ret
   84b04:	12800000 	mov	w0, #0xffffffff            	// #-1
   84b08:	17fffffc 	b	84af8 <CEMMCDevice::DoRead(unsigned char*, unsigned long, unsigned int)+0x48>
   84b0c:	d503201f 	nop

0000000000084b10 <CEMMCDevice::DoWrite(unsigned char*, unsigned long, unsigned int)>:
   84b10:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   84b14:	aa0203f3 	mov	x19, x2
   84b18:	aa0003f4 	mov	x20, x0
   84b1c:	f9000bfe 	str	x30, [sp, #16]
   84b20:	b90027e3 	str	w3, [sp, #36]
   84b24:	f90017e1 	str	x1, [sp, #40]
   84b28:	97ffff22 	bl	847b0 <CEMMCDevice::EnsureDataMode()>
   84b2c:	b94027e3 	ldr	w3, [sp, #36]
   84b30:	f94017e1 	ldr	x1, [sp, #40]
   84b34:	35000180 	cbnz	w0, 84b64 <CEMMCDevice::DoWrite(unsigned char*, unsigned long, unsigned int)+0x54>
   84b38:	2a0303e4 	mov	w4, w3
   84b3c:	aa0103e2 	mov	x2, x1
   84b40:	aa1403e0 	mov	x0, x20
   84b44:	aa1303e3 	mov	x3, x19
   84b48:	52800021 	mov	w1, #0x1                   	// #1
   84b4c:	97ffff79 	bl	84930 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned long, unsigned int)>
   84b50:	37f800a0 	tbnz	w0, #31, 84b64 <CEMMCDevice::DoWrite(unsigned char*, unsigned long, unsigned int)+0x54>
   84b54:	2a1303e0 	mov	w0, w19
   84b58:	f9400bfe 	ldr	x30, [sp, #16]
   84b5c:	a8c353f3 	ldp	x19, x20, [sp], #48
   84b60:	d65f03c0 	ret
   84b64:	12800000 	mov	w0, #0xffffffff            	// #-1
   84b68:	17fffffc 	b	84b58 <CEMMCDevice::DoWrite(unsigned char*, unsigned long, unsigned int)+0x48>
   84b6c:	d503201f 	nop

0000000000084b70 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)>:
   84b70:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   84b74:	a9015bf5 	stp	x21, x22, [sp, #16]
   84b78:	a9027bf7 	stp	x23, x30, [sp, #32]
   84b7c:	f9401000 	ldr	x0, [x0, #32]
   84b80:	b4000360 	cbz	x0, 84bec <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)+0x7c>
   84b84:	2a0203f4 	mov	w20, w2
   84b88:	2a0303f5 	mov	w21, w3
   84b8c:	2a0403f6 	mov	w22, w4
   84b90:	2a0103f3 	mov	w19, w1
   84b94:	94003793 	bl	929e0 <CTimer::GetClockTicks()>
   84b98:	2a0003f7 	mov	w23, w0
   84b9c:	14000006 	b	84bb4 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)+0x44>
   84ba0:	35000135 	cbnz	w21, 84bc4 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)+0x54>
   84ba4:	9400378f 	bl	929e0 <CTimer::GetClockTicks()>
   84ba8:	4b170004 	sub	w4, w0, w23
   84bac:	6b16009f 	cmp	w4, w22
   84bb0:	54000142 	b.cs	84bd8 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)+0x68>  // b.hs, b.nlast
   84bb4:	b9400263 	ldr	w3, [x19]
   84bb8:	6a03029f 	tst	w20, w3
   84bbc:	54ffff21 	b.ne	84ba0 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)+0x30>  // b.any
   84bc0:	35ffff35 	cbnz	w21, 84ba4 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)+0x34>
   84bc4:	52800000 	mov	w0, #0x0                   	// #0
   84bc8:	a9415bf5 	ldp	x21, x22, [sp, #16]
   84bcc:	a9427bf7 	ldp	x23, x30, [sp, #32]
   84bd0:	a8c353f3 	ldp	x19, x20, [sp], #48
   84bd4:	d65f03c0 	ret
   84bd8:	12800000 	mov	w0, #0xffffffff            	// #-1
   84bdc:	a9415bf5 	ldp	x21, x22, [sp, #16]
   84be0:	a9427bf7 	ldp	x23, x30, [sp, #32]
   84be4:	a8c353f3 	ldp	x19, x20, [sp], #48
   84be8:	d65f03c0 	ret
   84bec:	d00000a1 	adrp	x1, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   84bf0:	91148022 	add	x2, x1, #0x520
   84bf4:	9108e041 	add	x1, x2, #0x238
   84bf8:	91098040 	add	x0, x2, #0x260
   84bfc:	528130e2 	mov	w2, #0x987                 	// #2439
   84c00:	940011dc 	bl	89370 <assertion_failed>
   84c04:	d503201f 	nop
   84c08:	d503201f 	nop
   84c0c:	d503201f 	nop

0000000000084c10 <CEMMCDevice::usDelay(unsigned int)>:
   84c10:	f9401002 	ldr	x2, [x0, #32]
   84c14:	b4000062 	cbz	x2, 84c20 <CEMMCDevice::usDelay(unsigned int)+0x10>
   84c18:	2a0103e0 	mov	w0, w1
   84c1c:	14003a39 	b	93500 <CTimer::SimpleusDelay(unsigned int)>
   84c20:	f81f0ffe 	str	x30, [sp, #-16]!
   84c24:	94000037 	bl	84d00 <CEMMCDevice::usDelay(unsigned int) [clone .part.2]>
   84c28:	d503201f 	nop
   84c2c:	d503201f 	nop

0000000000084c30 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>:
   84c30:	a9af53f3 	stp	x19, x20, [sp, #-272]!
   84c34:	f9000bfe 	str	x30, [sp, #16]
   84c38:	3d801be0 	str	q0, [sp, #96]
   84c3c:	3d801fe1 	str	q1, [sp, #112]
   84c40:	3d8023e2 	str	q2, [sp, #128]
   84c44:	3d8027e3 	str	q3, [sp, #144]
   84c48:	3d802be4 	str	q4, [sp, #160]
   84c4c:	3d802fe5 	str	q5, [sp, #176]
   84c50:	3d8033e6 	str	q6, [sp, #192]
   84c54:	3d8037e7 	str	q7, [sp, #208]
   84c58:	a90e0fe2 	stp	x2, x3, [sp, #224]
   84c5c:	a90f17e4 	stp	x4, x5, [sp, #240]
   84c60:	a9101fe6 	stp	x6, x7, [sp, #256]
   84c64:	b4000361 	cbz	x1, 84cd0 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)+0xa0>
   84c68:	910443e5 	add	x5, sp, #0x110
   84c6c:	910383e4 	add	x4, sp, #0xe0
   84c70:	910443e3 	add	x3, sp, #0x110
   84c74:	12800fe6 	mov	w6, #0xffffff80            	// #-128
   84c78:	aa0103f3 	mov	x19, x1
   84c7c:	128005e1 	mov	w1, #0xffffffd0            	// #-48
   84c80:	f9002be4 	str	x4, [sp, #80]
   84c84:	2a0003f4 	mov	w20, w0
   84c88:	a9040fe5 	stp	x5, x3, [sp, #64]
   84c8c:	b9005be1 	str	w1, [sp, #88]
   84c90:	b9005fe6 	str	w6, [sp, #92]
   84c94:	94001c1b 	bl	8bd00 <CLogger::Get()>
   84c98:	a94427e8 	ldp	x8, x9, [sp, #64]
   84c9c:	d00000a7 	adrp	x7, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   84ca0:	911480ea 	add	x10, x7, #0x520
   84ca4:	aa1303e3 	mov	x3, x19
   84ca8:	2a1403e2 	mov	w2, w20
   84cac:	910083e4 	add	x4, sp, #0x20
   84cb0:	91292141 	add	x1, x10, #0xa48
   84cb4:	a94533eb 	ldp	x11, x12, [sp, #80]
   84cb8:	a90227e8 	stp	x8, x9, [sp, #32]
   84cbc:	a90333eb 	stp	x11, x12, [sp, #48]
   84cc0:	94001b68 	bl	8ba60 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   84cc4:	f9400bfe 	ldr	x30, [sp, #16]
   84cc8:	a8d153f3 	ldp	x19, x20, [sp], #272
   84ccc:	d65f03c0 	ret
   84cd0:	d00000a0 	adrp	x0, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   84cd4:	91148002 	add	x2, x0, #0x520
   84cd8:	9108e041 	add	x1, x2, #0x238
   84cdc:	9128e040 	add	x0, x2, #0xa38
   84ce0:	52813482 	mov	w2, #0x9a4                 	// #2468
   84ce4:	940011a3 	bl	89370 <assertion_failed>
   84ce8:	d503201f 	nop
   84cec:	d503201f 	nop

0000000000084cf0 <CEMMCDevice::GetID()>:
   84cf0:	910e9000 	add	x0, x0, #0x3a4
   84cf4:	d65f03c0 	ret
   84cf8:	d503201f 	nop
   84cfc:	d503201f 	nop

0000000000084d00 <CEMMCDevice::usDelay(unsigned int) [clone .part.2]>:
   84d00:	d00000a0 	adrp	x0, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   84d04:	91148002 	add	x2, x0, #0x520
   84d08:	f81f0ffe 	str	x30, [sp, #-16]!
   84d0c:	9108e041 	add	x1, x2, #0x238
   84d10:	91098040 	add	x0, x2, #0x260
   84d14:	528133c2 	mov	w2, #0x99e                 	// #2462
   84d18:	94001196 	bl	89370 <assertion_failed>
   84d1c:	00000000 	.inst	0x00000000 ; undefined

0000000000084d20 <CSoftSerialDevice::CSoftSerialDevice(unsigned int, unsigned int, CGPIOManager*)>:
   84d20:	a9bc53f3 	stp	x19, x20, [sp, #-64]!
   84d24:	aa0003f3 	mov	x19, x0
   84d28:	aa0003f4 	mov	x20, x0
   84d2c:	a9015bf5 	stp	x21, x22, [sp, #16]
   84d30:	2a0203f5 	mov	w21, w2
   84d34:	aa0303f6 	mov	x22, x3
   84d38:	f90013fe 	str	x30, [sp, #32]
   84d3c:	b9003fe1 	str	w1, [sp, #60]
   84d40:	94001328 	bl	899e0 <CDevice::CDevice()>
   84d44:	d00000a0 	adrp	x0, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   84d48:	913e0001 	add	x1, x0, #0xf80
   84d4c:	d2800003 	mov	x3, #0x0                   	// #0
   84d50:	52800022 	mov	w2, #0x1                   	// #1
   84d54:	f8018681 	str	x1, [x20], #24
   84d58:	aa1403e0 	mov	x0, x20
   84d5c:	b9403fe1 	ldr	w1, [sp, #60]
   84d60:	940015ec 	bl	8a510 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   84d64:	aa1603e3 	mov	x3, x22
   84d68:	91018260 	add	x0, x19, #0x60
   84d6c:	2a1503e1 	mov	w1, w21
   84d70:	52800002 	mov	w2, #0x0                   	// #0
   84d74:	940015e7 	bl	8a510 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   84d78:	52802023 	mov	w3, #0x101                 	// #257
   84d7c:	d2800122 	mov	x2, #0x9                   	// #9
   84d80:	3902a27f 	strb	wzr, [x19, #168]
   84d84:	f9005a7f 	str	xzr, [x19, #176]
   84d88:	aa1403e0 	mov	x0, x20
   84d8c:	52800021 	mov	w1, #0x1                   	// #1
   84d90:	79017263 	strh	w3, [x19, #184]
   84d94:	f9006262 	str	x2, [x19, #192]
   84d98:	f900867f 	str	xzr, [x19, #264]
   84d9c:	a9415bf5 	ldp	x21, x22, [sp, #16]
   84da0:	f94013fe 	ldr	x30, [sp, #32]
   84da4:	a8c453f3 	ldp	x19, x20, [sp], #64
   84da8:	1400168a 	b	8a7d0 <CGPIOPin::Write(unsigned int)>
   84dac:	d503201f 	nop

0000000000084db0 <CSoftSerialDevice::Initialize()>:
   84db0:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   84db4:	aa0003e4 	mov	x4, x0
   84db8:	f9000bfe 	str	x30, [sp, #16]
   84dbc:	3942a000 	ldrb	w0, [x0, #168]
   84dc0:	35000220 	cbnz	w0, 84e04 <CSoftSerialDevice::Initialize()+0x54>
   84dc4:	52800033 	mov	w19, #0x1                   	// #1
   84dc8:	91018094 	add	x20, x4, #0x60
   84dcc:	b0000005 	adrp	x5, 85000 <CSoftSerialDevice::InterruptHandler()+0xd0>
   84dd0:	2a1303e3 	mov	w3, w19
   84dd4:	910700a1 	add	x1, x5, #0x1c0
   84dd8:	aa0403e2 	mov	x2, x4
   84ddc:	3902a093 	strb	w19, [x4, #168]
   84de0:	aa1403e0 	mov	x0, x20
   84de4:	940016cb 	bl	8a910 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)>
   84de8:	aa1403e0 	mov	x0, x20
   84dec:	52800021 	mov	w1, #0x1                   	// #1
   84df0:	94001730 	bl	8aab0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>
   84df4:	2a1303e0 	mov	w0, w19
   84df8:	f9400bfe 	ldr	x30, [sp, #16]
   84dfc:	a8c253f3 	ldp	x19, x20, [sp], #32
   84e00:	d65f03c0 	ret
   84e04:	d00000a2 	adrp	x2, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   84e08:	d00000a1 	adrp	x1, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   84e0c:	913f0040 	add	x0, x2, #0xfc0
   84e10:	913ec021 	add	x1, x1, #0xfb0
   84e14:	52800782 	mov	w2, #0x3c                  	// #60
   84e18:	94001156 	bl	89370 <assertion_failed>
   84e1c:	d503201f 	nop

0000000000084e20 <CSoftSerialDevice::Write(void const*, unsigned int)>:
   84e20:	34000562 	cbz	w2, 84ecc <CSoftSerialDevice::Write(void const*, unsigned int)+0xac>
   84e24:	a9bc53f3 	stp	x19, x20, [sp, #-64]!
   84e28:	a9015bf5 	stp	x21, x22, [sp, #16]
   84e2c:	aa0103f6 	mov	x22, x1
   84e30:	51000441 	sub	w1, w2, #0x1
   84e34:	91006015 	add	x21, x0, #0x18
   84e38:	91000420 	add	x0, x1, #0x1
   84e3c:	a90263f7 	stp	x23, x24, [sp, #32]
   84e40:	2a0203f8 	mov	w24, w2
   84e44:	8b0002d7 	add	x23, x22, x0
   84e48:	f9001bfe 	str	x30, [sp, #48]
   84e4c:	d503201f 	nop
   84e50:	52800001 	mov	w1, #0x0                   	// #0
   84e54:	aa1503e0 	mov	x0, x21
   84e58:	9400165e 	bl	8a7d0 <CGPIOPin::Write(unsigned int)>
   84e5c:	940039dd 	bl	935d0 <CTimer::Get()>
   84e60:	52800340 	mov	w0, #0x1a                  	// #26
   84e64:	52800114 	mov	w20, #0x8                   	// #8
   84e68:	940039a6 	bl	93500 <CTimer::SimpleusDelay(unsigned int)>
   84e6c:	38c016d3 	ldrsb	w19, [x22], #1
   84e70:	12000261 	and	w1, w19, #0x1
   84e74:	aa1503e0 	mov	x0, x21
   84e78:	94001656 	bl	8a7d0 <CGPIOPin::Write(unsigned int)>
   84e7c:	940039d5 	bl	935d0 <CTimer::Get()>
   84e80:	52800340 	mov	w0, #0x1a                  	// #26
   84e84:	13017e73 	asr	w19, w19, #1
   84e88:	9400399e 	bl	93500 <CTimer::SimpleusDelay(unsigned int)>
   84e8c:	71000694 	subs	w20, w20, #0x1
   84e90:	54ffff01 	b.ne	84e70 <CSoftSerialDevice::Write(void const*, unsigned int)+0x50>  // b.any
   84e94:	52800021 	mov	w1, #0x1                   	// #1
   84e98:	aa1503e0 	mov	x0, x21
   84e9c:	9400164d 	bl	8a7d0 <CGPIOPin::Write(unsigned int)>
   84ea0:	940039cc 	bl	935d0 <CTimer::Get()>
   84ea4:	52800340 	mov	w0, #0x1a                  	// #26
   84ea8:	94003996 	bl	93500 <CTimer::SimpleusDelay(unsigned int)>
   84eac:	eb1602ff 	cmp	x23, x22
   84eb0:	54fffd01 	b.ne	84e50 <CSoftSerialDevice::Write(void const*, unsigned int)+0x30>  // b.any
   84eb4:	2a1803e0 	mov	w0, w24
   84eb8:	a9415bf5 	ldp	x21, x22, [sp, #16]
   84ebc:	a94263f7 	ldp	x23, x24, [sp, #32]
   84ec0:	f9401bfe 	ldr	x30, [sp, #48]
   84ec4:	a8c453f3 	ldp	x19, x20, [sp], #64
   84ec8:	d65f03c0 	ret
   84ecc:	52800000 	mov	w0, #0x0                   	// #0
   84ed0:	d65f03c0 	ret
   84ed4:	d503201f 	nop
   84ed8:	d503201f 	nop
   84edc:	d503201f 	nop

0000000000084ee0 <CSoftSerialDevice::InBuf(char)>:
   84ee0:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   84ee4:	aa0003f3 	mov	x19, x0
   84ee8:	52800020 	mov	w0, #0x1                   	// #1
   84eec:	13001c34 	sxtb	w20, w1
   84ef0:	f9000bfe 	str	x30, [sp, #16]
   84ef4:	9400414f 	bl	95430 <EnterCritical>
   84ef8:	b9410a61 	ldr	w1, [x19, #264]
   84efc:	b9410e62 	ldr	w2, [x19, #268]
   84f00:	11000420 	add	w0, w1, #0x1
   84f04:	12001403 	and	w3, w0, #0x3f
   84f08:	6b02007f 	cmp	w3, w2
   84f0c:	54000080 	b.eq	84f1c <CSoftSerialDevice::InBuf(char)+0x3c>  // b.none
   84f10:	8b214264 	add	x4, x19, w1, uxtw
   84f14:	39032094 	strb	w20, [x4, #200]
   84f18:	b9010a63 	str	w3, [x19, #264]
   84f1c:	f9400bfe 	ldr	x30, [sp, #16]
   84f20:	a8c253f3 	ldp	x19, x20, [sp], #32
   84f24:	1400416f 	b	954e0 <LeaveCritical>
   84f28:	d503201f 	nop
   84f2c:	d503201f 	nop

0000000000084f30 <CSoftSerialDevice::InterruptHandler()>:
   84f30:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   84f34:	aa0003f3 	mov	x19, x0
   84f38:	f9000bfe 	str	x30, [sp, #16]
   84f3c:	3942a000 	ldrb	w0, [x0, #168]
   84f40:	34001060 	cbz	w0, 8514c <CSoftSerialDevice::InterruptHandler()+0x21c>
   84f44:	3942e663 	ldrb	w3, [x19, #185]
   84f48:	340003a3 	cbz	w3, 84fbc <CSoftSerialDevice::InterruptHandler()+0x8c>
   84f4c:	3942e26c 	ldrb	w12, [x19, #184]
   84f50:	3400118c 	cbz	w12, 85180 <CSoftSerialDevice::InterruptHandler()+0x250>
   84f54:	9400399f 	bl	935d0 <CTimer::Get()>
   84f58:	940036a2 	bl	929e0 <CTimer::GetClockTicks()>
   84f5c:	91018274 	add	x20, x19, #0x60
   84f60:	b900be60 	str	w0, [x19, #188]
   84f64:	aa1403e0 	mov	x0, x20
   84f68:	9400171e 	bl	8abe0 <CGPIOPin::DisableInterrupt()>
   84f6c:	aa1403e0 	mov	x0, x20
   84f70:	52800001 	mov	w1, #0x0                   	// #0
   84f74:	940016cf 	bl	8aab0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>
   84f78:	d280012f 	mov	x15, #0x9                   	// #9
   84f7c:	7901727f 	strh	wzr, [x19, #184]
   84f80:	f9405a70 	ldr	x16, [x19, #176]
   84f84:	f900626f 	str	x15, [x19, #192]
   84f88:	b5000d70 	cbnz	x16, 85134 <CSoftSerialDevice::InterruptHandler()+0x204>
   84f8c:	94003991 	bl	935d0 <CTimer::Get()>
   84f90:	b0000001 	adrp	x1, 85000 <CSoftSerialDevice::InterruptHandler()+0xd0>
   84f94:	aa1303e4 	mov	x4, x19
   84f98:	910d0022 	add	x2, x1, #0x340
   84f9c:	d2800003 	mov	x3, #0x0                   	// #0
   84fa0:	52800041 	mov	w1, #0x2                   	// #2
   84fa4:	9400379f 	bl	92e20 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)>
   84fa8:	f9005a60 	str	x0, [x19, #176]
   84fac:	b4000fc0 	cbz	x0, 851a4 <CSoftSerialDevice::InterruptHandler()+0x274>
   84fb0:	f9400bfe 	ldr	x30, [sp, #16]
   84fb4:	a8c253f3 	ldp	x19, x20, [sp], #32
   84fb8:	d65f03c0 	ret
   84fbc:	94003985 	bl	935d0 <CTimer::Get()>
   84fc0:	94003688 	bl	929e0 <CTimer::GetClockTicks()>
   84fc4:	29579666 	ldp	w6, w5, [x19, #188]
   84fc8:	529d89e4 	mov	w4, #0xec4f                	// #60495
   84fcc:	72a9d884 	movk	w4, #0x4ec4, lsl #16
   84fd0:	b900be60 	str	w0, [x19, #188]
   84fd4:	4b060007 	sub	w7, w0, w6
   84fd8:	110030e8 	add	w8, w7, #0xc
   84fdc:	9ba47d09 	umull	x9, w8, w4
   84fe0:	d363fd32 	lsr	x18, x9, #35
   84fe4:	6b1200bf 	cmp	w5, w18
   84fe8:	54000923 	b.cc	8510c <CSoftSerialDevice::InterruptHandler()+0x1dc>  // b.lo, b.ul, b.last
   84fec:	34000652 	cbz	w18, 850b4 <CSoftSerialDevice::InterruptHandler()+0x184>
   84ff0:	3942e26b 	ldrb	w11, [x19, #184]
   84ff4:	52800030 	mov	w16, #0x1                   	// #1
   84ff8:	5280100c 	mov	w12, #0x80                  	// #128
   84ffc:	4b10024d 	sub	w13, w18, w16
   85000:	b940c66f 	ldr	w15, [x19, #196]
   85004:	7100017f 	cmp	w11, #0x0
   85008:	1a9f1194 	csel	w20, w12, wzr, ne  // ne = any
   8500c:	720009ae 	ands	w14, w13, #0x7
   85010:	54000480 	b.eq	850a0 <CSoftSerialDevice::InterruptHandler()+0x170>  // b.none
   85014:	710005df 	cmp	w14, #0x1
   85018:	2a4f068f 	orr	w15, w20, w15, lsr #1
   8501c:	52800050 	mov	w16, #0x2                   	// #2
   85020:	54000400 	b.eq	850a0 <CSoftSerialDevice::InterruptHandler()+0x170>  // b.none
   85024:	6b1001df 	cmp	w14, w16
   85028:	54000220 	b.eq	8506c <CSoftSerialDevice::InterruptHandler()+0x13c>  // b.none
   8502c:	71000ddf 	cmp	w14, #0x3
   85030:	540001a0 	b.eq	85064 <CSoftSerialDevice::InterruptHandler()+0x134>  // b.none
   85034:	710011df 	cmp	w14, #0x4
   85038:	54000120 	b.eq	8505c <CSoftSerialDevice::InterruptHandler()+0x12c>  // b.none
   8503c:	710015df 	cmp	w14, #0x5
   85040:	540000a0 	b.eq	85054 <CSoftSerialDevice::InterruptHandler()+0x124>  // b.none
   85044:	710019df 	cmp	w14, #0x6
   85048:	54000a81 	b.ne	85198 <CSoftSerialDevice::InterruptHandler()+0x268>  // b.any
   8504c:	2a4f068f 	orr	w15, w20, w15, lsr #1
   85050:	11000610 	add	w16, w16, #0x1
   85054:	2a4f068f 	orr	w15, w20, w15, lsr #1
   85058:	11000610 	add	w16, w16, #0x1
   8505c:	2a4f068f 	orr	w15, w20, w15, lsr #1
   85060:	11000610 	add	w16, w16, #0x1
   85064:	2a4f068f 	orr	w15, w20, w15, lsr #1
   85068:	11000610 	add	w16, w16, #0x1
   8506c:	2a4f068f 	orr	w15, w20, w15, lsr #1
   85070:	11000610 	add	w16, w16, #0x1
   85074:	6b12021f 	cmp	w16, w18
   85078:	2a4f0691 	orr	w17, w20, w15, lsr #1
   8507c:	54000180 	b.eq	850ac <CSoftSerialDevice::InterruptHandler()+0x17c>  // b.none
   85080:	2a51069e 	orr	w30, w20, w17, lsr #1
   85084:	11002210 	add	w16, w16, #0x8
   85088:	2a5e0680 	orr	w0, w20, w30, lsr #1
   8508c:	2a400681 	orr	w1, w20, w0, lsr #1
   85090:	2a410682 	orr	w2, w20, w1, lsr #1
   85094:	2a420683 	orr	w3, w20, w2, lsr #1
   85098:	2a430684 	orr	w4, w20, w3, lsr #1
   8509c:	2a44068f 	orr	w15, w20, w4, lsr #1
   850a0:	6b12021f 	cmp	w16, w18
   850a4:	2a4f0691 	orr	w17, w20, w15, lsr #1
   850a8:	54fffec1 	b.ne	85080 <CSoftSerialDevice::InterruptHandler()+0x150>  // b.any
   850ac:	4b1000a5 	sub	w5, w5, w16
   850b0:	29184665 	stp	w5, w17, [x19, #192]
   850b4:	91018274 	add	x20, x19, #0x60
   850b8:	34000325 	cbz	w5, 8511c <CSoftSerialDevice::InterruptHandler()+0x1ec>
   850bc:	3942e666 	ldrb	w6, [x19, #185]
   850c0:	35000066 	cbnz	w6, 850cc <CSoftSerialDevice::InterruptHandler()+0x19c>
   850c4:	3942e267 	ldrb	w7, [x19, #184]
   850c8:	350004e7 	cbnz	w7, 85164 <CSoftSerialDevice::InterruptHandler()+0x234>
   850cc:	aa1403e0 	mov	x0, x20
   850d0:	940016c4 	bl	8abe0 <CGPIOPin::DisableInterrupt()>
   850d4:	aa1403e0 	mov	x0, x20
   850d8:	52800021 	mov	w1, #0x1                   	// #1
   850dc:	94001675 	bl	8aab0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>
   850e0:	52800029 	mov	w9, #0x1                   	// #1
   850e4:	3902e269 	strb	w9, [x19, #184]
   850e8:	3942e66a 	ldrb	w10, [x19, #185]
   850ec:	34fff62a 	cbz	w10, 84fb0 <CSoftSerialDevice::InterruptHandler()+0x80>
   850f0:	f9405a6b 	ldr	x11, [x19, #176]
   850f4:	b4fff5eb 	cbz	x11, 84fb0 <CSoftSerialDevice::InterruptHandler()+0x80>
   850f8:	94003936 	bl	935d0 <CTimer::Get()>
   850fc:	f9405a61 	ldr	x1, [x19, #176]
   85100:	940037a0 	bl	92f80 <CTimer::CancelKernelTimer(unsigned long)>
   85104:	f9005a7f 	str	xzr, [x19, #176]
   85108:	17ffffaa 	b	84fb0 <CSoftSerialDevice::InterruptHandler()+0x80>
   8510c:	5280002a 	mov	w10, #0x1                   	// #1
   85110:	2a0503f2 	mov	w18, w5
   85114:	3902e66a 	strb	w10, [x19, #185]
   85118:	17ffffb5 	b	84fec <CSoftSerialDevice::InterruptHandler()+0xbc>
   8511c:	aa1303e0 	mov	x0, x19
   85120:	39431261 	ldrb	w1, [x19, #196]
   85124:	97ffff6f 	bl	84ee0 <CSoftSerialDevice::InBuf(char)>
   85128:	52800028 	mov	w8, #0x1                   	// #1
   8512c:	3902e668 	strb	w8, [x19, #185]
   85130:	17ffffe7 	b	850cc <CSoftSerialDevice::InterruptHandler()+0x19c>
   85134:	b00000b1 	adrp	x17, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   85138:	b00000b2 	adrp	x18, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   8513c:	913ec221 	add	x1, x17, #0xfb0
   85140:	913fc240 	add	x0, x18, #0xff0
   85144:	52801162 	mov	w2, #0x8b                  	// #139
   85148:	9400108a 	bl	89370 <assertion_failed>
   8514c:	b00000a2 	adrp	x2, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   85150:	b00000a1 	adrp	x1, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   85154:	913f4040 	add	x0, x2, #0xfd0
   85158:	913ec021 	add	x1, x1, #0xfb0
   8515c:	52800f62 	mov	w2, #0x7b                  	// #123
   85160:	94001084 	bl	89370 <assertion_failed>
   85164:	aa1403e0 	mov	x0, x20
   85168:	9400169e 	bl	8abe0 <CGPIOPin::DisableInterrupt()>
   8516c:	aa1403e0 	mov	x0, x20
   85170:	52800001 	mov	w1, #0x0                   	// #0
   85174:	9400164f 	bl	8aab0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>
   85178:	3902e27f 	strb	wzr, [x19, #184]
   8517c:	17ffffdb 	b	850e8 <CSoftSerialDevice::InterruptHandler()+0x1b8>
   85180:	b00000ad 	adrp	x13, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   85184:	b00000ae 	adrp	x14, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   85188:	913ec1a1 	add	x1, x13, #0xfb0
   8518c:	913f81c0 	add	x0, x14, #0xfe0
   85190:	52800fe2 	mov	w2, #0x7f                  	// #127
   85194:	94001077 	bl	89370 <assertion_failed>
   85198:	2a4f068f 	orr	w15, w20, w15, lsr #1
   8519c:	52800070 	mov	w16, #0x3                   	// #3
   851a0:	17ffffab 	b	8504c <CSoftSerialDevice::InterruptHandler()+0x11c>
   851a4:	b00000b3 	adrp	x19, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   851a8:	d00000be 	adrp	x30, 9b000 <vtable for CSoftSerialDevice+0x90>
   851ac:	913ec261 	add	x1, x19, #0xfb0
   851b0:	910003c0 	add	x0, x30, #0x0
   851b4:	528011a2 	mov	w2, #0x8d                  	// #141
   851b8:	9400106e 	bl	89370 <assertion_failed>
   851bc:	d503201f 	nop

00000000000851c0 <CSoftSerialDevice::InterruptStub(void*)>:
   851c0:	b4000040 	cbz	x0, 851c8 <CSoftSerialDevice::InterruptStub(void*)+0x8>
   851c4:	17ffff5b 	b	84f30 <CSoftSerialDevice::InterruptHandler()>
   851c8:	b00000a1 	adrp	x1, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   851cc:	d00000a0 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   851d0:	f81f0ffe 	str	x30, [sp, #-16]!
   851d4:	913ec021 	add	x1, x1, #0xfb0
   851d8:	91004000 	add	x0, x0, #0x10
   851dc:	528018a2 	mov	w2, #0xc5                  	// #197
   851e0:	94001064 	bl	89370 <assertion_failed>
   851e4:	d503201f 	nop
   851e8:	d503201f 	nop
   851ec:	d503201f 	nop

00000000000851f0 <CSoftSerialDevice::TimerHandler()>:
   851f0:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   851f4:	aa0003f3 	mov	x19, x0
   851f8:	f9000bfe 	str	x30, [sp, #16]
   851fc:	3942a000 	ldrb	w0, [x0, #168]
   85200:	340007c0 	cbz	w0, 852f8 <CSoftSerialDevice::TimerHandler()+0x108>
   85204:	3942e663 	ldrb	w3, [x19, #185]
   85208:	35000843 	cbnz	w3, 85310 <CSoftSerialDevice::TimerHandler()+0x120>
   8520c:	3942e266 	ldrb	w6, [x19, #184]
   85210:	340005e6 	cbz	w6, 852cc <CSoftSerialDevice::TimerHandler()+0xdc>
   85214:	29580667 	ldp	w7, w1, [x19, #192]
   85218:	510004ef 	sub	w15, w7, #0x1
   8521c:	b900c26f 	str	w15, [x19, #192]
   85220:	34000527 	cbz	w7, 852c4 <CSoftSerialDevice::TimerHandler()+0xd4>
   85224:	720008e8 	ands	w8, w7, #0x7
   85228:	54000420 	b.eq	852ac <CSoftSerialDevice::TimerHandler()+0xbc>  // b.none
   8522c:	7100051f 	cmp	w8, #0x1
   85230:	54000340 	b.eq	85298 <CSoftSerialDevice::TimerHandler()+0xa8>  // b.none
   85234:	7100091f 	cmp	w8, #0x2
   85238:	540002a0 	b.eq	8528c <CSoftSerialDevice::TimerHandler()+0x9c>  // b.none
   8523c:	71000d1f 	cmp	w8, #0x3
   85240:	54000200 	b.eq	85280 <CSoftSerialDevice::TimerHandler()+0x90>  // b.none
   85244:	7100111f 	cmp	w8, #0x4
   85248:	54000160 	b.eq	85274 <CSoftSerialDevice::TimerHandler()+0x84>  // b.none
   8524c:	7100151f 	cmp	w8, #0x5
   85250:	540000c0 	b.eq	85268 <CSoftSerialDevice::TimerHandler()+0x78>  // b.none
   85254:	7100191f 	cmp	w8, #0x6
   85258:	54000681 	b.ne	85328 <CSoftSerialDevice::TimerHandler()+0x138>  // b.any
   8525c:	53017c2a 	lsr	w10, w1, #1
   85260:	510005ef 	sub	w15, w15, #0x1
   85264:	32190141 	orr	w1, w10, #0x80
   85268:	53017c2b 	lsr	w11, w1, #1
   8526c:	510005ef 	sub	w15, w15, #0x1
   85270:	32190161 	orr	w1, w11, #0x80
   85274:	53017c2c 	lsr	w12, w1, #1
   85278:	510005ef 	sub	w15, w15, #0x1
   8527c:	32190181 	orr	w1, w12, #0x80
   85280:	53017c2d 	lsr	w13, w1, #1
   85284:	510005ef 	sub	w15, w15, #0x1
   85288:	321901a1 	orr	w1, w13, #0x80
   8528c:	53017c2e 	lsr	w14, w1, #1
   85290:	510005ef 	sub	w15, w15, #0x1
   85294:	321901c1 	orr	w1, w14, #0x80
   85298:	510005ef 	sub	w15, w15, #0x1
   8529c:	53017c30 	lsr	w16, w1, #1
   852a0:	310005ff 	cmn	w15, #0x1
   852a4:	32190201 	orr	w1, w16, #0x80
   852a8:	540000c0 	b.eq	852c0 <CSoftSerialDevice::TimerHandler()+0xd0>  // b.none
   852ac:	510021ef 	sub	w15, w15, #0x8
   852b0:	32181c31 	orr	w17, w1, #0xff00
   852b4:	310005ff 	cmn	w15, #0x1
   852b8:	53087e21 	lsr	w1, w17, #8
   852bc:	54ffff81 	b.ne	852ac <CSoftSerialDevice::TimerHandler()+0xbc>  // b.any
   852c0:	2918066f 	stp	w15, w1, [x19, #192]
   852c4:	aa1303e0 	mov	x0, x19
   852c8:	97ffff06 	bl	84ee0 <CSoftSerialDevice::InBuf(char)>
   852cc:	91018274 	add	x20, x19, #0x60
   852d0:	aa1403e0 	mov	x0, x20
   852d4:	94001643 	bl	8abe0 <CGPIOPin::DisableInterrupt()>
   852d8:	aa1403e0 	mov	x0, x20
   852dc:	52800021 	mov	w1, #0x1                   	// #1
   852e0:	940015f4 	bl	8aab0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>
   852e4:	52802032 	mov	w18, #0x101                 	// #257
   852e8:	79017272 	strh	w18, [x19, #184]
   852ec:	f9400bfe 	ldr	x30, [sp, #16]
   852f0:	a8c253f3 	ldp	x19, x20, [sp], #32
   852f4:	d65f03c0 	ret
   852f8:	b00000a2 	adrp	x2, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   852fc:	b00000a1 	adrp	x1, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   85300:	913f4040 	add	x0, x2, #0xfd0
   85304:	913ec021 	add	x1, x1, #0xfb0
   85308:	52801982 	mov	w2, #0xcc                  	// #204
   8530c:	94001019 	bl	89370 <assertion_failed>
   85310:	b00000a4 	adrp	x4, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   85314:	d00000a5 	adrp	x5, 9b000 <vtable for CSoftSerialDevice+0x90>
   85318:	913ec081 	add	x1, x4, #0xfb0
   8531c:	910080a0 	add	x0, x5, #0x20
   85320:	528019a2 	mov	w2, #0xcd                  	// #205
   85324:	94001013 	bl	89370 <assertion_failed>
   85328:	53017c29 	lsr	w9, w1, #1
   8532c:	510005ef 	sub	w15, w15, #0x1
   85330:	32190121 	orr	w1, w9, #0x80
   85334:	17ffffca 	b	8525c <CSoftSerialDevice::TimerHandler()+0x6c>
   85338:	d503201f 	nop
   8533c:	d503201f 	nop

0000000000085340 <CSoftSerialDevice::TimerStub(unsigned long, void*, void*)>:
   85340:	b4000062 	cbz	x2, 8534c <CSoftSerialDevice::TimerStub(unsigned long, void*, void*)+0xc>
   85344:	aa0203e0 	mov	x0, x2
   85348:	17ffffaa 	b	851f0 <CSoftSerialDevice::TimerHandler()>
   8534c:	b00000a1 	adrp	x1, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   85350:	d00000a0 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   85354:	f81f0ffe 	str	x30, [sp, #-16]!
   85358:	913ec021 	add	x1, x1, #0xfb0
   8535c:	91004000 	add	x0, x0, #0x10
   85360:	52801c62 	mov	w2, #0xe3                  	// #227
   85364:	94001003 	bl	89370 <assertion_failed>
   85368:	d503201f 	nop
   8536c:	d503201f 	nop

0000000000085370 <CSoftSerialDevice::BufStat() const>:
   85370:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   85374:	aa0003f3 	mov	x19, x0
   85378:	52800020 	mov	w0, #0x1                   	// #1
   8537c:	9400402d 	bl	95430 <EnterCritical>
   85380:	b9410a61 	ldr	w1, [x19, #264]
   85384:	b9410e60 	ldr	w0, [x19, #268]
   85388:	6b00003f 	cmp	w1, w0
   8538c:	540000a0 	b.eq	853a0 <CSoftSerialDevice::BufStat() const+0x30>  // b.none
   85390:	94004054 	bl	954e0 <LeaveCritical>
   85394:	52800020 	mov	w0, #0x1                   	// #1
   85398:	a8c17bf3 	ldp	x19, x30, [sp], #16
   8539c:	d65f03c0 	ret
   853a0:	94004050 	bl	954e0 <LeaveCritical>
   853a4:	52800000 	mov	w0, #0x0                   	// #0
   853a8:	a8c17bf3 	ldp	x19, x30, [sp], #16
   853ac:	d65f03c0 	ret

00000000000853b0 <CSoftSerialDevice::OutBuf()>:
   853b0:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   853b4:	aa0003f3 	mov	x19, x0
   853b8:	52800020 	mov	w0, #0x1                   	// #1
   853bc:	f9000bfe 	str	x30, [sp, #16]
   853c0:	9400401c 	bl	95430 <EnterCritical>
   853c4:	b9410a61 	ldr	w1, [x19, #264]
   853c8:	b9410e60 	ldr	w0, [x19, #268]
   853cc:	6b00003f 	cmp	w1, w0
   853d0:	54000160 	b.eq	853fc <CSoftSerialDevice::OutBuf()+0x4c>  // b.none
   853d4:	8b204263 	add	x3, x19, w0, uxtw
   853d8:	11000402 	add	w2, w0, #0x1
   853dc:	39c32074 	ldrsb	w20, [x3, #200]
   853e0:	12001444 	and	w4, w2, #0x3f
   853e4:	b9010e64 	str	w4, [x19, #268]
   853e8:	9400403e 	bl	954e0 <LeaveCritical>
   853ec:	2a1403e0 	mov	w0, w20
   853f0:	f9400bfe 	ldr	x30, [sp, #16]
   853f4:	a8c253f3 	ldp	x19, x20, [sp], #32
   853f8:	d65f03c0 	ret
   853fc:	94004039 	bl	954e0 <LeaveCritical>
   85400:	52800014 	mov	w20, #0x0                   	// #0
   85404:	f9400bfe 	ldr	x30, [sp, #16]
   85408:	2a1403e0 	mov	w0, w20
   8540c:	a8c253f3 	ldp	x19, x20, [sp], #32
   85410:	d65f03c0 	ret
   85414:	d503201f 	nop
   85418:	d503201f 	nop
   8541c:	d503201f 	nop

0000000000085420 <CSoftSerialDevice::Read(void*, unsigned int)>:
   85420:	a9bb53f3 	stp	x19, x20, [sp, #-80]!
   85424:	aa0003f3 	mov	x19, x0
   85428:	a9015bf5 	stp	x21, x22, [sp, #16]
   8542c:	aa0103f6 	mov	x22, x1
   85430:	a90263f7 	stp	x23, x24, [sp, #32]
   85434:	2a0203f8 	mov	w24, w2
   85438:	f90023fe 	str	x30, [sp, #64]
   8543c:	d503201f 	nop
   85440:	aa1303e0 	mov	x0, x19
   85444:	97ffffcb 	bl	85370 <CSoftSerialDevice::BufStat() const>
   85448:	34ffffc0 	cbz	w0, 85440 <CSoftSerialDevice::Read(void*, unsigned int)+0x20>
   8544c:	34000478 	cbz	w24, 854d8 <CSoftSerialDevice::Read(void*, unsigned int)+0xb8>
   85450:	51000718 	sub	w24, w24, #0x1
   85454:	d2800014 	mov	x20, #0x0                   	// #0
   85458:	f2400717 	ands	x23, x24, #0x3
   8545c:	540004c0 	b.eq	854f4 <CSoftSerialDevice::Read(void*, unsigned int)+0xd4>  // b.none
   85460:	aa1303e0 	mov	x0, x19
   85464:	52800015 	mov	w21, #0x0                   	// #0
   85468:	97ffffc2 	bl	85370 <CSoftSerialDevice::BufStat() const>
   8546c:	34000380 	cbz	w0, 854dc <CSoftSerialDevice::Read(void*, unsigned int)+0xbc>
   85470:	aa1303e0 	mov	x0, x19
   85474:	d2800034 	mov	x20, #0x1                   	// #1
   85478:	97ffffce 	bl	853b0 <CSoftSerialDevice::OutBuf()>
   8547c:	eb1402ff 	cmp	x23, x20
   85480:	390002c0 	strb	w0, [x22]
   85484:	54000380 	b.eq	854f4 <CSoftSerialDevice::Read(void*, unsigned int)+0xd4>  // b.none
   85488:	f1000aff 	cmp	x23, #0x2
   8548c:	54000120 	b.eq	854b0 <CSoftSerialDevice::Read(void*, unsigned int)+0x90>  // b.none
   85490:	aa1303e0 	mov	x0, x19
   85494:	2a1403f5 	mov	w21, w20
   85498:	97ffffb6 	bl	85370 <CSoftSerialDevice::BufStat() const>
   8549c:	34000200 	cbz	w0, 854dc <CSoftSerialDevice::Read(void*, unsigned int)+0xbc>
   854a0:	aa1303e0 	mov	x0, x19
   854a4:	97ffffc3 	bl	853b0 <CSoftSerialDevice::OutBuf()>
   854a8:	38346ac0 	strb	w0, [x22, x20]
   854ac:	d2800054 	mov	x20, #0x2                   	// #2
   854b0:	aa1303e0 	mov	x0, x19
   854b4:	2a1403f5 	mov	w21, w20
   854b8:	97ffffae 	bl	85370 <CSoftSerialDevice::BufStat() const>
   854bc:	34000100 	cbz	w0, 854dc <CSoftSerialDevice::Read(void*, unsigned int)+0xbc>
   854c0:	aa1303e0 	mov	x0, x19
   854c4:	a9036bf9 	stp	x25, x26, [sp, #48]
   854c8:	97ffffba 	bl	853b0 <CSoftSerialDevice::OutBuf()>
   854cc:	38346ac0 	strb	w0, [x22, x20]
   854d0:	91000694 	add	x20, x20, #0x1
   854d4:	14000009 	b	854f8 <CSoftSerialDevice::Read(void*, unsigned int)+0xd8>
   854d8:	52800015 	mov	w21, #0x0                   	// #0
   854dc:	2a1503e0 	mov	w0, w21
   854e0:	a9415bf5 	ldp	x21, x22, [sp, #16]
   854e4:	a94263f7 	ldp	x23, x24, [sp, #32]
   854e8:	f94023fe 	ldr	x30, [sp, #64]
   854ec:	a8c553f3 	ldp	x19, x20, [sp], #80
   854f0:	d65f03c0 	ret
   854f4:	a9036bf9 	stp	x25, x26, [sp, #48]
   854f8:	91000697 	add	x23, x20, #0x1
   854fc:	aa1303e0 	mov	x0, x19
   85500:	91000e9a 	add	x26, x20, #0x3
   85504:	2a1403f5 	mov	w21, w20
   85508:	910006f9 	add	x25, x23, #0x1
   8550c:	97ffff99 	bl	85370 <CSoftSerialDevice::BufStat() const>
   85510:	34000480 	cbz	w0, 855a0 <CSoftSerialDevice::Read(void*, unsigned int)+0x180>
   85514:	aa1303e0 	mov	x0, x19
   85518:	11000695 	add	w21, w20, #0x1
   8551c:	97ffffa5 	bl	853b0 <CSoftSerialDevice::OutBuf()>
   85520:	eb18029f 	cmp	x20, x24
   85524:	38346ac0 	strb	w0, [x22, x20]
   85528:	aa1303e0 	mov	x0, x19
   8552c:	540003a0 	b.eq	855a0 <CSoftSerialDevice::Read(void*, unsigned int)+0x180>  // b.none
   85530:	2a1703f5 	mov	w21, w23
   85534:	91001294 	add	x20, x20, #0x4
   85538:	97ffff8e 	bl	85370 <CSoftSerialDevice::BufStat() const>
   8553c:	34000320 	cbz	w0, 855a0 <CSoftSerialDevice::Read(void*, unsigned int)+0x180>
   85540:	aa1303e0 	mov	x0, x19
   85544:	2a1903f5 	mov	w21, w25
   85548:	97ffff9a 	bl	853b0 <CSoftSerialDevice::OutBuf()>
   8554c:	38376ac0 	strb	w0, [x22, x23]
   85550:	aa1303e0 	mov	x0, x19
   85554:	97ffff87 	bl	85370 <CSoftSerialDevice::BufStat() const>
   85558:	34000240 	cbz	w0, 855a0 <CSoftSerialDevice::Read(void*, unsigned int)+0x180>
   8555c:	aa1303e0 	mov	x0, x19
   85560:	2a1a03f5 	mov	w21, w26
   85564:	97ffff93 	bl	853b0 <CSoftSerialDevice::OutBuf()>
   85568:	38396ac0 	strb	w0, [x22, x25]
   8556c:	aa1303e0 	mov	x0, x19
   85570:	97ffff80 	bl	85370 <CSoftSerialDevice::BufStat() const>
   85574:	34000160 	cbz	w0, 855a0 <CSoftSerialDevice::Read(void*, unsigned int)+0x180>
   85578:	aa1303e0 	mov	x0, x19
   8557c:	91000697 	add	x23, x20, #0x1
   85580:	97ffff8c 	bl	853b0 <CSoftSerialDevice::OutBuf()>
   85584:	383a6ac0 	strb	w0, [x22, x26]
   85588:	aa1303e0 	mov	x0, x19
   8558c:	91000e9a 	add	x26, x20, #0x3
   85590:	2a1403f5 	mov	w21, w20
   85594:	910006f9 	add	x25, x23, #0x1
   85598:	97ffff76 	bl	85370 <CSoftSerialDevice::BufStat() const>
   8559c:	35fffbc0 	cbnz	w0, 85514 <CSoftSerialDevice::Read(void*, unsigned int)+0xf4>
   855a0:	2a1503e0 	mov	w0, w21
   855a4:	a9415bf5 	ldp	x21, x22, [sp, #16]
   855a8:	a94263f7 	ldp	x23, x24, [sp, #32]
   855ac:	a9436bf9 	ldp	x25, x26, [sp, #48]
   855b0:	f94023fe 	ldr	x30, [sp, #64]
   855b4:	a8c553f3 	ldp	x19, x20, [sp], #80
   855b8:	d65f03c0 	ret
   855bc:	d503201f 	nop

00000000000855c0 <CSoftSerialDevice::~CSoftSerialDevice()>:
   855c0:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   855c4:	aa0003f3 	mov	x19, x0
   855c8:	b00000a0 	adrp	x0, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   855cc:	913e0002 	add	x2, x0, #0xf80
   855d0:	f9000bfe 	str	x30, [sp, #16]
   855d4:	f9000262 	str	x2, [x19]
   855d8:	f9405a61 	ldr	x1, [x19, #176]
   855dc:	b5000181 	cbnz	x1, 8560c <CSoftSerialDevice::~CSoftSerialDevice()+0x4c>
   855e0:	3942a263 	ldrb	w3, [x19, #168]
   855e4:	91018274 	add	x20, x19, #0x60
   855e8:	350001e3 	cbnz	w3, 85624 <CSoftSerialDevice::~CSoftSerialDevice()+0x64>
   855ec:	aa1403e0 	mov	x0, x20
   855f0:	940013dc 	bl	8a560 <CGPIOPin::~CGPIOPin()>
   855f4:	91006260 	add	x0, x19, #0x18
   855f8:	940013da 	bl	8a560 <CGPIOPin::~CGPIOPin()>
   855fc:	aa1303e0 	mov	x0, x19
   85600:	f9400bfe 	ldr	x30, [sp, #16]
   85604:	a8c253f3 	ldp	x19, x20, [sp], #32
   85608:	140010d2 	b	89950 <CDevice::~CDevice()>
   8560c:	940037f1 	bl	935d0 <CTimer::Get()>
   85610:	f9405a61 	ldr	x1, [x19, #176]
   85614:	91018274 	add	x20, x19, #0x60
   85618:	9400365a 	bl	92f80 <CTimer::CancelKernelTimer(unsigned long)>
   8561c:	3942a263 	ldrb	w3, [x19, #168]
   85620:	34fffe63 	cbz	w3, 855ec <CSoftSerialDevice::~CSoftSerialDevice()+0x2c>
   85624:	aa1403e0 	mov	x0, x20
   85628:	9400156e 	bl	8abe0 <CGPIOPin::DisableInterrupt()>
   8562c:	aa1403e0 	mov	x0, x20
   85630:	940014f0 	bl	8a9f0 <CGPIOPin::DisconnectInterrupt()>
   85634:	aa1403e0 	mov	x0, x20
   85638:	940013ca 	bl	8a560 <CGPIOPin::~CGPIOPin()>
   8563c:	91006260 	add	x0, x19, #0x18
   85640:	940013c8 	bl	8a560 <CGPIOPin::~CGPIOPin()>
   85644:	aa1303e0 	mov	x0, x19
   85648:	f9400bfe 	ldr	x30, [sp, #16]
   8564c:	a8c253f3 	ldp	x19, x20, [sp], #32
   85650:	140010c0 	b	89950 <CDevice::~CDevice()>
   85654:	d503201f 	nop
   85658:	d503201f 	nop
   8565c:	d503201f 	nop

0000000000085660 <CSoftSerialDevice::~CSoftSerialDevice()>:
   85660:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   85664:	aa0003f3 	mov	x19, x0
   85668:	97ffffd6 	bl	855c0 <CSoftSerialDevice::~CSoftSerialDevice()>
   8566c:	aa1303e0 	mov	x0, x19
   85670:	d2802201 	mov	x1, #0x110                 	// #272
   85674:	a8c17bf3 	ldp	x19, x30, [sp], #16
   85678:	14003d12 	b	94ac0 <operator delete(void*, unsigned long)>
   8567c:	00000000 	.inst	0x00000000 ; undefined

0000000000085680 <CFATFileSystem::CFATFileSystem()>:
   85680:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   85684:	aa0003f3 	mov	x19, x0
   85688:	91008014 	add	x20, x0, #0x20
   8568c:	a9017bf5 	stp	x21, x30, [sp, #16]
   85690:	9101c015 	add	x21, x0, #0x70
   85694:	9400033f 	bl	86390 <CFATCache::CFATCache()>
   85698:	aa1403e0 	mov	x0, x20
   8569c:	aa1303e1 	mov	x1, x19
   856a0:	94000510 	bl	86ae0 <CFATInfo::CFATInfo(CFATCache*)>
   856a4:	aa1403e2 	mov	x2, x20
   856a8:	aa1503e0 	mov	x0, x21
   856ac:	aa1303e1 	mov	x1, x19
   856b0:	94000728 	bl	87350 <CFAT::CFAT(CFATCache*, CFATInfo*)>
   856b4:	aa1503e3 	mov	x3, x21
   856b8:	aa1403e2 	mov	x2, x20
   856bc:	aa1303e1 	mov	x1, x19
   856c0:	91022260 	add	x0, x19, #0x88
   856c4:	94000957 	bl	87c20 <CFATDirectory::CFATDirectory(CFATCache*, CFATInfo*, CFAT*)>
   856c8:	9102c260 	add	x0, x19, #0xb0
   856cc:	d2811802 	mov	x2, #0x8c0                 	// #2240
   856d0:	a9417bf5 	ldp	x21, x30, [sp, #16]
   856d4:	52800001 	mov	w1, #0x0                   	// #0
   856d8:	b909727f 	str	wzr, [x19, #2416]
   856dc:	a8c253f3 	ldp	x19, x20, [sp], #32
   856e0:	140037c7 	b	935fc <memset>
   856e4:	d503201f 	nop
   856e8:	d503201f 	nop
   856ec:	d503201f 	nop

00000000000856f0 <CFATFileSystem::~CFATFileSystem()>:
   856f0:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   856f4:	aa0003f3 	mov	x19, x0
   856f8:	91022000 	add	x0, x0, #0x88
   856fc:	9400094d 	bl	87c30 <CFATDirectory::~CFATDirectory()>
   85700:	9101c260 	add	x0, x19, #0x70
   85704:	94000717 	bl	87360 <CFAT::~CFAT()>
   85708:	91008260 	add	x0, x19, #0x20
   8570c:	940004fd 	bl	86b00 <CFATInfo::~CFATInfo()>
   85710:	aa1303e0 	mov	x0, x19
   85714:	a8c17bf3 	ldp	x19, x30, [sp], #16
   85718:	14000322 	b	863a0 <CFATCache::~CFATCache()>
   8571c:	d503201f 	nop

0000000000085720 <CFATFileSystem::Mount(CDevice*)>:
   85720:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   85724:	aa0003f3 	mov	x19, x0
   85728:	94000322 	bl	863b0 <CFATCache::Open(CDevice*)>
   8572c:	35000060 	cbnz	w0, 85738 <CFATFileSystem::Mount(CDevice*)+0x18>
   85730:	a8c17bf3 	ldp	x19, x30, [sp], #16
   85734:	d65f03c0 	ret
   85738:	91008260 	add	x0, x19, #0x20
   8573c:	940004f5 	bl	86b10 <CFATInfo::Initialize()>
   85740:	72001c1f 	tst	w0, #0xff
   85744:	52800020 	mov	w0, #0x1                   	// #1
   85748:	54ffff41 	b.ne	85730 <CFATFileSystem::Mount(CDevice*)+0x10>  // b.any
   8574c:	aa1303e0 	mov	x0, x19
   85750:	94000350 	bl	86490 <CFATCache::Close()>
   85754:	52800000 	mov	w0, #0x0                   	// #0
   85758:	17fffff6 	b	85730 <CFATFileSystem::Mount(CDevice*)+0x10>
   8575c:	d503201f 	nop

0000000000085760 <CFATFileSystem::UnMount()>:
   85760:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   85764:	aa0003f3 	mov	x19, x0
   85768:	91008000 	add	x0, x0, #0x20
   8576c:	9400064d 	bl	870a0 <CFATInfo::UpdateFSInfo()>
   85770:	aa1303e0 	mov	x0, x19
   85774:	a8c17bf3 	ldp	x19, x30, [sp], #16
   85778:	14000346 	b	86490 <CFATCache::Close()>
   8577c:	d503201f 	nop

0000000000085780 <CFATFileSystem::Synchronize()>:
   85780:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   85784:	aa0003f3 	mov	x19, x0
   85788:	91008000 	add	x0, x0, #0x20
   8578c:	94000645 	bl	870a0 <CFATInfo::UpdateFSInfo()>
   85790:	aa1303e0 	mov	x0, x19
   85794:	a8c17bf3 	ldp	x19, x30, [sp], #16
   85798:	1400035e 	b	86510 <CFATCache::Flush()>
   8579c:	d503201f 	nop

00000000000857a0 <CFATFileSystem::RootFindFirst(TDirentry*, TFindCurrentEntry*)>:
   857a0:	91022000 	add	x0, x0, #0x88
   857a4:	f81f0ffe 	str	x30, [sp, #-16]!
   857a8:	94000ad6 	bl	88300 <CFATDirectory::FindFirst(TDirentry*, TFindCurrentEntry*)>
   857ac:	12001c00 	and	w0, w0, #0xff
   857b0:	f84107fe 	ldr	x30, [sp], #16
   857b4:	d65f03c0 	ret
   857b8:	d503201f 	nop
   857bc:	d503201f 	nop

00000000000857c0 <CFATFileSystem::RootFindNext(TDirentry*, TFindCurrentEntry*)>:
   857c0:	91022000 	add	x0, x0, #0x88
   857c4:	f81f0ffe 	str	x30, [sp, #-16]!
   857c8:	94000ada 	bl	88330 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)>
   857cc:	12001c00 	and	w0, w0, #0xff
   857d0:	f84107fe 	ldr	x30, [sp], #16
   857d4:	d65f03c0 	ret
   857d8:	d503201f 	nop
   857dc:	d503201f 	nop

00000000000857e0 <CFATFileSystem::FileOpen(char const*)>:
   857e0:	a9bc53f3 	stp	x19, x20, [sp, #-64]!
   857e4:	a9015bf5 	stp	x21, x22, [sp, #16]
   857e8:	aa0003f5 	mov	x21, x0
   857ec:	aa0103f6 	mov	x22, x1
   857f0:	b9497000 	ldr	w0, [x0, #2416]
   857f4:	f9001bfe 	str	x30, [sp, #48]
   857f8:	35000ae0 	cbnz	w0, 85954 <CFATFileSystem::FileOpen(char const*)+0x174>
   857fc:	9102c2a1 	add	x1, x21, #0xb0
   85800:	52800033 	mov	w19, #0x1                   	// #1
   85804:	b9400020 	ldr	w0, [x1]
   85808:	51000674 	sub	w20, w19, #0x1
   8580c:	34000540 	cbz	w0, 858b4 <CFATFileSystem::FileOpen(char const*)+0xd4>
   85810:	11000673 	add	w19, w19, #0x1
   85814:	b9403822 	ldr	w2, [x1, #56]
   85818:	2a1303e3 	mov	w3, w19
   8581c:	51000674 	sub	w20, w19, #0x1
   85820:	340004a2 	cbz	w2, 858b4 <CFATFileSystem::FileOpen(char const*)+0xd4>
   85824:	11000673 	add	w19, w19, #0x1
   85828:	b9407024 	ldr	w4, [x1, #112]
   8582c:	51000674 	sub	w20, w19, #0x1
   85830:	34000424 	cbz	w4, 858b4 <CFATFileSystem::FileOpen(char const*)+0xd4>
   85834:	b940a825 	ldr	w5, [x1, #168]
   85838:	11000873 	add	w19, w3, #0x2
   8583c:	11000474 	add	w20, w3, #0x1
   85840:	340003a5 	cbz	w5, 858b4 <CFATFileSystem::FileOpen(char const*)+0xd4>
   85844:	b940e026 	ldr	w6, [x1, #224]
   85848:	11000c73 	add	w19, w3, #0x3
   8584c:	11000874 	add	w20, w3, #0x2
   85850:	34000326 	cbz	w6, 858b4 <CFATFileSystem::FileOpen(char const*)+0xd4>
   85854:	b9411827 	ldr	w7, [x1, #280]
   85858:	11001073 	add	w19, w3, #0x4
   8585c:	11000c74 	add	w20, w3, #0x3
   85860:	340002a7 	cbz	w7, 858b4 <CFATFileSystem::FileOpen(char const*)+0xd4>
   85864:	b9415028 	ldr	w8, [x1, #336]
   85868:	11001473 	add	w19, w3, #0x5
   8586c:	11001074 	add	w20, w3, #0x4
   85870:	34000228 	cbz	w8, 858b4 <CFATFileSystem::FileOpen(char const*)+0xd4>
   85874:	b9418829 	ldr	w9, [x1, #392]
   85878:	11001873 	add	w19, w3, #0x6
   8587c:	11001474 	add	w20, w3, #0x5
   85880:	340001a9 	cbz	w9, 858b4 <CFATFileSystem::FileOpen(char const*)+0xd4>
   85884:	11001c73 	add	w19, w3, #0x7
   85888:	91070021 	add	x1, x1, #0x1c0
   8588c:	7100a67f 	cmp	w19, #0x29
   85890:	54fffba1 	b.ne	85804 <CFATFileSystem::FileOpen(char const*)+0x24>  // b.any
   85894:	b94972aa 	ldr	w10, [x21, #2416]
   85898:	3500068a 	cbnz	w10, 85968 <CFATFileSystem::FileOpen(char const*)+0x188>
   8589c:	52800013 	mov	w19, #0x0                   	// #0
   858a0:	a9415bf5 	ldp	x21, x22, [sp, #16]
   858a4:	2a1303e0 	mov	w0, w19
   858a8:	f9401bfe 	ldr	x30, [sp, #48]
   858ac:	a8c453f3 	ldp	x19, x20, [sp], #64
   858b0:	d65f03c0 	ret
   858b4:	a90263f7 	stp	x23, x24, [sp, #32]
   858b8:	b4000756 	cbz	x22, 859a0 <CFATFileSystem::FileOpen(char const*)+0x1c0>
   858bc:	910222b8 	add	x24, x21, #0x88
   858c0:	aa1603e1 	mov	x1, x22
   858c4:	aa1803e0 	mov	x0, x24
   858c8:	940008de 	bl	87c40 <CFATDirectory::GetEntry(char const*)>
   858cc:	aa0003f7 	mov	x23, x0
   858d0:	b4000460 	cbz	x0, 8595c <CFATFileSystem::FileOpen(char const*)+0x17c>
   858d4:	2a1403ec 	mov	w12, w20
   858d8:	5280070d 	mov	w13, #0x38                  	// #56
   858dc:	d37df18e 	lsl	x14, x12, #3
   858e0:	aa1603e1 	mov	x1, x22
   858e4:	cb0c01d0 	sub	x16, x14, x12
   858e8:	9bad5691 	umaddl	x17, w20, w13, x21
   858ec:	5280002f 	mov	w15, #0x1                   	// #1
   858f0:	8b100eb6 	add	x22, x21, x16, lsl #3
   858f4:	d2800182 	mov	x2, #0xc                   	// #12
   858f8:	9102d220 	add	x0, x17, #0xb4
   858fc:	b900b2cf 	str	w15, [x22, #176]
   85900:	9400393d 	bl	93df4 <strncpy>
   85904:	390302df 	strb	wzr, [x22, #192]
   85908:	aa1803e0 	mov	x0, x24
   8590c:	52800001 	mov	w1, #0x0                   	// #0
   85910:	b9401ef2 	ldr	w18, [x23, #28]
   85914:	2918fed2 	stp	w18, wzr, [x22, #196]
   85918:	79402ae2 	ldrh	w2, [x23, #20]
   8591c:	794036e3 	ldrh	w3, [x23, #26]
   85920:	f9006edf 	str	xzr, [x22, #216]
   85924:	390382df 	strb	wzr, [x22, #224]
   85928:	2a024064 	orr	w4, w3, w2, lsl #16
   8592c:	2919fec4 	stp	w4, wzr, [x22, #204]
   85930:	94000a50 	bl	88270 <CFATDirectory::FreeEntry(bool)>
   85934:	b94972b5 	ldr	w21, [x21, #2416]
   85938:	35000275 	cbnz	w21, 85984 <CFATFileSystem::FileOpen(char const*)+0x1a4>
   8593c:	2a1303e0 	mov	w0, w19
   85940:	a9415bf5 	ldp	x21, x22, [sp, #16]
   85944:	a94263f7 	ldp	x23, x24, [sp, #32]
   85948:	f9401bfe 	ldr	x30, [sp, #48]
   8594c:	a8c453f3 	ldp	x19, x20, [sp], #64
   85950:	d65f03c0 	ret
   85954:	94003eb7 	bl	95430 <EnterCritical>
   85958:	17ffffa9 	b	857fc <CFATFileSystem::FileOpen(char const*)+0x1c>
   8595c:	b94972be 	ldr	w30, [x21, #2416]
   85960:	a94263f7 	ldp	x23, x24, [sp, #32]
   85964:	34fff9de 	cbz	w30, 8589c <CFATFileSystem::FileOpen(char const*)+0xbc>
   85968:	52800013 	mov	w19, #0x0                   	// #0
   8596c:	94003edd 	bl	954e0 <LeaveCritical>
   85970:	2a1303e0 	mov	w0, w19
   85974:	a9415bf5 	ldp	x21, x22, [sp, #16]
   85978:	f9401bfe 	ldr	x30, [sp, #48]
   8597c:	a8c453f3 	ldp	x19, x20, [sp], #64
   85980:	d65f03c0 	ret
   85984:	94003ed7 	bl	954e0 <LeaveCritical>
   85988:	2a1303e0 	mov	w0, w19
   8598c:	a9415bf5 	ldp	x21, x22, [sp, #16]
   85990:	a94263f7 	ldp	x23, x24, [sp, #32]
   85994:	f9401bfe 	ldr	x30, [sp, #48]
   85998:	a8c453f3 	ldp	x19, x20, [sp], #64
   8599c:	d65f03c0 	ret
   859a0:	d00000ab 	adrp	x11, 9b000 <vtable for CSoftSerialDevice+0x90>
   859a4:	9100e161 	add	x1, x11, #0x38
   859a8:	91004020 	add	x0, x1, #0x10
   859ac:	52800c22 	mov	w2, #0x61                  	// #97
   859b0:	94000e70 	bl	89370 <assertion_failed>
   859b4:	d503201f 	nop
   859b8:	d503201f 	nop
   859bc:	d503201f 	nop

00000000000859c0 <CFATFileSystem::FileCreate(char const*)>:
   859c0:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   859c4:	a9015bf5 	stp	x21, x22, [sp, #16]
   859c8:	aa0003f5 	mov	x21, x0
   859cc:	aa0103f6 	mov	x22, x1
   859d0:	b9497000 	ldr	w0, [x0, #2416]
   859d4:	f90017fe 	str	x30, [sp, #40]
   859d8:	35000c40 	cbnz	w0, 85b60 <CFATFileSystem::FileCreate(char const*)+0x1a0>
   859dc:	9102c2a1 	add	x1, x21, #0xb0
   859e0:	52800033 	mov	w19, #0x1                   	// #1
   859e4:	b9400020 	ldr	w0, [x1]
   859e8:	51000674 	sub	w20, w19, #0x1
   859ec:	34000560 	cbz	w0, 85a98 <CFATFileSystem::FileCreate(char const*)+0xd8>
   859f0:	11000673 	add	w19, w19, #0x1
   859f4:	b9403822 	ldr	w2, [x1, #56]
   859f8:	2a1303e3 	mov	w3, w19
   859fc:	51000674 	sub	w20, w19, #0x1
   85a00:	340004c2 	cbz	w2, 85a98 <CFATFileSystem::FileCreate(char const*)+0xd8>
   85a04:	11000673 	add	w19, w19, #0x1
   85a08:	b9407024 	ldr	w4, [x1, #112]
   85a0c:	51000674 	sub	w20, w19, #0x1
   85a10:	34000444 	cbz	w4, 85a98 <CFATFileSystem::FileCreate(char const*)+0xd8>
   85a14:	b940a825 	ldr	w5, [x1, #168]
   85a18:	11000873 	add	w19, w3, #0x2
   85a1c:	11000474 	add	w20, w3, #0x1
   85a20:	340003c5 	cbz	w5, 85a98 <CFATFileSystem::FileCreate(char const*)+0xd8>
   85a24:	b940e026 	ldr	w6, [x1, #224]
   85a28:	11000c73 	add	w19, w3, #0x3
   85a2c:	11000874 	add	w20, w3, #0x2
   85a30:	34000346 	cbz	w6, 85a98 <CFATFileSystem::FileCreate(char const*)+0xd8>
   85a34:	b9411827 	ldr	w7, [x1, #280]
   85a38:	11001073 	add	w19, w3, #0x4
   85a3c:	11000c74 	add	w20, w3, #0x3
   85a40:	340002c7 	cbz	w7, 85a98 <CFATFileSystem::FileCreate(char const*)+0xd8>
   85a44:	b9415028 	ldr	w8, [x1, #336]
   85a48:	11001473 	add	w19, w3, #0x5
   85a4c:	11001074 	add	w20, w3, #0x4
   85a50:	34000248 	cbz	w8, 85a98 <CFATFileSystem::FileCreate(char const*)+0xd8>
   85a54:	b9418829 	ldr	w9, [x1, #392]
   85a58:	11001873 	add	w19, w3, #0x6
   85a5c:	11001474 	add	w20, w3, #0x5
   85a60:	340001c9 	cbz	w9, 85a98 <CFATFileSystem::FileCreate(char const*)+0xd8>
   85a64:	11001c73 	add	w19, w3, #0x7
   85a68:	91070021 	add	x1, x1, #0x1c0
   85a6c:	7100a67f 	cmp	w19, #0x29
   85a70:	54fffba1 	b.ne	859e4 <CFATFileSystem::FileCreate(char const*)+0x24>  // b.any
   85a74:	d503201f 	nop
   85a78:	b94972b2 	ldr	w18, [x21, #2416]
   85a7c:	35000652 	cbnz	w18, 85b44 <CFATFileSystem::FileCreate(char const*)+0x184>
   85a80:	52800013 	mov	w19, #0x0                   	// #0
   85a84:	2a1303e0 	mov	w0, w19
   85a88:	a9415bf5 	ldp	x21, x22, [sp, #16]
   85a8c:	f94017fe 	ldr	x30, [sp, #40]
   85a90:	a8c353f3 	ldp	x19, x20, [sp], #48
   85a94:	d65f03c0 	ret
   85a98:	b40006f6 	cbz	x22, 85b74 <CFATFileSystem::FileCreate(char const*)+0x1b4>
   85a9c:	aa1603e1 	mov	x1, x22
   85aa0:	aa1503e0 	mov	x0, x21
   85aa4:	9400020f 	bl	862e0 <CFATFileSystem::FileDelete(char const*)>
   85aa8:	37fffe80 	tbnz	w0, #31, 85a78 <CFATFileSystem::FileCreate(char const*)+0xb8>
   85aac:	f90013f7 	str	x23, [sp, #32]
   85ab0:	910222b7 	add	x23, x21, #0x88
   85ab4:	aa1603e1 	mov	x1, x22
   85ab8:	aa1703e0 	mov	x0, x23
   85abc:	94000905 	bl	87ed0 <CFATDirectory::CreateEntry(char const*)>
   85ac0:	b40003c0 	cbz	x0, 85b38 <CFATFileSystem::FileCreate(char const*)+0x178>
   85ac4:	aa1703e0 	mov	x0, x23
   85ac8:	52800021 	mov	w1, #0x1                   	// #1
   85acc:	940009e9 	bl	88270 <CFATDirectory::FreeEntry(bool)>
   85ad0:	2a1403eb 	mov	w11, w20
   85ad4:	5280070c 	mov	w12, #0x38                  	// #56
   85ad8:	d37df16d 	lsl	x13, x11, #3
   85adc:	aa1603e1 	mov	x1, x22
   85ae0:	cb0b01ae 	sub	x14, x13, x11
   85ae4:	9bac568f 	umaddl	x15, w20, w12, x21
   85ae8:	52800037 	mov	w23, #0x1                   	// #1
   85aec:	8b0e0eb6 	add	x22, x21, x14, lsl #3
   85af0:	d2800182 	mov	x2, #0xc                   	// #12
   85af4:	9102d1e0 	add	x0, x15, #0xb4
   85af8:	b900b2d7 	str	w23, [x22, #176]
   85afc:	940038be 	bl	93df4 <strncpy>
   85b00:	390302df 	strb	wzr, [x22, #192]
   85b04:	b900c6df 	str	wzr, [x22, #196]
   85b08:	f90066df 	str	xzr, [x22, #200]
   85b0c:	b900d2df 	str	wzr, [x22, #208]
   85b10:	f9006edf 	str	xzr, [x22, #216]
   85b14:	390382d7 	strb	w23, [x22, #224]
   85b18:	b94972b0 	ldr	w16, [x21, #2416]
   85b1c:	35000270 	cbnz	w16, 85b68 <CFATFileSystem::FileCreate(char const*)+0x1a8>
   85b20:	2a1303e0 	mov	w0, w19
   85b24:	a9415bf5 	ldp	x21, x22, [sp, #16]
   85b28:	f94013f7 	ldr	x23, [sp, #32]
   85b2c:	f94017fe 	ldr	x30, [sp, #40]
   85b30:	a8c353f3 	ldp	x19, x20, [sp], #48
   85b34:	d65f03c0 	ret
   85b38:	b94972b1 	ldr	w17, [x21, #2416]
   85b3c:	f94013f7 	ldr	x23, [sp, #32]
   85b40:	34fffa11 	cbz	w17, 85a80 <CFATFileSystem::FileCreate(char const*)+0xc0>
   85b44:	94003e67 	bl	954e0 <LeaveCritical>
   85b48:	52800013 	mov	w19, #0x0                   	// #0
   85b4c:	a9415bf5 	ldp	x21, x22, [sp, #16]
   85b50:	2a1303e0 	mov	w0, w19
   85b54:	f94017fe 	ldr	x30, [sp, #40]
   85b58:	a8c353f3 	ldp	x19, x20, [sp], #48
   85b5c:	d65f03c0 	ret
   85b60:	94003e34 	bl	95430 <EnterCritical>
   85b64:	17ffff9e 	b	859dc <CFATFileSystem::FileCreate(char const*)+0x1c>
   85b68:	94003e5e 	bl	954e0 <LeaveCritical>
   85b6c:	f94013f7 	ldr	x23, [sp, #32]
   85b70:	17ffffc5 	b	85a84 <CFATFileSystem::FileCreate(char const*)+0xc4>
   85b74:	d00000aa 	adrp	x10, 9b000 <vtable for CSoftSerialDevice+0x90>
   85b78:	9100e141 	add	x1, x10, #0x38
   85b7c:	f90013f7 	str	x23, [sp, #32]
   85b80:	91004020 	add	x0, x1, #0x10
   85b84:	52801222 	mov	w2, #0x91                  	// #145
   85b88:	94000dfa 	bl	89370 <assertion_failed>
   85b8c:	d503201f 	nop

0000000000085b90 <CFATFileSystem::FileClose(unsigned int)>:
   85b90:	a9bc53f3 	stp	x19, x20, [sp, #-64]!
   85b94:	a9015bf5 	stp	x21, x22, [sp, #16]
   85b98:	51000435 	sub	w21, w1, #0x1
   85b9c:	71009ebf 	cmp	w21, #0x27
   85ba0:	f90017fe 	str	x30, [sp, #40]
   85ba4:	54000628 	b.hi	85c68 <CFATFileSystem::FileClose(unsigned int)+0xd8>  // b.pmore
   85ba8:	aa0003f3 	mov	x19, x0
   85bac:	b9497000 	ldr	w0, [x0, #2416]
   85bb0:	2a1503f4 	mov	w20, w21
   85bb4:	35000420 	cbnz	w0, 85c38 <CFATFileSystem::FileClose(unsigned int)+0xa8>
   85bb8:	d37df280 	lsl	x0, x20, #3
   85bbc:	cb140001 	sub	x1, x0, x20
   85bc0:	8b010e62 	add	x2, x19, x1, lsl #3
   85bc4:	b940b043 	ldr	w3, [x2, #176]
   85bc8:	34000503 	cbz	w3, 85c68 <CFATFileSystem::FileClose(unsigned int)+0xd8>
   85bcc:	7100047f 	cmp	w3, #0x1
   85bd0:	54000568 	b.hi	85c7c <CFATFileSystem::FileClose(unsigned int)+0xec>  // b.pmore
   85bd4:	d37df296 	lsl	x22, x20, #3
   85bd8:	cb1402c7 	sub	x7, x22, x20
   85bdc:	8b070e76 	add	x22, x19, x7, lsl #3
   85be0:	f9406ec1 	ldr	x1, [x22, #216]
   85be4:	b40000a1 	cbz	x1, 85bf8 <CFATFileSystem::FileClose(unsigned int)+0x68>
   85be8:	52800002 	mov	w2, #0x0                   	// #0
   85bec:	aa1303e0 	mov	x0, x19
   85bf0:	94000344 	bl	86900 <CFATCache::FreeSector(TFATBuffer*, int)>
   85bf4:	f9006edf 	str	xzr, [x22, #216]
   85bf8:	d37df288 	lsl	x8, x20, #3
   85bfc:	cb140109 	sub	x9, x8, x20
   85c00:	8b090e76 	add	x22, x19, x9, lsl #3
   85c04:	394382ca 	ldrb	w10, [x22, #224]
   85c08:	350004ca 	cbnz	w10, 85ca0 <CFATFileSystem::FileClose(unsigned int)+0x110>
   85c0c:	d37df292 	lsl	x18, x20, #3
   85c10:	cb14025e 	sub	x30, x18, x20
   85c14:	8b1e0e74 	add	x20, x19, x30, lsl #3
   85c18:	b900b29f 	str	wzr, [x20, #176]
   85c1c:	b9497273 	ldr	w19, [x19, #2416]
   85c20:	350003d3 	cbnz	w19, 85c98 <CFATFileSystem::FileClose(unsigned int)+0x108>
   85c24:	52800020 	mov	w0, #0x1                   	// #1
   85c28:	a9415bf5 	ldp	x21, x22, [sp, #16]
   85c2c:	f94017fe 	ldr	x30, [sp, #40]
   85c30:	a8c453f3 	ldp	x19, x20, [sp], #64
   85c34:	d65f03c0 	ret
   85c38:	94003dfe 	bl	95430 <EnterCritical>
   85c3c:	d37df284 	lsl	x4, x20, #3
   85c40:	cb140085 	sub	x5, x4, x20
   85c44:	8b050e66 	add	x6, x19, x5, lsl #3
   85c48:	b940b0c3 	ldr	w3, [x6, #176]
   85c4c:	35fffc03 	cbnz	w3, 85bcc <CFATFileSystem::FileClose(unsigned int)+0x3c>
   85c50:	b9497265 	ldr	w5, [x19, #2416]
   85c54:	b9003fe3 	str	w3, [sp, #60]
   85c58:	34000085 	cbz	w5, 85c68 <CFATFileSystem::FileClose(unsigned int)+0xd8>
   85c5c:	94003e21 	bl	954e0 <LeaveCritical>
   85c60:	b9403fe0 	ldr	w0, [sp, #60]
   85c64:	17fffff1 	b	85c28 <CFATFileSystem::FileClose(unsigned int)+0x98>
   85c68:	52800000 	mov	w0, #0x0                   	// #0
   85c6c:	a9415bf5 	ldp	x21, x22, [sp, #16]
   85c70:	f94017fe 	ldr	x30, [sp, #40]
   85c74:	a8c453f3 	ldp	x19, x20, [sp], #64
   85c78:	d65f03c0 	ret
   85c7c:	d37df281 	lsl	x1, x20, #3
   85c80:	51000460 	sub	w0, w3, #0x1
   85c84:	cb140022 	sub	x2, x1, x20
   85c88:	8b020e63 	add	x3, x19, x2, lsl #3
   85c8c:	b900b060 	str	w0, [x3, #176]
   85c90:	b9497264 	ldr	w4, [x19, #2416]
   85c94:	34fffc84 	cbz	w4, 85c24 <CFATFileSystem::FileClose(unsigned int)+0x94>
   85c98:	94003e12 	bl	954e0 <LeaveCritical>
   85c9c:	17ffffe2 	b	85c24 <CFATFileSystem::FileClose(unsigned int)+0x94>
   85ca0:	5280070b 	mov	w11, #0x38                  	// #56
   85ca4:	f90013f7 	str	x23, [sp, #32]
   85ca8:	91022277 	add	x23, x19, #0x88
   85cac:	aa1703e0 	mov	x0, x23
   85cb0:	9bab4eac 	umaddl	x12, w21, w11, x19
   85cb4:	9102d181 	add	x1, x12, #0xb4
   85cb8:	940007e2 	bl	87c40 <CFATDirectory::GetEntry(char const*)>
   85cbc:	aa0003f5 	mov	x21, x0
   85cc0:	b4000220 	cbz	x0, 85d04 <CFATFileSystem::FileClose(unsigned int)+0x174>
   85cc4:	39402c0d 	ldrb	w13, [x0, #11]
   85cc8:	321b01ae 	orr	w14, w13, #0x20
   85ccc:	39002c0e 	strb	w14, [x0, #11]
   85cd0:	7941a6cf 	ldrh	w15, [x22, #210]
   85cd4:	7900280f 	strh	w15, [x0, #20]
   85cd8:	b940d2d0 	ldr	w16, [x22, #208]
   85cdc:	79003410 	strh	w16, [x0, #26]
   85ce0:	b940c6d1 	ldr	w17, [x22, #196]
   85ce4:	b9001c11 	str	w17, [x0, #28]
   85ce8:	9400363a 	bl	935d0 <CTimer::Get()>
   85cec:	9400334d 	bl	92a20 <CTimer::GetTime() const>
   85cf0:	94000a58 	bl	88650 <CFATDirectory::Time2FAT(unsigned int)>
   85cf4:	52800021 	mov	w1, #0x1                   	// #1
   85cf8:	b80162a0 	stur	w0, [x21, #22]
   85cfc:	aa1703e0 	mov	x0, x23
   85d00:	9400095c 	bl	88270 <CFATDirectory::FreeEntry(bool)>
   85d04:	91008260 	add	x0, x19, #0x20
   85d08:	940004e6 	bl	870a0 <CFATInfo::UpdateFSInfo()>
   85d0c:	aa1303e0 	mov	x0, x19
   85d10:	94000200 	bl	86510 <CFATCache::Flush()>
   85d14:	f94013f7 	ldr	x23, [sp, #32]
   85d18:	17ffffbd 	b	85c0c <CFATFileSystem::FileClose(unsigned int)+0x7c>
   85d1c:	d503201f 	nop

0000000000085d20 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)>:
   85d20:	a9b953f3 	stp	x19, x20, [sp, #-112]!
   85d24:	a9036bf9 	stp	x25, x26, [sp, #48]
   85d28:	5100043a 	sub	w26, w1, #0x1
   85d2c:	71009f5f 	cmp	w26, #0x27
   85d30:	a9015bf5 	stp	x21, x22, [sp, #16]
   85d34:	f9002bfe 	str	x30, [sp, #80]
   85d38:	54000aa8 	b.hi	85e8c <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x16c>  // b.pmore
   85d3c:	aa0003f5 	mov	x21, x0
   85d40:	b9497000 	ldr	w0, [x0, #2416]
   85d44:	a90473fb 	stp	x27, x28, [sp, #64]
   85d48:	aa0203fc 	mov	x28, x2
   85d4c:	2a0303fb 	mov	w27, w3
   85d50:	35000ac0 	cbnz	w0, 85ea8 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x188>
   85d54:	2a1a03e1 	mov	w1, w26
   85d58:	d37df020 	lsl	x0, x1, #3
   85d5c:	cb010002 	sub	x2, x0, x1
   85d60:	8b020ea3 	add	x3, x21, x2, lsl #3
   85d64:	b940b064 	ldr	w4, [x3, #176]
   85d68:	34000904 	cbz	w4, 85e88 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x168>
   85d6c:	39438065 	ldrb	w5, [x3, #224]
   85d70:	7100037f 	cmp	w27, #0x0
   85d74:	1a9f17e6 	cset	w6, eq  // eq = none
   85d78:	2a0600a7 	orr	w7, w5, w6
   85d7c:	35000867 	cbnz	w7, 85e88 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x168>
   85d80:	d37df02f 	lsl	x15, x1, #3
   85d84:	9101c2b1 	add	x17, x21, #0x70
   85d88:	a90263f7 	stp	x23, x24, [sp, #32]
   85d8c:	cb0101f0 	sub	x16, x15, x1
   85d90:	52800016 	mov	w22, #0x0                   	// #0
   85d94:	8b100eba 	add	x26, x21, x16, lsl #3
   85d98:	52804017 	mov	w23, #0x200                 	// #512
   85d9c:	910082b8 	add	x24, x21, #0x20
   85da0:	f90037f1 	str	x17, [sp, #104]
   85da4:	2958d352 	ldp	w18, w20, [x26, #196]
   85da8:	6b14025f 	cmp	w18, w20
   85dac:	54000ec3 	b.cc	85f84 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x264>  // b.lo, b.ul, b.last
   85db0:	4b14025e 	sub	w30, w18, w20
   85db4:	710803df 	cmp	w30, #0x200
   85db8:	1a9793d9 	csel	w25, w30, w23, ls  // ls = plast
   85dbc:	3400041e 	cbz	w30, 85e3c <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x11c>
   85dc0:	f9406f41 	ldr	x1, [x26, #216]
   85dc4:	b4000a01 	cbz	x1, 85f04 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x1e4>
   85dc8:	12002284 	and	w4, w20, #0x1ff
   85dcc:	4b0402e5 	sub	w5, w23, w4
   85dd0:	6b1b00bf 	cmp	w5, w27
   85dd4:	1a9b90a6 	csel	w6, w5, w27, ls  // ls = plast
   85dd8:	6b1900df 	cmp	w6, w25
   85ddc:	1a9990d9 	csel	w25, w6, w25, ls  // ls = plast
   85de0:	b4000c5c 	cbz	x28, 85f68 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x248>
   85de4:	f9406f49 	ldr	x9, [x26, #216]
   85de8:	2a0403e7 	mov	w7, w4
   85dec:	2a1903e2 	mov	w2, w25
   85df0:	910100e8 	add	x8, x7, #0x40
   85df4:	aa1c03e0 	mov	x0, x28
   85df8:	8b02039c 	add	x28, x28, x2
   85dfc:	4b19037b 	sub	w27, w27, w25
   85e00:	0b1902d6 	add	w22, w22, w25
   85e04:	8b080121 	add	x1, x9, x8
   85e08:	94003972 	bl	943d0 <memcpy>
   85e0c:	b940cb4a 	ldr	w10, [x26, #200]
   85e10:	0b0a032b 	add	w11, w25, w10
   85e14:	f240217f 	tst	x11, #0x1ff
   85e18:	b900cb4b 	str	w11, [x26, #200]
   85e1c:	540000e1 	b.ne	85e38 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x118>  // b.any
   85e20:	f9406f41 	ldr	x1, [x26, #216]
   85e24:	b4000ba1 	cbz	x1, 85f98 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x278>
   85e28:	52800002 	mov	w2, #0x0                   	// #0
   85e2c:	aa1503e0 	mov	x0, x21
   85e30:	940002b4 	bl	86900 <CFATCache::FreeSector(TFATBuffer*, int)>
   85e34:	f9006f5f 	str	xzr, [x26, #216]
   85e38:	35fffb7b 	cbnz	w27, 85da4 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x84>
   85e3c:	b94972ad 	ldr	w13, [x21, #2416]
   85e40:	35000b6d 	cbnz	w13, 85fac <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x28c>
   85e44:	a94263f7 	ldp	x23, x24, [sp, #32]
   85e48:	a94473fb 	ldp	x27, x28, [sp, #64]
   85e4c:	14000011 	b	85e90 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x170>
   85e50:	f94037f3 	ldr	x19, [sp, #104]
   85e54:	aa1303e0 	mov	x0, x19
   85e58:	940005f2 	bl	87620 <CFAT::GetClusterEntry(unsigned int)>
   85e5c:	2a0003e3 	mov	w3, w0
   85e60:	aa1303e0 	mov	x0, x19
   85e64:	2a0303e1 	mov	w1, w3
   85e68:	b900cf43 	str	w3, [x26, #204]
   85e6c:	94000541 	bl	87370 <CFAT::IsEOC(unsigned int) const>
   85e70:	72001c1f 	tst	w0, #0xff
   85e74:	54000840 	b.eq	85f7c <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x25c>  // b.none
   85e78:	b94972ac 	ldr	w12, [x21, #2416]
   85e7c:	a94263f7 	ldp	x23, x24, [sp, #32]
   85e80:	3500030c 	cbnz	w12, 85ee0 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x1c0>
   85e84:	d503201f 	nop
   85e88:	a94473fb 	ldp	x27, x28, [sp, #64]
   85e8c:	12800016 	mov	w22, #0xffffffff            	// #-1
   85e90:	2a1603e0 	mov	w0, w22
   85e94:	a9415bf5 	ldp	x21, x22, [sp, #16]
   85e98:	a9436bf9 	ldp	x25, x26, [sp, #48]
   85e9c:	f9402bfe 	ldr	x30, [sp, #80]
   85ea0:	a8c753f3 	ldp	x19, x20, [sp], #112
   85ea4:	d65f03c0 	ret
   85ea8:	94003d62 	bl	95430 <EnterCritical>
   85eac:	2a1a03e1 	mov	w1, w26
   85eb0:	d37df028 	lsl	x8, x1, #3
   85eb4:	cb010109 	sub	x9, x8, x1
   85eb8:	8b090eaa 	add	x10, x21, x9, lsl #3
   85ebc:	b940b14b 	ldr	w11, [x10, #176]
   85ec0:	340000cb 	cbz	w11, 85ed8 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x1b8>
   85ec4:	3943814c 	ldrb	w12, [x10, #224]
   85ec8:	7100037f 	cmp	w27, #0x0
   85ecc:	1a9f17ed 	cset	w13, eq  // eq = none
   85ed0:	2a0d018e 	orr	w14, w12, w13
   85ed4:	34fff56e 	cbz	w14, 85d80 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x60>
   85ed8:	b94972ae 	ldr	w14, [x21, #2416]
   85edc:	34fffd6e 	cbz	w14, 85e88 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x168>
   85ee0:	94003d80 	bl	954e0 <LeaveCritical>
   85ee4:	12800016 	mov	w22, #0xffffffff            	// #-1
   85ee8:	a9436bf9 	ldp	x25, x26, [sp, #48]
   85eec:	2a1603e0 	mov	w0, w22
   85ef0:	a9415bf5 	ldp	x21, x22, [sp, #16]
   85ef4:	a94473fb 	ldp	x27, x28, [sp, #64]
   85ef8:	f9402bfe 	ldr	x30, [sp, #80]
   85efc:	a8c753f3 	ldp	x19, x20, [sp], #112
   85f00:	d65f03c0 	ret
   85f04:	53097e94 	lsr	w20, w20, #9
   85f08:	aa1803e0 	mov	x0, x24
   85f0c:	940003ed 	bl	86ec0 <CFATInfo::GetSectorsPerCluster() const>
   85f10:	1ac00a82 	udiv	w2, w20, w0
   85f14:	1b00d054 	msub	w20, w2, w0, w20
   85f18:	35000334 	cbnz	w20, 85f7c <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x25c>
   85f1c:	29590740 	ldp	w0, w1, [x26, #200]
   85f20:	35fff980 	cbnz	w0, 85e50 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x130>
   85f24:	aa1803e0 	mov	x0, x24
   85f28:	9400044e 	bl	87060 <CFATInfo::GetFirstSector(unsigned int) const>
   85f2c:	0b140001 	add	w1, w0, w20
   85f30:	52800002 	mov	w2, #0x0                   	// #0
   85f34:	aa1503e0 	mov	x0, x21
   85f38:	940001be 	bl	86630 <CFATCache::GetSector(unsigned int, int)>
   85f3c:	f9006f40 	str	x0, [x26, #216]
   85f40:	b40003e0 	cbz	x0, 85fbc <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x29c>
   85f44:	b940cb54 	ldr	w20, [x26, #200]
   85f48:	12002284 	and	w4, w20, #0x1ff
   85f4c:	4b0402e5 	sub	w5, w23, w4
   85f50:	6b1b00bf 	cmp	w5, w27
   85f54:	1a9b90a6 	csel	w6, w5, w27, ls  // ls = plast
   85f58:	6b1900df 	cmp	w6, w25
   85f5c:	1a9990d9 	csel	w25, w6, w25, ls  // ls = plast
   85f60:	b5fff43c 	cbnz	x28, 85de4 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0xc4>
   85f64:	d503201f 	nop
   85f68:	d00000bb 	adrp	x27, 9b000 <vtable for CSoftSerialDevice+0x90>
   85f6c:	9100e361 	add	x1, x27, #0x38
   85f70:	91016020 	add	x0, x1, #0x58
   85f74:	52802762 	mov	w2, #0x13b                 	// #315
   85f78:	94000cfe 	bl	89370 <assertion_failed>
   85f7c:	b940cf41 	ldr	w1, [x26, #204]
   85f80:	17ffffe9 	b	85f24 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x204>
   85f84:	d00000b3 	adrp	x19, 9b000 <vtable for CSoftSerialDevice+0x90>
   85f88:	9100e261 	add	x1, x19, #0x38
   85f8c:	91008020 	add	x0, x1, #0x20
   85f90:	52802162 	mov	w2, #0x10b                 	// #267
   85f94:	94000cf7 	bl	89370 <assertion_failed>
   85f98:	d00000b5 	adrp	x21, 9b000 <vtable for CSoftSerialDevice+0x90>
   85f9c:	9100e2a1 	add	x1, x21, #0x38
   85fa0:	91010020 	add	x0, x1, #0x40
   85fa4:	52802902 	mov	w2, #0x148                 	// #328
   85fa8:	94000cf2 	bl	89370 <assertion_failed>
   85fac:	94003d4d 	bl	954e0 <LeaveCritical>
   85fb0:	a94263f7 	ldp	x23, x24, [sp, #32]
   85fb4:	a94473fb 	ldp	x27, x28, [sp, #64]
   85fb8:	17ffffb6 	b	85e90 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x170>
   85fbc:	d00000b6 	adrp	x22, 9b000 <vtable for CSoftSerialDevice+0x90>
   85fc0:	9100e2c1 	add	x1, x22, #0x38
   85fc4:	91010020 	add	x0, x1, #0x40
   85fc8:	528024e2 	mov	w2, #0x127                 	// #295
   85fcc:	94000ce9 	bl	89370 <assertion_failed>

0000000000085fd0 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)>:
   85fd0:	a9b953f3 	stp	x19, x20, [sp, #-112]!
   85fd4:	51000433 	sub	w19, w1, #0x1
   85fd8:	71009e7f 	cmp	w19, #0x27
   85fdc:	a90263f7 	stp	x23, x24, [sp, #32]
   85fe0:	f9002bfe 	str	x30, [sp, #80]
   85fe4:	54000ac8 	b.hi	8613c <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x16c>  // b.pmore
   85fe8:	a9015bf5 	stp	x21, x22, [sp, #16]
   85fec:	aa0003f6 	mov	x22, x0
   85ff0:	b9497000 	ldr	w0, [x0, #2416]
   85ff4:	a9036bf9 	stp	x25, x26, [sp, #48]
   85ff8:	2a0303fa 	mov	w26, w3
   85ffc:	a90473fb 	stp	x27, x28, [sp, #64]
   86000:	aa0203fb 	mov	x27, x2
   86004:	35000a80 	cbnz	w0, 86154 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x184>
   86008:	2a1303e1 	mov	w1, w19
   8600c:	d37df020 	lsl	x0, x1, #3
   86010:	cb010002 	sub	x2, x0, x1
   86014:	8b020ec3 	add	x3, x22, x2, lsl #3
   86018:	b940b064 	ldr	w4, [x3, #176]
   8601c:	340008a4 	cbz	w4, 86130 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x160>
   86020:	39438065 	ldrb	w5, [x3, #224]
   86024:	7100035f 	cmp	w26, #0x0
   86028:	1a9f17e6 	cset	w6, eq  // eq = none
   8602c:	520000a7 	eor	w7, w5, #0x1
   86030:	2a0700c8 	orr	w8, w6, w7
   86034:	12001d09 	and	w9, w8, #0xff
   86038:	350007c9 	cbnz	w9, 86130 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x160>
   8603c:	d37df034 	lsl	x20, x1, #3
   86040:	52800017 	mov	w23, #0x0                   	// #0
   86044:	cb010295 	sub	x21, x20, x1
   86048:	52804018 	mov	w24, #0x200                 	// #512
   8604c:	8b150ed3 	add	x19, x22, x21, lsl #3
   86050:	910082d9 	add	x25, x22, #0x20
   86054:	b940c67c 	ldr	w28, [x19, #196]
   86058:	2a3c03fe 	mvn	w30, w28
   8605c:	710803df 	cmp	w30, #0x200
   86060:	1a9893dc 	csel	w28, w30, w24, ls  // ls = plast
   86064:	3400057e 	cbz	w30, 86110 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x140>
   86068:	f9406e61 	ldr	x1, [x19, #216]
   8606c:	b940ca75 	ldr	w21, [x19, #200]
   86070:	b4000a61 	cbz	x1, 861bc <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x1ec>
   86074:	120022a6 	and	w6, w21, #0x1ff
   86078:	4b060307 	sub	w7, w24, w6
   8607c:	6b1a00ff 	cmp	w7, w26
   86080:	1a9a90e8 	csel	w8, w7, w26, ls  // ls = plast
   86084:	6b1c011f 	cmp	w8, w28
   86088:	1a9c911c 	csel	w28, w8, w28, ls  // ls = plast
   8608c:	b4000cbb 	cbz	x27, 86220 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x250>
   86090:	f9406e6b 	ldr	x11, [x19, #216]
   86094:	2a0603e9 	mov	w9, w6
   86098:	2a1c03e2 	mov	w2, w28
   8609c:	9101012a 	add	x10, x9, #0x40
   860a0:	aa1b03e1 	mov	x1, x27
   860a4:	8b02037b 	add	x27, x27, x2
   860a8:	8b0a0160 	add	x0, x11, x10
   860ac:	940038c9 	bl	943d0 <memcpy>
   860b0:	aa1603e0 	mov	x0, x22
   860b4:	f9406e61 	ldr	x1, [x19, #216]
   860b8:	9400023a 	bl	869a0 <CFATCache::MarkDirty(TFATBuffer*)>
   860bc:	b940ca6c 	ldr	w12, [x19, #200]
   860c0:	0b0c038d 	add	w13, w28, w12
   860c4:	310005bf 	cmn	w13, #0x1
   860c8:	b900ca6d 	str	w13, [x19, #200]
   860cc:	54000b40 	b.eq	86234 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x264>  // b.none
   860d0:	b940c66e 	ldr	w14, [x19, #196]
   860d4:	0b0e038f 	add	w15, w28, w14
   860d8:	6b0d01ff 	cmp	w15, w13
   860dc:	b900c66f 	str	w15, [x19, #196]
   860e0:	54000cc1 	b.ne	86278 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x2a8>  // b.any
   860e4:	f24021ff 	tst	x15, #0x1ff
   860e8:	4b1c035a 	sub	w26, w26, w28
   860ec:	0b1c02f7 	add	w23, w23, w28
   860f0:	540000e1 	b.ne	8610c <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x13c>  // b.any
   860f4:	f9406e61 	ldr	x1, [x19, #216]
   860f8:	b4000ca1 	cbz	x1, 8628c <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x2bc>
   860fc:	52800002 	mov	w2, #0x0                   	// #0
   86100:	aa1603e0 	mov	x0, x22
   86104:	940001ff 	bl	86900 <CFATCache::FreeSector(TFATBuffer*, int)>
   86108:	f9006e7f 	str	xzr, [x19, #216]
   8610c:	35fffa5a 	cbnz	w26, 86054 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x84>
   86110:	b94972d8 	ldr	w24, [x22, #2416]
   86114:	35000dd8 	cbnz	w24, 862cc <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x2fc>
   86118:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8611c:	a9436bf9 	ldp	x25, x26, [sp, #48]
   86120:	a94473fb 	ldp	x27, x28, [sp, #64]
   86124:	14000007 	b	86140 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x170>
   86128:	b94972d2 	ldr	w18, [x22, #2416]
   8612c:	35000352 	cbnz	w18, 86194 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x1c4>
   86130:	a9415bf5 	ldp	x21, x22, [sp, #16]
   86134:	a9436bf9 	ldp	x25, x26, [sp, #48]
   86138:	a94473fb 	ldp	x27, x28, [sp, #64]
   8613c:	12800017 	mov	w23, #0xffffffff            	// #-1
   86140:	2a1703e0 	mov	w0, w23
   86144:	a94263f7 	ldp	x23, x24, [sp, #32]
   86148:	f9402bfe 	ldr	x30, [sp, #80]
   8614c:	a8c753f3 	ldp	x19, x20, [sp], #112
   86150:	d65f03c0 	ret
   86154:	94003cb7 	bl	95430 <EnterCritical>
   86158:	2a1303e1 	mov	w1, w19
   8615c:	d37df02a 	lsl	x10, x1, #3
   86160:	cb01014b 	sub	x11, x10, x1
   86164:	8b0b0ecc 	add	x12, x22, x11, lsl #3
   86168:	b940b18d 	ldr	w13, [x12, #176]
   8616c:	3400010d 	cbz	w13, 8618c <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x1bc>
   86170:	3943818e 	ldrb	w14, [x12, #224]
   86174:	7100035f 	cmp	w26, #0x0
   86178:	1a9f17ef 	cset	w15, eq  // eq = none
   8617c:	520001d0 	eor	w16, w14, #0x1
   86180:	2a1001f1 	orr	w17, w15, w16
   86184:	12001e32 	and	w18, w17, #0xff
   86188:	34fff5b2 	cbz	w18, 8603c <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x6c>
   8618c:	b94972d3 	ldr	w19, [x22, #2416]
   86190:	34fffd13 	cbz	w19, 86130 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x160>
   86194:	94003cd3 	bl	954e0 <LeaveCritical>
   86198:	12800017 	mov	w23, #0xffffffff            	// #-1
   8619c:	a9415bf5 	ldp	x21, x22, [sp, #16]
   861a0:	2a1703e0 	mov	w0, w23
   861a4:	a94263f7 	ldp	x23, x24, [sp, #32]
   861a8:	a9436bf9 	ldp	x25, x26, [sp, #48]
   861ac:	a94473fb 	ldp	x27, x28, [sp, #64]
   861b0:	f9402bfe 	ldr	x30, [sp, #80]
   861b4:	a8c753f3 	ldp	x19, x20, [sp], #112
   861b8:	d65f03c0 	ret
   861bc:	aa1903e0 	mov	x0, x25
   861c0:	94000340 	bl	86ec0 <CFATInfo::GetSectorsPerCluster() const>
   861c4:	53097ea2 	lsr	w2, w21, #9
   861c8:	1ac00843 	udiv	w3, w2, w0
   861cc:	1b008875 	msub	w21, w3, w0, w2
   861d0:	340003d5 	cbz	w21, 86248 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x278>
   861d4:	b940ce74 	ldr	w20, [x19, #204]
   861d8:	2a1403e1 	mov	w1, w20
   861dc:	aa1903e0 	mov	x0, x25
   861e0:	940003a0 	bl	87060 <CFATInfo::GetFirstSector(unsigned int) const>
   861e4:	0b150001 	add	w1, w0, w21
   861e8:	52800022 	mov	w2, #0x1                   	// #1
   861ec:	aa1603e0 	mov	x0, x22
   861f0:	94000110 	bl	86630 <CFATCache::GetSector(unsigned int, int)>
   861f4:	f9006e60 	str	x0, [x19, #216]
   861f8:	b4000600 	cbz	x0, 862b8 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x2e8>
   861fc:	b940ca75 	ldr	w21, [x19, #200]
   86200:	120022a6 	and	w6, w21, #0x1ff
   86204:	4b060307 	sub	w7, w24, w6
   86208:	6b1a00ff 	cmp	w7, w26
   8620c:	1a9a90e8 	csel	w8, w7, w26, ls  // ls = plast
   86210:	6b1c011f 	cmp	w8, w28
   86214:	1a9c911c 	csel	w28, w8, w28, ls  // ls = plast
   86218:	b5fff3db 	cbnz	x27, 86090 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0xc0>
   8621c:	d503201f 	nop
   86220:	b00000ba 	adrp	x26, 9b000 <vtable for CSoftSerialDevice+0x90>
   86224:	9100e341 	add	x1, x26, #0x38
   86228:	91016020 	add	x0, x1, #0x58
   8622c:	528034e2 	mov	w2, #0x1a7                 	// #423
   86230:	94000c50 	bl	89370 <assertion_failed>
   86234:	b00000b6 	adrp	x22, 9b000 <vtable for CSoftSerialDevice+0x90>
   86238:	9100e2c1 	add	x1, x22, #0x38
   8623c:	9101a020 	add	x0, x1, #0x68
   86240:	52803602 	mov	w2, #0x1b0                 	// #432
   86244:	94000c4b 	bl	89370 <assertion_failed>
   86248:	9101c2c4 	add	x4, x22, #0x70
   8624c:	aa0403e0 	mov	x0, x4
   86250:	f90037e4 	str	x4, [sp, #104]
   86254:	940005e7 	bl	879f0 <CFAT::AllocateCluster()>
   86258:	2a0003f4 	mov	w20, w0
   8625c:	f94037e5 	ldr	x5, [sp, #104]
   86260:	34fff640 	cbz	w0, 86128 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x158>
   86264:	b940d260 	ldr	w0, [x19, #208]
   86268:	350001c0 	cbnz	w0, 862a0 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x2d0>
   8626c:	b900ce74 	str	w20, [x19, #204]
   86270:	b900d274 	str	w20, [x19, #208]
   86274:	17ffffd9 	b	861d8 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x208>
   86278:	b00000b0 	adrp	x16, 9b000 <vtable for CSoftSerialDevice+0x90>
   8627c:	9100e201 	add	x1, x16, #0x38
   86280:	91024020 	add	x0, x1, #0x90
   86284:	52803642 	mov	w2, #0x1b2                 	// #434
   86288:	94000c3a 	bl	89370 <assertion_failed>
   8628c:	b00000b1 	adrp	x17, 9b000 <vtable for CSoftSerialDevice+0x90>
   86290:	9100e221 	add	x1, x17, #0x38
   86294:	91010020 	add	x0, x1, #0x40
   86298:	52803722 	mov	w2, #0x1b9                 	// #441
   8629c:	94000c35 	bl	89370 <assertion_failed>
   862a0:	aa0503e0 	mov	x0, x5
   862a4:	2a1403e2 	mov	w2, w20
   862a8:	b940ce61 	ldr	w1, [x19, #204]
   862ac:	94000569 	bl	87850 <CFAT::SetClusterEntry(unsigned int, unsigned int)>
   862b0:	b900ce74 	str	w20, [x19, #204]
   862b4:	17ffffc9 	b	861d8 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x208>
   862b8:	b00000b7 	adrp	x23, 9b000 <vtable for CSoftSerialDevice+0x90>
   862bc:	9100e2e1 	add	x1, x23, #0x38
   862c0:	91010020 	add	x0, x1, #0x40
   862c4:	52803262 	mov	w2, #0x193                 	// #403
   862c8:	94000c2a 	bl	89370 <assertion_failed>
   862cc:	94003c85 	bl	954e0 <LeaveCritical>
   862d0:	a9415bf5 	ldp	x21, x22, [sp, #16]
   862d4:	a9436bf9 	ldp	x25, x26, [sp, #48]
   862d8:	a94473fb 	ldp	x27, x28, [sp, #64]
   862dc:	17ffff99 	b	86140 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x170>

00000000000862e0 <CFATFileSystem::FileDelete(char const*)>:
   862e0:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   862e4:	a9017bf5 	stp	x21, x30, [sp, #16]
   862e8:	b4000481 	cbz	x1, 86378 <CFATFileSystem::FileDelete(char const*)+0x98>
   862ec:	91022014 	add	x20, x0, #0x88
   862f0:	aa0003f5 	mov	x21, x0
   862f4:	aa1403e0 	mov	x0, x20
   862f8:	94000652 	bl	87c40 <CFATDirectory::GetEntry(char const*)>
   862fc:	aa0003f3 	mov	x19, x0
   86300:	b4000260 	cbz	x0, 8634c <CFATFileSystem::FileDelete(char const*)+0x6c>
   86304:	39402c00 	ldrb	w0, [x0, #11]
   86308:	370002a0 	tbnz	w0, #0, 8635c <CFATFileSystem::FileDelete(char const*)+0x7c>
   8630c:	79402a62 	ldrh	w2, [x19, #20]
   86310:	79403663 	ldrh	w3, [x19, #26]
   86314:	2a024061 	orr	w1, w3, w2, lsl #16
   86318:	35000141 	cbnz	w1, 86340 <CFATFileSystem::FileDelete(char const*)+0x60>
   8631c:	12800344 	mov	w4, #0xffffffe5            	// #-27
   86320:	aa1403e0 	mov	x0, x20
   86324:	52800021 	mov	w1, #0x1                   	// #1
   86328:	39000264 	strb	w4, [x19]
   8632c:	940007d1 	bl	88270 <CFATDirectory::FreeEntry(bool)>
   86330:	52800020 	mov	w0, #0x1                   	// #1
   86334:	a9417bf5 	ldp	x21, x30, [sp, #16]
   86338:	a8c253f3 	ldp	x19, x20, [sp], #32
   8633c:	d65f03c0 	ret
   86340:	9101c2a0 	add	x0, x21, #0x70
   86344:	9400058b 	bl	87970 <CFAT::FreeClusterChain(unsigned int)>
   86348:	17fffff5 	b	8631c <CFATFileSystem::FileDelete(char const*)+0x3c>
   8634c:	52800000 	mov	w0, #0x0                   	// #0
   86350:	a9417bf5 	ldp	x21, x30, [sp, #16]
   86354:	a8c253f3 	ldp	x19, x20, [sp], #32
   86358:	d65f03c0 	ret
   8635c:	aa1403e0 	mov	x0, x20
   86360:	52800021 	mov	w1, #0x1                   	// #1
   86364:	940007c3 	bl	88270 <CFATDirectory::FreeEntry(bool)>
   86368:	12800000 	mov	w0, #0xffffffff            	// #-1
   8636c:	a9417bf5 	ldp	x21, x30, [sp, #16]
   86370:	a8c253f3 	ldp	x19, x20, [sp], #32
   86374:	d65f03c0 	ret
   86378:	b00000a1 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   8637c:	9100e021 	add	x1, x1, #0x38
   86380:	91004020 	add	x0, x1, #0x10
   86384:	528038c2 	mov	w2, #0x1c6                 	// #454
   86388:	94000bfa 	bl	89370 <assertion_failed>
   8638c:	00000000 	.inst	0x00000000 ; undefined

0000000000086390 <CFATCache::CFATCache()>:
   86390:	a9007c1f 	stp	xzr, xzr, [x0]
   86394:	a9017c1f 	stp	xzr, xzr, [x0, #16]
   86398:	d65f03c0 	ret
   8639c:	d503201f 	nop

00000000000863a0 <CFATCache::~CFATCache()>:
   863a0:	d65f03c0 	ret
   863a4:	d503201f 	nop
   863a8:	d503201f 	nop
   863ac:	d503201f 	nop

00000000000863b0 <CFATCache::Open(CDevice*)>:
   863b0:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   863b4:	a9027bf7 	stp	x23, x30, [sp, #32]
   863b8:	aa0003f7 	mov	x23, x0
   863bc:	f9400000 	ldr	x0, [x0]
   863c0:	b50004e0 	cbnz	x0, 8645c <CFATCache::Open(CDevice*)+0xac>
   863c4:	f90002e1 	str	x1, [x23]
   863c8:	a9015bf5 	stp	x21, x22, [sp, #16]
   863cc:	b4000541 	cbz	x1, 86474 <CFATCache::Open(CDevice*)+0xc4>
   863d0:	52800001 	mov	w1, #0x0                   	// #0
   863d4:	d2804800 	mov	x0, #0x240                 	// #576
   863d8:	94003946 	bl	948f0 <operator new(unsigned long, int)>
   863dc:	b2407fe4 	mov	x4, #0xffffffff            	// #4294967295
   863e0:	528a89a3 	mov	w3, #0x544d                	// #21581
   863e4:	72a8c823 	movk	w3, #0x4641, lsl #16
   863e8:	aa0003f4 	mov	x20, x0
   863ec:	a900fc1f 	stp	xzr, xzr, [x0, #8]
   863f0:	2a0303f6 	mov	w22, w3
   863f4:	aa0403f5 	mov	x21, x4
   863f8:	52800033 	mov	w19, #0x1                   	// #1
   863fc:	b9000003 	str	w3, [x0]
   86400:	f9000c04 	str	x4, [x0, #24]
   86404:	1400000c 	b	86434 <CFATCache::Open(CDevice*)+0x84>
   86408:	7101927f 	cmp	w19, #0x64
   8640c:	540001c0 	b.eq	86444 <CFATCache::Open(CDevice*)+0x94>  // b.none
   86410:	52800001 	mov	w1, #0x0                   	// #0
   86414:	d2804800 	mov	x0, #0x240                 	// #576
   86418:	94003936 	bl	948f0 <operator new(unsigned long, int)>
   8641c:	b9000016 	str	w22, [x0]
   86420:	11000673 	add	w19, w19, #0x1
   86424:	a900d01f 	stp	xzr, x20, [x0, #8]
   86428:	f9000c15 	str	x21, [x0, #24]
   8642c:	f9000680 	str	x0, [x20, #8]
   86430:	aa0003f4 	mov	x20, x0
   86434:	7100067f 	cmp	w19, #0x1
   86438:	54fffe81 	b.ne	86408 <CFATCache::Open(CDevice*)+0x58>  // b.any
   8643c:	f90006f4 	str	x20, [x23, #8]
   86440:	17fffff4 	b	86410 <CFATCache::Open(CDevice*)+0x60>
   86444:	52800020 	mov	w0, #0x1                   	// #1
   86448:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8644c:	f9000af4 	str	x20, [x23, #16]
   86450:	a9427bf7 	ldp	x23, x30, [sp, #32]
   86454:	a8c353f3 	ldp	x19, x20, [sp], #48
   86458:	d65f03c0 	ret
   8645c:	b00000a1 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   86460:	9103a021 	add	x1, x1, #0xe8
   86464:	a9015bf5 	stp	x21, x22, [sp, #16]
   86468:	91004020 	add	x0, x1, #0x10
   8646c:	52800622 	mov	w2, #0x31                  	// #49
   86470:	94000bc0 	bl	89370 <assertion_failed>
   86474:	b00000a2 	adrp	x2, 9b000 <vtable for CSoftSerialDevice+0x90>
   86478:	9103a041 	add	x1, x2, #0xe8
   8647c:	9100a020 	add	x0, x1, #0x28
   86480:	52800662 	mov	w2, #0x33                  	// #51
   86484:	94000bbb 	bl	89370 <assertion_failed>
   86488:	d503201f 	nop
   8648c:	d503201f 	nop

0000000000086490 <CFATCache::Close()>:
   86490:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   86494:	a9017bf5 	stp	x21, x30, [sp, #16]
   86498:	aa0003f5 	mov	x21, x0
   8649c:	9400001d 	bl	86510 <CFATCache::Flush()>
   864a0:	f94006b3 	ldr	x19, [x21, #8]
   864a4:	b4000293 	cbz	x19, 864f4 <CFATCache::Close()+0x64>
   864a8:	b9400274 	ldr	w20, [x19]
   864ac:	528a89a0 	mov	w0, #0x544d                	// #21581
   864b0:	72a8c820 	movk	w0, #0x4641, lsl #16
   864b4:	6b00029f 	cmp	w20, w0
   864b8:	54000141 	b.ne	864e0 <CFATCache::Close()+0x50>  // b.any
   864bc:	d503201f 	nop
   864c0:	aa1303e0 	mov	x0, x19
   864c4:	b900027f 	str	wzr, [x19]
   864c8:	f9400673 	ldr	x19, [x19, #8]
   864cc:	94003971 	bl	94a90 <operator delete[](void*)>
   864d0:	b4000133 	cbz	x19, 864f4 <CFATCache::Close()+0x64>
   864d4:	b9400261 	ldr	w1, [x19]
   864d8:	6b14003f 	cmp	w1, w20
   864dc:	54ffff20 	b.eq	864c0 <CFATCache::Close()+0x30>  // b.none
   864e0:	b00000a2 	adrp	x2, 9b000 <vtable for CSoftSerialDevice+0x90>
   864e4:	9103a041 	add	x1, x2, #0xe8
   864e8:	91010020 	add	x0, x1, #0x40
   864ec:	52800c02 	mov	w2, #0x60                  	// #96
   864f0:	94000ba0 	bl	89370 <assertion_failed>
   864f4:	a900febf 	stp	xzr, xzr, [x21, #8]
   864f8:	a9417bf5 	ldp	x21, x30, [sp, #16]
   864fc:	a8c253f3 	ldp	x19, x20, [sp], #32
   86500:	d65f03c0 	ret
   86504:	d503201f 	nop
   86508:	d503201f 	nop
   8650c:	d503201f 	nop

0000000000086510 <CFATCache::Flush()>:
   86510:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   86514:	aa0003f4 	mov	x20, x0
   86518:	b9401800 	ldr	w0, [x0, #24]
   8651c:	f9000ffe 	str	x30, [sp, #24]
   86520:	35000660 	cbnz	w0, 865ec <CFATCache::Flush()+0xdc>
   86524:	f9400693 	ldr	x19, [x20, #8]
   86528:	b40006d3 	cbz	x19, 86600 <CFATCache::Flush()+0xf0>
   8652c:	f9000bf5 	str	x21, [sp, #16]
   86530:	528a89a0 	mov	w0, #0x544d                	// #21581
   86534:	72a8c820 	movk	w0, #0x4641, lsl #16
   86538:	b9400275 	ldr	w21, [x19]
   8653c:	6b0002bf 	cmp	w21, w0
   86540:	54000421 	b.ne	865c4 <CFATCache::Flush()+0xb4>  // b.any
   86544:	d503201f 	nop
   86548:	b9401a61 	ldr	w1, [x19, #24]
   8654c:	3100043f 	cmn	w1, #0x1
   86550:	54000300 	b.eq	865b0 <CFATCache::Flush()+0xa0>  // b.none
   86554:	b9402262 	ldr	w2, [x19, #32]
   86558:	340002c2 	cbz	w2, 865b0 <CFATCache::Flush()+0xa0>
   8655c:	b9401e80 	ldr	w0, [x20, #28]
   86560:	35000400 	cbnz	w0, 865e0 <CFATCache::Flush()+0xd0>
   86564:	f9400280 	ldr	x0, [x20]
   86568:	53175821 	lsl	w1, w1, #9
   8656c:	f9400003 	ldr	x3, [x0]
   86570:	f9401064 	ldr	x4, [x3, #32]
   86574:	d63f0080 	blr	x4
   86578:	f9400280 	ldr	x0, [x20]
   8657c:	d2804002 	mov	x2, #0x200                 	// #512
   86580:	91010261 	add	x1, x19, #0x40
   86584:	f9400005 	ldr	x5, [x0]
   86588:	f9400ca6 	ldr	x6, [x5, #24]
   8658c:	d63f00c0 	blr	x6
   86590:	7108001f 	cmp	w0, #0x200
   86594:	54000080 	b.eq	865a4 <CFATCache::Flush()+0x94>  // b.none
   86598:	5282a061 	mov	w1, #0x1503                	// #5379
   8659c:	aa1403e0 	mov	x0, x20
   865a0:	94000138 	bl	86a80 <CFATCache::Fault(unsigned int)>
   865a4:	b9401e87 	ldr	w7, [x20, #28]
   865a8:	35000187 	cbnz	w7, 865d8 <CFATCache::Flush()+0xc8>
   865ac:	b900227f 	str	wzr, [x19, #32]
   865b0:	f9400673 	ldr	x19, [x19, #8]
   865b4:	b40002d3 	cbz	x19, 8660c <CFATCache::Flush()+0xfc>
   865b8:	b9400268 	ldr	w8, [x19]
   865bc:	6b15011f 	cmp	w8, w21
   865c0:	54fffc40 	b.eq	86548 <CFATCache::Flush()+0x38>  // b.none
   865c4:	b00000a9 	adrp	x9, 9b000 <vtable for CSoftSerialDevice+0x90>
   865c8:	9103a121 	add	x1, x9, #0xe8
   865cc:	91010020 	add	x0, x1, #0x40
   865d0:	52800ea2 	mov	w2, #0x75                  	// #117
   865d4:	94000b67 	bl	89370 <assertion_failed>
   865d8:	94003bc2 	bl	954e0 <LeaveCritical>
   865dc:	17fffff4 	b	865ac <CFATCache::Flush()+0x9c>
   865e0:	94003b94 	bl	95430 <EnterCritical>
   865e4:	b9401a61 	ldr	w1, [x19, #24]
   865e8:	17ffffdf 	b	86564 <CFATCache::Flush()+0x54>
   865ec:	94003b91 	bl	95430 <EnterCritical>
   865f0:	f9400693 	ldr	x19, [x20, #8]
   865f4:	b5fff9d3 	cbnz	x19, 8652c <CFATCache::Flush()+0x1c>
   865f8:	b9401a8a 	ldr	w10, [x20, #24]
   865fc:	350000ea 	cbnz	w10, 86618 <CFATCache::Flush()+0x108>
   86600:	f9400ffe 	ldr	x30, [sp, #24]
   86604:	a8c253f3 	ldp	x19, x20, [sp], #32
   86608:	d65f03c0 	ret
   8660c:	b9401a8a 	ldr	w10, [x20, #24]
   86610:	f9400bf5 	ldr	x21, [sp, #16]
   86614:	34ffff6a 	cbz	w10, 86600 <CFATCache::Flush()+0xf0>
   86618:	f9400ffe 	ldr	x30, [sp, #24]
   8661c:	a8c253f3 	ldp	x19, x20, [sp], #32
   86620:	14003bb0 	b	954e0 <LeaveCritical>
   86624:	d503201f 	nop
   86628:	d503201f 	nop
   8662c:	d503201f 	nop

0000000000086630 <CFATCache::GetSector(unsigned int, int)>:
   86630:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   86634:	2a0103f4 	mov	w20, w1
   86638:	a9015bf5 	stp	x21, x22, [sp, #16]
   8663c:	aa0003f5 	mov	x21, x0
   86640:	b9401800 	ldr	w0, [x0, #24]
   86644:	a9027bf7 	stp	x23, x30, [sp, #32]
   86648:	2a0203f7 	mov	w23, w2
   8664c:	350002c0 	cbnz	w0, 866a4 <CFATCache::GetSector(unsigned int, int)+0x74>
   86650:	f94006b3 	ldr	x19, [x21, #8]
   86654:	b40002d3 	cbz	x19, 866ac <CFATCache::GetSector(unsigned int, int)+0x7c>
   86658:	b9400261 	ldr	w1, [x19]
   8665c:	528a89a0 	mov	w0, #0x544d                	// #21581
   86660:	72a8c820 	movk	w0, #0x4641, lsl #16
   86664:	6b00003f 	cmp	w1, w0
   86668:	54000141 	b.ne	86690 <CFATCache::GetSector(unsigned int, int)+0x60>  // b.any
   8666c:	d503201f 	nop
   86670:	b9401a62 	ldr	w2, [x19, #24]
   86674:	6b14005f 	cmp	w2, w20
   86678:	540004c0 	b.eq	86710 <CFATCache::GetSector(unsigned int, int)+0xe0>  // b.none
   8667c:	f9400673 	ldr	x19, [x19, #8]
   86680:	b4000173 	cbz	x19, 866ac <CFATCache::GetSector(unsigned int, int)+0x7c>
   86684:	b9400263 	ldr	w3, [x19]
   86688:	6b01007f 	cmp	w3, w1
   8668c:	54ffff20 	b.eq	86670 <CFATCache::GetSector(unsigned int, int)+0x40>  // b.none
   86690:	b00000a4 	adrp	x4, 9b000 <vtable for CSoftSerialDevice+0x90>
   86694:	9103a081 	add	x1, x4, #0xe8
   86698:	91010020 	add	x0, x1, #0x40
   8669c:	528012a2 	mov	w2, #0x95                  	// #149
   866a0:	94000b34 	bl	89370 <assertion_failed>
   866a4:	94003b63 	bl	95430 <EnterCritical>
   866a8:	17ffffea 	b	86650 <CFATCache::GetSector(unsigned int, int)+0x20>
   866ac:	f9400ab6 	ldr	x22, [x21, #16]
   866b0:	b4001216 	cbz	x22, 868f0 <CFATCache::GetSector(unsigned int, int)+0x2c0>
   866b4:	b94002ca 	ldr	w10, [x22]
   866b8:	528a89a8 	mov	w8, #0x544d                	// #21581
   866bc:	72a8c828 	movk	w8, #0x4641, lsl #16
   866c0:	6b08015f 	cmp	w10, w8
   866c4:	540001c1 	b.ne	866fc <CFATCache::GetSector(unsigned int, int)+0xcc>  // b.any
   866c8:	b9401ac9 	ldr	w9, [x22, #24]
   866cc:	aa1603f3 	mov	x19, x22
   866d0:	3100053f 	cmn	w9, #0x1
   866d4:	540000a1 	b.ne	866e8 <CFATCache::GetSector(unsigned int, int)+0xb8>  // b.any
   866d8:	1400001b 	b	86744 <CFATCache::GetSector(unsigned int, int)+0x114>
   866dc:	b9401a6d 	ldr	w13, [x19, #24]
   866e0:	310005bf 	cmn	w13, #0x1
   866e4:	54000300 	b.eq	86744 <CFATCache::GetSector(unsigned int, int)+0x114>  // b.none
   866e8:	f9400a73 	ldr	x19, [x19, #16]
   866ec:	b4000693 	cbz	x19, 867bc <CFATCache::GetSector(unsigned int, int)+0x18c>
   866f0:	b940026b 	ldr	w11, [x19]
   866f4:	6b0a017f 	cmp	w11, w10
   866f8:	54ffff20 	b.eq	866dc <CFATCache::GetSector(unsigned int, int)+0xac>  // b.none
   866fc:	b00000ac 	adrp	x12, 9b000 <vtable for CSoftSerialDevice+0x90>
   86700:	9103a181 	add	x1, x12, #0xe8
   86704:	91010020 	add	x0, x1, #0x40
   86708:	52801562 	mov	w2, #0xab                  	// #171
   8670c:	94000b19 	bl	89370 <assertion_failed>
   86710:	aa1303e1 	mov	x1, x19
   86714:	aa1503e0 	mov	x0, x21
   86718:	940000ba 	bl	86a00 <CFATCache::MoveBufferFirst(TFATBuffer*)>
   8671c:	b9401e65 	ldr	w5, [x19, #28]
   86720:	110004a6 	add	w6, w5, #0x1
   86724:	b9001e66 	str	w6, [x19, #28]
   86728:	b9401aa7 	ldr	w7, [x21, #24]
   8672c:	35000447 	cbnz	w7, 867b4 <CFATCache::GetSector(unsigned int, int)+0x184>
   86730:	aa1303e0 	mov	x0, x19
   86734:	a9415bf5 	ldp	x21, x22, [sp, #16]
   86738:	a9427bf7 	ldp	x23, x30, [sp, #32]
   8673c:	a8c353f3 	ldp	x19, x20, [sp], #48
   86740:	d65f03c0 	ret
   86744:	52800036 	mov	w22, #0x1                   	// #1
   86748:	b9001e76 	str	w22, [x19, #28]
   8674c:	b9001a74 	str	w20, [x19, #24]
   86750:	b900227f 	str	wzr, [x19, #32]
   86754:	35000277 	cbnz	w23, 867a0 <CFATCache::GetSector(unsigned int, int)+0x170>
   86758:	b9401ea0 	ldr	w0, [x21, #28]
   8675c:	350007e0 	cbnz	w0, 86858 <CFATCache::GetSector(unsigned int, int)+0x228>
   86760:	f94002a0 	ldr	x0, [x21]
   86764:	53175a81 	lsl	w1, w20, #9
   86768:	f9400017 	ldr	x23, [x0]
   8676c:	f94012e9 	ldr	x9, [x23, #32]
   86770:	d63f0120 	blr	x9
   86774:	f94002a0 	ldr	x0, [x21]
   86778:	d2804002 	mov	x2, #0x200                 	// #512
   8677c:	91010261 	add	x1, x19, #0x40
   86780:	f940000a 	ldr	x10, [x0]
   86784:	f940094b 	ldr	x11, [x10, #16]
   86788:	d63f0160 	blr	x11
   8678c:	7108001f 	cmp	w0, #0x200
   86790:	54000681 	b.ne	86860 <CFATCache::GetSector(unsigned int, int)+0x230>  // b.any
   86794:	b9401eac 	ldr	w12, [x21, #28]
   86798:	3400004c 	cbz	w12, 867a0 <CFATCache::GetSector(unsigned int, int)+0x170>
   8679c:	94003b51 	bl	954e0 <LeaveCritical>
   867a0:	aa1503e0 	mov	x0, x21
   867a4:	aa1303e1 	mov	x1, x19
   867a8:	94000096 	bl	86a00 <CFATCache::MoveBufferFirst(TFATBuffer*)>
   867ac:	b9401ab5 	ldr	w21, [x21, #24]
   867b0:	34fffc15 	cbz	w21, 86730 <CFATCache::GetSector(unsigned int, int)+0x100>
   867b4:	94003b4b 	bl	954e0 <LeaveCritical>
   867b8:	17ffffde 	b	86730 <CFATCache::GetSector(unsigned int, int)+0x100>
   867bc:	b9401ece 	ldr	w14, [x22, #28]
   867c0:	3400014e 	cbz	w14, 867e8 <CFATCache::GetSector(unsigned int, int)+0x1b8>
   867c4:	528a89af 	mov	w15, #0x544d                	// #21581
   867c8:	72a8c82f 	movk	w15, #0x4641, lsl #16
   867cc:	f9400ad6 	ldr	x22, [x22, #16]
   867d0:	b4000916 	cbz	x22, 868f0 <CFATCache::GetSector(unsigned int, int)+0x2c0>
   867d4:	b94002d0 	ldr	w16, [x22]
   867d8:	6b0f021f 	cmp	w16, w15
   867dc:	54000601 	b.ne	8689c <CFATCache::GetSector(unsigned int, int)+0x26c>  // b.any
   867e0:	b9401ed2 	ldr	w18, [x22, #28]
   867e4:	35ffff52 	cbnz	w18, 867cc <CFATCache::GetSector(unsigned int, int)+0x19c>
   867e8:	b94022de 	ldr	w30, [x22, #32]
   867ec:	aa1603f3 	mov	x19, x22
   867f0:	3400027e 	cbz	w30, 8683c <CFATCache::GetSector(unsigned int, int)+0x20c>
   867f4:	b9401ea0 	ldr	w0, [x21, #28]
   867f8:	350006a0 	cbnz	w0, 868cc <CFATCache::GetSector(unsigned int, int)+0x29c>
   867fc:	b9401ac0 	ldr	w0, [x22, #24]
   86800:	53175801 	lsl	w1, w0, #9
   86804:	f94002a0 	ldr	x0, [x21]
   86808:	f9400002 	ldr	x2, [x0]
   8680c:	f9401043 	ldr	x3, [x2, #32]
   86810:	d63f0060 	blr	x3
   86814:	f94002a0 	ldr	x0, [x21]
   86818:	d2804002 	mov	x2, #0x200                 	// #512
   8681c:	910102c1 	add	x1, x22, #0x40
   86820:	f9400004 	ldr	x4, [x0]
   86824:	f9400c85 	ldr	x5, [x4, #24]
   86828:	d63f00a0 	blr	x5
   8682c:	7108001f 	cmp	w0, #0x200
   86830:	54000401 	b.ne	868b0 <CFATCache::GetSector(unsigned int, int)+0x280>  // b.any
   86834:	b9401ea1 	ldr	w1, [x21, #28]
   86838:	350004e1 	cbnz	w1, 868d4 <CFATCache::GetSector(unsigned int, int)+0x2a4>
   8683c:	12800006 	mov	w6, #0xffffffff            	// #-1
   86840:	b9401ec7 	ldr	w7, [x22, #28]
   86844:	b9001ac6 	str	w6, [x22, #24]
   86848:	350004a7 	cbnz	w7, 868dc <CFATCache::GetSector(unsigned int, int)+0x2ac>
   8684c:	52800028 	mov	w8, #0x1                   	// #1
   86850:	b9001ec8 	str	w8, [x22, #28]
   86854:	17ffffbe 	b	8674c <CFATCache::GetSector(unsigned int, int)+0x11c>
   86858:	94003af6 	bl	95430 <EnterCritical>
   8685c:	17ffffc1 	b	86760 <CFATCache::GetSector(unsigned int, int)+0x130>
   86860:	b9401e6e 	ldr	w14, [x19, #28]
   86864:	1280000d 	mov	w13, #0xffffffff            	// #-1
   86868:	5282a041 	mov	w1, #0x1502                	// #5378
   8686c:	aa1503e0 	mov	x0, x21
   86870:	0b0d01cf 	add	w15, w14, w13
   86874:	29033e6d 	stp	w13, w15, [x19, #24]
   86878:	94000082 	bl	86a80 <CFATCache::Fault(unsigned int)>
   8687c:	b9401eb0 	ldr	w16, [x21, #28]
   86880:	35000230 	cbnz	w16, 868c4 <CFATCache::GetSector(unsigned int, int)+0x294>
   86884:	b9401ab1 	ldr	w17, [x21, #24]
   86888:	d2800013 	mov	x19, #0x0                   	// #0
   8688c:	34fff531 	cbz	w17, 86730 <CFATCache::GetSector(unsigned int, int)+0x100>
   86890:	94003b14 	bl	954e0 <LeaveCritical>
   86894:	d2800013 	mov	x19, #0x0                   	// #0
   86898:	17ffffa6 	b	86730 <CFATCache::GetSector(unsigned int, int)+0x100>
   8689c:	b00000b1 	adrp	x17, 9b000 <vtable for CSoftSerialDevice+0x90>
   868a0:	9103a221 	add	x1, x17, #0xe8
   868a4:	91010020 	add	x0, x1, #0x40
   868a8:	528016e2 	mov	w2, #0xb7                  	// #183
   868ac:	94000ab1 	bl	89370 <assertion_failed>
   868b0:	5282a061 	mov	w1, #0x1503                	// #5379
   868b4:	aa1503e0 	mov	x0, x21
   868b8:	94000072 	bl	86a80 <CFATCache::Fault(unsigned int)>
   868bc:	b9401eb4 	ldr	w20, [x21, #28]
   868c0:	34fffe34 	cbz	w20, 86884 <CFATCache::GetSector(unsigned int, int)+0x254>
   868c4:	94003b07 	bl	954e0 <LeaveCritical>
   868c8:	17ffffef 	b	86884 <CFATCache::GetSector(unsigned int, int)+0x254>
   868cc:	94003ad9 	bl	95430 <EnterCritical>
   868d0:	17ffffcb 	b	867fc <CFATCache::GetSector(unsigned int, int)+0x1cc>
   868d4:	94003b03 	bl	954e0 <LeaveCritical>
   868d8:	17ffffd9 	b	8683c <CFATCache::GetSector(unsigned int, int)+0x20c>
   868dc:	b00000b3 	adrp	x19, 9b000 <vtable for CSoftSerialDevice+0x90>
   868e0:	9103a261 	add	x1, x19, #0xe8
   868e4:	91018020 	add	x0, x1, #0x60
   868e8:	52801ae2 	mov	w2, #0xd7                  	// #215
   868ec:	94000aa1 	bl	89370 <assertion_failed>
   868f0:	5282a021 	mov	w1, #0x1501                	// #5377
   868f4:	aa1503e0 	mov	x0, x21
   868f8:	94000062 	bl	86a80 <CFATCache::Fault(unsigned int)>
   868fc:	17ffffe2 	b	86884 <CFATCache::GetSector(unsigned int, int)+0x254>

0000000000086900 <CFATCache::FreeSector(TFATBuffer*, int)>:
   86900:	a9be7bf3 	stp	x19, x30, [sp, #-32]!
   86904:	528a89a3 	mov	w3, #0x544d                	// #21581
   86908:	72a8c823 	movk	w3, #0x4641, lsl #16
   8690c:	b9400024 	ldr	w4, [x1]
   86910:	6b03009f 	cmp	w4, w3
   86914:	540002c1 	b.ne	8696c <CFATCache::FreeSector(TFATBuffer*, int)+0x6c>  // b.any
   86918:	aa0003f3 	mov	x19, x0
   8691c:	b9401c20 	ldr	w0, [x1, #28]
   86920:	34000300 	cbz	w0, 86980 <CFATCache::FreeSector(TFATBuffer*, int)+0x80>
   86924:	51000405 	sub	w5, w0, #0x1
   86928:	2a0200a6 	orr	w6, w5, w2
   8692c:	b9001c25 	str	w5, [x1, #28]
   86930:	34000066 	cbz	w6, 8693c <CFATCache::FreeSector(TFATBuffer*, int)+0x3c>
   86934:	a8c27bf3 	ldp	x19, x30, [sp], #32
   86938:	d65f03c0 	ret
   8693c:	b9401a60 	ldr	w0, [x19, #24]
   86940:	350000e0 	cbnz	w0, 8695c <CFATCache::FreeSector(TFATBuffer*, int)+0x5c>
   86944:	aa1303e0 	mov	x0, x19
   86948:	9400003e 	bl	86a40 <CFATCache::MoveBufferLast(TFATBuffer*)>
   8694c:	b9401a67 	ldr	w7, [x19, #24]
   86950:	34ffff27 	cbz	w7, 86934 <CFATCache::FreeSector(TFATBuffer*, int)+0x34>
   86954:	a8c27bf3 	ldp	x19, x30, [sp], #32
   86958:	14003ae2 	b	954e0 <LeaveCritical>
   8695c:	f9000fe1 	str	x1, [sp, #24]
   86960:	94003ab4 	bl	95430 <EnterCritical>
   86964:	f9400fe1 	ldr	x1, [sp, #24]
   86968:	17fffff7 	b	86944 <CFATCache::FreeSector(TFATBuffer*, int)+0x44>
   8696c:	b00000a1 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   86970:	9103a021 	add	x1, x1, #0xe8
   86974:	91010020 	add	x0, x1, #0x40
   86978:	52801f62 	mov	w2, #0xfb                  	// #251
   8697c:	94000a7d 	bl	89370 <assertion_failed>
   86980:	b00000a2 	adrp	x2, 9b000 <vtable for CSoftSerialDevice+0x90>
   86984:	9103a041 	add	x1, x2, #0xe8
   86988:	9101e020 	add	x0, x1, #0x78
   8698c:	52801f82 	mov	w2, #0xfc                  	// #252
   86990:	94000a78 	bl	89370 <assertion_failed>
   86994:	d503201f 	nop
   86998:	d503201f 	nop
   8699c:	d503201f 	nop

00000000000869a0 <CFATCache::MarkDirty(TFATBuffer*)>:
   869a0:	f81f0ffe 	str	x30, [sp, #-16]!
   869a4:	528a89a0 	mov	w0, #0x544d                	// #21581
   869a8:	72a8c820 	movk	w0, #0x4641, lsl #16
   869ac:	b9400022 	ldr	w2, [x1]
   869b0:	6b00005f 	cmp	w2, w0
   869b4:	540000e1 	b.ne	869d0 <CFATCache::MarkDirty(TFATBuffer*)+0x30>  // b.any
   869b8:	b9401c23 	ldr	w3, [x1, #28]
   869bc:	34000143 	cbz	w3, 869e4 <CFATCache::MarkDirty(TFATBuffer*)+0x44>
   869c0:	52800025 	mov	w5, #0x1                   	// #1
   869c4:	b9002025 	str	w5, [x1, #32]
   869c8:	f84107fe 	ldr	x30, [sp], #16
   869cc:	d65f03c0 	ret
   869d0:	b00000a1 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   869d4:	9103a021 	add	x1, x1, #0xe8
   869d8:	91010020 	add	x0, x1, #0x40
   869dc:	52802402 	mov	w2, #0x120                 	// #288
   869e0:	94000a64 	bl	89370 <assertion_failed>
   869e4:	b00000a4 	adrp	x4, 9b000 <vtable for CSoftSerialDevice+0x90>
   869e8:	9103a081 	add	x1, x4, #0xe8
   869ec:	9101e020 	add	x0, x1, #0x78
   869f0:	52802422 	mov	w2, #0x121                 	// #289
   869f4:	94000a5f 	bl	89370 <assertion_failed>
   869f8:	d503201f 	nop
   869fc:	d503201f 	nop

0000000000086a00 <CFATCache::MoveBufferFirst(TFATBuffer*)>:
   86a00:	f9400402 	ldr	x2, [x0, #8]
   86a04:	eb01005f 	cmp	x2, x1
   86a08:	54000160 	b.eq	86a34 <CFATCache::MoveBufferFirst(TFATBuffer*)+0x34>  // b.none
   86a0c:	a9408c24 	ldp	x4, x3, [x1, #8]
   86a10:	f9000464 	str	x4, [x3, #8]
   86a14:	b4000124 	cbz	x4, 86a38 <CFATCache::MoveBufferFirst(TFATBuffer*)+0x38>
   86a18:	f9000883 	str	x3, [x4, #16]
   86a1c:	f9400405 	ldr	x5, [x0, #8]
   86a20:	f90008a1 	str	x1, [x5, #16]
   86a24:	f9400406 	ldr	x6, [x0, #8]
   86a28:	f9000426 	str	x6, [x1, #8]
   86a2c:	f9000401 	str	x1, [x0, #8]
   86a30:	f900083f 	str	xzr, [x1, #16]
   86a34:	d65f03c0 	ret
   86a38:	f9000803 	str	x3, [x0, #16]
   86a3c:	17fffff8 	b	86a1c <CFATCache::MoveBufferFirst(TFATBuffer*)+0x1c>

0000000000086a40 <CFATCache::MoveBufferLast(TFATBuffer*)>:
   86a40:	f9400802 	ldr	x2, [x0, #16]
   86a44:	eb01005f 	cmp	x2, x1
   86a48:	54000160 	b.eq	86a74 <CFATCache::MoveBufferLast(TFATBuffer*)+0x34>  // b.none
   86a4c:	a9409023 	ldp	x3, x4, [x1, #8]
   86a50:	f9000864 	str	x4, [x3, #16]
   86a54:	b4000124 	cbz	x4, 86a78 <CFATCache::MoveBufferLast(TFATBuffer*)+0x38>
   86a58:	f9000483 	str	x3, [x4, #8]
   86a5c:	f9400805 	ldr	x5, [x0, #16]
   86a60:	f90004a1 	str	x1, [x5, #8]
   86a64:	f9400806 	ldr	x6, [x0, #16]
   86a68:	f9000826 	str	x6, [x1, #16]
   86a6c:	f9000801 	str	x1, [x0, #16]
   86a70:	f900043f 	str	xzr, [x1, #8]
   86a74:	d65f03c0 	ret
   86a78:	f9000403 	str	x3, [x0, #8]
   86a7c:	17fffff8 	b	86a5c <CFATCache::MoveBufferLast(TFATBuffer*)+0x1c>

0000000000086a80 <CFATCache::Fault(unsigned int)>:
   86a80:	1282a000 	mov	w0, #0xffffeaff            	// #-5377
   86a84:	a9be7bf3 	stp	x19, x30, [sp, #-32]!
   86a88:	0b000021 	add	w1, w1, w0
   86a8c:	7100083f 	cmp	w1, #0x2
   86a90:	54000188 	b.hi	86ac0 <CFATCache::Fault(unsigned int)+0x40>  // b.pmore
   86a94:	b00000b3 	adrp	x19, 9b000 <vtable for CSoftSerialDevice+0x90>
   86a98:	9103a273 	add	x19, x19, #0xe8
   86a9c:	91024263 	add	x3, x19, #0x90
   86aa0:	f8615864 	ldr	x4, [x3, w1, uxtw #3]
   86aa4:	f9000fe4 	str	x4, [sp, #24]
   86aa8:	94001496 	bl	8bd00 <CLogger::Get()>
   86aac:	9102a261 	add	x1, x19, #0xa8
   86ab0:	52800002 	mov	w2, #0x0                   	// #0
   86ab4:	f9400fe3 	ldr	x3, [sp, #24]
   86ab8:	a8c27bf3 	ldp	x19, x30, [sp], #32
   86abc:	140013cd 	b	8b9f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   86ac0:	b00000a2 	adrp	x2, 9b000 <vtable for CSoftSerialDevice+0x90>
   86ac4:	9103a041 	add	x1, x2, #0xe8
   86ac8:	9102e020 	add	x0, x1, #0xb8
   86acc:	52802d42 	mov	w2, #0x16a                 	// #362
   86ad0:	94000a28 	bl	89370 <assertion_failed>
	...

0000000000086ae0 <CFATInfo::CFATInfo(CFATCache*)>:
   86ae0:	52800042 	mov	w2, #0x2                   	// #2
   86ae4:	f9000001 	str	x1, [x0]
   86ae8:	b9004c1f 	str	wzr, [x0, #76]
   86aec:	b9000802 	str	w2, [x0, #8]
   86af0:	d65f03c0 	ret
   86af4:	d503201f 	nop
   86af8:	d503201f 	nop
   86afc:	d503201f 	nop

0000000000086b00 <CFATInfo::~CFATInfo()>:
   86b00:	d65f03c0 	ret
   86b04:	d503201f 	nop
   86b08:	d503201f 	nop
   86b0c:	d503201f 	nop

0000000000086b10 <CFATInfo::Initialize()>:
   86b10:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   86b14:	aa0003f3 	mov	x19, x0
   86b18:	f9400000 	ldr	x0, [x0]
   86b1c:	f90013fe 	str	x30, [sp, #32]
   86b20:	b4000e00 	cbz	x0, 86ce0 <CFATInfo::Initialize()+0x1d0>
   86b24:	52800001 	mov	w1, #0x0                   	// #0
   86b28:	52800002 	mov	w2, #0x0                   	// #0
   86b2c:	97fffec1 	bl	86630 <CFATCache::GetSector(unsigned int, int)>
   86b30:	aa0003e1 	mov	x1, x0
   86b34:	b4000e40 	cbz	x0, 86cfc <CFATInfo::Initialize()+0x1ec>
   86b38:	91010006 	add	x6, x0, #0x40
   86b3c:	7943fcc4 	ldrh	w4, [x6, #510]
   86b40:	52954aa5 	mov	w5, #0xaa55                	// #43605
   86b44:	f9400260 	ldr	x0, [x19]
   86b48:	6b05009f 	cmp	w4, w5
   86b4c:	54000081 	b.ne	86b5c <CFATInfo::Initialize()+0x4c>  // b.any
   86b50:	7840b0c7 	ldurh	w7, [x6, #11]
   86b54:	710800ff 	cmp	w7, #0x200
   86b58:	54000100 	b.eq	86b78 <CFATInfo::Initialize()+0x68>  // b.none
   86b5c:	52800002 	mov	w2, #0x0                   	// #0
   86b60:	52800014 	mov	w20, #0x0                   	// #0
   86b64:	97ffff67 	bl	86900 <CFATCache::FreeSector(TFATBuffer*, int)>
   86b68:	2a1403e0 	mov	w0, w20
   86b6c:	f94013fe 	ldr	x30, [sp, #32]
   86b70:	a8c353f3 	ldp	x19, x20, [sp], #48
   86b74:	d65f03c0 	ret
   86b78:	394054c8 	ldrb	w8, [x6, #21]
   86b7c:	121c0d09 	and	w9, w8, #0xf0
   86b80:	7103c13f 	cmp	w9, #0xf0
   86b84:	54fffec1 	b.ne	86b5c <CFATInfo::Initialize()+0x4c>  // b.any
   86b88:	394034ca 	ldrb	w10, [x6, #13]
   86b8c:	b9000e6a 	str	w10, [x19, #12]
   86b90:	79401ccb 	ldrh	w11, [x6, #14]
   86b94:	b900126b 	str	w11, [x19, #16]
   86b98:	394040cc 	ldrb	w12, [x6, #16]
   86b9c:	b900166c 	str	w12, [x19, #20]
   86ba0:	784110cd 	ldurh	w13, [x6, #17]
   86ba4:	b9001a6d 	str	w13, [x19, #24]
   86ba8:	79402cce 	ldrh	w14, [x6, #22]
   86bac:	b9001e6e 	str	w14, [x19, #28]
   86bb0:	34000b4e 	cbz	w14, 86d18 <CFATInfo::Initialize()+0x208>
   86bb4:	52800029 	mov	w9, #0x1                   	// #1
   86bb8:	b9000a7f 	str	wzr, [x19, #8]
   86bbc:	39009269 	strb	w9, [x19, #36]
   86bc0:	784130ca 	ldurh	w10, [x6, #19]
   86bc4:	b900226a 	str	w10, [x19, #32]
   86bc8:	34000daa 	cbz	w10, 86d7c <CFATInfo::Initialize()+0x26c>
   86bcc:	52800002 	mov	w2, #0x0                   	// #0
   86bd0:	97ffff4c 	bl	86900 <CFATCache::FreeSector(TFATBuffer*, int)>
   86bd4:	b940126b 	ldr	w11, [x19, #16]
   86bd8:	3400080b 	cbz	w11, 86cd8 <CFATInfo::Initialize()+0x1c8>
   86bdc:	b9401e60 	ldr	w0, [x19, #28]
   86be0:	340007c0 	cbz	w0, 86cd8 <CFATInfo::Initialize()+0x1c8>
   86be4:	2942b66c 	ldp	w12, w13, [x19, #20]
   86be8:	b9402261 	ldr	w1, [x19, #32]
   86bec:	b9400e7e 	ldr	w30, [x19, #12]
   86bf0:	1b0c2c0e 	madd	w14, w0, w12, w11
   86bf4:	531b69af 	lsl	w15, w13, #5
   86bf8:	1107fdf0 	add	w16, w15, #0x1ff
   86bfc:	53097e11 	lsr	w17, w16, #9
   86c00:	0b1101d2 	add	w18, w14, w17
   86c04:	4b120034 	sub	w20, w1, w18
   86c08:	2906ca71 	stp	w17, w18, [x19, #52]
   86c0c:	1ade0a82 	udiv	w2, w20, w30
   86c10:	b9003e74 	str	w20, [x19, #60]
   86c14:	713fd05f 	cmp	w2, #0xff4
   86c18:	b9004262 	str	w2, [x19, #64]
   86c1c:	540005e9 	b.ls	86cd8 <CFATInfo::Initialize()+0x1c8>  // b.plast
   86c20:	529ffe83 	mov	w3, #0xfff4                	// #65524
   86c24:	b9400a65 	ldr	w5, [x19, #8]
   86c28:	6b03005f 	cmp	w2, w3
   86c2c:	54000ae8 	b.hi	86d88 <CFATInfo::Initialize()+0x278>  // b.pmore
   86c30:	35000545 	cbnz	w5, 86cd8 <CFATInfo::Initialize()+0x1c8>
   86c34:	b2407ff2 	mov	x18, #0xffffffff            	// #4294967295
   86c38:	a9015bf5 	stp	x21, x22, [sp, #16]
   86c3c:	f2c00052 	movk	x18, #0x2, lsl #32
   86c40:	f8044272 	stur	x18, [x19, #68]
   86c44:	51000421 	sub	w1, w1, #0x1
   86c48:	52800002 	mov	w2, #0x0                   	// #0
   86c4c:	f9400260 	ldr	x0, [x19]
   86c50:	97fffe78 	bl	86630 <CFATCache::GetSector(unsigned int, int)>
   86c54:	b4000da0 	cbz	x0, 86e08 <CFATInfo::Initialize()+0x2f8>
   86c58:	aa0003e1 	mov	x1, x0
   86c5c:	52800002 	mov	w2, #0x0                   	// #0
   86c60:	f9400260 	ldr	x0, [x19]
   86c64:	97ffff27 	bl	86900 <CFATCache::FreeSector(TFATBuffer*, int)>
   86c68:	b9400e62 	ldr	w2, [x19, #12]
   86c6c:	52800034 	mov	w20, #0x1                   	// #1
   86c70:	0b020843 	add	w3, w2, w2, lsl #2
   86c74:	53165475 	lsl	w21, w3, #10
   86c78:	94001422 	bl	8bd00 <CLogger::Get()>
   86c7c:	530a7eb6 	lsr	w22, w21, #10
   86c80:	529999a5 	mov	w5, #0xcccd                	// #52429
   86c84:	72b99985 	movk	w5, #0xcccc, lsl #16
   86c88:	b9400a6d 	ldr	w13, [x19, #8]
   86c8c:	b00000a4 	adrp	x4, 9b000 <vtable for CSoftSerialDevice+0x90>
   86c90:	b00000a7 	adrp	x7, 9b000 <vtable for CSoftSerialDevice+0x90>
   86c94:	91086083 	add	x3, x4, #0x218
   86c98:	9ba57ec8 	umull	x8, w22, w5
   86c9c:	910780e1 	add	x1, x7, #0x1e0
   86ca0:	5280020a 	mov	w10, #0x10                  	// #16
   86ca4:	9ba57ea9 	umull	x9, w21, w5
   86ca8:	5280040b 	mov	w11, #0x20                  	// #32
   86cac:	52800082 	mov	w2, #0x4                   	// #4
   86cb0:	b9404265 	ldr	w5, [x19, #64]
   86cb4:	d363fd06 	lsr	x6, x8, #35
   86cb8:	710001bf 	cmp	w13, #0x0
   86cbc:	1a8b0144 	csel	w4, w10, w11, eq  // eq = none
   86cc0:	0b0608cc 	add	w12, w6, w6, lsl #2
   86cc4:	d36dfd26 	lsr	x6, x9, #45
   86cc8:	4b0c06c7 	sub	w7, w22, w12, lsl #1
   86ccc:	94001349 	bl	8b9f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   86cd0:	a9415bf5 	ldp	x21, x22, [sp, #16]
   86cd4:	17ffffa5 	b	86b68 <CFATInfo::Initialize()+0x58>
   86cd8:	52800014 	mov	w20, #0x0                   	// #0
   86cdc:	17ffffa3 	b	86b68 <CFATInfo::Initialize()+0x58>
   86ce0:	b00000a1 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   86ce4:	b00000a0 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   86ce8:	a9015bf5 	stp	x21, x22, [sp, #16]
   86cec:	9107a021 	add	x1, x1, #0x1e8
   86cf0:	9107e000 	add	x0, x0, #0x1f8
   86cf4:	52800522 	mov	w2, #0x29                  	// #41
   86cf8:	9400099e 	bl	89370 <assertion_failed>
   86cfc:	b00000a2 	adrp	x2, 9b000 <vtable for CSoftSerialDevice+0x90>
   86d00:	b00000a3 	adrp	x3, 9b000 <vtable for CSoftSerialDevice+0x90>
   86d04:	a9015bf5 	stp	x21, x22, [sp, #16]
   86d08:	9107a041 	add	x1, x2, #0x1e8
   86d0c:	91082060 	add	x0, x3, #0x208
   86d10:	52800562 	mov	w2, #0x2b                  	// #43
   86d14:	94000997 	bl	89370 <assertion_failed>
   86d18:	5280002f 	mov	w15, #0x1                   	// #1
   86d1c:	b9000a6f 	str	w15, [x19, #8]
   86d20:	394108d0 	ldrb	w16, [x6, #66]
   86d24:	7100a61f 	cmp	w16, #0x29
   86d28:	54fff1a1 	b.ne	86b5c <CFATInfo::Initialize()+0x4c>  // b.any
   86d2c:	794054d1 	ldrh	w17, [x6, #42]
   86d30:	2a0d0232 	orr	w18, w17, w13
   86d34:	35fff152 	cbnz	w18, 86b5c <CFATInfo::Initialize()+0x4c>
   86d38:	b94024d4 	ldr	w20, [x6, #36]
   86d3c:	b9001e74 	str	w20, [x19, #28]
   86d40:	39c0a0de 	ldrsb	w30, [x6, #40]
   86d44:	2a3e03e2 	mvn	w2, w30
   86d48:	531f7c43 	lsr	w3, w2, #31
   86d4c:	39009263 	strb	w3, [x19, #36]
   86d50:	37f800de 	tbnz	w30, #31, 86d68 <CFATInfo::Initialize()+0x258>
   86d54:	3940a0c5 	ldrb	w5, [x6, #40]
   86d58:	12000ca4 	and	w4, w5, #0xf
   86d5c:	6b04019f 	cmp	w12, w4
   86d60:	b9002a64 	str	w4, [x19, #40]
   86d64:	54ffefc9 	b.ls	86b5c <CFATInfo::Initialize()+0x4c>  // b.plast
   86d68:	b9402cc7 	ldr	w7, [x6, #44]
   86d6c:	b9002e67 	str	w7, [x19, #44]
   86d70:	794060c8 	ldrh	w8, [x6, #48]
   86d74:	b9003268 	str	w8, [x19, #48]
   86d78:	17ffff92 	b	86bc0 <CFATInfo::Initialize()+0xb0>
   86d7c:	b94020c6 	ldr	w6, [x6, #32]
   86d80:	b9002266 	str	w6, [x19, #32]
   86d84:	17ffff92 	b	86bcc <CFATInfo::Initialize()+0xbc>
   86d88:	710004bf 	cmp	w5, #0x1
   86d8c:	54fffa61 	b.ne	86cd8 <CFATInfo::Initialize()+0x1c8>  // b.any
   86d90:	b9403261 	ldr	w1, [x19, #48]
   86d94:	6b01017f 	cmp	w11, w1
   86d98:	1a9f87e4 	cset	w4, ls  // ls = plast
   86d9c:	7100003f 	cmp	w1, #0x0
   86da0:	1a9f1494 	csinc	w20, w4, wzr, ne  // ne = any
   86da4:	35fff9b4 	cbnz	w20, 86cd8 <CFATInfo::Initialize()+0x1c8>
   86da8:	52800002 	mov	w2, #0x0                   	// #0
   86dac:	f9400260 	ldr	x0, [x19]
   86db0:	97fffe20 	bl	86630 <CFATCache::GetSector(unsigned int, int)>
   86db4:	aa0003e1 	mov	x1, x0
   86db8:	b4000340 	cbz	x0, 86e20 <CFATInfo::Initialize()+0x310>
   86dbc:	b9404009 	ldr	w9, [x0, #64]
   86dc0:	528a4a47 	mov	w7, #0x5252                	// #21074
   86dc4:	72a82c27 	movk	w7, #0x4161, lsl #16
   86dc8:	91010008 	add	x8, x0, #0x40
   86dcc:	f9400260 	ldr	x0, [x19]
   86dd0:	6b07013f 	cmp	w9, w7
   86dd4:	54000141 	b.ne	86dfc <CFATInfo::Initialize()+0x2ec>  // b.any
   86dd8:	b941e506 	ldr	w6, [x8, #484]
   86ddc:	528e4e4a 	mov	w10, #0x7272                	// #29298
   86de0:	72ac282a 	movk	w10, #0x6141, lsl #16
   86de4:	6b0a00df 	cmp	w6, w10
   86de8:	540000a1 	b.ne	86dfc <CFATInfo::Initialize()+0x2ec>  // b.any
   86dec:	b941fd0c 	ldr	w12, [x8, #508]
   86df0:	52b54aab 	mov	w11, #0xaa550000            	// #-1437270016
   86df4:	6b0b019f 	cmp	w12, w11
   86df8:	54000220 	b.eq	86e3c <CFATInfo::Initialize()+0x32c>  // b.none
   86dfc:	52800002 	mov	w2, #0x0                   	// #0
   86e00:	97fffec0 	bl	86900 <CFATCache::FreeSector(TFATBuffer*, int)>
   86e04:	17ffff59 	b	86b68 <CFATInfo::Initialize()+0x58>
   86e08:	b00000b3 	adrp	x19, 9b000 <vtable for CSoftSerialDevice+0x90>
   86e0c:	b00000be 	adrp	x30, 9b000 <vtable for CSoftSerialDevice+0x90>
   86e10:	9107a261 	add	x1, x19, #0x1e8
   86e14:	910823c0 	add	x0, x30, #0x208
   86e18:	528016c2 	mov	w2, #0xb6                  	// #182
   86e1c:	94000955 	bl	89370 <assertion_failed>
   86e20:	a9015bf5 	stp	x21, x22, [sp, #16]
   86e24:	b00000b5 	adrp	x21, 9b000 <vtable for CSoftSerialDevice+0x90>
   86e28:	b00000b6 	adrp	x22, 9b000 <vtable for CSoftSerialDevice+0x90>
   86e2c:	9107a2a1 	add	x1, x21, #0x1e8
   86e30:	910822c0 	add	x0, x22, #0x208
   86e34:	52801282 	mov	w2, #0x94                  	// #148
   86e38:	9400094e 	bl	89370 <assertion_failed>
   86e3c:	a9015bf5 	stp	x21, x22, [sp, #16]
   86e40:	52800002 	mov	w2, #0x0                   	// #0
   86e44:	b941e90d 	ldr	w13, [x8, #488]
   86e48:	b900466d 	str	w13, [x19, #68]
   86e4c:	b941ed0e 	ldr	w14, [x8, #492]
   86e50:	b9004a6e 	str	w14, [x19, #72]
   86e54:	97fffeab 	bl	86900 <CFATCache::FreeSector(TFATBuffer*, int)>
   86e58:	b9404a60 	ldr	w0, [x19, #72]
   86e5c:	b9403a61 	ldr	w1, [x19, #56]
   86e60:	3100041f 	cmn	w0, #0x1
   86e64:	54000080 	b.eq	86e74 <CFATInfo::Initialize()+0x364>  // b.none
   86e68:	b9403e6f 	ldr	w15, [x19, #60]
   86e6c:	0b0f0021 	add	w1, w1, w15
   86e70:	17ffff75 	b	86c44 <CFATInfo::Initialize()+0x134>
   86e74:	b9403e71 	ldr	w17, [x19, #60]
   86e78:	52800050 	mov	w16, #0x2                   	// #2
   86e7c:	b9004a70 	str	w16, [x19, #72]
   86e80:	0b110021 	add	w1, w1, w17
   86e84:	17ffff70 	b	86c44 <CFATInfo::Initialize()+0x134>
   86e88:	d503201f 	nop
   86e8c:	d503201f 	nop

0000000000086e90 <CFATInfo::GetFATType() const>:
   86e90:	b9400800 	ldr	w0, [x0, #8]
   86e94:	7100081f 	cmp	w0, #0x2
   86e98:	54000040 	b.eq	86ea0 <CFATInfo::GetFATType() const+0x10>  // b.none
   86e9c:	d65f03c0 	ret
   86ea0:	b00000a1 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   86ea4:	b00000a0 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   86ea8:	f81f0ffe 	str	x30, [sp, #-16]!
   86eac:	9107a021 	add	x1, x1, #0x1e8
   86eb0:	9108e000 	add	x0, x0, #0x238
   86eb4:	52801882 	mov	w2, #0xc4                  	// #196
   86eb8:	9400092e 	bl	89370 <assertion_failed>
   86ebc:	d503201f 	nop

0000000000086ec0 <CFATInfo::GetSectorsPerCluster() const>:
   86ec0:	b9400c00 	ldr	w0, [x0, #12]
   86ec4:	d65f03c0 	ret
   86ec8:	d503201f 	nop
   86ecc:	d503201f 	nop

0000000000086ed0 <CFATInfo::GetReservedSectors() const>:
   86ed0:	b9401000 	ldr	w0, [x0, #16]
   86ed4:	d65f03c0 	ret
   86ed8:	d503201f 	nop
   86edc:	d503201f 	nop

0000000000086ee0 <CFATInfo::GetClusterCount() const>:
   86ee0:	b9404000 	ldr	w0, [x0, #64]
   86ee4:	d65f03c0 	ret
   86ee8:	d503201f 	nop
   86eec:	d503201f 	nop

0000000000086ef0 <CFATInfo::GetReadFAT() const>:
   86ef0:	aa0003e1 	mov	x1, x0
   86ef4:	b9400800 	ldr	w0, [x0, #8]
   86ef8:	7100041f 	cmp	w0, #0x1
   86efc:	54000060 	b.eq	86f08 <CFATInfo::GetReadFAT() const+0x18>  // b.none
   86f00:	52800000 	mov	w0, #0x0                   	// #0
   86f04:	d65f03c0 	ret
   86f08:	39409022 	ldrb	w2, [x1, #36]
   86f0c:	52800000 	mov	w0, #0x0                   	// #0
   86f10:	35ffffa2 	cbnz	w2, 86f04 <CFATInfo::GetReadFAT() const+0x14>
   86f14:	b9402820 	ldr	w0, [x1, #40]
   86f18:	d65f03c0 	ret
   86f1c:	d503201f 	nop

0000000000086f20 <CFATInfo::GetFirstWriteFAT() const>:
   86f20:	17fffff4 	b	86ef0 <CFATInfo::GetReadFAT() const>
   86f24:	d503201f 	nop
   86f28:	d503201f 	nop
   86f2c:	d503201f 	nop

0000000000086f30 <CFATInfo::GetLastWriteFAT() const>:
   86f30:	b9400801 	ldr	w1, [x0, #8]
   86f34:	7100043f 	cmp	w1, #0x1
   86f38:	540000a0 	b.eq	86f4c <CFATInfo::GetLastWriteFAT() const+0x1c>  // b.none
   86f3c:	b9401403 	ldr	w3, [x0, #20]
   86f40:	51000460 	sub	w0, w3, #0x1
   86f44:	340000c3 	cbz	w3, 86f5c <CFATInfo::GetLastWriteFAT() const+0x2c>
   86f48:	d65f03c0 	ret
   86f4c:	39409002 	ldrb	w2, [x0, #36]
   86f50:	35ffff62 	cbnz	w2, 86f3c <CFATInfo::GetLastWriteFAT() const+0xc>
   86f54:	b9402800 	ldr	w0, [x0, #40]
   86f58:	d65f03c0 	ret
   86f5c:	b00000a4 	adrp	x4, 9b000 <vtable for CSoftSerialDevice+0x90>
   86f60:	b00000a0 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   86f64:	f81f0ffe 	str	x30, [sp, #-16]!
   86f68:	9107a081 	add	x1, x4, #0x1e8
   86f6c:	91094000 	add	x0, x0, #0x250
   86f70:	52801ea2 	mov	w2, #0xf5                  	// #245
   86f74:	940008ff 	bl	89370 <assertion_failed>
   86f78:	d503201f 	nop
   86f7c:	d503201f 	nop

0000000000086f80 <CFATInfo::GetFATSize() const>:
   86f80:	b9401c00 	ldr	w0, [x0, #28]
   86f84:	d65f03c0 	ret
   86f88:	d503201f 	nop
   86f8c:	d503201f 	nop

0000000000086f90 <CFATInfo::GetFirstRootSector() const>:
   86f90:	b9400801 	ldr	w1, [x0, #8]
   86f94:	350000a1 	cbnz	w1, 86fa8 <CFATInfo::GetFirstRootSector() const+0x18>
   86f98:	29421003 	ldp	w3, w4, [x0, #16]
   86f9c:	b9401c05 	ldr	w5, [x0, #28]
   86fa0:	1b050c80 	madd	w0, w4, w5, w3
   86fa4:	d65f03c0 	ret
   86fa8:	b00000a2 	adrp	x2, 9b000 <vtable for CSoftSerialDevice+0x90>
   86fac:	b00000a0 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   86fb0:	f81f0ffe 	str	x30, [sp, #-16]!
   86fb4:	9107a041 	add	x1, x2, #0x1e8
   86fb8:	9109a000 	add	x0, x0, #0x268
   86fbc:	52802002 	mov	w2, #0x100                 	// #256
   86fc0:	940008ec 	bl	89370 <assertion_failed>
   86fc4:	d503201f 	nop
   86fc8:	d503201f 	nop
   86fcc:	d503201f 	nop

0000000000086fd0 <CFATInfo::GetRootSectorCount() const>:
   86fd0:	b9400801 	ldr	w1, [x0, #8]
   86fd4:	35000061 	cbnz	w1, 86fe0 <CFATInfo::GetRootSectorCount() const+0x10>
   86fd8:	b9403400 	ldr	w0, [x0, #52]
   86fdc:	d65f03c0 	ret
   86fe0:	b00000a2 	adrp	x2, 9b000 <vtable for CSoftSerialDevice+0x90>
   86fe4:	b00000a0 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   86fe8:	f81f0ffe 	str	x30, [sp, #-16]!
   86fec:	9107a041 	add	x1, x2, #0x1e8
   86ff0:	9109a000 	add	x0, x0, #0x268
   86ff4:	528020c2 	mov	w2, #0x106                 	// #262
   86ff8:	940008de 	bl	89370 <assertion_failed>
   86ffc:	d503201f 	nop

0000000000087000 <CFATInfo::GetRootEntries() const>:
   87000:	b9400801 	ldr	w1, [x0, #8]
   87004:	35000061 	cbnz	w1, 87010 <CFATInfo::GetRootEntries() const+0x10>
   87008:	b9401800 	ldr	w0, [x0, #24]
   8700c:	d65f03c0 	ret
   87010:	900000a2 	adrp	x2, 9b000 <vtable for CSoftSerialDevice+0x90>
   87014:	900000a0 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   87018:	f81f0ffe 	str	x30, [sp, #-16]!
   8701c:	9107a041 	add	x1, x2, #0x1e8
   87020:	9109a000 	add	x0, x0, #0x268
   87024:	52802182 	mov	w2, #0x10c                 	// #268
   87028:	940008d2 	bl	89370 <assertion_failed>
   8702c:	d503201f 	nop

0000000000087030 <CFATInfo::GetRootCluster() const>:
   87030:	b9400801 	ldr	w1, [x0, #8]
   87034:	7100043f 	cmp	w1, #0x1
   87038:	54000061 	b.ne	87044 <CFATInfo::GetRootCluster() const+0x14>  // b.any
   8703c:	b9402c00 	ldr	w0, [x0, #44]
   87040:	d65f03c0 	ret
   87044:	900000a2 	adrp	x2, 9b000 <vtable for CSoftSerialDevice+0x90>
   87048:	900000a0 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   8704c:	f81f0ffe 	str	x30, [sp, #-16]!
   87050:	9107a041 	add	x1, x2, #0x1e8
   87054:	910a0000 	add	x0, x0, #0x280
   87058:	52802242 	mov	w2, #0x112                 	// #274
   8705c:	940008c5 	bl	89370 <assertion_failed>

0000000000087060 <CFATInfo::GetFirstSector(unsigned int) const>:
   87060:	b9404002 	ldr	w2, [x0, #64]
   87064:	51000821 	sub	w1, w1, #0x2
   87068:	6b01005f 	cmp	w2, w1
   8706c:	540000a9 	b.ls	87080 <CFATInfo::GetFirstSector(unsigned int) const+0x20>  // b.plast
   87070:	b9400c04 	ldr	w4, [x0, #12]
   87074:	b9403805 	ldr	w5, [x0, #56]
   87078:	1b041420 	madd	w0, w1, w4, w5
   8707c:	d65f03c0 	ret
   87080:	900000a3 	adrp	x3, 9b000 <vtable for CSoftSerialDevice+0x90>
   87084:	900000a0 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   87088:	f81f0ffe 	str	x30, [sp, #-16]!
   8708c:	9107a061 	add	x1, x3, #0x1e8
   87090:	910a6000 	add	x0, x0, #0x298
   87094:	52802322 	mov	w2, #0x119                 	// #281
   87098:	940008b6 	bl	89370 <assertion_failed>
   8709c:	d503201f 	nop

00000000000870a0 <CFATInfo::UpdateFSInfo()>:
   870a0:	b9400801 	ldr	w1, [x0, #8]
   870a4:	7100043f 	cmp	w1, #0x1
   870a8:	54000040 	b.eq	870b0 <CFATInfo::UpdateFSInfo()+0x10>  // b.none
   870ac:	d65f03c0 	ret
   870b0:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   870b4:	aa0003f3 	mov	x19, x0
   870b8:	b9404c00 	ldr	w0, [x0, #76]
   870bc:	f9000bfe 	str	x30, [sp, #16]
   870c0:	35000500 	cbnz	w0, 87160 <CFATInfo::UpdateFSInfo()+0xc0>
   870c4:	f9400260 	ldr	x0, [x19]
   870c8:	b4000560 	cbz	x0, 87174 <CFATInfo::UpdateFSInfo()+0xd4>
   870cc:	52800002 	mov	w2, #0x0                   	// #0
   870d0:	b9403261 	ldr	w1, [x19, #48]
   870d4:	97fffd57 	bl	86630 <CFATCache::GetSector(unsigned int, int)>
   870d8:	aa0003f4 	mov	x20, x0
   870dc:	b4000580 	cbz	x0, 8718c <CFATInfo::UpdateFSInfo()+0xec>
   870e0:	b9404007 	ldr	w7, [x0, #64]
   870e4:	528a4a45 	mov	w5, #0x5252                	// #21074
   870e8:	72a82c25 	movk	w5, #0x4161, lsl #16
   870ec:	91010006 	add	x6, x0, #0x40
   870f0:	6b0500ff 	cmp	w7, w5
   870f4:	540000c1 	b.ne	8710c <CFATInfo::UpdateFSInfo()+0x6c>  // b.any
   870f8:	b941e4c9 	ldr	w9, [x6, #484]
   870fc:	528e4e48 	mov	w8, #0x7272                	// #29298
   87100:	72ac2828 	movk	w8, #0x6141, lsl #16
   87104:	6b08013f 	cmp	w9, w8
   87108:	54000140 	b.eq	87130 <CFATInfo::UpdateFSInfo()+0x90>  // b.none
   8710c:	aa1403e1 	mov	x1, x20
   87110:	52800022 	mov	w2, #0x1                   	// #1
   87114:	f9400260 	ldr	x0, [x19]
   87118:	97fffdfa 	bl	86900 <CFATCache::FreeSector(TFATBuffer*, int)>
   8711c:	b9404e6e 	ldr	w14, [x19, #76]
   87120:	3500024e 	cbnz	w14, 87168 <CFATInfo::UpdateFSInfo()+0xc8>
   87124:	f9400bfe 	ldr	x30, [sp, #16]
   87128:	a8c253f3 	ldp	x19, x20, [sp], #32
   8712c:	d65f03c0 	ret
   87130:	b941fccb 	ldr	w11, [x6, #508]
   87134:	52b54aaa 	mov	w10, #0xaa550000            	// #-1437270016
   87138:	6b0a017f 	cmp	w11, w10
   8713c:	54fffe81 	b.ne	8710c <CFATInfo::UpdateFSInfo()+0x6c>  // b.any
   87140:	b940466c 	ldr	w12, [x19, #68]
   87144:	aa0003e1 	mov	x1, x0
   87148:	b901e8cc 	str	w12, [x6, #488]
   8714c:	b9404a6d 	ldr	w13, [x19, #72]
   87150:	b901eccd 	str	w13, [x6, #492]
   87154:	f9400260 	ldr	x0, [x19]
   87158:	97fffe12 	bl	869a0 <CFATCache::MarkDirty(TFATBuffer*)>
   8715c:	17ffffec 	b	8710c <CFATInfo::UpdateFSInfo()+0x6c>
   87160:	940038b4 	bl	95430 <EnterCritical>
   87164:	17ffffd8 	b	870c4 <CFATInfo::UpdateFSInfo()+0x24>
   87168:	f9400bfe 	ldr	x30, [sp, #16]
   8716c:	a8c253f3 	ldp	x19, x20, [sp], #32
   87170:	140038dc 	b	954e0 <LeaveCritical>
   87174:	900000a2 	adrp	x2, 9b000 <vtable for CSoftSerialDevice+0x90>
   87178:	900000a0 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   8717c:	9107a041 	add	x1, x2, #0x1e8
   87180:	9107e000 	add	x0, x0, #0x1f8
   87184:	528024e2 	mov	w2, #0x127                 	// #295
   87188:	9400087a 	bl	89370 <assertion_failed>
   8718c:	900000a3 	adrp	x3, 9b000 <vtable for CSoftSerialDevice+0x90>
   87190:	900000a4 	adrp	x4, 9b000 <vtable for CSoftSerialDevice+0x90>
   87194:	9107a061 	add	x1, x3, #0x1e8
   87198:	91082080 	add	x0, x4, #0x208
   8719c:	52802522 	mov	w2, #0x129                 	// #297
   871a0:	94000874 	bl	89370 <assertion_failed>
   871a4:	d503201f 	nop
   871a8:	d503201f 	nop
   871ac:	d503201f 	nop

00000000000871b0 <CFATInfo::ClusterAllocated(unsigned int)>:
   871b0:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   871b4:	aa0003f3 	mov	x19, x0
   871b8:	2a0103f4 	mov	w20, w1
   871bc:	b9404c00 	ldr	w0, [x0, #76]
   871c0:	f9000bfe 	str	x30, [sp, #16]
   871c4:	350001e0 	cbnz	w0, 87200 <CFATInfo::ClusterAllocated(unsigned int)+0x50>
   871c8:	b9404661 	ldr	w1, [x19, #68]
   871cc:	51000422 	sub	w2, w1, #0x1
   871d0:	31000c5f 	cmn	w2, #0x3
   871d4:	54000048 	b.hi	871dc <CFATInfo::ClusterAllocated(unsigned int)+0x2c>  // b.pmore
   871d8:	b9004662 	str	w2, [x19, #68]
   871dc:	b9404264 	ldr	w4, [x19, #64]
   871e0:	52800043 	mov	w3, #0x2                   	// #2
   871e4:	6b14009f 	cmp	w4, w20
   871e8:	1a943465 	csinc	w5, w3, w20, cc  // cc = lo, ul, last
   871ec:	b9004a65 	str	w5, [x19, #72]
   871f0:	350000e0 	cbnz	w0, 8720c <CFATInfo::ClusterAllocated(unsigned int)+0x5c>
   871f4:	f9400bfe 	ldr	x30, [sp, #16]
   871f8:	a8c253f3 	ldp	x19, x20, [sp], #32
   871fc:	d65f03c0 	ret
   87200:	9400388c 	bl	95430 <EnterCritical>
   87204:	b9404e60 	ldr	w0, [x19, #76]
   87208:	17fffff0 	b	871c8 <CFATInfo::ClusterAllocated(unsigned int)+0x18>
   8720c:	f9400bfe 	ldr	x30, [sp, #16]
   87210:	a8c253f3 	ldp	x19, x20, [sp], #32
   87214:	140038b3 	b	954e0 <LeaveCritical>
   87218:	d503201f 	nop
   8721c:	d503201f 	nop

0000000000087220 <CFATInfo::ClusterFreed(unsigned int)>:
   87220:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   87224:	aa0003f3 	mov	x19, x0
   87228:	2a0103f4 	mov	w20, w1
   8722c:	b9404c00 	ldr	w0, [x0, #76]
   87230:	f9000bfe 	str	x30, [sp, #16]
   87234:	350004c0 	cbnz	w0, 872cc <CFATInfo::ClusterFreed(unsigned int)+0xac>
   87238:	b9404660 	ldr	w0, [x19, #68]
   8723c:	3100041f 	cmn	w0, #0x1
   87240:	54000080 	b.eq	87250 <CFATInfo::ClusterFreed(unsigned int)+0x30>  // b.none
   87244:	b9404261 	ldr	w1, [x19, #64]
   87248:	6b01001f 	cmp	w0, w1
   8724c:	54000243 	b.cc	87294 <CFATInfo::ClusterFreed(unsigned int)+0x74>  // b.lo, b.ul, b.last
   87250:	b9404a63 	ldr	w3, [x19, #72]
   87254:	3100047f 	cmn	w3, #0x1
   87258:	54000280 	b.eq	872a8 <CFATInfo::ClusterFreed(unsigned int)+0x88>  // b.none
   8725c:	7100047f 	cmp	w3, #0x1
   87260:	540003a9 	b.ls	872d4 <CFATInfo::ClusterFreed(unsigned int)+0xb4>  // b.plast
   87264:	b9404268 	ldr	w8, [x19, #64]
   87268:	11000509 	add	w9, w8, #0x1
   8726c:	6b09007f 	cmp	w3, w9
   87270:	540003e8 	b.hi	872ec <CFATInfo::ClusterFreed(unsigned int)+0xcc>  // b.pmore
   87274:	6b14007f 	cmp	w3, w20
   87278:	54000049 	b.ls	87280 <CFATInfo::ClusterFreed(unsigned int)+0x60>  // b.plast
   8727c:	b9004a74 	str	w20, [x19, #72]
   87280:	b9404e6c 	ldr	w12, [x19, #76]
   87284:	350001ec 	cbnz	w12, 872c0 <CFATInfo::ClusterFreed(unsigned int)+0xa0>
   87288:	f9400bfe 	ldr	x30, [sp, #16]
   8728c:	a8c253f3 	ldp	x19, x20, [sp], #32
   87290:	d65f03c0 	ret
   87294:	b9404a63 	ldr	w3, [x19, #72]
   87298:	11000402 	add	w2, w0, #0x1
   8729c:	b9004662 	str	w2, [x19, #68]
   872a0:	3100047f 	cmn	w3, #0x1
   872a4:	54fffdc1 	b.ne	8725c <CFATInfo::ClusterFreed(unsigned int)+0x3c>  // b.any
   872a8:	900000a4 	adrp	x4, 9b000 <vtable for CSoftSerialDevice+0x90>
   872ac:	900000a5 	adrp	x5, 9b000 <vtable for CSoftSerialDevice+0x90>
   872b0:	9107a081 	add	x1, x4, #0x1e8
   872b4:	910ac0a0 	add	x0, x5, #0x2b0
   872b8:	52802c62 	mov	w2, #0x163                 	// #355
   872bc:	9400082d 	bl	89370 <assertion_failed>
   872c0:	f9400bfe 	ldr	x30, [sp, #16]
   872c4:	a8c253f3 	ldp	x19, x20, [sp], #32
   872c8:	14003886 	b	954e0 <LeaveCritical>
   872cc:	94003859 	bl	95430 <EnterCritical>
   872d0:	17ffffda 	b	87238 <CFATInfo::ClusterFreed(unsigned int)+0x18>
   872d4:	900000a6 	adrp	x6, 9b000 <vtable for CSoftSerialDevice+0x90>
   872d8:	900000a7 	adrp	x7, 9b000 <vtable for CSoftSerialDevice+0x90>
   872dc:	9107a0c1 	add	x1, x6, #0x1e8
   872e0:	910b80e0 	add	x0, x7, #0x2e0
   872e4:	52802c82 	mov	w2, #0x164                 	// #356
   872e8:	94000822 	bl	89370 <assertion_failed>
   872ec:	900000aa 	adrp	x10, 9b000 <vtable for CSoftSerialDevice+0x90>
   872f0:	900000ab 	adrp	x11, 9b000 <vtable for CSoftSerialDevice+0x90>
   872f4:	9107a141 	add	x1, x10, #0x1e8
   872f8:	910be160 	add	x0, x11, #0x2f8
   872fc:	52802ca2 	mov	w2, #0x165                 	// #357
   87300:	9400081c 	bl	89370 <assertion_failed>
   87304:	d503201f 	nop
   87308:	d503201f 	nop
   8730c:	d503201f 	nop

0000000000087310 <CFATInfo::GetNextFreeCluster()>:
   87310:	b9404c01 	ldr	w1, [x0, #76]
   87314:	35000061 	cbnz	w1, 87320 <CFATInfo::GetNextFreeCluster()+0x10>
   87318:	b9404800 	ldr	w0, [x0, #72]
   8731c:	d65f03c0 	ret
   87320:	a9be7bf3 	stp	x19, x30, [sp, #-32]!
   87324:	aa0003f3 	mov	x19, x0
   87328:	2a0103e0 	mov	w0, w1
   8732c:	94003841 	bl	95430 <EnterCritical>
   87330:	29490a60 	ldp	w0, w2, [x19, #72]
   87334:	34000082 	cbz	w2, 87344 <CFATInfo::GetNextFreeCluster()+0x34>
   87338:	b9001fe0 	str	w0, [sp, #28]
   8733c:	94003869 	bl	954e0 <LeaveCritical>
   87340:	b9401fe0 	ldr	w0, [sp, #28]
   87344:	a8c27bf3 	ldp	x19, x30, [sp], #32
   87348:	d65f03c0 	ret
   8734c:	00000000 	.inst	0x00000000 ; undefined

0000000000087350 <CFAT::CFAT(CFATCache*, CFATInfo*)>:
   87350:	a9000801 	stp	x1, x2, [x0]
   87354:	b900101f 	str	wzr, [x0, #16]
   87358:	d65f03c0 	ret
   8735c:	d503201f 	nop

0000000000087360 <CFAT::~CFAT()>:
   87360:	d65f03c0 	ret
   87364:	d503201f 	nop
   87368:	d503201f 	nop
   8736c:	d503201f 	nop

0000000000087370 <CFAT::IsEOC(unsigned int) const>:
   87370:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   87374:	aa0003f3 	mov	x19, x0
   87378:	f9400400 	ldr	x0, [x0, #8]
   8737c:	f9000bfe 	str	x30, [sp, #16]
   87380:	b40002a0 	cbz	x0, 873d4 <CFAT::IsEOC(unsigned int) const+0x64>
   87384:	2a0103f4 	mov	w20, w1
   87388:	97fffec2 	bl	86e90 <CFATInfo::GetFATType() const>
   8738c:	350000e0 	cbnz	w0, 873a8 <CFAT::IsEOC(unsigned int) const+0x38>
   87390:	529ffee5 	mov	w5, #0xfff7                	// #65527
   87394:	f9400bfe 	ldr	x30, [sp, #16]
   87398:	6b05029f 	cmp	w20, w5
   8739c:	a8c253f3 	ldp	x19, x20, [sp], #32
   873a0:	1a9f97e0 	cset	w0, hi  // hi = pmore
   873a4:	d65f03c0 	ret
   873a8:	f9400660 	ldr	x0, [x19, #8]
   873ac:	97fffeb9 	bl	86e90 <CFATInfo::GetFATType() const>
   873b0:	7100041f 	cmp	w0, #0x1
   873b4:	540001c1 	b.ne	873ec <CFAT::IsEOC(unsigned int) const+0x7c>  // b.any
   873b8:	529ffee4 	mov	w4, #0xfff7                	// #65527
   873bc:	72a1ffe4 	movk	w4, #0xfff, lsl #16
   873c0:	f9400bfe 	ldr	x30, [sp, #16]
   873c4:	6b04029f 	cmp	w20, w4
   873c8:	a8c253f3 	ldp	x19, x20, [sp], #32
   873cc:	1a9f97e0 	cset	w0, hi  // hi = pmore
   873d0:	d65f03c0 	ret
   873d4:	900000a1 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   873d8:	900000a0 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   873dc:	910c8021 	add	x1, x1, #0x320
   873e0:	910ca000 	add	x0, x0, #0x328
   873e4:	52800722 	mov	w2, #0x39                  	// #57
   873e8:	940007e2 	bl	89370 <assertion_failed>
   873ec:	900000a2 	adrp	x2, 9b000 <vtable for CSoftSerialDevice+0x90>
   873f0:	900000a3 	adrp	x3, 9b000 <vtable for CSoftSerialDevice+0x90>
   873f4:	910c8041 	add	x1, x2, #0x320
   873f8:	910ce060 	add	x0, x3, #0x338
   873fc:	52800862 	mov	w2, #0x43                  	// #67
   87400:	940007dc 	bl	89370 <assertion_failed>
   87404:	d503201f 	nop
   87408:	d503201f 	nop
   8740c:	d503201f 	nop

0000000000087410 <CFAT::GetSector(unsigned int, unsigned int*, unsigned int)>:
   87410:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   87414:	7100043f 	cmp	w1, #0x1
   87418:	a9015bf5 	stp	x21, x22, [sp, #16]
   8741c:	f90017fe 	str	x30, [sp, #40]
   87420:	54000549 	b.ls	874c8 <CFAT::GetSector(unsigned int, unsigned int*, unsigned int)+0xb8>  // b.plast
   87424:	aa0003f5 	mov	x21, x0
   87428:	f9400400 	ldr	x0, [x0, #8]
   8742c:	b40005c0 	cbz	x0, 874e4 <CFAT::GetSector(unsigned int, unsigned int*, unsigned int)+0xd4>
   87430:	2a0103f3 	mov	w19, w1
   87434:	aa0203f6 	mov	x22, x2
   87438:	2a0303f4 	mov	w20, w3
   8743c:	97fffe95 	bl	86e90 <CFATInfo::GetFATType() const>
   87440:	350002c0 	cbnz	w0, 87498 <CFAT::GetSector(unsigned int, unsigned int*, unsigned int)+0x88>
   87444:	531f7a73 	lsl	w19, w19, #1
   87448:	f90013f7 	str	x23, [sp, #32]
   8744c:	f94006a0 	ldr	x0, [x21, #8]
   87450:	97fffea0 	bl	86ed0 <CFATInfo::GetReservedSectors() const>
   87454:	2a0003f7 	mov	w23, w0
   87458:	f94006a0 	ldr	x0, [x21, #8]
   8745c:	97fffec9 	bl	86f80 <CFATInfo::GetFATSize() const>
   87460:	53097e66 	lsr	w6, w19, #9
   87464:	1b141807 	madd	w7, w0, w20, w6
   87468:	0b1700e1 	add	w1, w7, w23
   8746c:	b40004b6 	cbz	x22, 87500 <CFAT::GetSector(unsigned int, unsigned int*, unsigned int)+0xf0>
   87470:	1200226a 	and	w10, w19, #0x1ff
   87474:	f94002a0 	ldr	x0, [x21]
   87478:	b90002ca 	str	w10, [x22]
   8747c:	b40004e0 	cbz	x0, 87518 <CFAT::GetSector(unsigned int, unsigned int*, unsigned int)+0x108>
   87480:	52800002 	mov	w2, #0x0                   	// #0
   87484:	a9415bf5 	ldp	x21, x22, [sp, #16]
   87488:	f94013f7 	ldr	x23, [sp, #32]
   8748c:	f94017fe 	ldr	x30, [sp, #40]
   87490:	a8c353f3 	ldp	x19, x20, [sp], #48
   87494:	17fffc67 	b	86630 <CFATCache::GetSector(unsigned int, int)>
   87498:	f94006a0 	ldr	x0, [x21, #8]
   8749c:	531e7673 	lsl	w19, w19, #2
   874a0:	97fffe7c 	bl	86e90 <CFATInfo::GetFATType() const>
   874a4:	7100041f 	cmp	w0, #0x1
   874a8:	f90013f7 	str	x23, [sp, #32]
   874ac:	54fffd00 	b.eq	8744c <CFAT::GetSector(unsigned int, unsigned int*, unsigned int)+0x3c>  // b.none
   874b0:	900000a4 	adrp	x4, 9b000 <vtable for CSoftSerialDevice+0x90>
   874b4:	900000a5 	adrp	x5, 9b000 <vtable for CSoftSerialDevice+0x90>
   874b8:	910c8081 	add	x1, x4, #0x320
   874bc:	910ce0a0 	add	x0, x5, #0x338
   874c0:	52801622 	mov	w2, #0xb1                  	// #177
   874c4:	940007ab 	bl	89370 <assertion_failed>
   874c8:	900000a1 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   874cc:	900000a0 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   874d0:	f90013f7 	str	x23, [sp, #32]
   874d4:	910c8021 	add	x1, x1, #0x320
   874d8:	910d8000 	add	x0, x0, #0x360
   874dc:	528014c2 	mov	w2, #0xa6                  	// #166
   874e0:	940007a4 	bl	89370 <assertion_failed>
   874e4:	900000a2 	adrp	x2, 9b000 <vtable for CSoftSerialDevice+0x90>
   874e8:	900000a3 	adrp	x3, 9b000 <vtable for CSoftSerialDevice+0x90>
   874ec:	f90013f7 	str	x23, [sp, #32]
   874f0:	910c8041 	add	x1, x2, #0x320
   874f4:	910ca060 	add	x0, x3, #0x328
   874f8:	52801542 	mov	w2, #0xaa                  	// #170
   874fc:	9400079d 	bl	89370 <assertion_failed>
   87500:	900000a8 	adrp	x8, 9b000 <vtable for CSoftSerialDevice+0x90>
   87504:	900000a9 	adrp	x9, 9b000 <vtable for CSoftSerialDevice+0x90>
   87508:	910c8101 	add	x1, x8, #0x320
   8750c:	910dc120 	add	x0, x9, #0x370
   87510:	52801742 	mov	w2, #0xba                  	// #186
   87514:	94000797 	bl	89370 <assertion_failed>
   87518:	900000ab 	adrp	x11, 9b000 <vtable for CSoftSerialDevice+0x90>
   8751c:	900000ac 	adrp	x12, 9b000 <vtable for CSoftSerialDevice+0x90>
   87520:	910c8161 	add	x1, x11, #0x320
   87524:	9107e180 	add	x0, x12, #0x1f8
   87528:	528017a2 	mov	w2, #0xbd                  	// #189
   8752c:	94000791 	bl	89370 <assertion_failed>

0000000000087530 <CFAT::GetEntry(TFATBuffer*, unsigned int)>:
   87530:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   87534:	f9000bfe 	str	x30, [sp, #16]
   87538:	b40004c1 	cbz	x1, 875d0 <CFAT::GetEntry(TFATBuffer*, unsigned int)+0xa0>
   8753c:	f9400400 	ldr	x0, [x0, #8]
   87540:	aa0103f3 	mov	x19, x1
   87544:	2a0203f4 	mov	w20, w2
   87548:	97fffe52 	bl	86e90 <CFATInfo::GetFATType() const>
   8754c:	340002c0 	cbz	w0, 875a4 <CFAT::GetEntry(TFATBuffer*, unsigned int)+0x74>
   87550:	7107f29f 	cmp	w20, #0x1fc
   87554:	54000568 	b.hi	87600 <CFAT::GetEntry(TFATBuffer*, unsigned int)+0xd0>  // b.pmore
   87558:	11000a84 	add	w4, w20, #0x2
   8755c:	11000686 	add	w6, w20, #0x1
   87560:	8b344265 	add	x5, x19, w20, uxtw
   87564:	8b040267 	add	x7, x19, x4
   87568:	11000e88 	add	w8, w20, #0x3
   8756c:	394100a9 	ldrb	w9, [x5, #64]
   87570:	8b06026a 	add	x10, x19, x6
   87574:	8b08026b 	add	x11, x19, x8
   87578:	394100ec 	ldrb	w12, [x7, #64]
   8757c:	3941014d 	ldrb	w13, [x10, #64]
   87580:	3941016e 	ldrb	w14, [x11, #64]
   87584:	53103d8f 	lsl	w15, w12, #16
   87588:	f9400bfe 	ldr	x30, [sp, #16]
   8758c:	2a0d21f0 	orr	w16, w15, w13, lsl #8
   87590:	a8c253f3 	ldp	x19, x20, [sp], #32
   87594:	2a0e6131 	orr	w17, w9, w14, lsl #24
   87598:	2a110212 	orr	w18, w16, w17
   8759c:	12006e40 	and	w0, w18, #0xfffffff
   875a0:	d65f03c0 	ret
   875a4:	7107fa9f 	cmp	w20, #0x1fe
   875a8:	54000208 	b.hi	875e8 <CFAT::GetEntry(TFATBuffer*, unsigned int)+0xb8>  // b.pmore
   875ac:	11000681 	add	w1, w20, #0x1
   875b0:	8b344274 	add	x20, x19, w20, uxtw
   875b4:	39410282 	ldrb	w2, [x20, #64]
   875b8:	8b010273 	add	x19, x19, x1
   875bc:	39410263 	ldrb	w3, [x19, #64]
   875c0:	f9400bfe 	ldr	x30, [sp, #16]
   875c4:	a8c253f3 	ldp	x19, x20, [sp], #32
   875c8:	2a032040 	orr	w0, w2, w3, lsl #8
   875cc:	d65f03c0 	ret
   875d0:	900000a1 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   875d4:	900000a0 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   875d8:	910c8021 	add	x1, x1, #0x320
   875dc:	91082000 	add	x0, x0, #0x208
   875e0:	52801862 	mov	w2, #0xc3                  	// #195
   875e4:	94000763 	bl	89370 <assertion_failed>
   875e8:	900000be 	adrp	x30, 9b000 <vtable for CSoftSerialDevice+0x90>
   875ec:	900000a0 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   875f0:	910c83c1 	add	x1, x30, #0x320
   875f4:	910e2000 	add	x0, x0, #0x388
   875f8:	52801902 	mov	w2, #0xc8                  	// #200
   875fc:	9400075d 	bl	89370 <assertion_failed>
   87600:	900000a2 	adrp	x2, 9b000 <vtable for CSoftSerialDevice+0x90>
   87604:	900000a3 	adrp	x3, 9b000 <vtable for CSoftSerialDevice+0x90>
   87608:	910c8041 	add	x1, x2, #0x320
   8760c:	910ec060 	add	x0, x3, #0x3b0
   87610:	528019c2 	mov	w2, #0xce                  	// #206
   87614:	94000757 	bl	89370 <assertion_failed>
   87618:	d503201f 	nop
   8761c:	d503201f 	nop

0000000000087620 <CFAT::GetClusterEntry(unsigned int)>:
   87620:	a9bc53f3 	stp	x19, x20, [sp, #-64]!
   87624:	aa0003f3 	mov	x19, x0
   87628:	b9401000 	ldr	w0, [x0, #16]
   8762c:	a9017bf5 	stp	x21, x30, [sp, #16]
   87630:	35000420 	cbnz	w0, 876b4 <CFAT::GetClusterEntry(unsigned int)+0x94>
   87634:	f9400660 	ldr	x0, [x19, #8]
   87638:	b4000480 	cbz	x0, 876c8 <CFAT::GetClusterEntry(unsigned int)+0xa8>
   8763c:	b9002fe1 	str	w1, [sp, #44]
   87640:	97fffe2c 	bl	86ef0 <CFATInfo::GetReadFAT() const>
   87644:	2a0003e3 	mov	w3, w0
   87648:	9100f3e2 	add	x2, sp, #0x3c
   8764c:	b9402fe1 	ldr	w1, [sp, #44]
   87650:	aa1303e0 	mov	x0, x19
   87654:	97ffff6f 	bl	87410 <CFAT::GetSector(unsigned int, unsigned int*, unsigned int)>
   87658:	aa0003f4 	mov	x20, x0
   8765c:	b4000420 	cbz	x0, 876e0 <CFAT::GetClusterEntry(unsigned int)+0xc0>
   87660:	aa0003e1 	mov	x1, x0
   87664:	b9403fe2 	ldr	w2, [sp, #60]
   87668:	aa1303e0 	mov	x0, x19
   8766c:	97ffffb1 	bl	87530 <CFAT::GetEntry(TFATBuffer*, unsigned int)>
   87670:	2a0003f5 	mov	w21, w0
   87674:	f9400260 	ldr	x0, [x19]
   87678:	b4000400 	cbz	x0, 876f8 <CFAT::GetClusterEntry(unsigned int)+0xd8>
   8767c:	aa1403e1 	mov	x1, x20
   87680:	52800022 	mov	w2, #0x1                   	// #1
   87684:	97fffc9f 	bl	86900 <CFATCache::FreeSector(TFATBuffer*, int)>
   87688:	b9401266 	ldr	w6, [x19, #16]
   8768c:	350000a6 	cbnz	w6, 876a0 <CFAT::GetClusterEntry(unsigned int)+0x80>
   87690:	2a1503e0 	mov	w0, w21
   87694:	a9417bf5 	ldp	x21, x30, [sp, #16]
   87698:	a8c453f3 	ldp	x19, x20, [sp], #64
   8769c:	d65f03c0 	ret
   876a0:	94003790 	bl	954e0 <LeaveCritical>
   876a4:	2a1503e0 	mov	w0, w21
   876a8:	a9417bf5 	ldp	x21, x30, [sp, #16]
   876ac:	a8c453f3 	ldp	x19, x20, [sp], #64
   876b0:	d65f03c0 	ret
   876b4:	b9002fe1 	str	w1, [sp, #44]
   876b8:	9400375e 	bl	95430 <EnterCritical>
   876bc:	f9400660 	ldr	x0, [x19, #8]
   876c0:	b9402fe1 	ldr	w1, [sp, #44]
   876c4:	b5fffbc0 	cbnz	x0, 8763c <CFAT::GetClusterEntry(unsigned int)+0x1c>
   876c8:	900000a1 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   876cc:	900000a0 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   876d0:	910c8021 	add	x1, x1, #0x320
   876d4:	910ca000 	add	x0, x0, #0x328
   876d8:	52800522 	mov	w2, #0x29                  	// #41
   876dc:	94000725 	bl	89370 <assertion_failed>
   876e0:	900000a2 	adrp	x2, 9b000 <vtable for CSoftSerialDevice+0x90>
   876e4:	900000a3 	adrp	x3, 9b000 <vtable for CSoftSerialDevice+0x90>
   876e8:	910c8041 	add	x1, x2, #0x320
   876ec:	91082060 	add	x0, x3, #0x208
   876f0:	52800562 	mov	w2, #0x2b                  	// #43
   876f4:	9400071f 	bl	89370 <assertion_failed>
   876f8:	900000a4 	adrp	x4, 9b000 <vtable for CSoftSerialDevice+0x90>
   876fc:	900000a5 	adrp	x5, 9b000 <vtable for CSoftSerialDevice+0x90>
   87700:	910c8081 	add	x1, x4, #0x320
   87704:	9107e0a0 	add	x0, x5, #0x1f8
   87708:	528005e2 	mov	w2, #0x2f                  	// #47
   8770c:	94000719 	bl	89370 <assertion_failed>

0000000000087710 <CFAT::SetEntry(TFATBuffer*, unsigned int, unsigned int)>:
   87710:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   87714:	a9017bf5 	stp	x21, x30, [sp, #16]
   87718:	b40005a1 	cbz	x1, 877cc <CFAT::SetEntry(TFATBuffer*, unsigned int, unsigned int)+0xbc>
   8771c:	aa0103f3 	mov	x19, x1
   87720:	2a0203f4 	mov	w20, w2
   87724:	f9400400 	ldr	x0, [x0, #8]
   87728:	2a0303f5 	mov	w21, w3
   8772c:	97fffdd9 	bl	86e90 <CFATInfo::GetFATType() const>
   87730:	34000320 	cbz	w0, 87794 <CFAT::SetEntry(TFATBuffer*, unsigned int, unsigned int)+0x84>
   87734:	7107f29f 	cmp	w20, #0x1fc
   87738:	54000628 	b.hi	877fc <CFAT::SetEntry(TFATBuffer*, unsigned int, unsigned int)+0xec>  // b.pmore
   8773c:	12be0004 	mov	w4, #0xfffffff             	// #268435455
   87740:	6b0402bf 	cmp	w21, w4
   87744:	54000688 	b.hi	87814 <CFAT::SetEntry(TFATBuffer*, unsigned int, unsigned int)+0x104>  // b.pmore
   87748:	11000687 	add	w7, w20, #0x1
   8774c:	53087ea8 	lsr	w8, w21, #8
   87750:	8b344269 	add	x9, x19, w20, uxtw
   87754:	8b07026a 	add	x10, x19, x7
   87758:	11000a8b 	add	w11, w20, #0x2
   8775c:	39010135 	strb	w21, [x9, #64]
   87760:	8b0b026c 	add	x12, x19, x11
   87764:	11000e8d 	add	w13, w20, #0x3
   87768:	53107eae 	lsr	w14, w21, #16
   8776c:	8b0d026f 	add	x15, x19, x13
   87770:	39010148 	strb	w8, [x10, #64]
   87774:	3901018e 	strb	w14, [x12, #64]
   87778:	394101f0 	ldrb	w16, [x15, #64]
   8777c:	121c6e11 	and	w17, w16, #0xfffffff0
   87780:	2a556232 	orr	w18, w17, w21, lsr #24
   87784:	390101f2 	strb	w18, [x15, #64]
   87788:	a9417bf5 	ldp	x21, x30, [sp, #16]
   8778c:	a8c253f3 	ldp	x19, x20, [sp], #32
   87790:	d65f03c0 	ret
   87794:	7107fa9f 	cmp	w20, #0x1fe
   87798:	54000268 	b.hi	877e4 <CFAT::SetEntry(TFATBuffer*, unsigned int, unsigned int)+0xd4>  // b.pmore
   8779c:	529fffe1 	mov	w1, #0xffff                	// #65535
   877a0:	6b0102bf 	cmp	w21, w1
   877a4:	54000448 	b.hi	8782c <CFAT::SetEntry(TFATBuffer*, unsigned int, unsigned int)+0x11c>  // b.pmore
   877a8:	11000682 	add	w2, w20, #0x1
   877ac:	53087ea3 	lsr	w3, w21, #8
   877b0:	8b344264 	add	x4, x19, w20, uxtw
   877b4:	8b020265 	add	x5, x19, x2
   877b8:	39010095 	strb	w21, [x4, #64]
   877bc:	390100a3 	strb	w3, [x5, #64]
   877c0:	a9417bf5 	ldp	x21, x30, [sp, #16]
   877c4:	a8c253f3 	ldp	x19, x20, [sp], #32
   877c8:	d65f03c0 	ret
   877cc:	900000a1 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   877d0:	900000a0 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   877d4:	910c8021 	add	x1, x1, #0x320
   877d8:	91082000 	add	x0, x0, #0x208
   877dc:	52801b42 	mov	w2, #0xda                  	// #218
   877e0:	940006e4 	bl	89370 <assertion_failed>
   877e4:	900000be 	adrp	x30, 9b000 <vtable for CSoftSerialDevice+0x90>
   877e8:	900000a0 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   877ec:	910c83c1 	add	x1, x30, #0x320
   877f0:	910e2000 	add	x0, x0, #0x388
   877f4:	52801bc2 	mov	w2, #0xde                  	// #222
   877f8:	940006de 	bl	89370 <assertion_failed>
   877fc:	900000a2 	adrp	x2, 9b000 <vtable for CSoftSerialDevice+0x90>
   87800:	900000a3 	adrp	x3, 9b000 <vtable for CSoftSerialDevice+0x90>
   87804:	910c8041 	add	x1, x2, #0x320
   87808:	910ec060 	add	x0, x3, #0x3b0
   8780c:	52801ca2 	mov	w2, #0xe5                  	// #229
   87810:	940006d8 	bl	89370 <assertion_failed>
   87814:	900000a5 	adrp	x5, 9b000 <vtable for CSoftSerialDevice+0x90>
   87818:	900000a6 	adrp	x6, 9b000 <vtable for CSoftSerialDevice+0x90>
   8781c:	910c80a1 	add	x1, x5, #0x320
   87820:	910fc0c0 	add	x0, x6, #0x3f0
   87824:	52801cc2 	mov	w2, #0xe6                  	// #230
   87828:	940006d2 	bl	89370 <assertion_failed>
   8782c:	900000b3 	adrp	x19, 9b000 <vtable for CSoftSerialDevice+0x90>
   87830:	900000b4 	adrp	x20, 9b000 <vtable for CSoftSerialDevice+0x90>
   87834:	910c8261 	add	x1, x19, #0x320
   87838:	910f6280 	add	x0, x20, #0x3d8
   8783c:	52801be2 	mov	w2, #0xdf                  	// #223
   87840:	940006cc 	bl	89370 <assertion_failed>
   87844:	d503201f 	nop
   87848:	d503201f 	nop
   8784c:	d503201f 	nop

0000000000087850 <CFAT::SetClusterEntry(unsigned int, unsigned int)>:
   87850:	a9bc53f3 	stp	x19, x20, [sp, #-64]!
   87854:	aa0003f3 	mov	x19, x0
   87858:	b9401000 	ldr	w0, [x0, #16]
   8785c:	a9015bf5 	stp	x21, x22, [sp, #16]
   87860:	2a0103f6 	mov	w22, w1
   87864:	a9027bf7 	stp	x23, x30, [sp, #32]
   87868:	2a0203f7 	mov	w23, w2
   8786c:	35000680 	cbnz	w0, 8793c <CFAT::SetClusterEntry(unsigned int, unsigned int)+0xec>
   87870:	f9400660 	ldr	x0, [x19, #8]
   87874:	b40006a0 	cbz	x0, 87948 <CFAT::SetClusterEntry(unsigned int, unsigned int)+0xf8>
   87878:	97fffdaa 	bl	86f20 <CFATInfo::GetFirstWriteFAT() const>
   8787c:	2a0003f5 	mov	w21, w0
   87880:	f9400660 	ldr	x0, [x19, #8]
   87884:	97fffdab 	bl	86f30 <CFATInfo::GetLastWriteFAT() const>
   87888:	6b15001f 	cmp	w0, w21
   8788c:	54000343 	b.cc	878f4 <CFAT::SetClusterEntry(unsigned int, unsigned int)+0xa4>  // b.lo, b.ul, b.last
   87890:	2a1503e3 	mov	w3, w21
   87894:	9100f3e2 	add	x2, sp, #0x3c
   87898:	2a1603e1 	mov	w1, w22
   8789c:	aa1303e0 	mov	x0, x19
   878a0:	97fffedc 	bl	87410 <CFAT::GetSector(unsigned int, unsigned int*, unsigned int)>
   878a4:	aa0003f4 	mov	x20, x0
   878a8:	b4000320 	cbz	x0, 8790c <CFAT::SetClusterEntry(unsigned int, unsigned int)+0xbc>
   878ac:	aa0003e1 	mov	x1, x0
   878b0:	2a1703e3 	mov	w3, w23
   878b4:	b9403fe2 	ldr	w2, [sp, #60]
   878b8:	aa1303e0 	mov	x0, x19
   878bc:	97ffff95 	bl	87710 <CFAT::SetEntry(TFATBuffer*, unsigned int, unsigned int)>
   878c0:	f9400260 	ldr	x0, [x19]
   878c4:	b4000300 	cbz	x0, 87924 <CFAT::SetClusterEntry(unsigned int, unsigned int)+0xd4>
   878c8:	aa1403e1 	mov	x1, x20
   878cc:	97fffc35 	bl	869a0 <CFATCache::MarkDirty(TFATBuffer*)>
   878d0:	52800022 	mov	w2, #0x1                   	// #1
   878d4:	aa1403e1 	mov	x1, x20
   878d8:	f9400260 	ldr	x0, [x19]
   878dc:	0b0202b5 	add	w21, w21, w2
   878e0:	97fffc08 	bl	86900 <CFATCache::FreeSector(TFATBuffer*, int)>
   878e4:	f9400660 	ldr	x0, [x19, #8]
   878e8:	97fffd92 	bl	86f30 <CFATInfo::GetLastWriteFAT() const>
   878ec:	6b15001f 	cmp	w0, w21
   878f0:	54fffd02 	b.cs	87890 <CFAT::SetClusterEntry(unsigned int, unsigned int)+0x40>  // b.hs, b.nlast
   878f4:	b9401262 	ldr	w2, [x19, #16]
   878f8:	35000342 	cbnz	w2, 87960 <CFAT::SetClusterEntry(unsigned int, unsigned int)+0x110>
   878fc:	a9415bf5 	ldp	x21, x22, [sp, #16]
   87900:	a9427bf7 	ldp	x23, x30, [sp, #32]
   87904:	a8c453f3 	ldp	x19, x20, [sp], #64
   87908:	d65f03c0 	ret
   8790c:	900000a3 	adrp	x3, 9b000 <vtable for CSoftSerialDevice+0x90>
   87910:	900000a4 	adrp	x4, 9b000 <vtable for CSoftSerialDevice+0x90>
   87914:	910c8061 	add	x1, x3, #0x320
   87918:	91082080 	add	x0, x4, #0x208
   8791c:	52800ae2 	mov	w2, #0x57                  	// #87
   87920:	94000694 	bl	89370 <assertion_failed>
   87924:	900000a5 	adrp	x5, 9b000 <vtable for CSoftSerialDevice+0x90>
   87928:	900000a6 	adrp	x6, 9b000 <vtable for CSoftSerialDevice+0x90>
   8792c:	910c80a1 	add	x1, x5, #0x320
   87930:	9107e0c0 	add	x0, x6, #0x1f8
   87934:	52800b62 	mov	w2, #0x5b                  	// #91
   87938:	9400068e 	bl	89370 <assertion_failed>
   8793c:	940036bd 	bl	95430 <EnterCritical>
   87940:	f9400660 	ldr	x0, [x19, #8]
   87944:	b5fff9a0 	cbnz	x0, 87878 <CFAT::SetClusterEntry(unsigned int, unsigned int)+0x28>
   87948:	900000a1 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   8794c:	900000a0 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   87950:	910c8021 	add	x1, x1, #0x320
   87954:	910ca000 	add	x0, x0, #0x328
   87958:	52800a42 	mov	w2, #0x52                  	// #82
   8795c:	94000685 	bl	89370 <assertion_failed>
   87960:	940036e0 	bl	954e0 <LeaveCritical>
   87964:	17ffffe6 	b	878fc <CFAT::SetClusterEntry(unsigned int, unsigned int)+0xac>
   87968:	d503201f 	nop
   8796c:	d503201f 	nop

0000000000087970 <CFAT::FreeClusterChain(unsigned int)>:
   87970:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   87974:	aa0003f3 	mov	x19, x0
   87978:	2a0103f4 	mov	w20, w1
   8797c:	a9017bf5 	stp	x21, x30, [sp, #16]
   87980:	14000009 	b	879a4 <CFAT::FreeClusterChain(unsigned int)+0x34>
   87984:	2a1403e1 	mov	w1, w20
   87988:	2a1503f4 	mov	w20, w21
   8798c:	97fffe25 	bl	87220 <CFATInfo::ClusterFreed(unsigned int)>
   87990:	2a1503e1 	mov	w1, w21
   87994:	aa1303e0 	mov	x0, x19
   87998:	97fffe76 	bl	87370 <CFAT::IsEOC(unsigned int) const>
   8799c:	72001c1f 	tst	w0, #0xff
   879a0:	54000221 	b.ne	879e4 <CFAT::FreeClusterChain(unsigned int)+0x74>  // b.any
   879a4:	2a1403e1 	mov	w1, w20
   879a8:	aa1303e0 	mov	x0, x19
   879ac:	97ffff1d 	bl	87620 <CFAT::GetClusterEntry(unsigned int)>
   879b0:	2a0003f5 	mov	w21, w0
   879b4:	52800002 	mov	w2, #0x0                   	// #0
   879b8:	aa1303e0 	mov	x0, x19
   879bc:	2a1403e1 	mov	w1, w20
   879c0:	97ffffa4 	bl	87850 <CFAT::SetClusterEntry(unsigned int, unsigned int)>
   879c4:	f9400660 	ldr	x0, [x19, #8]
   879c8:	b5fffde0 	cbnz	x0, 87984 <CFAT::FreeClusterChain(unsigned int)+0x14>
   879cc:	900000a1 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   879d0:	900000a0 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   879d4:	910c8021 	add	x1, x1, #0x320
   879d8:	910ca000 	add	x0, x0, #0x328
   879dc:	52801382 	mov	w2, #0x9c                  	// #156
   879e0:	94000664 	bl	89370 <assertion_failed>
   879e4:	a9417bf5 	ldp	x21, x30, [sp, #16]
   879e8:	a8c253f3 	ldp	x19, x20, [sp], #32
   879ec:	d65f03c0 	ret

00000000000879f0 <CFAT::AllocateCluster()>:
   879f0:	a9ba53f3 	stp	x19, x20, [sp, #-96]!
   879f4:	aa0003f3 	mov	x19, x0
   879f8:	b9401000 	ldr	w0, [x0, #16]
   879fc:	f9001bfe 	str	x30, [sp, #48]
   87a00:	350005c0 	cbnz	w0, 87ab8 <CFAT::AllocateCluster()+0xc8>
   87a04:	f9400660 	ldr	x0, [x19, #8]
   87a08:	a9015bf5 	stp	x21, x22, [sp, #16]
   87a0c:	b40005e0 	cbz	x0, 87ac8 <CFAT::AllocateCluster()+0xd8>
   87a10:	97fffe40 	bl	87310 <CFATInfo::GetNextFreeCluster()>
   87a14:	2a0003f4 	mov	w20, w0
   87a18:	f9400660 	ldr	x0, [x19, #8]
   87a1c:	97fffd31 	bl	86ee0 <CFATInfo::GetClusterCount() const>
   87a20:	11000802 	add	w2, w0, #0x2
   87a24:	6b14005f 	cmp	w2, w20
   87a28:	540003a9 	b.ls	87a9c <CFAT::AllocateCluster()+0xac>  // b.plast
   87a2c:	7100069f 	cmp	w20, #0x1
   87a30:	540005a9 	b.ls	87ae4 <CFAT::AllocateCluster()+0xf4>  // b.plast
   87a34:	f9400660 	ldr	x0, [x19, #8]
   87a38:	97fffd2e 	bl	86ef0 <CFATInfo::GetReadFAT() const>
   87a3c:	2a0003e3 	mov	w3, w0
   87a40:	910173e2 	add	x2, sp, #0x5c
   87a44:	2a1403e1 	mov	w1, w20
   87a48:	aa1303e0 	mov	x0, x19
   87a4c:	97fffe71 	bl	87410 <CFAT::GetSector(unsigned int, unsigned int*, unsigned int)>
   87a50:	aa0003f5 	mov	x21, x0
   87a54:	b4000560 	cbz	x0, 87b00 <CFAT::AllocateCluster()+0x110>
   87a58:	aa0003e1 	mov	x1, x0
   87a5c:	b9405fe2 	ldr	w2, [sp, #92]
   87a60:	aa1303e0 	mov	x0, x19
   87a64:	97fffeb3 	bl	87530 <CFAT::GetEntry(TFATBuffer*, unsigned int)>
   87a68:	2a0003f6 	mov	w22, w0
   87a6c:	f9400260 	ldr	x0, [x19]
   87a70:	b4000560 	cbz	x0, 87b1c <CFAT::AllocateCluster()+0x12c>
   87a74:	aa1503e1 	mov	x1, x21
   87a78:	52800022 	mov	w2, #0x1                   	// #1
   87a7c:	97fffba1 	bl	86900 <CFATCache::FreeSector(TFATBuffer*, int)>
   87a80:	34000636 	cbz	w22, 87b44 <CFAT::AllocateCluster()+0x154>
   87a84:	f9400660 	ldr	x0, [x19, #8]
   87a88:	11000694 	add	w20, w20, #0x1
   87a8c:	97fffd15 	bl	86ee0 <CFATInfo::GetClusterCount() const>
   87a90:	11000802 	add	w2, w0, #0x2
   87a94:	6b14005f 	cmp	w2, w20
   87a98:	54fffca8 	b.hi	87a2c <CFAT::AllocateCluster()+0x3c>  // b.pmore
   87a9c:	b9401274 	ldr	w20, [x19, #16]
   87aa0:	350004d4 	cbnz	w20, 87b38 <CFAT::AllocateCluster()+0x148>
   87aa4:	2a1403e0 	mov	w0, w20
   87aa8:	a9415bf5 	ldp	x21, x22, [sp, #16]
   87aac:	f9401bfe 	ldr	x30, [sp, #48]
   87ab0:	a8c653f3 	ldp	x19, x20, [sp], #96
   87ab4:	d65f03c0 	ret
   87ab8:	9400365e 	bl	95430 <EnterCritical>
   87abc:	f9400660 	ldr	x0, [x19, #8]
   87ac0:	a9015bf5 	stp	x21, x22, [sp, #16]
   87ac4:	b5fffa60 	cbnz	x0, 87a10 <CFAT::AllocateCluster()+0x20>
   87ac8:	900000a1 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   87acc:	900000a0 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   87ad0:	910c8021 	add	x1, x1, #0x320
   87ad4:	910ca000 	add	x0, x0, #0x328
   87ad8:	a90263f7 	stp	x23, x24, [sp, #32]
   87adc:	52800ce2 	mov	w2, #0x67                  	// #103
   87ae0:	94000624 	bl	89370 <assertion_failed>
   87ae4:	900000a3 	adrp	x3, 9b000 <vtable for CSoftSerialDevice+0x90>
   87ae8:	900000a4 	adrp	x4, 9b000 <vtable for CSoftSerialDevice+0x90>
   87aec:	a90263f7 	stp	x23, x24, [sp, #32]
   87af0:	910c8061 	add	x1, x3, #0x320
   87af4:	910d8080 	add	x0, x4, #0x360
   87af8:	52800d82 	mov	w2, #0x6c                  	// #108
   87afc:	9400061d 	bl	89370 <assertion_failed>
   87b00:	900000a5 	adrp	x5, 9b000 <vtable for CSoftSerialDevice+0x90>
   87b04:	900000a6 	adrp	x6, 9b000 <vtable for CSoftSerialDevice+0x90>
   87b08:	a90263f7 	stp	x23, x24, [sp, #32]
   87b0c:	910c80a1 	add	x1, x5, #0x320
   87b10:	910820c0 	add	x0, x6, #0x208
   87b14:	52800e02 	mov	w2, #0x70                  	// #112
   87b18:	94000616 	bl	89370 <assertion_failed>
   87b1c:	900000a7 	adrp	x7, 9b000 <vtable for CSoftSerialDevice+0x90>
   87b20:	900000a8 	adrp	x8, 9b000 <vtable for CSoftSerialDevice+0x90>
   87b24:	a90263f7 	stp	x23, x24, [sp, #32]
   87b28:	910c80e1 	add	x1, x7, #0x320
   87b2c:	9107e100 	add	x0, x8, #0x1f8
   87b30:	52800e82 	mov	w2, #0x74                  	// #116
   87b34:	9400060f 	bl	89370 <assertion_failed>
   87b38:	52800014 	mov	w20, #0x0                   	// #0
   87b3c:	94003669 	bl	954e0 <LeaveCritical>
   87b40:	17ffffd9 	b	87aa4 <CFAT::AllocateCluster()+0xb4>
   87b44:	f9400660 	ldr	x0, [x19, #8]
   87b48:	a90263f7 	stp	x23, x24, [sp, #32]
   87b4c:	529ffff8 	mov	w24, #0xffff                	// #65535
   87b50:	12be0017 	mov	w23, #0xfffffff             	// #268435455
   87b54:	97fffcf3 	bl	86f20 <CFATInfo::GetFirstWriteFAT() const>
   87b58:	2a0003f6 	mov	w22, w0
   87b5c:	14000013 	b	87ba8 <CFAT::AllocateCluster()+0x1b8>
   87b60:	b9405fec 	ldr	w12, [sp, #92]
   87b64:	110006d6 	add	w22, w22, #0x1
   87b68:	f9400660 	ldr	x0, [x19, #8]
   87b6c:	b9004fec 	str	w12, [sp, #76]
   87b70:	97fffcc8 	bl	86e90 <CFATInfo::GetFATType() const>
   87b74:	b9404fe2 	ldr	w2, [sp, #76]
   87b78:	7100001f 	cmp	w0, #0x0
   87b7c:	aa1503e1 	mov	x1, x21
   87b80:	aa1303e0 	mov	x0, x19
   87b84:	1a970303 	csel	w3, w24, w23, eq  // eq = none
   87b88:	97fffee2 	bl	87710 <CFAT::SetEntry(TFATBuffer*, unsigned int, unsigned int)>
   87b8c:	aa1503e1 	mov	x1, x21
   87b90:	f9400260 	ldr	x0, [x19]
   87b94:	97fffb83 	bl	869a0 <CFATCache::MarkDirty(TFATBuffer*)>
   87b98:	aa1503e1 	mov	x1, x21
   87b9c:	52800022 	mov	w2, #0x1                   	// #1
   87ba0:	f9400260 	ldr	x0, [x19]
   87ba4:	97fffb57 	bl	86900 <CFATCache::FreeSector(TFATBuffer*, int)>
   87ba8:	f9400660 	ldr	x0, [x19, #8]
   87bac:	97fffce1 	bl	86f30 <CFATInfo::GetLastWriteFAT() const>
   87bb0:	6b16001f 	cmp	w0, w22
   87bb4:	540001c3 	b.cc	87bec <CFAT::AllocateCluster()+0x1fc>  // b.lo, b.ul, b.last
   87bb8:	2a1603e3 	mov	w3, w22
   87bbc:	910173e2 	add	x2, sp, #0x5c
   87bc0:	2a1403e1 	mov	w1, w20
   87bc4:	aa1303e0 	mov	x0, x19
   87bc8:	97fffe12 	bl	87410 <CFAT::GetSector(unsigned int, unsigned int*, unsigned int)>
   87bcc:	aa0003f5 	mov	x21, x0
   87bd0:	b5fffc80 	cbnz	x0, 87b60 <CFAT::AllocateCluster()+0x170>
   87bd4:	900000aa 	adrp	x10, 9b000 <vtable for CSoftSerialDevice+0x90>
   87bd8:	900000ab 	adrp	x11, 9b000 <vtable for CSoftSerialDevice+0x90>
   87bdc:	910c8141 	add	x1, x10, #0x320
   87be0:	91082160 	add	x0, x11, #0x208
   87be4:	52800fa2 	mov	w2, #0x7d                  	// #125
   87be8:	940005e2 	bl	89370 <assertion_failed>
   87bec:	2a1403e1 	mov	w1, w20
   87bf0:	f9400660 	ldr	x0, [x19, #8]
   87bf4:	97fffd6f 	bl	871b0 <CFATInfo::ClusterAllocated(unsigned int)>
   87bf8:	b9401269 	ldr	w9, [x19, #16]
   87bfc:	35000069 	cbnz	w9, 87c08 <CFAT::AllocateCluster()+0x218>
   87c00:	a94263f7 	ldp	x23, x24, [sp, #32]
   87c04:	17ffffa8 	b	87aa4 <CFAT::AllocateCluster()+0xb4>
   87c08:	94003636 	bl	954e0 <LeaveCritical>
   87c0c:	a94263f7 	ldp	x23, x24, [sp, #32]
   87c10:	17ffffa5 	b	87aa4 <CFAT::AllocateCluster()+0xb4>
	...

0000000000087c20 <CFATDirectory::CFATDirectory(CFATCache*, CFATInfo*, CFAT*)>:
   87c20:	a9000801 	stp	x1, x2, [x0]
   87c24:	a9017c03 	stp	x3, xzr, [x0, #16]
   87c28:	b900201f 	str	wzr, [x0, #32]
   87c2c:	d65f03c0 	ret

0000000000087c30 <CFATDirectory::~CFATDirectory()>:
   87c30:	d65f03c0 	ret
   87c34:	d503201f 	nop
   87c38:	d503201f 	nop
   87c3c:	d503201f 	nop

0000000000087c40 <CFATDirectory::GetEntry(char const*)>:
   87c40:	a9bb53f3 	stp	x19, x20, [sp, #-80]!
   87c44:	f9001bfe 	str	x30, [sp, #48]
   87c48:	b4000fe1 	cbz	x1, 87e44 <CFATDirectory::GetEntry(char const*)+0x204>
   87c4c:	aa0003f3 	mov	x19, x0
   87c50:	aa0103e0 	mov	x0, x1
   87c54:	910103e1 	add	x1, sp, #0x40
   87c58:	940002c6 	bl	88770 <CFATDirectory::Name2FAT(char const*, char*)>
   87c5c:	72001c1f 	tst	w0, #0xff
   87c60:	54000d00 	b.eq	87e00 <CFATDirectory::GetEntry(char const*)+0x1c0>  // b.none
   87c64:	a9015bf5 	stp	x21, x22, [sp, #16]
   87c68:	a90263f7 	stp	x23, x24, [sp, #32]
   87c6c:	f9400660 	ldr	x0, [x19, #8]
   87c70:	b40010c0 	cbz	x0, 87e88 <CFATDirectory::GetEntry(char const*)+0x248>
   87c74:	97fffc87 	bl	86e90 <CFATInfo::GetFATType() const>
   87c78:	7100041f 	cmp	w0, #0x1
   87c7c:	52800018 	mov	w24, #0x0                   	// #0
   87c80:	2a0003f6 	mov	w22, w0
   87c84:	52800017 	mov	w23, #0x0                   	// #0
   87c88:	54000c60 	b.eq	87e14 <CFATDirectory::GetEntry(char const*)+0x1d4>  // b.none
   87c8c:	b9402260 	ldr	w0, [x19, #32]
   87c90:	35000660 	cbnz	w0, 87d5c <CFATDirectory::GetEntry(char const*)+0x11c>
   87c94:	52800015 	mov	w21, #0x0                   	// #0
   87c98:	34000876 	cbz	w22, 87da4 <CFATDirectory::GetEntry(char const*)+0x164>
   87c9c:	710006df 	cmp	w22, #0x1
   87ca0:	54000ea1 	b.ne	87e74 <CFATDirectory::GetEntry(char const*)+0x234>  // b.any
   87ca4:	2a1803e1 	mov	w1, w24
   87ca8:	f9400a60 	ldr	x0, [x19, #16]
   87cac:	97fffdb1 	bl	87370 <CFAT::IsEOC(unsigned int) const>
   87cb0:	72001c1f 	tst	w0, #0xff
   87cb4:	540009e1 	b.ne	87df0 <CFATDirectory::GetEntry(char const*)+0x1b0>  // b.any
   87cb8:	2a1803e1 	mov	w1, w24
   87cbc:	f9400660 	ldr	x0, [x19, #8]
   87cc0:	97fffce8 	bl	87060 <CFATInfo::GetFirstSector(unsigned int) const>
   87cc4:	1ad70aae 	udiv	w14, w21, w23
   87cc8:	f9400e63 	ldr	x3, [x19, #24]
   87ccc:	1b17d5cf 	msub	w15, w14, w23, w21
   87cd0:	0b4f1001 	add	w1, w0, w15, lsr #4
   87cd4:	b50007a3 	cbnz	x3, 87dc8 <CFATDirectory::GetEntry(char const*)+0x188>
   87cd8:	f9400260 	ldr	x0, [x19]
   87cdc:	b4000aa0 	cbz	x0, 87e30 <CFATDirectory::GetEntry(char const*)+0x1f0>
   87ce0:	52800002 	mov	w2, #0x0                   	// #0
   87ce4:	97fffa53 	bl	86630 <CFATCache::GetSector(unsigned int, int)>
   87ce8:	f9000e60 	str	x0, [x19, #24]
   87cec:	b4000ba0 	cbz	x0, 87e60 <CFATDirectory::GetEntry(char const*)+0x220>
   87cf0:	d37b0ea7 	ubfiz	x7, x21, #5, #4
   87cf4:	910100e8 	add	x8, x7, #0x40
   87cf8:	38686809 	ldrb	w9, [x0, x8]
   87cfc:	8b080014 	add	x20, x0, x8
   87d00:	340006e9 	cbz	w9, 87ddc <CFATDirectory::GetEntry(char const*)+0x19c>
   87d04:	7103953f 	cmp	w9, #0xe5
   87d08:	54000080 	b.eq	87d18 <CFATDirectory::GetEntry(char const*)+0xd8>  // b.none
   87d0c:	39402e8a 	ldrb	w10, [x20, #11]
   87d10:	721d055f 	tst	w10, #0x18
   87d14:	540002a0 	b.eq	87d68 <CFATDirectory::GetEntry(char const*)+0x128>  // b.none
   87d18:	aa0003e1 	mov	x1, x0
   87d1c:	52800022 	mov	w2, #0x1                   	// #1
   87d20:	f9400260 	ldr	x0, [x19]
   87d24:	0b0202b5 	add	w21, w21, w2
   87d28:	97fffaf6 	bl	86900 <CFATCache::FreeSector(TFATBuffer*, int)>
   87d2c:	710006df 	cmp	w22, #0x1
   87d30:	f9000e7f 	str	xzr, [x19, #24]
   87d34:	54fffb21 	b.ne	87c98 <CFATDirectory::GetEntry(char const*)+0x58>  // b.any
   87d38:	1ad70aab 	udiv	w11, w21, w23
   87d3c:	1b17d56c 	msub	w12, w11, w23, w21
   87d40:	35fffb2c 	cbnz	w12, 87ca4 <CFATDirectory::GetEntry(char const*)+0x64>
   87d44:	f9400a60 	ldr	x0, [x19, #16]
   87d48:	b4000b40 	cbz	x0, 87eb0 <CFATDirectory::GetEntry(char const*)+0x270>
   87d4c:	2a1803e1 	mov	w1, w24
   87d50:	97fffe34 	bl	87620 <CFAT::GetClusterEntry(unsigned int)>
   87d54:	2a0003f8 	mov	w24, w0
   87d58:	17ffffd3 	b	87ca4 <CFATDirectory::GetEntry(char const*)+0x64>
   87d5c:	940035b5 	bl	95430 <EnterCritical>
   87d60:	52800015 	mov	w21, #0x0                   	// #0
   87d64:	17ffffcd 	b	87c98 <CFATDirectory::GetEntry(char const*)+0x58>
   87d68:	d2800162 	mov	x2, #0xb                   	// #11
   87d6c:	910103e1 	add	x1, sp, #0x40
   87d70:	aa1403e0 	mov	x0, x20
   87d74:	94002eb1 	bl	93838 <memcmp>
   87d78:	34000a60 	cbz	w0, 87ec4 <CFATDirectory::GetEntry(char const*)+0x284>
   87d7c:	f9400e60 	ldr	x0, [x19, #24]
   87d80:	52800022 	mov	w2, #0x1                   	// #1
   87d84:	0b0202b5 	add	w21, w21, w2
   87d88:	aa0003e1 	mov	x1, x0
   87d8c:	f9400260 	ldr	x0, [x19]
   87d90:	97fffadc 	bl	86900 <CFATCache::FreeSector(TFATBuffer*, int)>
   87d94:	710006df 	cmp	w22, #0x1
   87d98:	f9000e7f 	str	xzr, [x19, #24]
   87d9c:	54fff7e1 	b.ne	87c98 <CFATDirectory::GetEntry(char const*)+0x58>  // b.any
   87da0:	17ffffe6 	b	87d38 <CFATDirectory::GetEntry(char const*)+0xf8>
   87da4:	f9400660 	ldr	x0, [x19, #8]
   87da8:	97fffc96 	bl	87000 <CFATInfo::GetRootEntries() const>
   87dac:	6b15001f 	cmp	w0, w21
   87db0:	54000209 	b.ls	87df0 <CFATDirectory::GetEntry(char const*)+0x1b0>  // b.plast
   87db4:	f9400660 	ldr	x0, [x19, #8]
   87db8:	97fffc76 	bl	86f90 <CFATInfo::GetFirstRootSector() const>
   87dbc:	f9400e63 	ldr	x3, [x19, #24]
   87dc0:	0b551001 	add	w1, w0, w21, lsr #4
   87dc4:	b4fff8a3 	cbz	x3, 87cd8 <CFATDirectory::GetEntry(char const*)+0x98>
   87dc8:	900000a4 	adrp	x4, 9b000 <vtable for CSoftSerialDevice+0x90>
   87dcc:	91102081 	add	x1, x4, #0x408
   87dd0:	91012020 	add	x0, x1, #0x48
   87dd4:	52800c62 	mov	w2, #0x63                  	// #99
   87dd8:	94000566 	bl	89370 <assertion_failed>
   87ddc:	aa0003e1 	mov	x1, x0
   87de0:	52800022 	mov	w2, #0x1                   	// #1
   87de4:	f9400260 	ldr	x0, [x19]
   87de8:	97fffac6 	bl	86900 <CFATCache::FreeSector(TFATBuffer*, int)>
   87dec:	f9000e7f 	str	xzr, [x19, #24]
   87df0:	b9402270 	ldr	w16, [x19, #32]
   87df4:	35000550 	cbnz	w16, 87e9c <CFATDirectory::GetEntry(char const*)+0x25c>
   87df8:	a9415bf5 	ldp	x21, x22, [sp, #16]
   87dfc:	a94263f7 	ldp	x23, x24, [sp, #32]
   87e00:	d2800014 	mov	x20, #0x0                   	// #0
   87e04:	aa1403e0 	mov	x0, x20
   87e08:	f9401bfe 	ldr	x30, [sp, #48]
   87e0c:	a8c553f3 	ldp	x19, x20, [sp], #80
   87e10:	d65f03c0 	ret
   87e14:	f9400660 	ldr	x0, [x19, #8]
   87e18:	97fffc86 	bl	87030 <CFATInfo::GetRootCluster() const>
   87e1c:	2a0003f8 	mov	w24, w0
   87e20:	f9400660 	ldr	x0, [x19, #8]
   87e24:	97fffc27 	bl	86ec0 <CFATInfo::GetSectorsPerCluster() const>
   87e28:	531c6c17 	lsl	w23, w0, #4
   87e2c:	17ffff98 	b	87c8c <CFATDirectory::GetEntry(char const*)+0x4c>
   87e30:	900000a5 	adrp	x5, 9b000 <vtable for CSoftSerialDevice+0x90>
   87e34:	911020a1 	add	x1, x5, #0x408
   87e38:	91016020 	add	x0, x1, #0x58
   87e3c:	52800c82 	mov	w2, #0x64                  	// #100
   87e40:	9400054c 	bl	89370 <assertion_failed>
   87e44:	900000a1 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   87e48:	91102021 	add	x1, x1, #0x408
   87e4c:	a9015bf5 	stp	x21, x22, [sp, #16]
   87e50:	91004020 	add	x0, x1, #0x10
   87e54:	52800542 	mov	w2, #0x2a                  	// #42
   87e58:	a90263f7 	stp	x23, x24, [sp, #32]
   87e5c:	94000545 	bl	89370 <assertion_failed>
   87e60:	900000a6 	adrp	x6, 9b000 <vtable for CSoftSerialDevice+0x90>
   87e64:	911020c1 	add	x1, x6, #0x408
   87e68:	9101a020 	add	x0, x1, #0x68
   87e6c:	52800cc2 	mov	w2, #0x66                  	// #102
   87e70:	94000540 	bl	89370 <assertion_failed>
   87e74:	900000a2 	adrp	x2, 9b000 <vtable for CSoftSerialDevice+0x90>
   87e78:	91102041 	add	x1, x2, #0x408
   87e7c:	9100c020 	add	x0, x1, #0x30
   87e80:	528009c2 	mov	w2, #0x4e                  	// #78
   87e84:	9400053b 	bl	89370 <assertion_failed>
   87e88:	900000a0 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   87e8c:	91102001 	add	x1, x0, #0x408
   87e90:	91008020 	add	x0, x1, #0x20
   87e94:	52800642 	mov	w2, #0x32                  	// #50
   87e98:	94000536 	bl	89370 <assertion_failed>
   87e9c:	94003591 	bl	954e0 <LeaveCritical>
   87ea0:	d2800014 	mov	x20, #0x0                   	// #0
   87ea4:	a9415bf5 	ldp	x21, x22, [sp, #16]
   87ea8:	a94263f7 	ldp	x23, x24, [sp, #32]
   87eac:	17ffffd6 	b	87e04 <CFATDirectory::GetEntry(char const*)+0x1c4>
   87eb0:	900000ad 	adrp	x13, 9b000 <vtable for CSoftSerialDevice+0x90>
   87eb4:	911021a1 	add	x1, x13, #0x408
   87eb8:	9101e020 	add	x0, x1, #0x78
   87ebc:	52801062 	mov	w2, #0x83                  	// #131
   87ec0:	9400052c 	bl	89370 <assertion_failed>
   87ec4:	a9415bf5 	ldp	x21, x22, [sp, #16]
   87ec8:	a94263f7 	ldp	x23, x24, [sp, #32]
   87ecc:	17ffffce 	b	87e04 <CFATDirectory::GetEntry(char const*)+0x1c4>

0000000000087ed0 <CFATDirectory::CreateEntry(char const*)>:
   87ed0:	a9ba53f3 	stp	x19, x20, [sp, #-96]!
   87ed4:	a9015bf5 	stp	x21, x22, [sp, #16]
   87ed8:	f90027fe 	str	x30, [sp, #72]
   87edc:	b4001241 	cbz	x1, 88124 <CFATDirectory::CreateEntry(char const*)+0x254>
   87ee0:	aa0003f3 	mov	x19, x0
   87ee4:	aa0103e0 	mov	x0, x1
   87ee8:	910143e1 	add	x1, sp, #0x50
   87eec:	94000221 	bl	88770 <CFATDirectory::Name2FAT(char const*, char*)>
   87ef0:	72001c1f 	tst	w0, #0xff
   87ef4:	540009e0 	b.eq	88030 <CFATDirectory::CreateEntry(char const*)+0x160>  // b.none
   87ef8:	f9400660 	ldr	x0, [x19, #8]
   87efc:	a90263f7 	stp	x23, x24, [sp, #32]
   87f00:	a9036bf9 	stp	x25, x26, [sp, #48]
   87f04:	b40015c0 	cbz	x0, 881bc <CFATDirectory::CreateEntry(char const*)+0x2ec>
   87f08:	52800017 	mov	w23, #0x0                   	// #0
   87f0c:	52800018 	mov	w24, #0x0                   	// #0
   87f10:	97fffbe0 	bl	86e90 <CFATInfo::GetFATType() const>
   87f14:	7100041f 	cmp	w0, #0x1
   87f18:	2a0003f6 	mov	w22, w0
   87f1c:	54000960 	b.eq	88048 <CFATDirectory::CreateEntry(char const*)+0x178>  // b.none
   87f20:	b9402260 	ldr	w0, [x19, #32]
   87f24:	35000660 	cbnz	w0, 87ff0 <CFATDirectory::CreateEntry(char const*)+0x120>
   87f28:	52800019 	mov	w25, #0x0                   	// #0
   87f2c:	52800014 	mov	w20, #0x0                   	// #0
   87f30:	34000696 	cbz	w22, 88000 <CFATDirectory::CreateEntry(char const*)+0x130>
   87f34:	710006df 	cmp	w22, #0x1
   87f38:	54001121 	b.ne	8815c <CFATDirectory::CreateEntry(char const*)+0x28c>  // b.any
   87f3c:	f9400a60 	ldr	x0, [x19, #16]
   87f40:	b4001260 	cbz	x0, 8818c <CFATDirectory::CreateEntry(char const*)+0x2bc>
   87f44:	2a1703e1 	mov	w1, w23
   87f48:	97fffd0a 	bl	87370 <CFAT::IsEOC(unsigned int) const>
   87f4c:	72001c1f 	tst	w0, #0xff
   87f50:	540008a1 	b.ne	88064 <CFATDirectory::CreateEntry(char const*)+0x194>  // b.any
   87f54:	2a1703e1 	mov	w1, w23
   87f58:	f9400660 	ldr	x0, [x19, #8]
   87f5c:	97fffc41 	bl	87060 <CFATInfo::GetFirstSector(unsigned int) const>
   87f60:	1ad80a8f 	udiv	w15, w20, w24
   87f64:	1b18d1f0 	msub	w16, w15, w24, w20
   87f68:	0b501001 	add	w1, w0, w16, lsr #4
   87f6c:	f9400e63 	ldr	x3, [x19, #24]
   87f70:	b5000ea3 	cbnz	x3, 88144 <CFATDirectory::CreateEntry(char const*)+0x274>
   87f74:	f9400260 	ldr	x0, [x19]
   87f78:	b4000fe0 	cbz	x0, 88174 <CFATDirectory::CreateEntry(char const*)+0x2a4>
   87f7c:	52800002 	mov	w2, #0x0                   	// #0
   87f80:	97fff9ac 	bl	86630 <CFATCache::GetSector(unsigned int, int)>
   87f84:	f9000e60 	str	x0, [x19, #24]
   87f88:	b40010e0 	cbz	x0, 881a4 <CFATDirectory::CreateEntry(char const*)+0x2d4>
   87f8c:	d37b0e87 	ubfiz	x7, x20, #5, #4
   87f90:	910100e8 	add	x8, x7, #0x40
   87f94:	38686809 	ldrb	w9, [x0, x8]
   87f98:	8b080015 	add	x21, x0, x8
   87f9c:	7103953f 	cmp	w9, #0xe5
   87fa0:	7a401924 	ccmp	w9, #0x0, #0x4, ne  // ne = any
   87fa4:	540012c0 	b.eq	881fc <CFATDirectory::CreateEntry(char const*)+0x32c>  // b.none
   87fa8:	aa0003e1 	mov	x1, x0
   87fac:	52800022 	mov	w2, #0x1                   	// #1
   87fb0:	f9400260 	ldr	x0, [x19]
   87fb4:	97fffa53 	bl	86900 <CFATCache::FreeSector(TFATBuffer*, int)>
   87fb8:	710006df 	cmp	w22, #0x1
   87fbc:	f9000e7f 	str	xzr, [x19, #24]
   87fc0:	11000694 	add	w20, w20, #0x1
   87fc4:	54fffb61 	b.ne	87f30 <CFATDirectory::CreateEntry(char const*)+0x60>  // b.any
   87fc8:	1ad80a8a 	udiv	w10, w20, w24
   87fcc:	1b18d14b 	msub	w11, w10, w24, w20
   87fd0:	35fffb6b 	cbnz	w11, 87f3c <CFATDirectory::CreateEntry(char const*)+0x6c>
   87fd4:	f9400a60 	ldr	x0, [x19, #16]
   87fd8:	b4001280 	cbz	x0, 88228 <CFATDirectory::CreateEntry(char const*)+0x358>
   87fdc:	2a1703e1 	mov	w1, w23
   87fe0:	2a1703f9 	mov	w25, w23
   87fe4:	97fffd8f 	bl	87620 <CFAT::GetClusterEntry(unsigned int)>
   87fe8:	2a0003f7 	mov	w23, w0
   87fec:	17ffffd4 	b	87f3c <CFATDirectory::CreateEntry(char const*)+0x6c>
   87ff0:	94003510 	bl	95430 <EnterCritical>
   87ff4:	52800019 	mov	w25, #0x0                   	// #0
   87ff8:	52800014 	mov	w20, #0x0                   	// #0
   87ffc:	17ffffcd 	b	87f30 <CFATDirectory::CreateEntry(char const*)+0x60>
   88000:	f9400660 	ldr	x0, [x19, #8]
   88004:	97fffbff 	bl	87000 <CFATInfo::GetRootEntries() const>
   88008:	6b14001f 	cmp	w0, w20
   8800c:	540000a9 	b.ls	88020 <CFATDirectory::CreateEntry(char const*)+0x150>  // b.plast
   88010:	f9400660 	ldr	x0, [x19, #8]
   88014:	97fffbdf 	bl	86f90 <CFATInfo::GetFirstRootSector() const>
   88018:	0b541001 	add	w1, w0, w20, lsr #4
   8801c:	17ffffd4 	b	87f6c <CFATDirectory::CreateEntry(char const*)+0x9c>
   88020:	b940227e 	ldr	w30, [x19, #32]
   88024:	350010fe 	cbnz	w30, 88240 <CFATDirectory::CreateEntry(char const*)+0x370>
   88028:	a94263f7 	ldp	x23, x24, [sp, #32]
   8802c:	a9436bf9 	ldp	x25, x26, [sp, #48]
   88030:	d2800015 	mov	x21, #0x0                   	// #0
   88034:	aa1503e0 	mov	x0, x21
   88038:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8803c:	f94027fe 	ldr	x30, [sp, #72]
   88040:	a8c653f3 	ldp	x19, x20, [sp], #96
   88044:	d65f03c0 	ret
   88048:	f9400660 	ldr	x0, [x19, #8]
   8804c:	97fffbf9 	bl	87030 <CFATInfo::GetRootCluster() const>
   88050:	2a0003f7 	mov	w23, w0
   88054:	f9400660 	ldr	x0, [x19, #8]
   88058:	97fffb9a 	bl	86ec0 <CFATInfo::GetSectorsPerCluster() const>
   8805c:	531c6c18 	lsl	w24, w0, #4
   88060:	17ffffb0 	b	87f20 <CFATDirectory::CreateEntry(char const*)+0x50>
   88064:	f9400a60 	ldr	x0, [x19, #16]
   88068:	97fffe62 	bl	879f0 <CFAT::AllocateCluster()>
   8806c:	2a0003f7 	mov	w23, w0
   88070:	34fffd80 	cbz	w0, 88020 <CFATDirectory::CreateEntry(char const*)+0x150>
   88074:	2a0003e1 	mov	w1, w0
   88078:	f9400660 	ldr	x0, [x19, #8]
   8807c:	5280001a 	mov	w26, #0x0                   	// #0
   88080:	f90023fb 	str	x27, [sp, #64]
   88084:	97fffbf7 	bl	87060 <CFATInfo::GetFirstSector(unsigned int) const>
   88088:	2a0003fb 	mov	w27, w0
   8808c:	f9400660 	ldr	x0, [x19, #8]
   88090:	97fffb8c 	bl	86ec0 <CFATInfo::GetSectorsPerCluster() const>
   88094:	6b1a001f 	cmp	w0, w26
   88098:	0b1b0355 	add	w21, w26, w27
   8809c:	54000329 	b.ls	88100 <CFATDirectory::CreateEntry(char const*)+0x230>  // b.plast
   880a0:	f9400260 	ldr	x0, [x19]
   880a4:	b4000980 	cbz	x0, 881d4 <CFATDirectory::CreateEntry(char const*)+0x304>
   880a8:	2a1503e1 	mov	w1, w21
   880ac:	52800022 	mov	w2, #0x1                   	// #1
   880b0:	97fff960 	bl	86630 <CFATCache::GetSector(unsigned int, int)>
   880b4:	aa0003f5 	mov	x21, x0
   880b8:	b4000980 	cbz	x0, 881e8 <CFATDirectory::CreateEntry(char const*)+0x318>
   880bc:	d2804002 	mov	x2, #0x200                 	// #512
   880c0:	52800001 	mov	w1, #0x0                   	// #0
   880c4:	91010000 	add	x0, x0, #0x40
   880c8:	1100075a 	add	w26, w26, #0x1
   880cc:	94002d4c 	bl	935fc <memset>
   880d0:	aa1503e1 	mov	x1, x21
   880d4:	f9400260 	ldr	x0, [x19]
   880d8:	97fffa32 	bl	869a0 <CFATCache::MarkDirty(TFATBuffer*)>
   880dc:	aa1503e1 	mov	x1, x21
   880e0:	52800022 	mov	w2, #0x1                   	// #1
   880e4:	f9400260 	ldr	x0, [x19]
   880e8:	97fffa06 	bl	86900 <CFATCache::FreeSector(TFATBuffer*, int)>
   880ec:	f9400660 	ldr	x0, [x19, #8]
   880f0:	0b1b0355 	add	w21, w26, w27
   880f4:	97fffb73 	bl	86ec0 <CFATInfo::GetSectorsPerCluster() const>
   880f8:	6b1a001f 	cmp	w0, w26
   880fc:	54fffd28 	b.hi	880a0 <CFATDirectory::CreateEntry(char const*)+0x1d0>  // b.pmore
   88100:	7100073f 	cmp	w25, #0x1
   88104:	54000a89 	b.ls	88254 <CFATDirectory::CreateEntry(char const*)+0x384>  // b.plast
   88108:	2a1903e1 	mov	w1, w25
   8810c:	2a1703e2 	mov	w2, w23
   88110:	f9400a60 	ldr	x0, [x19, #16]
   88114:	97fffdcf 	bl	87850 <CFAT::SetClusterEntry(unsigned int, unsigned int)>
   88118:	52800019 	mov	w25, #0x0                   	// #0
   8811c:	f94023fb 	ldr	x27, [sp, #64]
   88120:	17ffff8d 	b	87f54 <CFATDirectory::CreateEntry(char const*)+0x84>
   88124:	f0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   88128:	91102021 	add	x1, x1, #0x408
   8812c:	a90263f7 	stp	x23, x24, [sp, #32]
   88130:	91004020 	add	x0, x1, #0x10
   88134:	528011e2 	mov	w2, #0x8f                  	// #143
   88138:	a9036bf9 	stp	x25, x26, [sp, #48]
   8813c:	f90023fb 	str	x27, [sp, #64]
   88140:	9400048c 	bl	89370 <assertion_failed>
   88144:	f0000084 	adrp	x4, 9b000 <vtable for CSoftSerialDevice+0x90>
   88148:	91102081 	add	x1, x4, #0x408
   8814c:	f90023fb 	str	x27, [sp, #64]
   88150:	91012020 	add	x0, x1, #0x48
   88154:	52801c22 	mov	w2, #0xe1                  	// #225
   88158:	94000486 	bl	89370 <assertion_failed>
   8815c:	f0000082 	adrp	x2, 9b000 <vtable for CSoftSerialDevice+0x90>
   88160:	91102041 	add	x1, x2, #0x408
   88164:	f90023fb 	str	x27, [sp, #64]
   88168:	9100c020 	add	x0, x1, #0x30
   8816c:	528016a2 	mov	w2, #0xb5                  	// #181
   88170:	94000480 	bl	89370 <assertion_failed>
   88174:	f0000085 	adrp	x5, 9b000 <vtable for CSoftSerialDevice+0x90>
   88178:	911020a1 	add	x1, x5, #0x408
   8817c:	f90023fb 	str	x27, [sp, #64]
   88180:	91016020 	add	x0, x1, #0x58
   88184:	52801c42 	mov	w2, #0xe2                  	// #226
   88188:	9400047a 	bl	89370 <assertion_failed>
   8818c:	f000008d 	adrp	x13, 9b000 <vtable for CSoftSerialDevice+0x90>
   88190:	911021a1 	add	x1, x13, #0x408
   88194:	f90023fb 	str	x27, [sp, #64]
   88198:	9101e020 	add	x0, x1, #0x78
   8819c:	528016e2 	mov	w2, #0xb7                  	// #183
   881a0:	94000474 	bl	89370 <assertion_failed>
   881a4:	f0000086 	adrp	x6, 9b000 <vtable for CSoftSerialDevice+0x90>
   881a8:	911020c1 	add	x1, x6, #0x408
   881ac:	f90023fb 	str	x27, [sp, #64]
   881b0:	9101a020 	add	x0, x1, #0x68
   881b4:	52801c82 	mov	w2, #0xe4                  	// #228
   881b8:	9400046e 	bl	89370 <assertion_failed>
   881bc:	f0000080 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   881c0:	91102001 	add	x1, x0, #0x408
   881c4:	f90023fb 	str	x27, [sp, #64]
   881c8:	91008020 	add	x0, x1, #0x20
   881cc:	528012e2 	mov	w2, #0x97                  	// #151
   881d0:	94000468 	bl	89370 <assertion_failed>
   881d4:	f0000091 	adrp	x17, 9b000 <vtable for CSoftSerialDevice+0x90>
   881d8:	91102221 	add	x1, x17, #0x408
   881dc:	91016020 	add	x0, x1, #0x58
   881e0:	52801862 	mov	w2, #0xc3                  	// #195
   881e4:	94000463 	bl	89370 <assertion_failed>
   881e8:	f0000092 	adrp	x18, 9b000 <vtable for CSoftSerialDevice+0x90>
   881ec:	91102241 	add	x1, x18, #0x408
   881f0:	91022020 	add	x0, x1, #0x88
   881f4:	528018a2 	mov	w2, #0xc5                  	// #197
   881f8:	9400045e 	bl	89370 <assertion_failed>
   881fc:	d2800402 	mov	x2, #0x20                  	// #32
   88200:	52800001 	mov	w1, #0x0                   	// #0
   88204:	aa1503e0 	mov	x0, x21
   88208:	94002cfd 	bl	935fc <memset>
   8820c:	910143e1 	add	x1, sp, #0x50
   88210:	d2800162 	mov	x2, #0xb                   	// #11
   88214:	aa1503e0 	mov	x0, x21
   88218:	9400306e 	bl	943d0 <memcpy>
   8821c:	a94263f7 	ldp	x23, x24, [sp, #32]
   88220:	a9436bf9 	ldp	x25, x26, [sp, #48]
   88224:	17ffff84 	b	88034 <CFATDirectory::CreateEntry(char const*)+0x164>
   88228:	f000008c 	adrp	x12, 9b000 <vtable for CSoftSerialDevice+0x90>
   8822c:	91102181 	add	x1, x12, #0x408
   88230:	f90023fb 	str	x27, [sp, #64]
   88234:	9101e020 	add	x0, x1, #0x78
   88238:	52801fa2 	mov	w2, #0xfd                  	// #253
   8823c:	9400044d 	bl	89370 <assertion_failed>
   88240:	940034a8 	bl	954e0 <LeaveCritical>
   88244:	d2800015 	mov	x21, #0x0                   	// #0
   88248:	a94263f7 	ldp	x23, x24, [sp, #32]
   8824c:	a9436bf9 	ldp	x25, x26, [sp, #48]
   88250:	17ffff79 	b	88034 <CFATDirectory::CreateEntry(char const*)+0x164>
   88254:	f000008e 	adrp	x14, 9b000 <vtable for CSoftSerialDevice+0x90>
   88258:	911021c1 	add	x1, x14, #0x408
   8825c:	91026020 	add	x0, x1, #0x98
   88260:	528019a2 	mov	w2, #0xcd                  	// #205
   88264:	94000443 	bl	89370 <assertion_failed>
   88268:	d503201f 	nop
   8826c:	d503201f 	nop

0000000000088270 <CFATDirectory::FreeEntry(bool)>:
   88270:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   88274:	12001c22 	and	w2, w1, #0xff
   88278:	f9400c01 	ldr	x1, [x0, #24]
   8827c:	b40002c1 	cbz	x1, 882d4 <CFATDirectory::FreeEntry(bool)+0x64>
   88280:	aa0003f3 	mov	x19, x0
   88284:	f9400000 	ldr	x0, [x0]
   88288:	b4000300 	cbz	x0, 882e8 <CFATDirectory::FreeEntry(bool)+0x78>
   8828c:	35000102 	cbnz	w2, 882ac <CFATDirectory::FreeEntry(bool)+0x3c>
   88290:	52800022 	mov	w2, #0x1                   	// #1
   88294:	97fff99b 	bl	86900 <CFATCache::FreeSector(TFATBuffer*, int)>
   88298:	b9402263 	ldr	w3, [x19, #32]
   8829c:	f9000e7f 	str	xzr, [x19, #24]
   882a0:	35000163 	cbnz	w3, 882cc <CFATDirectory::FreeEntry(bool)+0x5c>
   882a4:	a8c17bf3 	ldp	x19, x30, [sp], #16
   882a8:	d65f03c0 	ret
   882ac:	97fff9bd 	bl	869a0 <CFATCache::MarkDirty(TFATBuffer*)>
   882b0:	52800022 	mov	w2, #0x1                   	// #1
   882b4:	f9400260 	ldr	x0, [x19]
   882b8:	f9400e61 	ldr	x1, [x19, #24]
   882bc:	97fff991 	bl	86900 <CFATCache::FreeSector(TFATBuffer*, int)>
   882c0:	b9402263 	ldr	w3, [x19, #32]
   882c4:	f9000e7f 	str	xzr, [x19, #24]
   882c8:	34fffee3 	cbz	w3, 882a4 <CFATDirectory::FreeEntry(bool)+0x34>
   882cc:	a8c17bf3 	ldp	x19, x30, [sp], #16
   882d0:	14003484 	b	954e0 <LeaveCritical>
   882d4:	f0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   882d8:	91102021 	add	x1, x1, #0x408
   882dc:	9101a020 	add	x0, x1, #0x68
   882e0:	52802122 	mov	w2, #0x109                 	// #265
   882e4:	94000423 	bl	89370 <assertion_failed>
   882e8:	f0000080 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   882ec:	91102001 	add	x1, x0, #0x408
   882f0:	91016020 	add	x0, x1, #0x58
   882f4:	52802142 	mov	w2, #0x10a                 	// #266
   882f8:	9400041e 	bl	89370 <assertion_failed>
   882fc:	d503201f 	nop

0000000000088300 <CFATDirectory::FindFirst(TDirentry*, TFindCurrentEntry*)>:
   88300:	b4000062 	cbz	x2, 8830c <CFATDirectory::FindFirst(TDirentry*, TFindCurrentEntry*)+0xc>
   88304:	b900005f 	str	wzr, [x2]
   88308:	1400000a 	b	88330 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)>
   8830c:	f0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   88310:	91102021 	add	x1, x1, #0x408
   88314:	f81f0ffe 	str	x30, [sp, #-16]!
   88318:	9102c020 	add	x0, x1, #0xb0
   8831c:	52802322 	mov	w2, #0x119                 	// #281
   88320:	94000414 	bl	89370 <assertion_failed>
   88324:	d503201f 	nop
   88328:	d503201f 	nop
   8832c:	d503201f 	nop

0000000000088330 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)>:
   88330:	a9bb53f3 	stp	x19, x20, [sp, #-80]!
   88334:	f9001ffe 	str	x30, [sp, #56]
   88338:	b4001241 	cbz	x1, 88580 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x250>
   8833c:	a9015bf5 	stp	x21, x22, [sp, #16]
   88340:	aa0203f3 	mov	x19, x2
   88344:	b4001382 	cbz	x2, 885b4 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x284>
   88348:	aa0003f5 	mov	x21, x0
   8834c:	b9400042 	ldr	w2, [x2]
   88350:	3100045f 	cmn	w2, #0x1
   88354:	54001020 	b.eq	88558 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x228>  // b.none
   88358:	f9400400 	ldr	x0, [x0, #8]
   8835c:	a90263f7 	stp	x23, x24, [sp, #32]
   88360:	f9001bf9 	str	x25, [sp, #48]
   88364:	b4001400 	cbz	x0, 885e4 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x2b4>
   88368:	aa0103f8 	mov	x24, x1
   8836c:	52800017 	mov	w23, #0x0                   	// #0
   88370:	97fffac8 	bl	86e90 <CFATInfo::GetFATType() const>
   88374:	7100041f 	cmp	w0, #0x1
   88378:	2a0003f6 	mov	w22, w0
   8837c:	540008a0 	b.eq	88490 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x160>  // b.none
   88380:	b94022a0 	ldr	w0, [x21, #32]
   88384:	35000960 	cbnz	w0, 884b0 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x180>
   88388:	34000656 	cbz	w22, 88450 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x120>
   8838c:	710006df 	cmp	w22, #0x1
   88390:	54001081 	b.ne	885a0 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x270>  // b.any
   88394:	b9400661 	ldr	w1, [x19, #4]
   88398:	f9400aa0 	ldr	x0, [x21, #16]
   8839c:	97fffbf5 	bl	87370 <CFAT::IsEOC(unsigned int) const>
   883a0:	72001c1f 	tst	w0, #0xff
   883a4:	54000ce1 	b.ne	88540 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x210>  // b.any
   883a8:	b9400661 	ldr	w1, [x19, #4]
   883ac:	f94006a0 	ldr	x0, [x21, #8]
   883b0:	97fffb2c 	bl	87060 <CFATInfo::GetFirstSector(unsigned int) const>
   883b4:	b9400262 	ldr	w2, [x19]
   883b8:	1ad70841 	udiv	w1, w2, w23
   883bc:	1b178823 	msub	w3, w1, w23, w2
   883c0:	0b431001 	add	w1, w0, w3, lsr #4
   883c4:	f94002a0 	ldr	x0, [x21]
   883c8:	b40005a0 	cbz	x0, 8847c <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x14c>
   883cc:	52800002 	mov	w2, #0x0                   	// #0
   883d0:	97fff898 	bl	86630 <CFATCache::GetSector(unsigned int, int)>
   883d4:	aa0003f9 	mov	x25, x0
   883d8:	b4000ca0 	cbz	x0, 8856c <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x23c>
   883dc:	b940026a 	ldr	w10, [x19]
   883e0:	d37b0d4b 	ubfiz	x11, x10, #5, #4
   883e4:	9101016c 	add	x12, x11, #0x40
   883e8:	386c680d 	ldrb	w13, [x0, x12]
   883ec:	8b0c0014 	add	x20, x0, x12
   883f0:	34000a0d 	cbz	w13, 88530 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x200>
   883f4:	710395bf 	cmp	w13, #0xe5
   883f8:	54000080 	b.eq	88408 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0xd8>  // b.none
   883fc:	39402e8e 	ldrb	w14, [x20, #11]
   88400:	721d05df 	tst	w14, #0x18
   88404:	540005a0 	b.eq	884b8 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x188>  // b.none
   88408:	aa1903e1 	mov	x1, x25
   8840c:	52800022 	mov	w2, #0x1                   	// #1
   88410:	f94002a0 	ldr	x0, [x21]
   88414:	97fff93b 	bl	86900 <CFATCache::FreeSector(TFATBuffer*, int)>
   88418:	b940026f 	ldr	w15, [x19]
   8841c:	710006df 	cmp	w22, #0x1
   88420:	110005f0 	add	w16, w15, #0x1
   88424:	b9000270 	str	w16, [x19]
   88428:	54fffb01 	b.ne	88388 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x58>  // b.any
   8842c:	1ad70a11 	udiv	w17, w16, w23
   88430:	1b17c232 	msub	w18, w17, w23, w16
   88434:	35fffb12 	cbnz	w18, 88394 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x64>
   88438:	f9400aa0 	ldr	x0, [x21, #16]
   8843c:	b4000700 	cbz	x0, 8851c <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x1ec>
   88440:	b9400661 	ldr	w1, [x19, #4]
   88444:	97fffc77 	bl	87620 <CFAT::GetClusterEntry(unsigned int)>
   88448:	b9000660 	str	w0, [x19, #4]
   8844c:	17ffffd2 	b	88394 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x64>
   88450:	b9400274 	ldr	w20, [x19]
   88454:	f94006a0 	ldr	x0, [x21, #8]
   88458:	97fffaea 	bl	87000 <CFATInfo::GetRootEntries() const>
   8845c:	6b00029f 	cmp	w20, w0
   88460:	54000702 	b.cs	88540 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x210>  // b.hs, b.nlast
   88464:	f94006a0 	ldr	x0, [x21, #8]
   88468:	97fffaca 	bl	86f90 <CFATInfo::GetFirstRootSector() const>
   8846c:	b9400267 	ldr	w7, [x19]
   88470:	0b471001 	add	w1, w0, w7, lsr #4
   88474:	f94002a0 	ldr	x0, [x21]
   88478:	b5fffaa0 	cbnz	x0, 883cc <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x9c>
   8847c:	f0000088 	adrp	x8, 9b000 <vtable for CSoftSerialDevice+0x90>
   88480:	91102101 	add	x1, x8, #0x408
   88484:	91016020 	add	x0, x1, #0x58
   88488:	52802b42 	mov	w2, #0x15a                 	// #346
   8848c:	940003b9 	bl	89370 <assertion_failed>
   88490:	b9400264 	ldr	w4, [x19]
   88494:	f94006a5 	ldr	x5, [x21, #8]
   88498:	340009c4 	cbz	w4, 885d0 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x2a0>
   8849c:	aa0503e0 	mov	x0, x5
   884a0:	97fffa88 	bl	86ec0 <CFATInfo::GetSectorsPerCluster() const>
   884a4:	531c6c17 	lsl	w23, w0, #4
   884a8:	b94022a0 	ldr	w0, [x21, #32]
   884ac:	34fff6e0 	cbz	w0, 88388 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x58>
   884b0:	940033e0 	bl	95430 <EnterCritical>
   884b4:	17ffffb5 	b	88388 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x58>
   884b8:	aa1803e1 	mov	x1, x24
   884bc:	aa1403e0 	mov	x0, x20
   884c0:	940000f0 	bl	88880 <CFATDirectory::FAT2Name(char const*, char*)>
   884c4:	b9401e84 	ldr	w4, [x20, #28]
   884c8:	52800045 	mov	w5, #0x2                   	// #2
   884cc:	52800060 	mov	w0, #0x3                   	// #3
   884d0:	aa1903e1 	mov	x1, x25
   884d4:	52800022 	mov	w2, #0x1                   	// #1
   884d8:	29021704 	stp	w4, w5, [x24, #16]
   884dc:	39402e86 	ldrb	w6, [x20, #11]
   884e0:	f27f00df 	tst	x6, #0x2
   884e4:	1a851007 	csel	w7, w0, w5, ne  // ne = any
   884e8:	b9001707 	str	w7, [x24, #20]
   884ec:	f94002a0 	ldr	x0, [x21]
   884f0:	97fff904 	bl	86900 <CFATCache::FreeSector(TFATBuffer*, int)>
   884f4:	b9400268 	ldr	w8, [x19]
   884f8:	710006df 	cmp	w22, #0x1
   884fc:	11000519 	add	w25, w8, #0x1
   88500:	b9000279 	str	w25, [x19]
   88504:	54000821 	b.ne	88608 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x2d8>  // b.any
   88508:	1ad70b3e 	udiv	w30, w25, w23
   8850c:	1b17e7c9 	msub	w9, w30, w23, w25
   88510:	350007c9 	cbnz	w9, 88608 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x2d8>
   88514:	f9400aa0 	ldr	x0, [x21, #16]
   88518:	b5000700 	cbnz	x0, 885f8 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x2c8>
   8851c:	f000008a 	adrp	x10, 9b000 <vtable for CSoftSerialDevice+0x90>
   88520:	91102141 	add	x1, x10, #0x408
   88524:	9101e020 	add	x0, x1, #0x78
   88528:	52803042 	mov	w2, #0x182                 	// #386
   8852c:	94000391 	bl	89370 <assertion_failed>
   88530:	aa0003e1 	mov	x1, x0
   88534:	52800022 	mov	w2, #0x1                   	// #1
   88538:	f94002a0 	ldr	x0, [x21]
   8853c:	97fff8f1 	bl	86900 <CFATCache::FreeSector(TFATBuffer*, int)>
   88540:	1280000c 	mov	w12, #0xffffffff            	// #-1
   88544:	b900026c 	str	w12, [x19]
   88548:	b94022ad 	ldr	w13, [x21, #32]
   8854c:	350006ad 	cbnz	w13, 88620 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x2f0>
   88550:	a94263f7 	ldp	x23, x24, [sp, #32]
   88554:	f9401bf9 	ldr	x25, [sp, #48]
   88558:	52800000 	mov	w0, #0x0                   	// #0
   8855c:	a9415bf5 	ldp	x21, x22, [sp, #16]
   88560:	f9401ffe 	ldr	x30, [sp, #56]
   88564:	a8c553f3 	ldp	x19, x20, [sp], #80
   88568:	d65f03c0 	ret
   8856c:	f0000089 	adrp	x9, 9b000 <vtable for CSoftSerialDevice+0x90>
   88570:	91102121 	add	x1, x9, #0x408
   88574:	91022020 	add	x0, x1, #0x88
   88578:	52802b82 	mov	w2, #0x15c                 	// #348
   8857c:	9400037d 	bl	89370 <assertion_failed>
   88580:	f0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   88584:	91102021 	add	x1, x1, #0x408
   88588:	a9015bf5 	stp	x21, x22, [sp, #16]
   8858c:	91032020 	add	x0, x1, #0xc8
   88590:	52802422 	mov	w2, #0x121                 	// #289
   88594:	a90263f7 	stp	x23, x24, [sp, #32]
   88598:	f9001bf9 	str	x25, [sp, #48]
   8859c:	94000375 	bl	89370 <assertion_failed>
   885a0:	f0000086 	adrp	x6, 9b000 <vtable for CSoftSerialDevice+0x90>
   885a4:	911020c1 	add	x1, x6, #0x408
   885a8:	9100c020 	add	x0, x1, #0x30
   885ac:	528028a2 	mov	w2, #0x145                 	// #325
   885b0:	94000370 	bl	89370 <assertion_failed>
   885b4:	f0000080 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   885b8:	91102001 	add	x1, x0, #0x408
   885bc:	a90263f7 	stp	x23, x24, [sp, #32]
   885c0:	9102c020 	add	x0, x1, #0xb0
   885c4:	52802442 	mov	w2, #0x122                 	// #290
   885c8:	f9001bf9 	str	x25, [sp, #48]
   885cc:	94000369 	bl	89370 <assertion_failed>
   885d0:	aa0503e0 	mov	x0, x5
   885d4:	97fffa97 	bl	87030 <CFATInfo::GetRootCluster() const>
   885d8:	f94006a5 	ldr	x5, [x21, #8]
   885dc:	b9000660 	str	w0, [x19, #4]
   885e0:	17ffffaf 	b	8849c <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x16c>
   885e4:	f0000083 	adrp	x3, 9b000 <vtable for CSoftSerialDevice+0x90>
   885e8:	91102061 	add	x1, x3, #0x408
   885ec:	91008020 	add	x0, x1, #0x20
   885f0:	52802522 	mov	w2, #0x129                 	// #297
   885f4:	9400035f 	bl	89370 <assertion_failed>
   885f8:	b9400661 	ldr	w1, [x19, #4]
   885fc:	97fffc09 	bl	87620 <CFAT::GetClusterEntry(unsigned int)>
   88600:	b9000660 	str	w0, [x19, #4]
   88604:	d503201f 	nop
   88608:	b94022ab 	ldr	w11, [x21, #32]
   8860c:	52800020 	mov	w0, #0x1                   	// #1
   88610:	3500012b 	cbnz	w11, 88634 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x304>
   88614:	a94263f7 	ldp	x23, x24, [sp, #32]
   88618:	f9401bf9 	ldr	x25, [sp, #48]
   8861c:	17ffffd0 	b	8855c <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x22c>
   88620:	940033b0 	bl	954e0 <LeaveCritical>
   88624:	52800000 	mov	w0, #0x0                   	// #0
   88628:	a94263f7 	ldp	x23, x24, [sp, #32]
   8862c:	f9401bf9 	ldr	x25, [sp, #48]
   88630:	17ffffcb 	b	8855c <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x22c>
   88634:	b9004fe0 	str	w0, [sp, #76]
   88638:	940033aa 	bl	954e0 <LeaveCritical>
   8863c:	b9404fe0 	ldr	w0, [sp, #76]
   88640:	a94263f7 	ldp	x23, x24, [sp, #32]
   88644:	f9401bf9 	ldr	x25, [sp, #48]
   88648:	17ffffc5 	b	8855c <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x22c>
   8864c:	d503201f 	nop

0000000000088650 <CFATDirectory::Time2FAT(unsigned int)>:
   88650:	34000860 	cbz	w0, 8875c <CFATDirectory::Time2FAT(unsigned int)+0x10c>
   88654:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   88658:	5288a0f3 	mov	w19, #0x4507                	// #17671
   8865c:	72b845d3 	movk	w19, #0xc22e, lsl #16
   88660:	5280f654 	mov	w20, #0x7b2                 	// #1970
   88664:	a9015bf5 	stp	x21, x22, [sp, #16]
   88668:	2a0003f5 	mov	w21, w0
   8866c:	9bb37c00 	umull	x0, w0, w19
   88670:	d370fc13 	lsr	x19, x0, #48
   88674:	f90013fe 	str	x30, [sp, #32]
   88678:	14000003 	b	88684 <CFATDirectory::Time2FAT(unsigned int)+0x34>
   8867c:	4b020273 	sub	w19, w19, w2
   88680:	11000694 	add	w20, w20, #0x1
   88684:	2a1403e0 	mov	w0, w20
   88688:	94002ba2 	bl	93510 <CTimer::IsLeapYear(unsigned int)>
   8868c:	7100001f 	cmp	w0, #0x0
   88690:	1a9f07e1 	cset	w1, ne  // ne = any
   88694:	1105b422 	add	w2, w1, #0x16d
   88698:	6b02027f 	cmp	w19, w2
   8869c:	54ffff02 	b.cs	8867c <CFATDirectory::Time2FAT(unsigned int)+0x2c>  // b.hs, b.nlast
   886a0:	711eee9f 	cmp	w20, #0x7bb
   886a4:	52800000 	mov	w0, #0x0                   	// #0
   886a8:	54000529 	b.ls	8874c <CFATDirectory::Time2FAT(unsigned int)+0xfc>  // b.plast
   886ac:	52800016 	mov	w22, #0x0                   	// #0
   886b0:	14000002 	b	886b8 <CFATDirectory::Time2FAT(unsigned int)+0x68>
   886b4:	4b000273 	sub	w19, w19, w0
   886b8:	2a1603e0 	mov	w0, w22
   886bc:	2a1403e1 	mov	w1, w20
   886c0:	94002ba8 	bl	93560 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>
   886c4:	6b00027f 	cmp	w19, w0
   886c8:	110006d6 	add	w22, w22, #0x1
   886cc:	54ffff42 	b.cs	886b4 <CFATDirectory::Time2FAT(unsigned int)+0x64>  // b.hs, b.nlast
   886d0:	529678a5 	mov	w5, #0xb3c5                	// #46021
   886d4:	72b23445 	movk	w5, #0x91a2, lsl #16
   886d8:	52911123 	mov	w3, #0x8889                	// #34953
   886dc:	72b11103 	movk	w3, #0x8888, lsl #16
   886e0:	9ba57ea7 	umull	x7, w21, w5
   886e4:	52955566 	mov	w6, #0xaaab                	// #43691
   886e8:	72b55546 	movk	w6, #0xaaaa, lsl #16
   886ec:	9ba37ea9 	umull	x9, w21, w3
   886f0:	11000664 	add	w4, w19, #0x1
   886f4:	511ef288 	sub	w8, w20, #0x7bc
   886f8:	2a16148a 	orr	w10, w4, w22, lsl #5
   886fc:	d36bfceb 	lsr	x11, x7, #43
   88700:	d365fd2c 	lsr	x12, x9, #37
   88704:	2a08254d 	orr	w13, w10, w8, lsl #9
   88708:	9ba67d6e 	umull	x14, w11, w6
   8870c:	531c6d8f 	lsl	w15, w12, #4
   88710:	9ba37d90 	umull	x16, w12, w3
   88714:	4b0c01f1 	sub	w17, w15, w12
   88718:	4b110ab2 	sub	w18, w21, w17, lsl #2
   8871c:	d364fdde 	lsr	x30, x14, #36
   88720:	d365fe15 	lsr	x21, x16, #37
   88724:	0b1e07c1 	add	w1, w30, w30, lsl #1
   88728:	53017e40 	lsr	w0, w18, #1
   8872c:	531c6ea2 	lsl	w2, w21, #4
   88730:	2a0d4014 	orr	w20, w0, w13, lsl #16
   88734:	4b150056 	sub	w22, w2, w21
   88738:	4b010d73 	sub	w19, w11, w1, lsl #3
   8873c:	4b160985 	sub	w5, w12, w22, lsl #2
   88740:	53155263 	lsl	w3, w19, #11
   88744:	2a051466 	orr	w6, w3, w5, lsl #5
   88748:	2a060280 	orr	w0, w20, w6
   8874c:	a9415bf5 	ldp	x21, x22, [sp, #16]
   88750:	f94013fe 	ldr	x30, [sp, #32]
   88754:	a8c353f3 	ldp	x19, x20, [sp], #48
   88758:	d65f03c0 	ret
   8875c:	52800000 	mov	w0, #0x0                   	// #0
   88760:	d65f03c0 	ret
   88764:	d503201f 	nop
   88768:	d503201f 	nop
   8876c:	d503201f 	nop

0000000000088770 <CFATDirectory::Name2FAT(char const*, char*)>:
   88770:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   88774:	f9000bfe 	str	x30, [sp, #16]
   88778:	b4000660 	cbz	x0, 88844 <CFATDirectory::Name2FAT(char const*, char*)+0xd4>
   8877c:	aa0103f4 	mov	x20, x1
   88780:	b40006c1 	cbz	x1, 88858 <CFATDirectory::Name2FAT(char const*, char*)+0xe8>
   88784:	aa0003f3 	mov	x19, x0
   88788:	d2800162 	mov	x2, #0xb                   	// #11
   8878c:	52800401 	mov	w1, #0x20                  	// #32
   88790:	aa1403e0 	mov	x0, x20
   88794:	94002b9a 	bl	935fc <memset>
   88798:	39c0026e 	ldrsb	w14, [x19]
   8879c:	3400068e 	cbz	w14, 8886c <CFATDirectory::Name2FAT(char const*, char*)+0xfc>
   887a0:	710081df 	cmp	w14, #0x20
   887a4:	540003ed 	b.le	88820 <CFATDirectory::Name2FAT(char const*, char*)+0xb0>
   887a8:	d00000a3 	adrp	x3, 9e000 <font_data+0x1558>
   887ac:	aa1403e4 	mov	x4, x20
   887b0:	f941146a 	ldr	x10, [x3, #552]
   887b4:	52800105 	mov	w5, #0x8                   	// #8
   887b8:	91002286 	add	x6, x20, #0x8
   887bc:	39c00147 	ldrsb	w7, [x10]
   887c0:	34000127 	cbz	w7, 887e4 <CFATDirectory::Name2FAT(char const*, char*)+0x74>
   887c4:	6b0701df 	cmp	w14, w7
   887c8:	540002c0 	b.eq	88820 <CFATDirectory::Name2FAT(char const*, char*)+0xb0>  // b.none
   887cc:	aa0a03e9 	mov	x9, x10
   887d0:	14000003 	b	887dc <CFATDirectory::Name2FAT(char const*, char*)+0x6c>
   887d4:	6b0e011f 	cmp	w8, w14
   887d8:	54000240 	b.eq	88820 <CFATDirectory::Name2FAT(char const*, char*)+0xb0>  // b.none
   887dc:	38c01d28 	ldrsb	w8, [x9, #1]!
   887e0:	35ffffa8 	cbnz	w8, 887d4 <CFATDirectory::Name2FAT(char const*, char*)+0x64>
   887e4:	12001dcb 	and	w11, w14, #0xff
   887e8:	5101856c 	sub	w12, w11, #0x61
   887ec:	12001d8d 	and	w13, w12, #0xff
   887f0:	710065bf 	cmp	w13, #0x19
   887f4:	540001e8 	b.hi	88830 <CFATDirectory::Name2FAT(char const*, char*)+0xc0>  // b.pmore
   887f8:	51008162 	sub	w2, w11, #0x20
   887fc:	13001c4e 	sxtb	w14, w2
   88800:	34000065 	cbz	w5, 8880c <CFATDirectory::Name2FAT(char const*, char*)+0x9c>
   88804:	510004a5 	sub	w5, w5, #0x1
   88808:	3800148e 	strb	w14, [x4], #1
   8880c:	38c01e6e 	ldrsb	w14, [x19, #1]!
   88810:	340002ee 	cbz	w14, 8886c <CFATDirectory::Name2FAT(char const*, char*)+0xfc>
   88814:	710081df 	cmp	w14, #0x20
   88818:	54fffd2c 	b.gt	887bc <CFATDirectory::Name2FAT(char const*, char*)+0x4c>
   8881c:	d503201f 	nop
   88820:	52800000 	mov	w0, #0x0                   	// #0
   88824:	f9400bfe 	ldr	x30, [sp, #16]
   88828:	a8c253f3 	ldp	x19, x20, [sp], #32
   8882c:	d65f03c0 	ret
   88830:	7100b9df 	cmp	w14, #0x2e
   88834:	54fffe61 	b.ne	88800 <CFATDirectory::Name2FAT(char const*, char*)+0x90>  // b.any
   88838:	aa0603e4 	mov	x4, x6
   8883c:	52800065 	mov	w5, #0x3                   	// #3
   88840:	17fffff3 	b	8880c <CFATDirectory::Name2FAT(char const*, char*)+0x9c>
   88844:	f0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   88848:	91102021 	add	x1, x1, #0x408
   8884c:	91004020 	add	x0, x1, #0x10
   88850:	52803a42 	mov	w2, #0x1d2                 	// #466
   88854:	940002c7 	bl	89370 <assertion_failed>
   88858:	f0000080 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   8885c:	91102001 	add	x1, x0, #0x408
   88860:	9103a020 	add	x0, x1, #0xe8
   88864:	52803a62 	mov	w2, #0x1d3                 	// #467
   88868:	940002c2 	bl	89370 <assertion_failed>
   8886c:	39c0028f 	ldrsb	w15, [x20]
   88870:	710081ff 	cmp	w15, #0x20
   88874:	1a9f07e0 	cset	w0, ne  // ne = any
   88878:	17ffffeb 	b	88824 <CFATDirectory::Name2FAT(char const*, char*)+0xb4>
   8887c:	d503201f 	nop

0000000000088880 <CFATDirectory::FAT2Name(char const*, char*)>:
   88880:	a9be7bf3 	stp	x19, x30, [sp, #-32]!
   88884:	b4000660 	cbz	x0, 88950 <CFATDirectory::FAT2Name(char const*, char*)+0xd0>
   88888:	aa0103f3 	mov	x19, x1
   8888c:	b40006c1 	cbz	x1, 88964 <CFATDirectory::FAT2Name(char const*, char*)+0xe4>
   88890:	aa0003e1 	mov	x1, x0
   88894:	d2800162 	mov	x2, #0xb                   	// #11
   88898:	910043e0 	add	x0, sp, #0x10
   8889c:	94002d56 	bl	93df4 <strncpy>
   888a0:	39c043e8 	ldrsb	w8, [sp, #16]
   888a4:	39006fff 	strb	wzr, [sp, #27]
   888a8:	7100151f 	cmp	w8, #0x5
   888ac:	54000360 	b.eq	88918 <CFATDirectory::FAT2Name(char const*, char*)+0x98>  // b.none
   888b0:	34000228 	cbz	w8, 888f4 <CFATDirectory::FAT2Name(char const*, char*)+0x74>
   888b4:	910043e3 	add	x3, sp, #0x10
   888b8:	1400000a 	b	888e0 <CFATDirectory::FAT2Name(char const*, char*)+0x60>
   888bc:	12001d04 	and	w4, w8, #0xff
   888c0:	51010485 	sub	w5, w4, #0x41
   888c4:	12001ca6 	and	w6, w5, #0xff
   888c8:	710064df 	cmp	w6, #0x19
   888cc:	54000068 	b.hi	888d8 <CFATDirectory::FAT2Name(char const*, char*)+0x58>  // b.pmore
   888d0:	11008087 	add	w7, w4, #0x20
   888d4:	39000067 	strb	w7, [x3]
   888d8:	38c01c68 	ldrsb	w8, [x3, #1]!
   888dc:	340000c8 	cbz	w8, 888f4 <CFATDirectory::FAT2Name(char const*, char*)+0x74>
   888e0:	7100811f 	cmp	w8, #0x20
   888e4:	54fffec1 	b.ne	888bc <CFATDirectory::FAT2Name(char const*, char*)+0x3c>  // b.any
   888e8:	3900007f 	strb	wzr, [x3]
   888ec:	38c01c68 	ldrsb	w8, [x3, #1]!
   888f0:	35ffff88 	cbnz	w8, 888e0 <CFATDirectory::FAT2Name(char const*, char*)+0x60>
   888f4:	d2800102 	mov	x2, #0x8                   	// #8
   888f8:	910043e1 	add	x1, sp, #0x10
   888fc:	aa1303e0 	mov	x0, x19
   88900:	94002d3d 	bl	93df4 <strncpy>
   88904:	39c063e9 	ldrsb	w9, [sp, #24]
   88908:	3900227f 	strb	wzr, [x19, #8]
   8890c:	350000e9 	cbnz	w9, 88928 <CFATDirectory::FAT2Name(char const*, char*)+0xa8>
   88910:	a8c27bf3 	ldp	x19, x30, [sp], #32
   88914:	d65f03c0 	ret
   88918:	52800be2 	mov	w2, #0x5f                  	// #95
   8891c:	52800be8 	mov	w8, #0x5f                  	// #95
   88920:	390043e2 	strb	w2, [sp, #16]
   88924:	17ffffe4 	b	888b4 <CFATDirectory::FAT2Name(char const*, char*)+0x34>
   88928:	f000008a 	adrp	x10, 9b000 <vtable for CSoftSerialDevice+0x90>
   8892c:	9110214b 	add	x11, x10, #0x408
   88930:	9103e161 	add	x1, x11, #0xf8
   88934:	aa1303e0 	mov	x0, x19
   88938:	94002d80 	bl	93f38 <strcat>
   8893c:	910063e1 	add	x1, sp, #0x18
   88940:	aa1303e0 	mov	x0, x19
   88944:	94002d7d 	bl	93f38 <strcat>
   88948:	a8c27bf3 	ldp	x19, x30, [sp], #32
   8894c:	d65f03c0 	ret
   88950:	f0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   88954:	91102021 	add	x1, x1, #0x408
   88958:	9103a020 	add	x0, x1, #0xe8
   8895c:	52804122 	mov	w2, #0x209                 	// #521
   88960:	94000284 	bl	89370 <assertion_failed>
   88964:	f0000080 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   88968:	91102001 	add	x1, x0, #0x408
   8896c:	91004020 	add	x0, x1, #0x10
   88970:	52804142 	mov	w2, #0x20a                 	// #522
   88974:	9400027f 	bl	89370 <assertion_failed>
	...

0000000000088980 <CPartitionManager::CPartitionManager(CDevice*, char const*)>:
   88980:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   88984:	aa0003f3 	mov	x19, x0
   88988:	f8008401 	str	x1, [x0], #8
   8898c:	aa0203e1 	mov	x1, x2
   88990:	94001cb0 	bl	8fc50 <CString::CString(char const*)>
   88994:	a902fe7f 	stp	xzr, xzr, [x19, #40]
   88998:	a903fe7f 	stp	xzr, xzr, [x19, #56]
   8899c:	a8c17bf3 	ldp	x19, x30, [sp], #16
   889a0:	d65f03c0 	ret
   889a4:	d503201f 	nop
   889a8:	d503201f 	nop
   889ac:	d503201f 	nop

00000000000889b0 <CPartitionManager::~CPartitionManager()>:
   889b0:	a9ba53f3 	stp	x19, x20, [sp, #-96]!
   889b4:	9100a013 	add	x19, x0, #0x28
   889b8:	52800014 	mov	w20, #0x0                   	// #0
   889bc:	a9015bf5 	stp	x21, x22, [sp, #16]
   889c0:	f0000095 	adrp	x21, 9b000 <vtable for CSoftSerialDevice+0x90>
   889c4:	911442b5 	add	x21, x21, #0x510
   889c8:	aa0003f6 	mov	x22, x0
   889cc:	a90263f7 	stp	x23, x24, [sp, #32]
   889d0:	91012017 	add	x23, x0, #0x48
   889d4:	a9037bf9 	stp	x25, x30, [sp, #48]
   889d8:	91002019 	add	x25, x0, #0x8
   889dc:	910103e0 	add	x0, sp, #0x40
   889e0:	f9400261 	ldr	x1, [x19]
   889e4:	b4000341 	cbz	x1, 88a4c <CPartitionManager::~CPartitionManager()+0x9c>
   889e8:	94001c92 	bl	8fc30 <CString::CString()>
   889ec:	aa1903e0 	mov	x0, x25
   889f0:	11000694 	add	w20, w20, #0x1
   889f4:	94001cdf 	bl	8fd70 <CString::operator char const*() const>
   889f8:	aa0003e2 	mov	x2, x0
   889fc:	2a1403e3 	mov	w3, w20
   88a00:	aa1503e1 	mov	x1, x21
   88a04:	910103e0 	add	x0, sp, #0x40
   88a08:	94001e12 	bl	90250 <CString::Format(char const*, ...)>
   88a0c:	94000589 	bl	8a030 <CDeviceNameService::Get()>
   88a10:	aa0003f8 	mov	x24, x0
   88a14:	910103e0 	add	x0, sp, #0x40
   88a18:	94001cd6 	bl	8fd70 <CString::operator char const*() const>
   88a1c:	aa0003e1 	mov	x1, x0
   88a20:	52800022 	mov	w2, #0x1                   	// #1
   88a24:	aa1803e0 	mov	x0, x24
   88a28:	94000472 	bl	89bf0 <CDeviceNameService::RemoveDevice(char const*, bool)>
   88a2c:	f9400260 	ldr	x0, [x19]
   88a30:	b4000080 	cbz	x0, 88a40 <CPartitionManager::~CPartitionManager()+0x90>
   88a34:	f9400002 	ldr	x2, [x0]
   88a38:	f9400443 	ldr	x3, [x2, #8]
   88a3c:	d63f0060 	blr	x3
   88a40:	910103e0 	add	x0, sp, #0x40
   88a44:	f900027f 	str	xzr, [x19]
   88a48:	94001cb6 	bl	8fd20 <CString::~CString()>
   88a4c:	91002273 	add	x19, x19, #0x8
   88a50:	eb17027f 	cmp	x19, x23
   88a54:	54fffc41 	b.ne	889dc <CPartitionManager::~CPartitionManager()+0x2c>  // b.any
   88a58:	aa1903e0 	mov	x0, x25
   88a5c:	f90002df 	str	xzr, [x22]
   88a60:	94001cb0 	bl	8fd20 <CString::~CString()>
   88a64:	a9415bf5 	ldp	x21, x22, [sp, #16]
   88a68:	a94263f7 	ldp	x23, x24, [sp, #32]
   88a6c:	a9437bf9 	ldp	x25, x30, [sp, #48]
   88a70:	a8c653f3 	ldp	x19, x20, [sp], #96
   88a74:	d65f03c0 	ret
   88a78:	d503201f 	nop
   88a7c:	d503201f 	nop

0000000000088a80 <CPartitionManager::Initialize()>:
   88a80:	d10903ff 	sub	sp, sp, #0x240
   88a84:	d2800001 	mov	x1, #0x0                   	// #0
   88a88:	a90053f3 	stp	x19, x20, [sp]
   88a8c:	aa0003f3 	mov	x19, x0
   88a90:	f9400000 	ldr	x0, [x0]
   88a94:	f9400002 	ldr	x2, [x0]
   88a98:	f9401043 	ldr	x3, [x2, #32]
   88a9c:	f9000ffe 	str	x30, [sp, #24]
   88aa0:	d63f0060 	blr	x3
   88aa4:	b5000120 	cbnz	x0, 88ac8 <CPartitionManager::Initialize()+0x48>
   88aa8:	f9400260 	ldr	x0, [x19]
   88aac:	d2804002 	mov	x2, #0x200                 	// #512
   88ab0:	910103e1 	add	x1, sp, #0x40
   88ab4:	f9400004 	ldr	x4, [x0]
   88ab8:	f9400885 	ldr	x5, [x4, #16]
   88abc:	d63f00a0 	blr	x5
   88ac0:	7108001f 	cmp	w0, #0x200
   88ac4:	540001a0 	b.eq	88af8 <CPartitionManager::Initialize()+0x78>  // b.none
   88ac8:	94000c8e 	bl	8bd00 <CLogger::Get()>
   88acc:	f000008c 	adrp	x12, 9b000 <vtable for CSoftSerialDevice+0x90>
   88ad0:	f000008d 	adrp	x13, 9b000 <vtable for CSoftSerialDevice+0x90>
   88ad4:	91146183 	add	x3, x12, #0x518
   88ad8:	911421a1 	add	x1, x13, #0x508
   88adc:	52800022 	mov	w2, #0x1                   	// #1
   88ae0:	94000bc4 	bl	8b9f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   88ae4:	52800000 	mov	w0, #0x0                   	// #0
   88ae8:	a94053f3 	ldp	x19, x20, [sp]
   88aec:	f9400ffe 	ldr	x30, [sp, #24]
   88af0:	910903ff 	add	sp, sp, #0x240
   88af4:	d65f03c0 	ret
   88af8:	79447fe1 	ldrh	w1, [sp, #574]
   88afc:	52954aa0 	mov	w0, #0xaa55                	// #43605
   88b00:	6b00003f 	cmp	w1, w0
   88b04:	54001b21 	b.ne	88e68 <CPartitionManager::Initialize()+0x3e8>  // b.any
   88b08:	39480be6 	ldrb	w6, [sp, #514]
   88b0c:	7103bcdf 	cmp	w6, #0xef
   88b10:	7a4f18c4 	ccmp	w6, #0xf, #0x4, ne  // ne = any
   88b14:	1a9f17e7 	cset	w7, eq  // eq = none
   88b18:	710000df 	cmp	w6, #0x0
   88b1c:	7a4518c4 	ccmp	w6, #0x5, #0x4, ne  // ne = any
   88b20:	1a9f14e8 	csinc	w8, w7, wzr, ne  // ne = any
   88b24:	34000408 	cbz	w8, 88ba4 <CPartitionManager::Initialize()+0x124>
   88b28:	52800014 	mov	w20, #0x0                   	// #0
   88b2c:	39484bf0 	ldrb	w16, [sp, #530]
   88b30:	7103be1f 	cmp	w16, #0xef
   88b34:	7a4f1a04 	ccmp	w16, #0xf, #0x4, ne  // ne = any
   88b38:	1a9f17f1 	cset	w17, eq  // eq = none
   88b3c:	7100021f 	cmp	w16, #0x0
   88b40:	7a451a04 	ccmp	w16, #0x5, #0x4, ne  // ne = any
   88b44:	1a9f1632 	csinc	w18, w17, wzr, ne  // ne = any
   88b48:	34000832 	cbz	w18, 88c4c <CPartitionManager::Initialize()+0x1cc>
   88b4c:	39488be0 	ldrb	w0, [sp, #546]
   88b50:	7103bc1f 	cmp	w0, #0xef
   88b54:	7a4f1804 	ccmp	w0, #0xf, #0x4, ne  // ne = any
   88b58:	1a9f17e7 	cset	w7, eq  // eq = none
   88b5c:	7100001f 	cmp	w0, #0x0
   88b60:	7a451804 	ccmp	w0, #0x5, #0x4, ne  // ne = any
   88b64:	1a9f14e8 	csinc	w8, w7, wzr, ne  // ne = any
   88b68:	34000c68 	cbz	w8, 88cf4 <CPartitionManager::Initialize()+0x274>
   88b6c:	3948cbf0 	ldrb	w16, [sp, #562]
   88b70:	7103be1f 	cmp	w16, #0xef
   88b74:	7a4f1a04 	ccmp	w16, #0xf, #0x4, ne  // ne = any
   88b78:	1a9f17f1 	cset	w17, eq  // eq = none
   88b7c:	7100021f 	cmp	w16, #0x0
   88b80:	7a451a04 	ccmp	w16, #0x5, #0x4, ne  // ne = any
   88b84:	1a9f1632 	csinc	w18, w17, wzr, ne  // ne = any
   88b88:	340010b2 	cbz	w18, 88d9c <CPartitionManager::Initialize()+0x31c>
   88b8c:	340015d4 	cbz	w20, 88e44 <CPartitionManager::Initialize()+0x3c4>
   88b90:	52800020 	mov	w0, #0x1                   	// #1
   88b94:	a94053f3 	ldp	x19, x20, [sp]
   88b98:	f9400ffe 	ldr	x30, [sp, #24]
   88b9c:	910903ff 	add	sp, sp, #0x240
   88ba0:	d65f03c0 	ret
   88ba4:	910803e9 	add	x9, sp, #0x200
   88ba8:	b840612a 	ldur	w10, [x9, #6]
   88bac:	34fffbea 	cbz	w10, 88b28 <CPartitionManager::Initialize()+0xa8>
   88bb0:	910803eb 	add	x11, sp, #0x200
   88bb4:	b840a16c 	ldur	w12, [x11, #10]
   88bb8:	34fffb8c 	cbz	w12, 88b28 <CPartitionManager::Initialize()+0xa8>
   88bbc:	f940166d 	ldr	x13, [x19, #40]
   88bc0:	f9000bf5 	str	x21, [sp, #16]
   88bc4:	b50016ad 	cbnz	x13, 88e98 <CPartitionManager::Initialize()+0x418>
   88bc8:	d2800700 	mov	x0, #0x38                  	// #56
   88bcc:	52800034 	mov	w20, #0x1                   	// #1
   88bd0:	94002f98 	bl	94a30 <operator new(unsigned long)>
   88bd4:	910803ee 	add	x14, sp, #0x200
   88bd8:	f9400261 	ldr	x1, [x19]
   88bdc:	aa0003f5 	mov	x21, x0
   88be0:	b84061c2 	ldur	w2, [x14, #6]
   88be4:	b840a1c3 	ldur	w3, [x14, #10]
   88be8:	9400011e 	bl	89060 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>
   88bec:	910083e0 	add	x0, sp, #0x20
   88bf0:	f9001675 	str	x21, [x19, #40]
   88bf4:	94001c0f 	bl	8fc30 <CString::CString()>
   88bf8:	91002260 	add	x0, x19, #0x8
   88bfc:	94001c5d 	bl	8fd70 <CString::operator char const*() const>
   88c00:	f000008f 	adrp	x15, 9b000 <vtable for CSoftSerialDevice+0x90>
   88c04:	aa0003e2 	mov	x2, x0
   88c08:	911441e1 	add	x1, x15, #0x510
   88c0c:	2a1403e3 	mov	w3, w20
   88c10:	910083e0 	add	x0, sp, #0x20
   88c14:	94001d8f 	bl	90250 <CString::Format(char const*, ...)>
   88c18:	94000506 	bl	8a030 <CDeviceNameService::Get()>
   88c1c:	aa0003f5 	mov	x21, x0
   88c20:	910083e0 	add	x0, sp, #0x20
   88c24:	94001c53 	bl	8fd70 <CString::operator char const*() const>
   88c28:	f9401662 	ldr	x2, [x19, #40]
   88c2c:	aa0003e1 	mov	x1, x0
   88c30:	52800023 	mov	w3, #0x1                   	// #1
   88c34:	aa1503e0 	mov	x0, x21
   88c38:	9400039e 	bl	89ab0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   88c3c:	910083e0 	add	x0, sp, #0x20
   88c40:	94001c38 	bl	8fd20 <CString::~CString()>
   88c44:	f9400bf5 	ldr	x21, [sp, #16]
   88c48:	17ffffb9 	b	88b2c <CPartitionManager::Initialize()+0xac>
   88c4c:	910803fe 	add	x30, sp, #0x200
   88c50:	b84163c2 	ldur	w2, [x30, #22]
   88c54:	34fff7c2 	cbz	w2, 88b4c <CPartitionManager::Initialize()+0xcc>
   88c58:	910803e3 	add	x3, sp, #0x200
   88c5c:	b841a064 	ldur	w4, [x3, #26]
   88c60:	34fff764 	cbz	w4, 88b4c <CPartitionManager::Initialize()+0xcc>
   88c64:	f9401a65 	ldr	x5, [x19, #48]
   88c68:	f9000bf5 	str	x21, [sp, #16]
   88c6c:	b5001165 	cbnz	x5, 88e98 <CPartitionManager::Initialize()+0x418>
   88c70:	d2800700 	mov	x0, #0x38                  	// #56
   88c74:	11000694 	add	w20, w20, #0x1
   88c78:	94002f6e 	bl	94a30 <operator new(unsigned long)>
   88c7c:	910803e1 	add	x1, sp, #0x200
   88c80:	aa0003f5 	mov	x21, x0
   88c84:	b8416022 	ldur	w2, [x1, #22]
   88c88:	b841a023 	ldur	w3, [x1, #26]
   88c8c:	f9400261 	ldr	x1, [x19]
   88c90:	940000f4 	bl	89060 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>
   88c94:	910083e0 	add	x0, sp, #0x20
   88c98:	f9001a75 	str	x21, [x19, #48]
   88c9c:	94001be5 	bl	8fc30 <CString::CString()>
   88ca0:	91002260 	add	x0, x19, #0x8
   88ca4:	94001c33 	bl	8fd70 <CString::operator char const*() const>
   88ca8:	f0000086 	adrp	x6, 9b000 <vtable for CSoftSerialDevice+0x90>
   88cac:	aa0003e2 	mov	x2, x0
   88cb0:	911440c1 	add	x1, x6, #0x510
   88cb4:	2a1403e3 	mov	w3, w20
   88cb8:	910083e0 	add	x0, sp, #0x20
   88cbc:	94001d65 	bl	90250 <CString::Format(char const*, ...)>
   88cc0:	940004dc 	bl	8a030 <CDeviceNameService::Get()>
   88cc4:	aa0003f5 	mov	x21, x0
   88cc8:	910083e0 	add	x0, sp, #0x20
   88ccc:	94001c29 	bl	8fd70 <CString::operator char const*() const>
   88cd0:	f9401a62 	ldr	x2, [x19, #48]
   88cd4:	aa0003e1 	mov	x1, x0
   88cd8:	52800023 	mov	w3, #0x1                   	// #1
   88cdc:	aa1503e0 	mov	x0, x21
   88ce0:	94000374 	bl	89ab0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   88ce4:	910083e0 	add	x0, sp, #0x20
   88ce8:	94001c0e 	bl	8fd20 <CString::~CString()>
   88cec:	f9400bf5 	ldr	x21, [sp, #16]
   88cf0:	17ffff97 	b	88b4c <CPartitionManager::Initialize()+0xcc>
   88cf4:	910803e9 	add	x9, sp, #0x200
   88cf8:	b842612a 	ldur	w10, [x9, #38]
   88cfc:	34fff38a 	cbz	w10, 88b6c <CPartitionManager::Initialize()+0xec>
   88d00:	910803eb 	add	x11, sp, #0x200
   88d04:	b842a16c 	ldur	w12, [x11, #42]
   88d08:	34fff32c 	cbz	w12, 88b6c <CPartitionManager::Initialize()+0xec>
   88d0c:	f9401e6d 	ldr	x13, [x19, #56]
   88d10:	f9000bf5 	str	x21, [sp, #16]
   88d14:	b5000c2d 	cbnz	x13, 88e98 <CPartitionManager::Initialize()+0x418>
   88d18:	d2800700 	mov	x0, #0x38                  	// #56
   88d1c:	11000694 	add	w20, w20, #0x1
   88d20:	94002f44 	bl	94a30 <operator new(unsigned long)>
   88d24:	910803ee 	add	x14, sp, #0x200
   88d28:	f9400261 	ldr	x1, [x19]
   88d2c:	aa0003f5 	mov	x21, x0
   88d30:	b84261c2 	ldur	w2, [x14, #38]
   88d34:	b842a1c3 	ldur	w3, [x14, #42]
   88d38:	940000ca 	bl	89060 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>
   88d3c:	910083e0 	add	x0, sp, #0x20
   88d40:	f9001e75 	str	x21, [x19, #56]
   88d44:	94001bbb 	bl	8fc30 <CString::CString()>
   88d48:	91002260 	add	x0, x19, #0x8
   88d4c:	94001c09 	bl	8fd70 <CString::operator char const*() const>
   88d50:	f000008f 	adrp	x15, 9b000 <vtable for CSoftSerialDevice+0x90>
   88d54:	aa0003e2 	mov	x2, x0
   88d58:	911441e1 	add	x1, x15, #0x510
   88d5c:	2a1403e3 	mov	w3, w20
   88d60:	910083e0 	add	x0, sp, #0x20
   88d64:	94001d3b 	bl	90250 <CString::Format(char const*, ...)>
   88d68:	940004b2 	bl	8a030 <CDeviceNameService::Get()>
   88d6c:	aa0003f5 	mov	x21, x0
   88d70:	910083e0 	add	x0, sp, #0x20
   88d74:	94001bff 	bl	8fd70 <CString::operator char const*() const>
   88d78:	f9401e62 	ldr	x2, [x19, #56]
   88d7c:	aa0003e1 	mov	x1, x0
   88d80:	52800023 	mov	w3, #0x1                   	// #1
   88d84:	aa1503e0 	mov	x0, x21
   88d88:	9400034a 	bl	89ab0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   88d8c:	910083e0 	add	x0, sp, #0x20
   88d90:	94001be4 	bl	8fd20 <CString::~CString()>
   88d94:	f9400bf5 	ldr	x21, [sp, #16]
   88d98:	17ffff75 	b	88b6c <CPartitionManager::Initialize()+0xec>
   88d9c:	910803fe 	add	x30, sp, #0x200
   88da0:	b84363c2 	ldur	w2, [x30, #54]
   88da4:	34ffef42 	cbz	w2, 88b8c <CPartitionManager::Initialize()+0x10c>
   88da8:	910803e3 	add	x3, sp, #0x200
   88dac:	b843a064 	ldur	w4, [x3, #58]
   88db0:	34ffeee4 	cbz	w4, 88b8c <CPartitionManager::Initialize()+0x10c>
   88db4:	f9402265 	ldr	x5, [x19, #64]
   88db8:	f9000bf5 	str	x21, [sp, #16]
   88dbc:	b50006e5 	cbnz	x5, 88e98 <CPartitionManager::Initialize()+0x418>
   88dc0:	d2800700 	mov	x0, #0x38                  	// #56
   88dc4:	94002f1b 	bl	94a30 <operator new(unsigned long)>
   88dc8:	910803e1 	add	x1, sp, #0x200
   88dcc:	aa0003f5 	mov	x21, x0
   88dd0:	b8436022 	ldur	w2, [x1, #54]
   88dd4:	b843a023 	ldur	w3, [x1, #58]
   88dd8:	f9400261 	ldr	x1, [x19]
   88ddc:	940000a1 	bl	89060 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>
   88de0:	910083e0 	add	x0, sp, #0x20
   88de4:	f9002275 	str	x21, [x19, #64]
   88de8:	94001b92 	bl	8fc30 <CString::CString()>
   88dec:	91002260 	add	x0, x19, #0x8
   88df0:	94001be0 	bl	8fd70 <CString::operator char const*() const>
   88df4:	f0000087 	adrp	x7, 9b000 <vtable for CSoftSerialDevice+0x90>
   88df8:	aa0003e2 	mov	x2, x0
   88dfc:	911440e1 	add	x1, x7, #0x510
   88e00:	11000683 	add	w3, w20, #0x1
   88e04:	910083e0 	add	x0, sp, #0x20
   88e08:	94001d12 	bl	90250 <CString::Format(char const*, ...)>
   88e0c:	94000489 	bl	8a030 <CDeviceNameService::Get()>
   88e10:	aa0003f4 	mov	x20, x0
   88e14:	910083e0 	add	x0, sp, #0x20
   88e18:	94001bd6 	bl	8fd70 <CString::operator char const*() const>
   88e1c:	f9402262 	ldr	x2, [x19, #64]
   88e20:	aa0003e1 	mov	x1, x0
   88e24:	52800023 	mov	w3, #0x1                   	// #1
   88e28:	aa1403e0 	mov	x0, x20
   88e2c:	94000321 	bl	89ab0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   88e30:	910083e0 	add	x0, sp, #0x20
   88e34:	94001bbb 	bl	8fd20 <CString::~CString()>
   88e38:	52800020 	mov	w0, #0x1                   	// #1
   88e3c:	f9400bf5 	ldr	x21, [sp, #16]
   88e40:	17ffff2a 	b	88ae8 <CPartitionManager::Initialize()+0x68>
   88e44:	94000baf 	bl	8bd00 <CLogger::Get()>
   88e48:	f0000088 	adrp	x8, 9b000 <vtable for CSoftSerialDevice+0x90>
   88e4c:	f0000089 	adrp	x9, 9b000 <vtable for CSoftSerialDevice+0x90>
   88e50:	9115c103 	add	x3, x8, #0x570
   88e54:	91142121 	add	x1, x9, #0x508
   88e58:	52800042 	mov	w2, #0x2                   	// #2
   88e5c:	94000ae5 	bl	8b9f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   88e60:	52800020 	mov	w0, #0x1                   	// #1
   88e64:	17ffff4c 	b	88b94 <CPartitionManager::Initialize()+0x114>
   88e68:	94000ba6 	bl	8bd00 <CLogger::Get()>
   88e6c:	f000008a 	adrp	x10, 9b000 <vtable for CSoftSerialDevice+0x90>
   88e70:	f000008b 	adrp	x11, 9b000 <vtable for CSoftSerialDevice+0x90>
   88e74:	9114a143 	add	x3, x10, #0x528
   88e78:	91142161 	add	x1, x11, #0x508
   88e7c:	52800042 	mov	w2, #0x2                   	// #2
   88e80:	94000adc 	bl	8b9f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   88e84:	52800020 	mov	w0, #0x1                   	// #1
   88e88:	a94053f3 	ldp	x19, x20, [sp]
   88e8c:	f9400ffe 	ldr	x30, [sp, #24]
   88e90:	910903ff 	add	sp, sp, #0x240
   88e94:	d65f03c0 	ret
   88e98:	f0000093 	adrp	x19, 9b000 <vtable for CSoftSerialDevice+0x90>
   88e9c:	f0000086 	adrp	x6, 9b000 <vtable for CSoftSerialDevice+0x90>
   88ea0:	91150261 	add	x1, x19, #0x540
   88ea4:	911560c0 	add	x0, x6, #0x558
   88ea8:	52800f02 	mov	w2, #0x78                  	// #120
   88eac:	94000131 	bl	89370 <assertion_failed>

0000000000088eb0 <CPartition::~CPartition()>:
   88eb0:	f0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   88eb4:	9116a023 	add	x3, x1, #0x5a8
   88eb8:	f9000c1f 	str	xzr, [x0, #24]
   88ebc:	f9000003 	str	x3, [x0]
   88ec0:	140002a4 	b	89950 <CDevice::~CDevice()>
   88ec4:	d503201f 	nop
   88ec8:	d503201f 	nop
   88ecc:	d503201f 	nop

0000000000088ed0 <CPartition::~CPartition()>:
   88ed0:	f0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   88ed4:	9116a022 	add	x2, x1, #0x5a8
   88ed8:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   88edc:	aa0003f3 	mov	x19, x0
   88ee0:	f9000002 	str	x2, [x0]
   88ee4:	f9000c1f 	str	xzr, [x0, #24]
   88ee8:	9400029a 	bl	89950 <CDevice::~CDevice()>
   88eec:	aa1303e0 	mov	x0, x19
   88ef0:	d2800701 	mov	x1, #0x38                  	// #56
   88ef4:	a8c17bf3 	ldp	x19, x30, [sp], #16
   88ef8:	14002ef2 	b	94ac0 <operator delete(void*, unsigned long)>
   88efc:	d503201f 	nop

0000000000088f00 <CPartition::Read(void*, unsigned long)>:
   88f00:	3940c004 	ldrb	w4, [x0, #48]
   88f04:	35000264 	cbnz	w4, 88f50 <CPartition::Read(void*, unsigned long)+0x50>
   88f08:	f9401405 	ldr	x5, [x0, #40]
   88f0c:	9107fc46 	add	x6, x2, #0x1ff
   88f10:	b9402407 	ldr	w7, [x0, #36]
   88f14:	8b0500c8 	add	x8, x6, x5
   88f18:	eb4824ff 	cmp	x7, x8, lsr #9
   88f1c:	540001a3 	b.cc	88f50 <CPartition::Read(void*, unsigned long)+0x50>  // b.lo, b.ul, b.last
   88f20:	f9400c00 	ldr	x0, [x0, #24]
   88f24:	b4000080 	cbz	x0, 88f34 <CPartition::Read(void*, unsigned long)+0x34>
   88f28:	f9400009 	ldr	x9, [x0]
   88f2c:	f940092a 	ldr	x10, [x9, #16]
   88f30:	d61f0140 	br	x10
   88f34:	f0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   88f38:	f0000080 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   88f3c:	f81f0ffe 	str	x30, [sp, #-16]!
   88f40:	91176021 	add	x1, x1, #0x5d8
   88f44:	9117a000 	add	x0, x0, #0x5e8
   88f48:	528006a2 	mov	w2, #0x35                  	// #53
   88f4c:	94000109 	bl	89370 <assertion_failed>
   88f50:	12800000 	mov	w0, #0xffffffff            	// #-1
   88f54:	d65f03c0 	ret
   88f58:	d503201f 	nop
   88f5c:	d503201f 	nop

0000000000088f60 <CPartition::Write(void const*, unsigned long)>:
   88f60:	3940c004 	ldrb	w4, [x0, #48]
   88f64:	35000264 	cbnz	w4, 88fb0 <CPartition::Write(void const*, unsigned long)+0x50>
   88f68:	f9401405 	ldr	x5, [x0, #40]
   88f6c:	9107fc46 	add	x6, x2, #0x1ff
   88f70:	b9402407 	ldr	w7, [x0, #36]
   88f74:	8b0500c8 	add	x8, x6, x5
   88f78:	eb4824ff 	cmp	x7, x8, lsr #9
   88f7c:	540001a3 	b.cc	88fb0 <CPartition::Write(void const*, unsigned long)+0x50>  // b.lo, b.ul, b.last
   88f80:	f9400c00 	ldr	x0, [x0, #24]
   88f84:	b4000080 	cbz	x0, 88f94 <CPartition::Write(void const*, unsigned long)+0x34>
   88f88:	f9400009 	ldr	x9, [x0]
   88f8c:	f9400d2a 	ldr	x10, [x9, #24]
   88f90:	d61f0140 	br	x10
   88f94:	f0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   88f98:	f0000080 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   88f9c:	f81f0ffe 	str	x30, [sp, #-16]!
   88fa0:	91176021 	add	x1, x1, #0x5d8
   88fa4:	9117a000 	add	x0, x0, #0x5e8
   88fa8:	528008e2 	mov	w2, #0x47                  	// #71
   88fac:	940000f1 	bl	89370 <assertion_failed>
   88fb0:	12800000 	mov	w0, #0xffffffff            	// #-1
   88fb4:	d65f03c0 	ret
   88fb8:	d503201f 	nop
   88fbc:	d503201f 	nop

0000000000088fc0 <CPartition::Seek(unsigned long)>:
   88fc0:	52800022 	mov	w2, #0x1                   	// #1
   88fc4:	f240203f 	tst	x1, #0x1ff
   88fc8:	3900c002 	strb	w2, [x0, #48]
   88fcc:	54000381 	b.ne	8903c <CPartition::Seek(unsigned long)+0x7c>  // b.any
   88fd0:	b9402403 	ldr	w3, [x0, #36]
   88fd4:	eb41247f 	cmp	x3, x1, lsr #9
   88fd8:	54000329 	b.ls	8903c <CPartition::Seek(unsigned long)+0x7c>  // b.plast
   88fdc:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   88fe0:	aa0003f3 	mov	x19, x0
   88fe4:	aa0103f4 	mov	x20, x1
   88fe8:	a9017bf5 	stp	x21, x30, [sp, #16]
   88fec:	b9402015 	ldr	w21, [x0, #32]
   88ff0:	f9400c00 	ldr	x0, [x0, #24]
   88ff4:	8b152435 	add	x21, x1, x21, lsl #9
   88ff8:	b4000260 	cbz	x0, 89044 <CPartition::Seek(unsigned long)+0x84>
   88ffc:	f9400004 	ldr	x4, [x0]
   89000:	aa1503e1 	mov	x1, x21
   89004:	f9401085 	ldr	x5, [x4, #32]
   89008:	d63f00a0 	blr	x5
   8900c:	eb15001f 	cmp	x0, x21
   89010:	540000e1 	b.ne	8902c <CPartition::Seek(unsigned long)+0x6c>  // b.any
   89014:	aa1403e0 	mov	x0, x20
   89018:	f9001674 	str	x20, [x19, #40]
   8901c:	3900c27f 	strb	wzr, [x19, #48]
   89020:	a9417bf5 	ldp	x21, x30, [sp, #16]
   89024:	a8c253f3 	ldp	x19, x20, [sp], #32
   89028:	d65f03c0 	ret
   8902c:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
   89030:	a9417bf5 	ldp	x21, x30, [sp, #16]
   89034:	a8c253f3 	ldp	x19, x20, [sp], #32
   89038:	d65f03c0 	ret
   8903c:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
   89040:	d65f03c0 	ret
   89044:	d0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   89048:	d0000080 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   8904c:	91176021 	add	x1, x1, #0x5d8
   89050:	9117a000 	add	x0, x0, #0x5e8
   89054:	52800b22 	mov	w2, #0x59                  	// #89
   89058:	940000c6 	bl	89370 <assertion_failed>
   8905c:	d503201f 	nop

0000000000089060 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>:
   89060:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   89064:	aa0003f3 	mov	x19, x0
   89068:	aa0103f4 	mov	x20, x1
   8906c:	a9015bf5 	stp	x21, x22, [sp, #16]
   89070:	2a0203f6 	mov	w22, w2
   89074:	2a0303f5 	mov	w21, w3
   89078:	f90013fe 	str	x30, [sp, #32]
   8907c:	94000259 	bl	899e0 <CDevice::CDevice()>
   89080:	d0000080 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   89084:	9116a002 	add	x2, x0, #0x5a8
   89088:	f9000e74 	str	x20, [x19, #24]
   8908c:	52800021 	mov	w1, #0x1                   	// #1
   89090:	29045676 	stp	w22, w21, [x19, #32]
   89094:	f9000262 	str	x2, [x19]
   89098:	f900167f 	str	xzr, [x19, #40]
   8909c:	3900c261 	strb	w1, [x19, #48]
   890a0:	b40000b4 	cbz	x20, 890b4 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x54>
   890a4:	a9415bf5 	ldp	x21, x22, [sp, #16]
   890a8:	f94013fe 	ldr	x30, [sp, #32]
   890ac:	a8c353f3 	ldp	x19, x20, [sp], #48
   890b0:	d65f03c0 	ret
   890b4:	d0000083 	adrp	x3, 9b000 <vtable for CSoftSerialDevice+0x90>
   890b8:	d0000084 	adrp	x4, 9b000 <vtable for CSoftSerialDevice+0x90>
   890bc:	91176061 	add	x1, x3, #0x5d8
   890c0:	9117a080 	add	x0, x4, #0x5e8
   890c4:	528003e2 	mov	w2, #0x1f                  	// #31
   890c8:	940000aa 	bl	89370 <assertion_failed>
   890cc:	00000000 	.inst	0x00000000 ; undefined

00000000000890d0 <CActLED::CActLED(bool)>:
   890d0:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   890d4:	aa0003f4 	mov	x20, x0
   890d8:	90016ee0 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   890dc:	a9015bf5 	stp	x21, x22, [sp, #16]
   890e0:	12001c35 	and	w21, w1, #0xff
   890e4:	f90013fe 	str	x30, [sp, #32]
   890e8:	a9007e9f 	stp	xzr, xzr, [x20]
   890ec:	f9013014 	str	x20, [x0, #608]
   890f0:	94000fd7 	bl	8d04c <CMachineInfo::Get()>
   890f4:	94000e26 	bl	8c98c <CMachineInfo::GetActLEDInfo() const>
   890f8:	2a0003f3 	mov	w19, w0
   890fc:	36380213 	tbz	w19, #7, 8913c <CActLED::CActLED(bool)+0x6c>
   89100:	d2800300 	mov	x0, #0x18                  	// #24
   89104:	94002e4b 	bl	94a30 <operator new(unsigned long)>
   89108:	2a1503e2 	mov	w2, w21
   8910c:	12001661 	and	w1, w19, #0x3f
   89110:	aa0003f6 	mov	x22, x0
   89114:	94002cc7 	bl	94430 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>
   89118:	d27a0261 	eor	x1, x19, #0x40
   8911c:	aa1403e0 	mov	x0, x20
   89120:	f9000696 	str	x22, [x20, #8]
   89124:	d3461822 	ubfx	x2, x1, #6, #1
   89128:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8912c:	39004282 	strb	w2, [x20, #16]
   89130:	f94013fe 	ldr	x30, [sp, #32]
   89134:	a8c353f3 	ldp	x19, x20, [sp], #48
   89138:	14000022 	b	891c0 <CActLED::Off()>
   8913c:	d2800900 	mov	x0, #0x48                  	// #72
   89140:	94002e3c 	bl	94a30 <operator new(unsigned long)>
   89144:	12001661 	and	w1, w19, #0x3f
   89148:	d2800003 	mov	x3, #0x0                   	// #0
   8914c:	52800022 	mov	w2, #0x1                   	// #1
   89150:	aa0003f6 	mov	x22, x0
   89154:	940004ef 	bl	8a510 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   89158:	d27a0261 	eor	x1, x19, #0x40
   8915c:	aa1403e0 	mov	x0, x20
   89160:	f9000296 	str	x22, [x20]
   89164:	d3461822 	ubfx	x2, x1, #6, #1
   89168:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8916c:	39004282 	strb	w2, [x20, #16]
   89170:	f94013fe 	ldr	x30, [sp, #32]
   89174:	a8c353f3 	ldp	x19, x20, [sp], #48
   89178:	14000012 	b	891c0 <CActLED::Off()>
   8917c:	d503201f 	nop

0000000000089180 <CActLED::~CActLED()>:
   89180:	90016ee0 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   89184:	f901301f 	str	xzr, [x0, #608]
   89188:	d65f03c0 	ret
   8918c:	d503201f 	nop

0000000000089190 <CActLED::On()>:
   89190:	f9400002 	ldr	x2, [x0]
   89194:	b4000082 	cbz	x2, 891a4 <CActLED::On()+0x14>
   89198:	39404001 	ldrb	w1, [x0, #16]
   8919c:	aa0203e0 	mov	x0, x2
   891a0:	1400058c 	b	8a7d0 <CGPIOPin::Write(unsigned int)>
   891a4:	f9400403 	ldr	x3, [x0, #8]
   891a8:	b4000083 	cbz	x3, 891b8 <CActLED::On()+0x28>
   891ac:	39404001 	ldrb	w1, [x0, #16]
   891b0:	aa0303e0 	mov	x0, x3
   891b4:	14002cf7 	b	94590 <CVirtualGPIOPin::Write(unsigned int)>
   891b8:	d65f03c0 	ret
   891bc:	d503201f 	nop

00000000000891c0 <CActLED::Off()>:
   891c0:	f9400002 	ldr	x2, [x0]
   891c4:	b40000a2 	cbz	x2, 891d8 <CActLED::Off()+0x18>
   891c8:	39404004 	ldrb	w4, [x0, #16]
   891cc:	aa0203e0 	mov	x0, x2
   891d0:	52000081 	eor	w1, w4, #0x1
   891d4:	1400057f 	b	8a7d0 <CGPIOPin::Write(unsigned int)>
   891d8:	f9400403 	ldr	x3, [x0, #8]
   891dc:	b40000a3 	cbz	x3, 891f0 <CActLED::Off()+0x30>
   891e0:	39404001 	ldrb	w1, [x0, #16]
   891e4:	aa0303e0 	mov	x0, x3
   891e8:	52000021 	eor	w1, w1, #0x1
   891ec:	14002ce9 	b	94590 <CVirtualGPIOPin::Write(unsigned int)>
   891f0:	d65f03c0 	ret
   891f4:	d503201f 	nop
   891f8:	d503201f 	nop
   891fc:	d503201f 	nop

0000000000089200 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
   89200:	34000ae1 	cbz	w1, 8935c <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x15c>
   89204:	a9bc53f3 	stp	x19, x20, [sp, #-64]!
   89208:	2a0303f4 	mov	w20, w3
   8920c:	aa0003f3 	mov	x19, x0
   89210:	a9015bf5 	stp	x21, x22, [sp, #16]
   89214:	2a0203f5 	mov	w21, w2
   89218:	52800056 	mov	w22, #0x2                   	// #2
   8921c:	a90263f7 	stp	x23, x24, [sp, #32]
   89220:	2a0103f7 	mov	w23, w1
   89224:	51000438 	sub	w24, w1, #0x1
   89228:	12000718 	and	w24, w24, #0x3
   8922c:	f9001bfe 	str	x30, [sp, #48]
   89230:	97ffffd8 	bl	89190 <CActLED::On()>
   89234:	2a1503e0 	mov	w0, w21
   89238:	940028aa 	bl	934e0 <CTimer::SimpleMsDelay(unsigned int)>
   8923c:	aa1303e0 	mov	x0, x19
   89240:	97ffffe0 	bl	891c0 <CActLED::Off()>
   89244:	2a1403e0 	mov	w0, w20
   89248:	940028a6 	bl	934e0 <CTimer::SimpleMsDelay(unsigned int)>
   8924c:	6b1602ff 	cmp	w23, w22
   89250:	540007c3 	b.cc	89348 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x148>  // b.lo, b.ul, b.last
   89254:	34000458 	cbz	w24, 892dc <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0xdc>
   89258:	7100071f 	cmp	w24, #0x1
   8925c:	540002a0 	b.eq	892b0 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0xb0>  // b.none
   89260:	71000b1f 	cmp	w24, #0x2
   89264:	54000140 	b.eq	8928c <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x8c>  // b.none
   89268:	aa1303e0 	mov	x0, x19
   8926c:	52800076 	mov	w22, #0x3                   	// #3
   89270:	97ffffc8 	bl	89190 <CActLED::On()>
   89274:	2a1503e0 	mov	w0, w21
   89278:	9400289a 	bl	934e0 <CTimer::SimpleMsDelay(unsigned int)>
   8927c:	aa1303e0 	mov	x0, x19
   89280:	97ffffd0 	bl	891c0 <CActLED::Off()>
   89284:	2a1403e0 	mov	w0, w20
   89288:	94002896 	bl	934e0 <CTimer::SimpleMsDelay(unsigned int)>
   8928c:	aa1303e0 	mov	x0, x19
   89290:	110006d6 	add	w22, w22, #0x1
   89294:	97ffffbf 	bl	89190 <CActLED::On()>
   89298:	2a1503e0 	mov	w0, w21
   8929c:	94002891 	bl	934e0 <CTimer::SimpleMsDelay(unsigned int)>
   892a0:	aa1303e0 	mov	x0, x19
   892a4:	97ffffc7 	bl	891c0 <CActLED::Off()>
   892a8:	2a1403e0 	mov	w0, w20
   892ac:	9400288d 	bl	934e0 <CTimer::SimpleMsDelay(unsigned int)>
   892b0:	aa1303e0 	mov	x0, x19
   892b4:	110006d6 	add	w22, w22, #0x1
   892b8:	97ffffb6 	bl	89190 <CActLED::On()>
   892bc:	2a1503e0 	mov	w0, w21
   892c0:	94002888 	bl	934e0 <CTimer::SimpleMsDelay(unsigned int)>
   892c4:	aa1303e0 	mov	x0, x19
   892c8:	97ffffbe 	bl	891c0 <CActLED::Off()>
   892cc:	2a1403e0 	mov	w0, w20
   892d0:	94002884 	bl	934e0 <CTimer::SimpleMsDelay(unsigned int)>
   892d4:	6b1602ff 	cmp	w23, w22
   892d8:	54000383 	b.cc	89348 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x148>  // b.lo, b.ul, b.last
   892dc:	aa1303e0 	mov	x0, x19
   892e0:	110012d6 	add	w22, w22, #0x4
   892e4:	97ffffab 	bl	89190 <CActLED::On()>
   892e8:	2a1503e0 	mov	w0, w21
   892ec:	9400287d 	bl	934e0 <CTimer::SimpleMsDelay(unsigned int)>
   892f0:	aa1303e0 	mov	x0, x19
   892f4:	97ffffb3 	bl	891c0 <CActLED::Off()>
   892f8:	2a1403e0 	mov	w0, w20
   892fc:	94002879 	bl	934e0 <CTimer::SimpleMsDelay(unsigned int)>
   89300:	aa1303e0 	mov	x0, x19
   89304:	97ffffa3 	bl	89190 <CActLED::On()>
   89308:	2a1503e0 	mov	w0, w21
   8930c:	94002875 	bl	934e0 <CTimer::SimpleMsDelay(unsigned int)>
   89310:	aa1303e0 	mov	x0, x19
   89314:	97ffffab 	bl	891c0 <CActLED::Off()>
   89318:	2a1403e0 	mov	w0, w20
   8931c:	94002871 	bl	934e0 <CTimer::SimpleMsDelay(unsigned int)>
   89320:	aa1303e0 	mov	x0, x19
   89324:	97ffff9b 	bl	89190 <CActLED::On()>
   89328:	2a1503e0 	mov	w0, w21
   8932c:	9400286d 	bl	934e0 <CTimer::SimpleMsDelay(unsigned int)>
   89330:	aa1303e0 	mov	x0, x19
   89334:	97ffffa3 	bl	891c0 <CActLED::Off()>
   89338:	2a1403e0 	mov	w0, w20
   8933c:	94002869 	bl	934e0 <CTimer::SimpleMsDelay(unsigned int)>
   89340:	aa1303e0 	mov	x0, x19
   89344:	17ffffdd 	b	892b8 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0xb8>
   89348:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8934c:	a94263f7 	ldp	x23, x24, [sp, #32]
   89350:	f9401bfe 	ldr	x30, [sp, #48]
   89354:	a8c453f3 	ldp	x19, x20, [sp], #64
   89358:	d65f03c0 	ret
   8935c:	d65f03c0 	ret

0000000000089360 <CActLED::Get()>:
   89360:	90016ee0 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   89364:	f9413000 	ldr	x0, [x0, #608]
   89368:	d65f03c0 	ret
   8936c:	00000000 	.inst	0x00000000 ; undefined

0000000000089370 <assertion_failed>:
   89370:	a9bb7bf3 	stp	x19, x30, [sp, #-80]!
   89374:	b9001fe2 	str	w2, [sp, #28]
   89378:	a90203e1 	stp	x1, x0, [sp, #32]
   8937c:	910003f3 	mov	x19, sp
   89380:	9400350c 	bl	967b0 <CInterruptSystem::DisableFIQ()>
   89384:	d50341ff 	msr	daifclr, #0x1
   89388:	9100c3e0 	add	x0, sp, #0x30
   8938c:	94001a29 	bl	8fc30 <CString::CString()>
   89390:	d0000085 	adrp	x5, 9b000 <vtable for CSoftSerialDevice+0x90>
   89394:	b9401fe3 	ldr	w3, [sp, #28]
   89398:	9100c3e0 	add	x0, sp, #0x30
   8939c:	9117e0a1 	add	x1, x5, #0x5f8
   893a0:	f94013e2 	ldr	x2, [sp, #32]
   893a4:	94001bab 	bl	90250 <CString::Format(char const*, ...)>
   893a8:	9100c3e0 	add	x0, sp, #0x30
   893ac:	94001a71 	bl	8fd70 <CString::operator char const*() const>
   893b0:	aa0003e1 	mov	x1, x0
   893b4:	aa1303e0 	mov	x0, x19
   893b8:	940000ce 	bl	896f0 <debug_stacktrace(unsigned long const*, char const*)>
   893bc:	94000a51 	bl	8bd00 <CLogger::Get()>
   893c0:	aa0003f3 	mov	x19, x0
   893c4:	9100c3e0 	add	x0, sp, #0x30
   893c8:	94001a6a 	bl	8fd70 <CString::operator char const*() const>
   893cc:	d0000086 	adrp	x6, 9b000 <vtable for CSoftSerialDevice+0x90>
   893d0:	aa0003e1 	mov	x1, x0
   893d4:	f94017e4 	ldr	x4, [sp, #40]
   893d8:	aa1303e0 	mov	x0, x19
   893dc:	911800c3 	add	x3, x6, #0x600
   893e0:	52800002 	mov	w2, #0x0                   	// #0
   893e4:	94000983 	bl	8b9f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   893e8:	14000000 	b	893e8 <assertion_failed+0x78>
   893ec:	00000000 	.inst	0x00000000 ; undefined

00000000000893f0 <CBcmPropertyTags::CBcmPropertyTags(bool)>:
   893f0:	2a0103e2 	mov	w2, w1
   893f4:	52800101 	mov	w1, #0x8                   	// #8
   893f8:	1400391e 	b	97870 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>
   893fc:	d503201f 	nop

0000000000089400 <CBcmPropertyTags::~CBcmPropertyTags()>:
   89400:	14003920 	b	97880 <CBcmMailBox::~CBcmMailBox()>
   89404:	d503201f 	nop
   89408:	d503201f 	nop
   8940c:	d503201f 	nop

0000000000089410 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   89410:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   89414:	b4000262 	cbz	x2, 89460 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x50>
   89418:	71003c7f 	cmp	w3, #0xf
   8941c:	540002c9 	b.ls	89474 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x64>  // b.plast
   89420:	aa0203f3 	mov	x19, x2
   89424:	12007884 	and	w4, w4, #0x7fffffff
   89428:	51003065 	sub	w5, w3, #0xc
   8942c:	2a0303e2 	mov	w2, w3
   89430:	b9000a64 	str	w4, [x19, #8]
   89434:	29001661 	stp	w1, w5, [x19]
   89438:	aa1303e1 	mov	x1, x19
   8943c:	94000015 	bl	89490 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   89440:	72001c00 	ands	w0, w0, #0xff
   89444:	540000a0 	b.eq	89458 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x48>  // b.none
   89448:	b9400a62 	ldr	w2, [x19, #8]
   8944c:	72007843 	ands	w3, w2, #0x7fffffff
   89450:	1a9f07e0 	cset	w0, ne  // ne = any
   89454:	b9000a63 	str	w3, [x19, #8]
   89458:	a8c17bf3 	ldp	x19, x30, [sp], #16
   8945c:	d65f03c0 	ret
   89460:	d0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   89464:	91186021 	add	x1, x1, #0x618
   89468:	91006020 	add	x0, x1, #0x18
   8946c:	52800662 	mov	w2, #0x33                  	// #51
   89470:	97ffffc0 	bl	89370 <assertion_failed>
   89474:	d0000080 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   89478:	91186001 	add	x1, x0, #0x618
   8947c:	9100a020 	add	x0, x1, #0x28
   89480:	52800682 	mov	w2, #0x34                  	// #52
   89484:	97ffffbb 	bl	89370 <assertion_failed>
   89488:	d503201f 	nop
   8948c:	d503201f 	nop

0000000000089490 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   89490:	a9bc53f3 	stp	x19, x20, [sp, #-64]!
   89494:	f9001ffe 	str	x30, [sp, #56]
   89498:	b40006a1 	cbz	x1, 8956c <CBcmPropertyTags::GetTags(void*, unsigned int)+0xdc>
   8949c:	71003c5f 	cmp	w2, #0xf
   894a0:	a9015bf5 	stp	x21, x22, [sp, #16]
   894a4:	2a0203f3 	mov	w19, w2
   894a8:	54000729 	b.ls	8958c <CBcmPropertyTags::GetTags(void*, unsigned int)+0xfc>  // b.plast
   894ac:	11003056 	add	w22, w2, #0xc
   894b0:	f24006df 	tst	x22, #0x3
   894b4:	a90263f7 	stp	x23, x24, [sp, #32]
   894b8:	f9001bf9 	str	x25, [sp, #48]
   894bc:	54000761 	b.ne	895a8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x118>  // b.any
   894c0:	aa0003f8 	mov	x24, x0
   894c4:	52800000 	mov	w0, #0x0                   	// #0
   894c8:	aa0103f5 	mov	x21, x1
   894cc:	2a0203f9 	mov	w25, w2
   894d0:	94002fbc 	bl	953c0 <CMemorySystem::GetCoherentPage(unsigned int)>
   894d4:	aa0003f4 	mov	x20, x0
   894d8:	91002017 	add	x23, x0, #0x8
   894dc:	aa1903e2 	mov	x2, x25
   894e0:	aa1503e1 	mov	x1, x21
   894e4:	aa1703e0 	mov	x0, x23
   894e8:	29007e96 	stp	w22, wzr, [x20]
   894ec:	94002bb9 	bl	943d0 <memcpy>
   894f0:	b8334aff 	str	wzr, [x23, w19, uxtw]
   894f4:	d5033f9f 	dsb	sy
   894f8:	32020693 	orr	w19, w20, #0xc0000000
   894fc:	aa1803e0 	mov	x0, x24
   89500:	2a1303e1 	mov	w1, w19
   89504:	94003917 	bl	97960 <CBcmMailBox::WriteRead(unsigned int)>
   89508:	6b13001f 	cmp	w0, w19
   8950c:	54000100 	b.eq	8952c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x9c>  // b.none
   89510:	52800000 	mov	w0, #0x0                   	// #0
   89514:	a9415bf5 	ldp	x21, x22, [sp, #16]
   89518:	a94263f7 	ldp	x23, x24, [sp, #32]
   8951c:	f9401bf9 	ldr	x25, [sp, #48]
   89520:	f9401ffe 	ldr	x30, [sp, #56]
   89524:	a8c453f3 	ldp	x19, x20, [sp], #64
   89528:	d65f03c0 	ret
   8952c:	d5033fbf 	dmb	sy
   89530:	b9400684 	ldr	w4, [x20, #4]
   89534:	52b00003 	mov	w3, #0x80000000            	// #-2147483648
   89538:	6b03009f 	cmp	w4, w3
   8953c:	54fffea1 	b.ne	89510 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x80>  // b.any
   89540:	aa1903e2 	mov	x2, x25
   89544:	aa1703e1 	mov	x1, x23
   89548:	aa1503e0 	mov	x0, x21
   8954c:	94002ba1 	bl	943d0 <memcpy>
   89550:	52800020 	mov	w0, #0x1                   	// #1
   89554:	a9415bf5 	ldp	x21, x22, [sp, #16]
   89558:	a94263f7 	ldp	x23, x24, [sp, #32]
   8955c:	f9401bf9 	ldr	x25, [sp, #48]
   89560:	f9401ffe 	ldr	x30, [sp, #56]
   89564:	a8c453f3 	ldp	x19, x20, [sp], #64
   89568:	d65f03c0 	ret
   8956c:	d0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   89570:	91186021 	add	x1, x1, #0x618
   89574:	a9015bf5 	stp	x21, x22, [sp, #16]
   89578:	91014020 	add	x0, x1, #0x50
   8957c:	52800962 	mov	w2, #0x4b                  	// #75
   89580:	a90263f7 	stp	x23, x24, [sp, #32]
   89584:	f9001bf9 	str	x25, [sp, #48]
   89588:	97ffff7a 	bl	89370 <assertion_failed>
   8958c:	d0000080 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   89590:	91186001 	add	x1, x0, #0x618
   89594:	a90263f7 	stp	x23, x24, [sp, #32]
   89598:	91018020 	add	x0, x1, #0x60
   8959c:	52800982 	mov	w2, #0x4c                  	// #76
   895a0:	f9001bf9 	str	x25, [sp, #48]
   895a4:	97ffff73 	bl	89370 <assertion_failed>
   895a8:	d0000082 	adrp	x2, 9b000 <vtable for CSoftSerialDevice+0x90>
   895ac:	91186041 	add	x1, x2, #0x618
   895b0:	91024020 	add	x0, x1, #0x90
   895b4:	528009c2 	mov	w2, #0x4e                  	// #78
   895b8:	97ffff6e 	bl	89370 <assertion_failed>
   895bc:	00000000 	.inst	0x00000000 ; undefined

00000000000895c0 <debug_hexdump(void const*, unsigned int, char const*)>:
   895c0:	d10283ff 	sub	sp, sp, #0xa0
   895c4:	f100005f 	cmp	x2, #0x0
   895c8:	a90753f3 	stp	x19, x20, [sp, #112]
   895cc:	a9085bf5 	stp	x21, x22, [sp, #128]
   895d0:	aa0003f6 	mov	x22, x0
   895d4:	d0000094 	adrp	x20, 9b000 <vtable for CSoftSerialDevice+0x90>
   895d8:	911b0280 	add	x0, x20, #0x6c0
   895dc:	2a0103f5 	mov	w21, w1
   895e0:	9a820014 	csel	x20, x0, x2, eq  // eq = none
   895e4:	f9004ffe 	str	x30, [sp, #152]
   895e8:	940009c6 	bl	8bd00 <CLogger::Get()>
   895ec:	d0000083 	adrp	x3, 9b000 <vtable for CSoftSerialDevice+0x90>
   895f0:	aa1403e1 	mov	x1, x20
   895f4:	aa1603e5 	mov	x5, x22
   895f8:	2a1503e4 	mov	w4, w21
   895fc:	911b2063 	add	x3, x3, #0x6c8
   89600:	52800082 	mov	w2, #0x4                   	// #4
   89604:	940008fb 	bl	8b9f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   89608:	34000675 	cbz	w21, 896d4 <debug_hexdump(void const*, unsigned int, char const*)+0x114>
   8960c:	927c6ea1 	and	x1, x21, #0xfffffff0
   89610:	aa1603f3 	mov	x19, x22
   89614:	f9004bf7 	str	x23, [sp, #144]
   89618:	91004022 	add	x2, x1, #0x10
   8961c:	0b1602b5 	add	w21, w21, w22
   89620:	d0000097 	adrp	x23, 9b000 <vtable for CSoftSerialDevice+0x90>
   89624:	911bc2f7 	add	x23, x23, #0x6f0
   89628:	8b0202d6 	add	x22, x22, x2
   8962c:	14000003 	b	89638 <debug_hexdump(void const*, unsigned int, char const*)+0x78>
   89630:	6b1302bf 	cmp	w21, w19
   89634:	540004e0 	b.eq	896d0 <debug_hexdump(void const*, unsigned int, char const*)+0x110>  // b.none
   89638:	940009b2 	bl	8bd00 <CLogger::Get()>
   8963c:	39401665 	ldrb	w5, [x19, #5]
   89640:	12003e64 	and	w4, w19, #0xffff
   89644:	aa1703e3 	mov	x3, x23
   89648:	52800082 	mov	w2, #0x4                   	// #4
   8964c:	aa1403e1 	mov	x1, x20
   89650:	39401267 	ldrb	w7, [x19, #4]
   89654:	91004273 	add	x19, x19, #0x10
   89658:	385f3266 	ldurb	w6, [x19, #-13]
   8965c:	b90013e5 	str	w5, [sp, #16]
   89660:	385ff268 	ldurb	w8, [x19, #-1]
   89664:	b9000be7 	str	w7, [sp, #8]
   89668:	385fe269 	ldurb	w9, [x19, #-2]
   8966c:	b90003e6 	str	w6, [sp]
   89670:	385fd26a 	ldurb	w10, [x19, #-3]
   89674:	b90063e8 	str	w8, [sp, #96]
   89678:	385fc26b 	ldurb	w11, [x19, #-4]
   8967c:	b9005be9 	str	w9, [sp, #88]
   89680:	385fb26c 	ldurb	w12, [x19, #-5]
   89684:	b90053ea 	str	w10, [sp, #80]
   89688:	385fa26d 	ldurb	w13, [x19, #-6]
   8968c:	b9004beb 	str	w11, [sp, #72]
   89690:	385f926e 	ldurb	w14, [x19, #-7]
   89694:	b90043ec 	str	w12, [sp, #64]
   89698:	385f826f 	ldurb	w15, [x19, #-8]
   8969c:	b9003bed 	str	w13, [sp, #56]
   896a0:	385f7270 	ldurb	w16, [x19, #-9]
   896a4:	b90033ee 	str	w14, [sp, #48]
   896a8:	385f6271 	ldurb	w17, [x19, #-10]
   896ac:	b9002bef 	str	w15, [sp, #40]
   896b0:	385f2267 	ldurb	w7, [x19, #-14]
   896b4:	b90023f0 	str	w16, [sp, #32]
   896b8:	385f1266 	ldurb	w6, [x19, #-15]
   896bc:	b9001bf1 	str	w17, [sp, #24]
   896c0:	385f0265 	ldurb	w5, [x19, #-16]
   896c4:	940008cb 	bl	8b9f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   896c8:	eb16027f 	cmp	x19, x22
   896cc:	54fffb21 	b.ne	89630 <debug_hexdump(void const*, unsigned int, char const*)+0x70>  // b.any
   896d0:	f9404bf7 	ldr	x23, [sp, #144]
   896d4:	a94753f3 	ldp	x19, x20, [sp, #112]
   896d8:	a9485bf5 	ldp	x21, x22, [sp, #128]
   896dc:	f9404ffe 	ldr	x30, [sp, #152]
   896e0:	910283ff 	add	sp, sp, #0xa0
   896e4:	d65f03c0 	ret
   896e8:	d503201f 	nop
   896ec:	d503201f 	nop

00000000000896f0 <debug_stacktrace(unsigned long const*, char const*)>:
   896f0:	a9bc53f3 	stp	x19, x20, [sp, #-64]!
   896f4:	aa0003f4 	mov	x20, x0
   896f8:	f100003f 	cmp	x1, #0x0
   896fc:	d2800013 	mov	x19, #0x0                   	// #0
   89700:	a90263f7 	stp	x23, x24, [sp, #32]
   89704:	d0000097 	adrp	x23, 9b000 <vtable for CSoftSerialDevice+0x90>
   89708:	911b02e0 	add	x0, x23, #0x6c0
   8970c:	d0000098 	adrp	x24, 9b000 <vtable for CSoftSerialDevice+0x90>
   89710:	911d2318 	add	x24, x24, #0x748
   89714:	9a810017 	csel	x23, x0, x1, eq  // eq = none
   89718:	a9015bf5 	stp	x21, x22, [sp, #16]
   8971c:	b0000096 	adrp	x22, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   89720:	911282d6 	add	x22, x22, #0x4a0
   89724:	b2404bf5 	mov	x21, #0x7ffff               	// #524287
   89728:	a9037bf9 	stp	x25, x30, [sp, #48]
   8972c:	1400003c 	b	8981c <debug_stacktrace(unsigned long const*, char const*)+0x12c>
   89730:	91000673 	add	x19, x19, #0x1
   89734:	f8737a82 	ldr	x2, [x20, x19, lsl #3]
   89738:	eb15005f 	cmp	x2, x21
   8973c:	540000a9 	b.ls	89750 <debug_stacktrace(unsigned long const*, char const*)+0x60>  // b.plast
   89740:	eb16005f 	cmp	x2, x22
   89744:	54000062 	b.cs	89750 <debug_stacktrace(unsigned long const*, char const*)+0x60>  // b.hs, b.nlast
   89748:	f240045f 	tst	x2, #0x3
   8974c:	54000900 	b.eq	8986c <debug_stacktrace(unsigned long const*, char const*)+0x17c>  // b.none
   89750:	91000679 	add	x25, x19, #0x1
   89754:	f8797a83 	ldr	x3, [x20, x25, lsl #3]
   89758:	eb15007f 	cmp	x3, x21
   8975c:	540000a9 	b.ls	89770 <debug_stacktrace(unsigned long const*, char const*)+0x80>  // b.plast
   89760:	eb16007f 	cmp	x3, x22
   89764:	54000062 	b.cs	89770 <debug_stacktrace(unsigned long const*, char const*)+0x80>  // b.hs, b.nlast
   89768:	f240047f 	tst	x3, #0x3
   8976c:	54000900 	b.eq	8988c <debug_stacktrace(unsigned long const*, char const*)+0x19c>  // b.none
   89770:	91000a79 	add	x25, x19, #0x2
   89774:	f8797a84 	ldr	x4, [x20, x25, lsl #3]
   89778:	eb15009f 	cmp	x4, x21
   8977c:	540000a9 	b.ls	89790 <debug_stacktrace(unsigned long const*, char const*)+0xa0>  // b.plast
   89780:	eb16009f 	cmp	x4, x22
   89784:	54000062 	b.cs	89790 <debug_stacktrace(unsigned long const*, char const*)+0xa0>  // b.hs, b.nlast
   89788:	f240049f 	tst	x4, #0x3
   8978c:	54000900 	b.eq	898ac <debug_stacktrace(unsigned long const*, char const*)+0x1bc>  // b.none
   89790:	91000e79 	add	x25, x19, #0x3
   89794:	f8797a85 	ldr	x5, [x20, x25, lsl #3]
   89798:	eb1500bf 	cmp	x5, x21
   8979c:	540000a9 	b.ls	897b0 <debug_stacktrace(unsigned long const*, char const*)+0xc0>  // b.plast
   897a0:	eb1600bf 	cmp	x5, x22
   897a4:	54000062 	b.cs	897b0 <debug_stacktrace(unsigned long const*, char const*)+0xc0>  // b.hs, b.nlast
   897a8:	f24004bf 	tst	x5, #0x3
   897ac:	54000900 	b.eq	898cc <debug_stacktrace(unsigned long const*, char const*)+0x1dc>  // b.none
   897b0:	91001279 	add	x25, x19, #0x4
   897b4:	f8797a86 	ldr	x6, [x20, x25, lsl #3]
   897b8:	eb1500df 	cmp	x6, x21
   897bc:	540000a9 	b.ls	897d0 <debug_stacktrace(unsigned long const*, char const*)+0xe0>  // b.plast
   897c0:	eb1600df 	cmp	x6, x22
   897c4:	54000062 	b.cs	897d0 <debug_stacktrace(unsigned long const*, char const*)+0xe0>  // b.hs, b.nlast
   897c8:	f24004df 	tst	x6, #0x3
   897cc:	54000900 	b.eq	898ec <debug_stacktrace(unsigned long const*, char const*)+0x1fc>  // b.none
   897d0:	91001679 	add	x25, x19, #0x5
   897d4:	f8797a87 	ldr	x7, [x20, x25, lsl #3]
   897d8:	eb1500ff 	cmp	x7, x21
   897dc:	540000a9 	b.ls	897f0 <debug_stacktrace(unsigned long const*, char const*)+0x100>  // b.plast
   897e0:	eb1600ff 	cmp	x7, x22
   897e4:	54000062 	b.cs	897f0 <debug_stacktrace(unsigned long const*, char const*)+0x100>  // b.hs, b.nlast
   897e8:	f24004ff 	tst	x7, #0x3
   897ec:	54000900 	b.eq	8990c <debug_stacktrace(unsigned long const*, char const*)+0x21c>  // b.none
   897f0:	91001a79 	add	x25, x19, #0x6
   897f4:	f8797a88 	ldr	x8, [x20, x25, lsl #3]
   897f8:	eb15011f 	cmp	x8, x21
   897fc:	540000a9 	b.ls	89810 <debug_stacktrace(unsigned long const*, char const*)+0x120>  // b.plast
   89800:	eb16011f 	cmp	x8, x22
   89804:	54000062 	b.cs	89810 <debug_stacktrace(unsigned long const*, char const*)+0x120>  // b.hs, b.nlast
   89808:	f240051f 	tst	x8, #0x3
   8980c:	54000900 	b.eq	8992c <debug_stacktrace(unsigned long const*, char const*)+0x23c>  // b.none
   89810:	91001e73 	add	x19, x19, #0x7
   89814:	f101027f 	cmp	x19, #0x40
   89818:	54000200 	b.eq	89858 <debug_stacktrace(unsigned long const*, char const*)+0x168>  // b.none
   8981c:	f8737a81 	ldr	x1, [x20, x19, lsl #3]
   89820:	eb15003f 	cmp	x1, x21
   89824:	54fff869 	b.ls	89730 <debug_stacktrace(unsigned long const*, char const*)+0x40>  // b.plast
   89828:	eb16003f 	cmp	x1, x22
   8982c:	54fff822 	b.cs	89730 <debug_stacktrace(unsigned long const*, char const*)+0x40>  // b.hs, b.nlast
   89830:	f240043f 	tst	x1, #0x3
   89834:	54fff7e1 	b.ne	89730 <debug_stacktrace(unsigned long const*, char const*)+0x40>  // b.any
   89838:	94000932 	bl	8bd00 <CLogger::Get()>
   8983c:	2a1303e4 	mov	w4, w19
   89840:	aa1803e3 	mov	x3, x24
   89844:	f8737a85 	ldr	x5, [x20, x19, lsl #3]
   89848:	52800082 	mov	w2, #0x4                   	// #4
   8984c:	aa1703e1 	mov	x1, x23
   89850:	94000868 	bl	8b9f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   89854:	17ffffb7 	b	89730 <debug_stacktrace(unsigned long const*, char const*)+0x40>
   89858:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8985c:	a94263f7 	ldp	x23, x24, [sp, #32]
   89860:	a9437bf9 	ldp	x25, x30, [sp, #48]
   89864:	a8c453f3 	ldp	x19, x20, [sp], #64
   89868:	d65f03c0 	ret
   8986c:	94000925 	bl	8bd00 <CLogger::Get()>
   89870:	2a1303e4 	mov	w4, w19
   89874:	aa1803e3 	mov	x3, x24
   89878:	f8737a85 	ldr	x5, [x20, x19, lsl #3]
   8987c:	52800082 	mov	w2, #0x4                   	// #4
   89880:	aa1703e1 	mov	x1, x23
   89884:	9400085b 	bl	8b9f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   89888:	17ffffb2 	b	89750 <debug_stacktrace(unsigned long const*, char const*)+0x60>
   8988c:	9400091d 	bl	8bd00 <CLogger::Get()>
   89890:	2a1903e4 	mov	w4, w25
   89894:	aa1803e3 	mov	x3, x24
   89898:	f8797a85 	ldr	x5, [x20, x25, lsl #3]
   8989c:	52800082 	mov	w2, #0x4                   	// #4
   898a0:	aa1703e1 	mov	x1, x23
   898a4:	94000853 	bl	8b9f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   898a8:	17ffffb2 	b	89770 <debug_stacktrace(unsigned long const*, char const*)+0x80>
   898ac:	94000915 	bl	8bd00 <CLogger::Get()>
   898b0:	2a1903e4 	mov	w4, w25
   898b4:	aa1803e3 	mov	x3, x24
   898b8:	f8797a85 	ldr	x5, [x20, x25, lsl #3]
   898bc:	52800082 	mov	w2, #0x4                   	// #4
   898c0:	aa1703e1 	mov	x1, x23
   898c4:	9400084b 	bl	8b9f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   898c8:	17ffffb2 	b	89790 <debug_stacktrace(unsigned long const*, char const*)+0xa0>
   898cc:	9400090d 	bl	8bd00 <CLogger::Get()>
   898d0:	2a1903e4 	mov	w4, w25
   898d4:	aa1803e3 	mov	x3, x24
   898d8:	f8797a85 	ldr	x5, [x20, x25, lsl #3]
   898dc:	52800082 	mov	w2, #0x4                   	// #4
   898e0:	aa1703e1 	mov	x1, x23
   898e4:	94000843 	bl	8b9f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   898e8:	17ffffb2 	b	897b0 <debug_stacktrace(unsigned long const*, char const*)+0xc0>
   898ec:	94000905 	bl	8bd00 <CLogger::Get()>
   898f0:	2a1903e4 	mov	w4, w25
   898f4:	aa1803e3 	mov	x3, x24
   898f8:	f8797a85 	ldr	x5, [x20, x25, lsl #3]
   898fc:	52800082 	mov	w2, #0x4                   	// #4
   89900:	aa1703e1 	mov	x1, x23
   89904:	9400083b 	bl	8b9f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   89908:	17ffffb2 	b	897d0 <debug_stacktrace(unsigned long const*, char const*)+0xe0>
   8990c:	940008fd 	bl	8bd00 <CLogger::Get()>
   89910:	2a1903e4 	mov	w4, w25
   89914:	aa1803e3 	mov	x3, x24
   89918:	f8797a85 	ldr	x5, [x20, x25, lsl #3]
   8991c:	52800082 	mov	w2, #0x4                   	// #4
   89920:	aa1703e1 	mov	x1, x23
   89924:	94000833 	bl	8b9f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   89928:	17ffffb2 	b	897f0 <debug_stacktrace(unsigned long const*, char const*)+0x100>
   8992c:	940008f5 	bl	8bd00 <CLogger::Get()>
   89930:	2a1903e4 	mov	w4, w25
   89934:	aa1803e3 	mov	x3, x24
   89938:	f8797a85 	ldr	x5, [x20, x25, lsl #3]
   8993c:	52800082 	mov	w2, #0x4                   	// #4
   89940:	aa1703e1 	mov	x1, x23
   89944:	9400082b 	bl	8b9f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   89948:	17ffffb2 	b	89810 <debug_stacktrace(unsigned long const*, char const*)+0x120>
   8994c:	00000000 	.inst	0x00000000 ; undefined

0000000000089950 <CDevice::~CDevice()>:
   89950:	d0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   89954:	911dc024 	add	x4, x1, #0x770
   89958:	f9400403 	ldr	x3, [x0, #8]
   8995c:	f9000004 	str	x4, [x0]
   89960:	b4000063 	cbz	x3, 8996c <CDevice::~CDevice()+0x1c>
   89964:	f9400801 	ldr	x1, [x0, #16]
   89968:	d61f0060 	br	x3
   8996c:	d65f03c0 	ret

0000000000089970 <CDevice::Read(void*, unsigned long)>:
   89970:	12800000 	mov	w0, #0xffffffff            	// #-1
   89974:	d65f03c0 	ret
   89978:	d503201f 	nop
   8997c:	d503201f 	nop

0000000000089980 <CDevice::Seek(unsigned long)>:
   89980:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
   89984:	d65f03c0 	ret
   89988:	d503201f 	nop
   8998c:	d503201f 	nop

0000000000089990 <CDevice::RemoveDevice()>:
   89990:	52800000 	mov	w0, #0x0                   	// #0
   89994:	d65f03c0 	ret
   89998:	d503201f 	nop
   8999c:	d503201f 	nop

00000000000899a0 <CDevice::~CDevice()>:
   899a0:	d0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   899a4:	911dc023 	add	x3, x1, #0x770
   899a8:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   899ac:	aa0003f3 	mov	x19, x0
   899b0:	f9000003 	str	x3, [x0]
   899b4:	f9400402 	ldr	x2, [x0, #8]
   899b8:	b4000062 	cbz	x2, 899c4 <CDevice::~CDevice()+0x24>
   899bc:	f9400801 	ldr	x1, [x0, #16]
   899c0:	d63f0040 	blr	x2
   899c4:	aa1303e0 	mov	x0, x19
   899c8:	d2800301 	mov	x1, #0x18                  	// #24
   899cc:	a8c17bf3 	ldp	x19, x30, [sp], #16
   899d0:	14002c3c 	b	94ac0 <operator delete(void*, unsigned long)>
   899d4:	d503201f 	nop
   899d8:	d503201f 	nop
   899dc:	d503201f 	nop

00000000000899e0 <CDevice::CDevice()>:
   899e0:	d0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   899e4:	911dc022 	add	x2, x1, #0x770
   899e8:	a9007c02 	stp	x2, xzr, [x0]
   899ec:	d65f03c0 	ret

00000000000899f0 <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)>:
   899f0:	a9008801 	stp	x1, x2, [x0, #8]
   899f4:	d65f03c0 	ret
	...

0000000000089a00 <CDeviceNameService::CDeviceNameService()>:
   89a00:	90016ee1 	adrp	x1, 2e65000 <temp_gold+0xf421a0>
   89a04:	b900081f 	str	wzr, [x0, #8]
   89a08:	f9413422 	ldr	x2, [x1, #616]
   89a0c:	f900001f 	str	xzr, [x0]
   89a10:	b5000062 	cbnz	x2, 89a1c <CDeviceNameService::CDeviceNameService()+0x1c>
   89a14:	f9013420 	str	x0, [x1, #616]
   89a18:	d65f03c0 	ret
   89a1c:	d0000080 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   89a20:	911e8001 	add	x1, x0, #0x7a0
   89a24:	f81f0ffe 	str	x30, [sp, #-16]!
   89a28:	91006020 	add	x0, x1, #0x18
   89a2c:	528003e2 	mov	w2, #0x1f                  	// #31
   89a30:	97fffe50 	bl	89370 <assertion_failed>
   89a34:	d503201f 	nop
   89a38:	d503201f 	nop
   89a3c:	d503201f 	nop

0000000000089a40 <CDeviceNameService::~CDeviceNameService()>:
   89a40:	f9400001 	ldr	x1, [x0]
   89a44:	b40002a1 	cbz	x1, 89a98 <CDeviceNameService::~CDeviceNameService()+0x58>
   89a48:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   89a4c:	aa0003f4 	mov	x20, x0
   89a50:	f9000bfe 	str	x30, [sp, #16]
   89a54:	d503201f 	nop
   89a58:	a9400033 	ldp	x19, x0, [x1]
   89a5c:	b4000040 	cbz	x0, 89a64 <CDeviceNameService::~CDeviceNameService()+0x24>
   89a60:	94002c0c 	bl	94a90 <operator delete[](void*)>
   89a64:	f9400282 	ldr	x2, [x20]
   89a68:	d2800401 	mov	x1, #0x20                  	// #32
   89a6c:	aa0203e0 	mov	x0, x2
   89a70:	a900fc5f 	stp	xzr, xzr, [x2, #8]
   89a74:	94002c13 	bl	94ac0 <operator delete(void*, unsigned long)>
   89a78:	f9000293 	str	x19, [x20]
   89a7c:	aa1303e1 	mov	x1, x19
   89a80:	b5fffed3 	cbnz	x19, 89a58 <CDeviceNameService::~CDeviceNameService()+0x18>
   89a84:	90016ee0 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   89a88:	f9400bfe 	ldr	x30, [sp, #16]
   89a8c:	a8c253f3 	ldp	x19, x20, [sp], #32
   89a90:	f901341f 	str	xzr, [x0, #616]
   89a94:	d65f03c0 	ret
   89a98:	90016ee3 	adrp	x3, 2e65000 <temp_gold+0xf421a0>
   89a9c:	f901347f 	str	xzr, [x3, #616]
   89aa0:	d65f03c0 	ret
   89aa4:	d503201f 	nop
   89aa8:	d503201f 	nop
   89aac:	d503201f 	nop

0000000000089ab0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
   89ab0:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   89ab4:	aa0003f4 	mov	x20, x0
   89ab8:	b9400800 	ldr	w0, [x0, #8]
   89abc:	a9015bf5 	stp	x21, x22, [sp, #16]
   89ac0:	aa0103f5 	mov	x21, x1
   89ac4:	aa0203f6 	mov	x22, x2
   89ac8:	a9027bf7 	stp	x23, x30, [sp, #32]
   89acc:	12001c77 	and	w23, w3, #0xff
   89ad0:	35000300 	cbnz	w0, 89b30 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x80>
   89ad4:	d2800400 	mov	x0, #0x20                  	// #32
   89ad8:	94002bd6 	bl	94a30 <operator new(unsigned long)>
   89adc:	aa0003f3 	mov	x19, x0
   89ae0:	b4000335 	cbz	x21, 89b44 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x94>
   89ae4:	aa1503e0 	mov	x0, x21
   89ae8:	940027cc 	bl	93a18 <strlen>
   89aec:	91000400 	add	x0, x0, #0x1
   89af0:	94002bd8 	bl	94a50 <operator new[](unsigned long)>
   89af4:	aa1503e1 	mov	x1, x21
   89af8:	f9000660 	str	x0, [x19, #8]
   89afc:	940028b6 	bl	93dd4 <strcpy>
   89b00:	b4000356 	cbz	x22, 89b68 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb8>
   89b04:	f9400283 	ldr	x3, [x20]
   89b08:	f9000293 	str	x19, [x20]
   89b0c:	b9400a82 	ldr	w2, [x20, #8]
   89b10:	f9000a76 	str	x22, [x19, #16]
   89b14:	39006277 	strb	w23, [x19, #24]
   89b18:	f9000263 	str	x3, [x19]
   89b1c:	350001e2 	cbnz	w2, 89b58 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xa8>
   89b20:	a9415bf5 	ldp	x21, x22, [sp, #16]
   89b24:	a9427bf7 	ldp	x23, x30, [sp, #32]
   89b28:	a8c353f3 	ldp	x19, x20, [sp], #48
   89b2c:	d65f03c0 	ret
   89b30:	94002e40 	bl	95430 <EnterCritical>
   89b34:	d2800400 	mov	x0, #0x20                  	// #32
   89b38:	94002bbe 	bl	94a30 <operator new(unsigned long)>
   89b3c:	aa0003f3 	mov	x19, x0
   89b40:	b5fffd35 	cbnz	x21, 89ae4 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x34>
   89b44:	d0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   89b48:	911e8021 	add	x1, x1, #0x7a0
   89b4c:	9100a020 	add	x0, x1, #0x28
   89b50:	52800762 	mov	w2, #0x3b                  	// #59
   89b54:	97fffe07 	bl	89370 <assertion_failed>
   89b58:	a9415bf5 	ldp	x21, x22, [sp, #16]
   89b5c:	a9427bf7 	ldp	x23, x30, [sp, #32]
   89b60:	a8c353f3 	ldp	x19, x20, [sp], #48
   89b64:	14002e5f 	b	954e0 <LeaveCritical>
   89b68:	d0000080 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   89b6c:	911e8001 	add	x1, x0, #0x7a0
   89b70:	9100e020 	add	x0, x1, #0x38
   89b74:	52800802 	mov	w2, #0x40                  	// #64
   89b78:	97fffdfe 	bl	89370 <assertion_failed>
   89b7c:	d503201f 	nop

0000000000089b80 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
   89b80:	a9bb53f3 	stp	x19, x20, [sp, #-80]!
   89b84:	aa0003f3 	mov	x19, x0
   89b88:	9100c3e0 	add	x0, sp, #0x30
   89b8c:	aa0303f4 	mov	x20, x3
   89b90:	a9017bf5 	stp	x21, x30, [sp, #16]
   89b94:	12001c95 	and	w21, w4, #0xff
   89b98:	b90027e2 	str	w2, [sp, #36]
   89b9c:	f90017e1 	str	x1, [sp, #40]
   89ba0:	94001824 	bl	8fc30 <CString::CString()>
   89ba4:	b94027e3 	ldr	w3, [sp, #36]
   89ba8:	d0000080 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   89bac:	911e8004 	add	x4, x0, #0x7a0
   89bb0:	91012081 	add	x1, x4, #0x48
   89bb4:	9100c3e0 	add	x0, sp, #0x30
   89bb8:	f94017e2 	ldr	x2, [sp, #40]
   89bbc:	940019a5 	bl	90250 <CString::Format(char const*, ...)>
   89bc0:	9100c3e0 	add	x0, sp, #0x30
   89bc4:	9400186b 	bl	8fd70 <CString::operator char const*() const>
   89bc8:	2a1503e3 	mov	w3, w21
   89bcc:	aa1403e2 	mov	x2, x20
   89bd0:	aa0003e1 	mov	x1, x0
   89bd4:	aa1303e0 	mov	x0, x19
   89bd8:	97ffffb6 	bl	89ab0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   89bdc:	9100c3e0 	add	x0, sp, #0x30
   89be0:	94001850 	bl	8fd20 <CString::~CString()>
   89be4:	a9417bf5 	ldp	x21, x30, [sp, #16]
   89be8:	a8c553f3 	ldp	x19, x20, [sp], #80
   89bec:	d65f03c0 	ret

0000000000089bf0 <CDeviceNameService::RemoveDevice(char const*, bool)>:
   89bf0:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   89bf4:	a9015bf5 	stp	x21, x22, [sp, #16]
   89bf8:	a9027bf7 	stp	x23, x30, [sp, #32]
   89bfc:	b4000701 	cbz	x1, 89cdc <CDeviceNameService::RemoveDevice(char const*, bool)+0xec>
   89c00:	aa0003f7 	mov	x23, x0
   89c04:	aa0103f4 	mov	x20, x1
   89c08:	b9400800 	ldr	w0, [x0, #8]
   89c0c:	12001c56 	and	w22, w2, #0xff
   89c10:	35000300 	cbnz	w0, 89c70 <CDeviceNameService::RemoveDevice(char const*, bool)+0x80>
   89c14:	f94002f3 	ldr	x19, [x23]
   89c18:	b4000713 	cbz	x19, 89cf8 <CDeviceNameService::RemoveDevice(char const*, bool)+0x108>
   89c1c:	f9400661 	ldr	x1, [x19, #8]
   89c20:	d2800015 	mov	x21, #0x0                   	// #0
   89c24:	b5000061 	cbnz	x1, 89c30 <CDeviceNameService::RemoveDevice(char const*, bool)+0x40>
   89c28:	1400000d 	b	89c5c <CDeviceNameService::RemoveDevice(char const*, bool)+0x6c>
   89c2c:	aa0203f3 	mov	x19, x2
   89c30:	aa1403e0 	mov	x0, x20
   89c34:	94002783 	bl	93a40 <strcmp>
   89c38:	35000080 	cbnz	w0, 89c48 <CDeviceNameService::RemoveDevice(char const*, bool)+0x58>
   89c3c:	39406260 	ldrb	w0, [x19, #24]
   89c40:	6b16001f 	cmp	w0, w22
   89c44:	540002a0 	b.eq	89c98 <CDeviceNameService::RemoveDevice(char const*, bool)+0xa8>  // b.none
   89c48:	f9400262 	ldr	x2, [x19]
   89c4c:	b40001a2 	cbz	x2, 89c80 <CDeviceNameService::RemoveDevice(char const*, bool)+0x90>
   89c50:	f9400441 	ldr	x1, [x2, #8]
   89c54:	aa1303f5 	mov	x21, x19
   89c58:	b5fffea1 	cbnz	x1, 89c2c <CDeviceNameService::RemoveDevice(char const*, bool)+0x3c>
   89c5c:	d0000083 	adrp	x3, 9b000 <vtable for CSoftSerialDevice+0x90>
   89c60:	911e8061 	add	x1, x3, #0x7a0
   89c64:	91014020 	add	x0, x1, #0x50
   89c68:	52800bc2 	mov	w2, #0x5e                  	// #94
   89c6c:	97fffdc1 	bl	89370 <assertion_failed>
   89c70:	94002df0 	bl	95430 <EnterCritical>
   89c74:	f94002f3 	ldr	x19, [x23]
   89c78:	b5fffd33 	cbnz	x19, 89c1c <CDeviceNameService::RemoveDevice(char const*, bool)+0x2c>
   89c7c:	d503201f 	nop
   89c80:	b9400ae6 	ldr	w6, [x23, #8]
   89c84:	340003a6 	cbz	w6, 89cf8 <CDeviceNameService::RemoveDevice(char const*, bool)+0x108>
   89c88:	a9415bf5 	ldp	x21, x22, [sp, #16]
   89c8c:	a9427bf7 	ldp	x23, x30, [sp, #32]
   89c90:	a8c353f3 	ldp	x19, x20, [sp], #48
   89c94:	14002e13 	b	954e0 <LeaveCritical>
   89c98:	f9400264 	ldr	x4, [x19]
   89c9c:	b40001d5 	cbz	x21, 89cd4 <CDeviceNameService::RemoveDevice(char const*, bool)+0xe4>
   89ca0:	f90002a4 	str	x4, [x21]
   89ca4:	b9400ae5 	ldr	w5, [x23, #8]
   89ca8:	35000245 	cbnz	w5, 89cf0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x100>
   89cac:	f9400660 	ldr	x0, [x19, #8]
   89cb0:	b4000040 	cbz	x0, 89cb8 <CDeviceNameService::RemoveDevice(char const*, bool)+0xc8>
   89cb4:	94002b77 	bl	94a90 <operator delete[](void*)>
   89cb8:	aa1303e0 	mov	x0, x19
   89cbc:	d2800401 	mov	x1, #0x20                  	// #32
   89cc0:	a9415bf5 	ldp	x21, x22, [sp, #16]
   89cc4:	a9427bf7 	ldp	x23, x30, [sp, #32]
   89cc8:	a900fe7f 	stp	xzr, xzr, [x19, #8]
   89ccc:	a8c353f3 	ldp	x19, x20, [sp], #48
   89cd0:	14002b7c 	b	94ac0 <operator delete(void*, unsigned long)>
   89cd4:	f90002e4 	str	x4, [x23]
   89cd8:	17fffff3 	b	89ca4 <CDeviceNameService::RemoveDevice(char const*, bool)+0xb4>
   89cdc:	d0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   89ce0:	911e8021 	add	x1, x1, #0x7a0
   89ce4:	9100a020 	add	x0, x1, #0x28
   89ce8:	52800ac2 	mov	w2, #0x56                  	// #86
   89cec:	97fffda1 	bl	89370 <assertion_failed>
   89cf0:	94002dfc 	bl	954e0 <LeaveCritical>
   89cf4:	17ffffee 	b	89cac <CDeviceNameService::RemoveDevice(char const*, bool)+0xbc>
   89cf8:	a9415bf5 	ldp	x21, x22, [sp, #16]
   89cfc:	a9427bf7 	ldp	x23, x30, [sp, #32]
   89d00:	a8c353f3 	ldp	x19, x20, [sp], #48
   89d04:	d65f03c0 	ret
   89d08:	d503201f 	nop
   89d0c:	d503201f 	nop

0000000000089d10 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
   89d10:	a9bb53f3 	stp	x19, x20, [sp, #-80]!
   89d14:	aa0003f3 	mov	x19, x0
   89d18:	9100c3e0 	add	x0, sp, #0x30
   89d1c:	12001c74 	and	w20, w3, #0xff
   89d20:	f9000bfe 	str	x30, [sp, #16]
   89d24:	b90027e2 	str	w2, [sp, #36]
   89d28:	f90017e1 	str	x1, [sp, #40]
   89d2c:	940017c1 	bl	8fc30 <CString::CString()>
   89d30:	b94027e3 	ldr	w3, [sp, #36]
   89d34:	d0000080 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   89d38:	911e8004 	add	x4, x0, #0x7a0
   89d3c:	91012081 	add	x1, x4, #0x48
   89d40:	9100c3e0 	add	x0, sp, #0x30
   89d44:	f94017e2 	ldr	x2, [sp, #40]
   89d48:	94001942 	bl	90250 <CString::Format(char const*, ...)>
   89d4c:	9100c3e0 	add	x0, sp, #0x30
   89d50:	94001808 	bl	8fd70 <CString::operator char const*() const>
   89d54:	2a1403e2 	mov	w2, w20
   89d58:	aa0003e1 	mov	x1, x0
   89d5c:	aa1303e0 	mov	x0, x19
   89d60:	97ffffa4 	bl	89bf0 <CDeviceNameService::RemoveDevice(char const*, bool)>
   89d64:	9100c3e0 	add	x0, sp, #0x30
   89d68:	940017ee 	bl	8fd20 <CString::~CString()>
   89d6c:	f9400bfe 	ldr	x30, [sp, #16]
   89d70:	a8c553f3 	ldp	x19, x20, [sp], #80
   89d74:	d65f03c0 	ret
   89d78:	d503201f 	nop
   89d7c:	d503201f 	nop

0000000000089d80 <CDeviceNameService::GetDevice(char const*, bool)>:
   89d80:	a9bc53f3 	stp	x19, x20, [sp, #-64]!
   89d84:	a9015bf5 	stp	x21, x22, [sp, #16]
   89d88:	f90013fe 	str	x30, [sp, #32]
   89d8c:	b4000461 	cbz	x1, 89e18 <CDeviceNameService::GetDevice(char const*, bool)+0x98>
   89d90:	aa0003f6 	mov	x22, x0
   89d94:	b9400800 	ldr	w0, [x0, #8]
   89d98:	aa0103f4 	mov	x20, x1
   89d9c:	12001c55 	and	w21, w2, #0xff
   89da0:	35000260 	cbnz	w0, 89dec <CDeviceNameService::GetDevice(char const*, bool)+0x6c>
   89da4:	f94002d3 	ldr	x19, [x22]
   89da8:	b5000153 	cbnz	x19, 89dd0 <CDeviceNameService::GetDevice(char const*, bool)+0x50>
   89dac:	14000016 	b	89e04 <CDeviceNameService::GetDevice(char const*, bool)+0x84>
   89db0:	aa1403e0 	mov	x0, x20
   89db4:	94002723 	bl	93a40 <strcmp>
   89db8:	35000080 	cbnz	w0, 89dc8 <CDeviceNameService::GetDevice(char const*, bool)+0x48>
   89dbc:	39406262 	ldrb	w2, [x19, #24]
   89dc0:	6b15005f 	cmp	w2, w21
   89dc4:	54000340 	b.eq	89e2c <CDeviceNameService::GetDevice(char const*, bool)+0xac>  // b.none
   89dc8:	f9400273 	ldr	x19, [x19]
   89dcc:	b4000173 	cbz	x19, 89df8 <CDeviceNameService::GetDevice(char const*, bool)+0x78>
   89dd0:	f9400661 	ldr	x1, [x19, #8]
   89dd4:	b5fffee1 	cbnz	x1, 89db0 <CDeviceNameService::GetDevice(char const*, bool)+0x30>
   89dd8:	d0000080 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   89ddc:	911e8001 	add	x1, x0, #0x7a0
   89de0:	91014020 	add	x0, x1, #0x50
   89de4:	52801242 	mov	w2, #0x92                  	// #146
   89de8:	97fffd62 	bl	89370 <assertion_failed>
   89dec:	94002d91 	bl	95430 <EnterCritical>
   89df0:	f94002d3 	ldr	x19, [x22]
   89df4:	b5fffef3 	cbnz	x19, 89dd0 <CDeviceNameService::GetDevice(char const*, bool)+0x50>
   89df8:	b9400ac5 	ldr	w5, [x22, #8]
   89dfc:	34000045 	cbz	w5, 89e04 <CDeviceNameService::GetDevice(char const*, bool)+0x84>
   89e00:	94002db8 	bl	954e0 <LeaveCritical>
   89e04:	d2800000 	mov	x0, #0x0                   	// #0
   89e08:	a9415bf5 	ldp	x21, x22, [sp, #16]
   89e0c:	f94013fe 	ldr	x30, [sp, #32]
   89e10:	a8c453f3 	ldp	x19, x20, [sp], #64
   89e14:	d65f03c0 	ret
   89e18:	d0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   89e1c:	911e8021 	add	x1, x1, #0x7a0
   89e20:	9100a020 	add	x0, x1, #0x28
   89e24:	52801162 	mov	w2, #0x8b                  	// #139
   89e28:	97fffd52 	bl	89370 <assertion_failed>
   89e2c:	b9400ac3 	ldr	w3, [x22, #8]
   89e30:	f9400a60 	ldr	x0, [x19, #16]
   89e34:	350000e3 	cbnz	w3, 89e50 <CDeviceNameService::GetDevice(char const*, bool)+0xd0>
   89e38:	b5fffe80 	cbnz	x0, 89e08 <CDeviceNameService::GetDevice(char const*, bool)+0x88>
   89e3c:	d0000084 	adrp	x4, 9b000 <vtable for CSoftSerialDevice+0x90>
   89e40:	911e8081 	add	x1, x4, #0x7a0
   89e44:	9101a020 	add	x0, x1, #0x68
   89e48:	52801342 	mov	w2, #0x9a                  	// #154
   89e4c:	97fffd49 	bl	89370 <assertion_failed>
   89e50:	f9001fe0 	str	x0, [sp, #56]
   89e54:	94002da3 	bl	954e0 <LeaveCritical>
   89e58:	f9401fe0 	ldr	x0, [sp, #56]
   89e5c:	b5fffd60 	cbnz	x0, 89e08 <CDeviceNameService::GetDevice(char const*, bool)+0x88>
   89e60:	17fffff7 	b	89e3c <CDeviceNameService::GetDevice(char const*, bool)+0xbc>
   89e64:	d503201f 	nop
   89e68:	d503201f 	nop
   89e6c:	d503201f 	nop

0000000000089e70 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
   89e70:	a9bb53f3 	stp	x19, x20, [sp, #-80]!
   89e74:	aa0003f3 	mov	x19, x0
   89e78:	9100c3e0 	add	x0, sp, #0x30
   89e7c:	12001c74 	and	w20, w3, #0xff
   89e80:	f9000bfe 	str	x30, [sp, #16]
   89e84:	b90027e2 	str	w2, [sp, #36]
   89e88:	f90017e1 	str	x1, [sp, #40]
   89e8c:	94001769 	bl	8fc30 <CString::CString()>
   89e90:	b94027e3 	ldr	w3, [sp, #36]
   89e94:	d0000080 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   89e98:	911e8004 	add	x4, x0, #0x7a0
   89e9c:	91012081 	add	x1, x4, #0x48
   89ea0:	9100c3e0 	add	x0, sp, #0x30
   89ea4:	f94017e2 	ldr	x2, [sp, #40]
   89ea8:	940018ea 	bl	90250 <CString::Format(char const*, ...)>
   89eac:	9100c3e0 	add	x0, sp, #0x30
   89eb0:	940017b0 	bl	8fd70 <CString::operator char const*() const>
   89eb4:	2a1403e2 	mov	w2, w20
   89eb8:	aa0003e1 	mov	x1, x0
   89ebc:	aa1303e0 	mov	x0, x19
   89ec0:	97ffffb0 	bl	89d80 <CDeviceNameService::GetDevice(char const*, bool)>
   89ec4:	aa0003f3 	mov	x19, x0
   89ec8:	9100c3e0 	add	x0, sp, #0x30
   89ecc:	94001795 	bl	8fd20 <CString::~CString()>
   89ed0:	aa1303e0 	mov	x0, x19
   89ed4:	f9400bfe 	ldr	x30, [sp, #16]
   89ed8:	a8c553f3 	ldp	x19, x20, [sp], #80
   89edc:	d65f03c0 	ret

0000000000089ee0 <CDeviceNameService::ListDevices(CDevice*)>:
   89ee0:	a9b853f3 	stp	x19, x20, [sp, #-128]!
   89ee4:	f90027fe 	str	x30, [sp, #72]
   89ee8:	b40008c1 	cbz	x1, 8a000 <CDeviceNameService::ListDevices(CDevice*)+0x120>
   89eec:	f9400013 	ldr	x19, [x0]
   89ef0:	b4000693 	cbz	x19, 89fc0 <CDeviceNameService::ListDevices(CDevice*)+0xe0>
   89ef4:	a9036bf9 	stp	x25, x26, [sp, #48]
   89ef8:	d000009a 	adrp	x26, 9b000 <vtable for CSoftSerialDevice+0x90>
   89efc:	911e835a 	add	x26, x26, #0x7a0
   89f00:	91022359 	add	x25, x26, #0x88
   89f04:	52800014 	mov	w20, #0x0                   	// #0
   89f08:	a9015bf5 	stp	x21, x22, [sp, #16]
   89f0c:	aa0103f5 	mov	x21, x1
   89f10:	a90263f7 	stp	x23, x24, [sp, #32]
   89f14:	52800158 	mov	w24, #0xa                   	// #10
   89f18:	52800417 	mov	w23, #0x20                  	// #32
   89f1c:	f90023fb 	str	x27, [sp, #64]
   89f20:	1400001b 	b	89f8c <CDeviceNameService::ListDevices(CDevice*)+0xac>
   89f24:	39406262 	ldrb	w2, [x19, #24]
   89f28:	11000694 	add	w20, w20, #0x1
   89f2c:	aa1903e1 	mov	x1, x25
   89f30:	910183e0 	add	x0, sp, #0x60
   89f34:	7100005f 	cmp	w2, #0x0
   89f38:	1a9f17e4 	cset	w4, eq  // eq = none
   89f3c:	11018882 	add	w2, w4, #0x62
   89f40:	7200069b 	ands	w27, w20, #0x3
   89f44:	1a970304 	csel	w4, w24, w23, eq  // eq = none
   89f48:	940018c2 	bl	90250 <CString::Format(char const*, ...)>
   89f4c:	f94002a3 	ldr	x3, [x21]
   89f50:	910183e0 	add	x0, sp, #0x60
   89f54:	f9400c76 	ldr	x22, [x3, #24]
   89f58:	94001786 	bl	8fd70 <CString::operator char const*() const>
   89f5c:	aa0003e5 	mov	x5, x0
   89f60:	910183e0 	add	x0, sp, #0x60
   89f64:	f9002fe5 	str	x5, [sp, #88]
   89f68:	940017ce 	bl	8fea0 <CString::GetLength() const>
   89f6c:	f9402fe1 	ldr	x1, [sp, #88]
   89f70:	aa0003e2 	mov	x2, x0
   89f74:	aa1503e0 	mov	x0, x21
   89f78:	d63f02c0 	blr	x22
   89f7c:	910183e0 	add	x0, sp, #0x60
   89f80:	f9400273 	ldr	x19, [x19]
   89f84:	94001767 	bl	8fd20 <CString::~CString()>
   89f88:	b4000133 	cbz	x19, 89fac <CDeviceNameService::ListDevices(CDevice*)+0xcc>
   89f8c:	910183e0 	add	x0, sp, #0x60
   89f90:	94001728 	bl	8fc30 <CString::CString()>
   89f94:	f9400663 	ldr	x3, [x19, #8]
   89f98:	b5fffc63 	cbnz	x3, 89f24 <CDeviceNameService::ListDevices(CDevice*)+0x44>
   89f9c:	52801722 	mov	w2, #0xb9                  	// #185
   89fa0:	aa1a03e1 	mov	x1, x26
   89fa4:	91014340 	add	x0, x26, #0x50
   89fa8:	97fffcf2 	bl	89370 <assertion_failed>
   89fac:	3500011b 	cbnz	w27, 89fcc <CDeviceNameService::ListDevices(CDevice*)+0xec>
   89fb0:	a9415bf5 	ldp	x21, x22, [sp, #16]
   89fb4:	a94263f7 	ldp	x23, x24, [sp, #32]
   89fb8:	a9436bf9 	ldp	x25, x26, [sp, #48]
   89fbc:	f94023fb 	ldr	x27, [sp, #64]
   89fc0:	f94027fe 	ldr	x30, [sp, #72]
   89fc4:	a8c853f3 	ldp	x19, x20, [sp], #128
   89fc8:	d65f03c0 	ret
   89fcc:	f94002a6 	ldr	x6, [x21]
   89fd0:	91026341 	add	x1, x26, #0x98
   89fd4:	aa1503e0 	mov	x0, x21
   89fd8:	d2800022 	mov	x2, #0x1                   	// #1
   89fdc:	f9400cc7 	ldr	x7, [x6, #24]
   89fe0:	d63f00e0 	blr	x7
   89fe4:	a9415bf5 	ldp	x21, x22, [sp, #16]
   89fe8:	a94263f7 	ldp	x23, x24, [sp, #32]
   89fec:	a9436bf9 	ldp	x25, x26, [sp, #48]
   89ff0:	f94023fb 	ldr	x27, [sp, #64]
   89ff4:	f94027fe 	ldr	x30, [sp, #72]
   89ff8:	a8c853f3 	ldp	x19, x20, [sp], #128
   89ffc:	d65f03c0 	ret
   8a000:	b0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a004:	911e8021 	add	x1, x1, #0x7a0
   8a008:	a9015bf5 	stp	x21, x22, [sp, #16]
   8a00c:	9101e020 	add	x0, x1, #0x78
   8a010:	52801602 	mov	w2, #0xb0                  	// #176
   8a014:	a90263f7 	stp	x23, x24, [sp, #32]
   8a018:	a9036bf9 	stp	x25, x26, [sp, #48]
   8a01c:	f90023fb 	str	x27, [sp, #64]
   8a020:	97fffcd4 	bl	89370 <assertion_failed>
   8a024:	d503201f 	nop
   8a028:	d503201f 	nop
   8a02c:	d503201f 	nop

000000000008a030 <CDeviceNameService::Get()>:
   8a030:	f0016ec0 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   8a034:	f9413400 	ldr	x0, [x0, #616]
   8a038:	b4000040 	cbz	x0, 8a040 <CDeviceNameService::Get()+0x10>
   8a03c:	d65f03c0 	ret
   8a040:	b0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a044:	911e8021 	add	x1, x1, #0x7a0
   8a048:	f81f0ffe 	str	x30, [sp, #-16]!
   8a04c:	91028020 	add	x0, x1, #0xa0
   8a050:	52801982 	mov	w2, #0xcc                  	// #204
   8a054:	97fffcc7 	bl	89370 <assertion_failed>
	...

000000000008a060 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   8a060:	91004002 	add	x2, x0, #0x10
   8a064:	91070003 	add	x3, x0, #0x1c0
   8a068:	f9000001 	str	x1, [x0]
   8a06c:	3900201f 	strb	wzr, [x0, #8]
   8a070:	aa0203e0 	mov	x0, x2
   8a074:	f800841f 	str	xzr, [x0], #8
   8a078:	f900045f 	str	xzr, [x2, #8]
   8a07c:	f900041f 	str	xzr, [x0, #8]
   8a080:	a901fc5f 	stp	xzr, xzr, [x2, #24]
   8a084:	a902fc5f 	stp	xzr, xzr, [x2, #40]
   8a088:	a903fc5f 	stp	xzr, xzr, [x2, #56]
   8a08c:	91012042 	add	x2, x2, #0x48
   8a090:	eb03005f 	cmp	x2, x3
   8a094:	54fffee1 	b.ne	8a070 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x10>  // b.any
   8a098:	d65f03c0 	ret
   8a09c:	d503201f 	nop

000000000008a0a0 <CGPIOManager::~CGPIOManager()>:
   8a0a0:	9100400d 	add	x13, x0, #0x10
   8a0a4:	91070004 	add	x4, x0, #0x1c0
   8a0a8:	f81f0ffe 	str	x30, [sp, #-16]!
   8a0ac:	f94001a2 	ldr	x2, [x13]
   8a0b0:	b5000382 	cbnz	x2, 8a120 <CGPIOManager::~CGPIOManager()+0x80>
   8a0b4:	f94005a5 	ldr	x5, [x13, #8]
   8a0b8:	910021a3 	add	x3, x13, #0x8
   8a0bc:	b5000325 	cbnz	x5, 8a120 <CGPIOManager::~CGPIOManager()+0x80>
   8a0c0:	f9400466 	ldr	x6, [x3, #8]
   8a0c4:	b50002e6 	cbnz	x6, 8a120 <CGPIOManager::~CGPIOManager()+0x80>
   8a0c8:	f9400da7 	ldr	x7, [x13, #24]
   8a0cc:	b50002a7 	cbnz	x7, 8a120 <CGPIOManager::~CGPIOManager()+0x80>
   8a0d0:	f94011a8 	ldr	x8, [x13, #32]
   8a0d4:	b5000268 	cbnz	x8, 8a120 <CGPIOManager::~CGPIOManager()+0x80>
   8a0d8:	f94015a9 	ldr	x9, [x13, #40]
   8a0dc:	b5000229 	cbnz	x9, 8a120 <CGPIOManager::~CGPIOManager()+0x80>
   8a0e0:	f94019aa 	ldr	x10, [x13, #48]
   8a0e4:	b50001ea 	cbnz	x10, 8a120 <CGPIOManager::~CGPIOManager()+0x80>
   8a0e8:	f9401dab 	ldr	x11, [x13, #56]
   8a0ec:	b50001ab 	cbnz	x11, 8a120 <CGPIOManager::~CGPIOManager()+0x80>
   8a0f0:	f94021ac 	ldr	x12, [x13, #64]
   8a0f4:	b500016c 	cbnz	x12, 8a120 <CGPIOManager::~CGPIOManager()+0x80>
   8a0f8:	910121ad 	add	x13, x13, #0x48
   8a0fc:	eb0401bf 	cmp	x13, x4
   8a100:	54fffd61 	b.ne	8a0ac <CGPIOManager::~CGPIOManager()+0xc>  // b.any
   8a104:	3940200e 	ldrb	w14, [x0, #8]
   8a108:	3400018e 	cbz	w14, 8a138 <CGPIOManager::~CGPIOManager()+0x98>
   8a10c:	f9400000 	ldr	x0, [x0]
   8a110:	b4000180 	cbz	x0, 8a140 <CGPIOManager::~CGPIOManager()+0xa0>
   8a114:	52801281 	mov	w1, #0x94                  	// #148
   8a118:	f84107fe 	ldr	x30, [sp], #16
   8a11c:	14003141 	b	96620 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   8a120:	b0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a124:	b0000080 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a128:	91214021 	add	x1, x1, #0x850
   8a12c:	91218000 	add	x0, x0, #0x860
   8a130:	52800582 	mov	w2, #0x2c                  	// #44
   8a134:	97fffc8f 	bl	89370 <assertion_failed>
   8a138:	f84107fe 	ldr	x30, [sp], #16
   8a13c:	d65f03c0 	ret
   8a140:	b000008f 	adrp	x15, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a144:	b0000090 	adrp	x16, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a148:	912141e1 	add	x1, x15, #0x850
   8a14c:	9121e200 	add	x0, x16, #0x878
   8a150:	52800642 	mov	w2, #0x32                  	// #50
   8a154:	97fffc87 	bl	89370 <assertion_failed>
   8a158:	d503201f 	nop
   8a15c:	d503201f 	nop

000000000008a160 <CGPIOManager::Initialize()>:
   8a160:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   8a164:	aa0003f3 	mov	x19, x0
   8a168:	39402000 	ldrb	w0, [x0, #8]
   8a16c:	350001a0 	cbnz	w0, 8a1a0 <CGPIOManager::Initialize()+0x40>
   8a170:	f9400260 	ldr	x0, [x19]
   8a174:	b4000220 	cbz	x0, 8a1b8 <CGPIOManager::Initialize()+0x58>
   8a178:	90000005 	adrp	x5, 8a000 <CDeviceNameService::ListDevices(CDevice*)+0x120>
   8a17c:	9112c0a2 	add	x2, x5, #0x4b0
   8a180:	aa1303e3 	mov	x3, x19
   8a184:	52801281 	mov	w1, #0x94                  	// #148
   8a188:	940030fa 	bl	96570 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   8a18c:	52800026 	mov	w6, #0x1                   	// #1
   8a190:	2a0603e0 	mov	w0, w6
   8a194:	39002266 	strb	w6, [x19, #8]
   8a198:	a8c17bf3 	ldp	x19, x30, [sp], #16
   8a19c:	d65f03c0 	ret
   8a1a0:	b0000082 	adrp	x2, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a1a4:	b0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a1a8:	91224040 	add	x0, x2, #0x890
   8a1ac:	91214021 	add	x1, x1, #0x850
   8a1b0:	52800762 	mov	w2, #0x3b                  	// #59
   8a1b4:	97fffc6f 	bl	89370 <assertion_failed>
   8a1b8:	b0000083 	adrp	x3, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a1bc:	b0000084 	adrp	x4, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a1c0:	91214061 	add	x1, x3, #0x850
   8a1c4:	9121e080 	add	x0, x4, #0x878
   8a1c8:	52800782 	mov	w2, #0x3c                  	// #60
   8a1cc:	97fffc69 	bl	89370 <assertion_failed>

000000000008a1d0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   8a1d0:	39402002 	ldrb	w2, [x0, #8]
   8a1d4:	f81f0ffe 	str	x30, [sp, #-16]!
   8a1d8:	34000162 	cbz	w2, 8a204 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x34>
   8a1dc:	b4000201 	cbz	x1, 8a21c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x4c>
   8a1e0:	b9400825 	ldr	w5, [x1, #8]
   8a1e4:	7100d4bf 	cmp	w5, #0x35
   8a1e8:	54000268 	b.hi	8a234 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x64>  // b.pmore
   8a1ec:	8b254c08 	add	x8, x0, w5, uxtw #3
   8a1f0:	f9400909 	ldr	x9, [x8, #16]
   8a1f4:	b50002c9 	cbnz	x9, 8a24c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   8a1f8:	f84107fe 	ldr	x30, [sp], #16
   8a1fc:	f9000901 	str	x1, [x8, #16]
   8a200:	d65f03c0 	ret
   8a204:	b0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a208:	b0000080 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a20c:	91214021 	add	x1, x1, #0x850
   8a210:	9122a000 	add	x0, x0, #0x8a8
   8a214:	528008a2 	mov	w2, #0x45                  	// #69
   8a218:	97fffc56 	bl	89370 <assertion_failed>
   8a21c:	b0000083 	adrp	x3, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a220:	b0000084 	adrp	x4, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a224:	91214061 	add	x1, x3, #0x850
   8a228:	9122e080 	add	x0, x4, #0x8b8
   8a22c:	528008e2 	mov	w2, #0x47                  	// #71
   8a230:	97fffc50 	bl	89370 <assertion_failed>
   8a234:	b0000086 	adrp	x6, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a238:	b0000087 	adrp	x7, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a23c:	912140c1 	add	x1, x6, #0x850
   8a240:	912320e0 	add	x0, x7, #0x8c8
   8a244:	52800922 	mov	w2, #0x49                  	// #73
   8a248:	97fffc4a 	bl	89370 <assertion_failed>
   8a24c:	b000008a 	adrp	x10, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a250:	b000008b 	adrp	x11, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a254:	91214141 	add	x1, x10, #0x850
   8a258:	91218160 	add	x0, x11, #0x860
   8a25c:	52800962 	mov	w2, #0x4b                  	// #75
   8a260:	97fffc44 	bl	89370 <assertion_failed>
   8a264:	d503201f 	nop
   8a268:	d503201f 	nop
   8a26c:	d503201f 	nop

000000000008a270 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   8a270:	39402002 	ldrb	w2, [x0, #8]
   8a274:	f81f0ffe 	str	x30, [sp, #-16]!
   8a278:	34000162 	cbz	w2, 8a2a4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x34>
   8a27c:	b4000201 	cbz	x1, 8a2bc <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x4c>
   8a280:	b9400825 	ldr	w5, [x1, #8]
   8a284:	7100d4bf 	cmp	w5, #0x35
   8a288:	54000268 	b.hi	8a2d4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x64>  // b.pmore
   8a28c:	8b254c08 	add	x8, x0, w5, uxtw #3
   8a290:	f9400909 	ldr	x9, [x8, #16]
   8a294:	b40002c9 	cbz	x9, 8a2ec <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x7c>
   8a298:	f84107fe 	ldr	x30, [sp], #16
   8a29c:	f900091f 	str	xzr, [x8, #16]
   8a2a0:	d65f03c0 	ret
   8a2a4:	b0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a2a8:	b0000080 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a2ac:	91214021 	add	x1, x1, #0x850
   8a2b0:	9122a000 	add	x0, x0, #0x8a8
   8a2b4:	52800a42 	mov	w2, #0x52                  	// #82
   8a2b8:	97fffc2e 	bl	89370 <assertion_failed>
   8a2bc:	b0000083 	adrp	x3, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a2c0:	b0000084 	adrp	x4, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a2c4:	91214061 	add	x1, x3, #0x850
   8a2c8:	9122e080 	add	x0, x4, #0x8b8
   8a2cc:	52800a82 	mov	w2, #0x54                  	// #84
   8a2d0:	97fffc28 	bl	89370 <assertion_failed>
   8a2d4:	b0000086 	adrp	x6, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a2d8:	b0000087 	adrp	x7, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a2dc:	912140c1 	add	x1, x6, #0x850
   8a2e0:	912320e0 	add	x0, x7, #0x8c8
   8a2e4:	52800ac2 	mov	w2, #0x56                  	// #86
   8a2e8:	97fffc22 	bl	89370 <assertion_failed>
   8a2ec:	b000008a 	adrp	x10, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a2f0:	b000008b 	adrp	x11, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a2f4:	91214141 	add	x1, x10, #0x850
   8a2f8:	91238160 	add	x0, x11, #0x8e0
   8a2fc:	52800b02 	mov	w2, #0x58                  	// #88
   8a300:	97fffc1c 	bl	89370 <assertion_failed>
   8a304:	d503201f 	nop
   8a308:	d503201f 	nop
   8a30c:	d503201f 	nop

000000000008a310 <CGPIOManager::InterruptHandler()>:
   8a310:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   8a314:	39402001 	ldrb	w1, [x0, #8]
   8a318:	f9000bfe 	str	x30, [sp, #16]
   8a31c:	34000bc1 	cbz	w1, 8a494 <CGPIOManager::InterruptHandler()+0x184>
   8a320:	d2800804 	mov	x4, #0x40                  	// #64
   8a324:	f2bfc404 	movk	x4, #0xfe20, lsl #16
   8a328:	b940008e 	ldr	w14, [x4]
   8a32c:	d2800883 	mov	x3, #0x44                  	// #68
   8a330:	f2bfc403 	movk	x3, #0xfe20, lsl #16
   8a334:	52800013 	mov	w19, #0x0                   	// #0
   8a338:	3700078e 	tbnz	w14, #0, 8a428 <CGPIOManager::InterruptHandler()+0x118>
   8a33c:	11000673 	add	w19, w19, #0x1
   8a340:	53017dc6 	lsr	w6, w14, #1
   8a344:	f240127f 	tst	x19, #0x1f
   8a348:	2a1303e5 	mov	w5, w19
   8a34c:	54000041 	b.ne	8a354 <CGPIOManager::InterruptHandler()+0x44>  // b.any
   8a350:	b9400066 	ldr	w6, [x3]
   8a354:	370006a6 	tbnz	w6, #0, 8a428 <CGPIOManager::InterruptHandler()+0x118>
   8a358:	110004b3 	add	w19, w5, #0x1
   8a35c:	53017cc7 	lsr	w7, w6, #1
   8a360:	f240127f 	tst	x19, #0x1f
   8a364:	54000041 	b.ne	8a36c <CGPIOManager::InterruptHandler()+0x5c>  // b.any
   8a368:	b9400067 	ldr	w7, [x3]
   8a36c:	370005e7 	tbnz	w7, #0, 8a428 <CGPIOManager::InterruptHandler()+0x118>
   8a370:	110008b3 	add	w19, w5, #0x2
   8a374:	53017ce8 	lsr	w8, w7, #1
   8a378:	f240127f 	tst	x19, #0x1f
   8a37c:	54000041 	b.ne	8a384 <CGPIOManager::InterruptHandler()+0x74>  // b.any
   8a380:	b9400068 	ldr	w8, [x3]
   8a384:	37000528 	tbnz	w8, #0, 8a428 <CGPIOManager::InterruptHandler()+0x118>
   8a388:	11000cb3 	add	w19, w5, #0x3
   8a38c:	53017d09 	lsr	w9, w8, #1
   8a390:	f240127f 	tst	x19, #0x1f
   8a394:	54000041 	b.ne	8a39c <CGPIOManager::InterruptHandler()+0x8c>  // b.any
   8a398:	b9400069 	ldr	w9, [x3]
   8a39c:	37000469 	tbnz	w9, #0, 8a428 <CGPIOManager::InterruptHandler()+0x118>
   8a3a0:	110010b3 	add	w19, w5, #0x4
   8a3a4:	53017d2a 	lsr	w10, w9, #1
   8a3a8:	f240127f 	tst	x19, #0x1f
   8a3ac:	54000041 	b.ne	8a3b4 <CGPIOManager::InterruptHandler()+0xa4>  // b.any
   8a3b0:	b940006a 	ldr	w10, [x3]
   8a3b4:	370003aa 	tbnz	w10, #0, 8a428 <CGPIOManager::InterruptHandler()+0x118>
   8a3b8:	110014b3 	add	w19, w5, #0x5
   8a3bc:	53017d4b 	lsr	w11, w10, #1
   8a3c0:	f240127f 	tst	x19, #0x1f
   8a3c4:	54000041 	b.ne	8a3cc <CGPIOManager::InterruptHandler()+0xbc>  // b.any
   8a3c8:	b940006b 	ldr	w11, [x3]
   8a3cc:	370002eb 	tbnz	w11, #0, 8a428 <CGPIOManager::InterruptHandler()+0x118>
   8a3d0:	110018b3 	add	w19, w5, #0x6
   8a3d4:	53017d6c 	lsr	w12, w11, #1
   8a3d8:	f240127f 	tst	x19, #0x1f
   8a3dc:	54000041 	b.ne	8a3e4 <CGPIOManager::InterruptHandler()+0xd4>  // b.any
   8a3e0:	b940006c 	ldr	w12, [x3]
   8a3e4:	3700022c 	tbnz	w12, #0, 8a428 <CGPIOManager::InterruptHandler()+0x118>
   8a3e8:	11001cb3 	add	w19, w5, #0x7
   8a3ec:	53017d8d 	lsr	w13, w12, #1
   8a3f0:	f240127f 	tst	x19, #0x1f
   8a3f4:	54000041 	b.ne	8a3fc <CGPIOManager::InterruptHandler()+0xec>  // b.any
   8a3f8:	b940006d 	ldr	w13, [x3]
   8a3fc:	3700016d 	tbnz	w13, #0, 8a428 <CGPIOManager::InterruptHandler()+0x118>
   8a400:	110020b3 	add	w19, w5, #0x8
   8a404:	53017dae 	lsr	w14, w13, #1
   8a408:	f240127f 	tst	x19, #0x1f
   8a40c:	54000041 	b.ne	8a414 <CGPIOManager::InterruptHandler()+0x104>  // b.any
   8a410:	b940006e 	ldr	w14, [x3]
   8a414:	7100da7f 	cmp	w19, #0x36
   8a418:	54fff901 	b.ne	8a338 <CGPIOManager::InterruptHandler()+0x28>  // b.any
   8a41c:	f9400bfe 	ldr	x30, [sp, #16]
   8a420:	a8c253f3 	ldp	x19, x20, [sp], #32
   8a424:	d65f03c0 	ret
   8a428:	8b334c0f 	add	x15, x0, w19, uxtw #3
   8a42c:	f94009f4 	ldr	x20, [x15, #16]
   8a430:	b40001b4 	cbz	x20, 8a464 <CGPIOManager::InterruptHandler()+0x154>
   8a434:	aa1403e0 	mov	x0, x20
   8a438:	9400033a 	bl	8b120 <CGPIOPin::InterruptHandler()>
   8a43c:	3940e280 	ldrb	w0, [x20, #56]
   8a440:	34fffee0 	cbz	w0, 8a41c <CGPIOManager::InterruptHandler()+0x10c>
   8a444:	29418e84 	ldp	w4, w3, [x20, #12]
   8a448:	5280081e 	mov	w30, #0x40                  	// #64
   8a44c:	72bfc41e 	movk	w30, #0xfe20, lsl #16
   8a450:	0b1e0085 	add	w5, w4, w30
   8a454:	f9400bfe 	ldr	x30, [sp, #16]
   8a458:	b90000a3 	str	w3, [x5]
   8a45c:	a8c253f3 	ldp	x19, x20, [sp], #32
   8a460:	d65f03c0 	ret
   8a464:	2a1303e0 	mov	w0, w19
   8a468:	9400034e 	bl	8b1a0 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   8a46c:	52800210 	mov	w16, #0x10                  	// #16
   8a470:	72a7f110 	movk	w16, #0x3f88, lsl #16
   8a474:	f9400bfe 	ldr	x30, [sp, #16]
   8a478:	0b531612 	add	w18, w16, w19, lsr #5
   8a47c:	52800031 	mov	w17, #0x1                   	// #1
   8a480:	1ad32221 	lsl	w1, w17, w19
   8a484:	531e7642 	lsl	w2, w18, #2
   8a488:	b9000041 	str	w1, [x2]
   8a48c:	a8c253f3 	ldp	x19, x20, [sp], #32
   8a490:	d65f03c0 	ret
   8a494:	b0000082 	adrp	x2, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a498:	b0000080 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a49c:	91214041 	add	x1, x2, #0x850
   8a4a0:	9122a000 	add	x0, x0, #0x8a8
   8a4a4:	52800bc2 	mov	w2, #0x5e                  	// #94
   8a4a8:	97fffbb2 	bl	89370 <assertion_failed>
   8a4ac:	d503201f 	nop

000000000008a4b0 <CGPIOManager::InterruptStub(void*)>:
   8a4b0:	b4000040 	cbz	x0, 8a4b8 <CGPIOManager::InterruptStub(void*)+0x8>
   8a4b4:	17ffff97 	b	8a310 <CGPIOManager::InterruptHandler()>
   8a4b8:	b0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a4bc:	b0000080 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a4c0:	f81f0ffe 	str	x30, [sp, #-16]!
   8a4c4:	91214021 	add	x1, x1, #0x850
   8a4c8:	9123e000 	add	x0, x0, #0x8f8
   8a4cc:	528011c2 	mov	w2, #0x8e                  	// #142
   8a4d0:	97fffba8 	bl	89370 <assertion_failed>
	...

000000000008a4e0 <CGPIOPin::CGPIOPin()>:
   8a4e0:	b0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a4e4:	91246025 	add	x5, x1, #0x918
   8a4e8:	a9027c1f 	stp	xzr, xzr, [x0, #32]
   8a4ec:	528006c4 	mov	w4, #0x36                  	// #54
   8a4f0:	52800143 	mov	w3, #0xa                   	// #10
   8a4f4:	b21f07e2 	mov	x2, #0x600000006           	// #25769803782
   8a4f8:	f9000005 	str	x5, [x0]
   8a4fc:	b9000804 	str	w4, [x0, #8]
   8a500:	b9001403 	str	w3, [x0, #20]
   8a504:	f803c002 	stur	x2, [x0, #60]
   8a508:	d65f03c0 	ret
   8a50c:	d503201f 	nop

000000000008a510 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
   8a510:	b0000084 	adrp	x4, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a514:	91246088 	add	x8, x4, #0x918
   8a518:	a9be7bf3 	stp	x19, x30, [sp, #-32]!
   8a51c:	528006c7 	mov	w7, #0x36                  	// #54
   8a520:	52800146 	mov	w6, #0xa                   	// #10
   8a524:	b21f07e5 	mov	x5, #0x600000006           	// #25769803782
   8a528:	aa0003f3 	mov	x19, x0
   8a52c:	f9000008 	str	x8, [x0]
   8a530:	b9000807 	str	w7, [x0, #8]
   8a534:	b9001406 	str	w6, [x0, #20]
   8a538:	a9027c03 	stp	x3, xzr, [x0, #32]
   8a53c:	f803c005 	stur	x5, [x0, #60]
   8a540:	b9001fe2 	str	w2, [sp, #28]
   8a544:	9400000f 	bl	8a580 <CGPIOPin::AssignPin(unsigned int)>
   8a548:	b9401fe1 	ldr	w1, [sp, #28]
   8a54c:	aa1303e0 	mov	x0, x19
   8a550:	52800022 	mov	w2, #0x1                   	// #1
   8a554:	a8c27bf3 	ldp	x19, x30, [sp], #32
   8a558:	1400002e 	b	8a610 <CGPIOPin::SetMode(TGPIOMode, bool)>
   8a55c:	d503201f 	nop

000000000008a560 <CGPIOPin::~CGPIOPin()>:
   8a560:	d65f03c0 	ret
   8a564:	d503201f 	nop
   8a568:	d503201f 	nop
   8a56c:	d503201f 	nop

000000000008a570 <CGPIOPin::~CGPIOPin()>:
   8a570:	d2800901 	mov	x1, #0x48                  	// #72
   8a574:	14002953 	b	94ac0 <operator delete(void*, unsigned long)>
   8a578:	d503201f 	nop
   8a57c:	d503201f 	nop

000000000008a580 <CGPIOPin::AssignPin(unsigned int)>:
   8a580:	a9be7bf3 	stp	x19, x30, [sp, #-32]!
   8a584:	aa0003f3 	mov	x19, x0
   8a588:	b9400800 	ldr	w0, [x0, #8]
   8a58c:	7100d81f 	cmp	w0, #0x36
   8a590:	54000301 	b.ne	8a5f0 <CGPIOPin::AssignPin(unsigned int)+0x70>  // b.any
   8a594:	7100d43f 	cmp	w1, #0x35
   8a598:	b9000a61 	str	w1, [x19, #8]
   8a59c:	54000108 	b.hi	8a5bc <CGPIOPin::AssignPin(unsigned int)+0x3c>  // b.pmore
   8a5a0:	53057c23 	lsr	w3, w1, #5
   8a5a4:	52800024 	mov	w4, #0x1                   	// #1
   8a5a8:	531e7465 	lsl	w5, w3, #2
   8a5ac:	1ac12086 	lsl	w6, w4, w1
   8a5b0:	29019a65 	stp	w5, w6, [x19, #12]
   8a5b4:	a8c27bf3 	ldp	x19, x30, [sp], #32
   8a5b8:	d65f03c0 	ret
   8a5bc:	b9001fe1 	str	w1, [sp, #28]
   8a5c0:	94000aa3 	bl	8d04c <CMachineInfo::Get()>
   8a5c4:	b9401fe1 	ldr	w1, [sp, #28]
   8a5c8:	94000938 	bl	8caa8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
   8a5cc:	7100d41f 	cmp	w0, #0x35
   8a5d0:	b9000a60 	str	w0, [x19, #8]
   8a5d4:	2a0003e1 	mov	w1, w0
   8a5d8:	54fffe49 	b.ls	8a5a0 <CGPIOPin::AssignPin(unsigned int)+0x20>  // b.plast
   8a5dc:	b0000082 	adrp	x2, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a5e0:	9124a041 	add	x1, x2, #0x928
   8a5e4:	9100a020 	add	x0, x1, #0x28
   8a5e8:	528008e2 	mov	w2, #0x47                  	// #71
   8a5ec:	97fffb61 	bl	89370 <assertion_failed>
   8a5f0:	b0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a5f4:	9124a021 	add	x1, x1, #0x928
   8a5f8:	91004020 	add	x0, x1, #0x10
   8a5fc:	52800802 	mov	w2, #0x40                  	// #64
   8a600:	97fffb5c 	bl	89370 <assertion_failed>
   8a604:	d503201f 	nop
   8a608:	d503201f 	nop
   8a60c:	d503201f 	nop

000000000008a610 <CGPIOPin::SetMode(TGPIOMode, bool)>:
   8a610:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   8a614:	7100243f 	cmp	w1, #0x9
   8a618:	a9015bf5 	stp	x21, x22, [sp, #16]
   8a61c:	f90017fe 	str	x30, [sp, #40]
   8a620:	54000a8c 	b.gt	8a770 <CGPIOPin::SetMode(TGPIOMode, bool)+0x160>
   8a624:	aa0003f5 	mov	x21, x0
   8a628:	51001023 	sub	w3, w1, #0x4
   8a62c:	7100147f 	cmp	w3, #0x5
   8a630:	12001c56 	and	w22, w2, #0xff
   8a634:	b90016a1 	str	w1, [x21, #20]
   8a638:	2a0103f2 	mov	w18, w1
   8a63c:	540006c9 	b.ls	8a714 <CGPIOPin::SetMode(TGPIOMode, bool)+0x104>  // b.plast
   8a640:	710002df 	cmp	w22, #0x0
   8a644:	7a411820 	ccmp	w1, #0x1, #0x0, ne  // ne = any
   8a648:	54000a00 	b.eq	8a788 <CGPIOPin::SetMode(TGPIOMode, bool)+0x178>  // b.none
   8a64c:	b9400aa2 	ldr	w2, [x21, #8]
   8a650:	f90013f7 	str	x23, [sp, #32]
   8a654:	7100d45f 	cmp	w2, #0x35
   8a658:	540009e8 	b.hi	8a794 <CGPIOPin::SetMode(TGPIOMode, bool)+0x184>  // b.pmore
   8a65c:	529999a4 	mov	w4, #0xcccd                	// #52429
   8a660:	72b99984 	movk	w4, #0xcccc, lsl #16
   8a664:	52a7f113 	mov	w19, #0x3f880000            	// #1065877504
   8a668:	f0016ed7 	adrp	x23, 2e65000 <temp_gold+0xf421a0>
   8a66c:	9ba47c45 	umull	x5, w2, w4
   8a670:	b94272e0 	ldr	w0, [x23, #624]
   8a674:	d363fca6 	lsr	x6, x5, #35
   8a678:	0b0608d4 	add	w20, w6, w6, lsl #2
   8a67c:	0b1300c7 	add	w7, w6, w19
   8a680:	531e74f3 	lsl	w19, w7, #2
   8a684:	4b140448 	sub	w8, w2, w20, lsl #1
   8a688:	0b080514 	add	w20, w8, w8, lsl #1
   8a68c:	35000580 	cbnz	w0, 8a73c <CGPIOPin::SetMode(TGPIOMode, bool)+0x12c>
   8a690:	b940026b 	ldr	w11, [x19]
   8a694:	528000e9 	mov	w9, #0x7                   	// #7
   8a698:	1ad4212a 	lsl	w10, w9, w20
   8a69c:	b94016ad 	ldr	w13, [x21, #20]
   8a6a0:	0a2a016c 	bic	w12, w11, w10
   8a6a4:	710005bf 	cmp	w13, #0x1
   8a6a8:	1a9f17ee 	cset	w14, eq  // eq = none
   8a6ac:	1ad421cf 	lsl	w15, w14, w20
   8a6b0:	2a0c01f0 	orr	w16, w15, w12
   8a6b4:	b9000270 	str	w16, [x19]
   8a6b8:	b94272f1 	ldr	w17, [x23, #624]
   8a6bc:	350003b1 	cbnz	w17, 8a730 <CGPIOPin::SetMode(TGPIOMode, bool)+0x120>
   8a6c0:	34000216 	cbz	w22, 8a700 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
   8a6c4:	b94016a1 	ldr	w1, [x21, #20]
   8a6c8:	7100043f 	cmp	w1, #0x1
   8a6cc:	54000740 	b.eq	8a7b4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1a4>  // b.none
   8a6d0:	340006c1 	cbz	w1, 8a7a8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x198>
   8a6d4:	7100083f 	cmp	w1, #0x2
   8a6d8:	54000360 	b.eq	8a744 <CGPIOPin::SetMode(TGPIOMode, bool)+0x134>  // b.none
   8a6dc:	71000c3f 	cmp	w1, #0x3
   8a6e0:	54000101 	b.ne	8a700 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>  // b.any
   8a6e4:	aa1503e0 	mov	x0, x21
   8a6e8:	52800021 	mov	w1, #0x1                   	// #1
   8a6ec:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8a6f0:	f94013f7 	ldr	x23, [sp, #32]
   8a6f4:	f94017fe 	ldr	x30, [sp, #40]
   8a6f8:	a8c353f3 	ldp	x19, x20, [sp], #48
   8a6fc:	1400021d 	b	8af70 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   8a700:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8a704:	f94013f7 	ldr	x23, [sp, #32]
   8a708:	f94017fe 	ldr	x30, [sp, #40]
   8a70c:	a8c353f3 	ldp	x19, x20, [sp], #48
   8a710:	d65f03c0 	ret
   8a714:	350001d6 	cbnz	w22, 8a74c <CGPIOPin::SetMode(TGPIOMode, bool)+0x13c>
   8a718:	aa1503e0 	mov	x0, x21
   8a71c:	51001241 	sub	w1, w18, #0x4
   8a720:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8a724:	f94017fe 	ldr	x30, [sp, #40]
   8a728:	a8c353f3 	ldp	x19, x20, [sp], #48
   8a72c:	14000245 	b	8b040 <CGPIOPin::SetAlternateFunction(unsigned int)>
   8a730:	94002b6c 	bl	954e0 <LeaveCritical>
   8a734:	34fffe76 	cbz	w22, 8a700 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
   8a738:	17ffffe3 	b	8a6c4 <CGPIOPin::SetMode(TGPIOMode, bool)+0xb4>
   8a73c:	94002b3d 	bl	95430 <EnterCritical>
   8a740:	17ffffd4 	b	8a690 <CGPIOPin::SetMode(TGPIOMode, bool)+0x80>
   8a744:	aa1503e0 	mov	x0, x21
   8a748:	17ffffe9 	b	8a6ec <CGPIOPin::SetMode(TGPIOMode, bool)+0xdc>
   8a74c:	52800001 	mov	w1, #0x0                   	// #0
   8a750:	94000208 	bl	8af70 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   8a754:	b94016b2 	ldr	w18, [x21, #20]
   8a758:	aa1503e0 	mov	x0, x21
   8a75c:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8a760:	51001241 	sub	w1, w18, #0x4
   8a764:	f94017fe 	ldr	x30, [sp, #40]
   8a768:	a8c353f3 	ldp	x19, x20, [sp], #48
   8a76c:	14000235 	b	8b040 <CGPIOPin::SetAlternateFunction(unsigned int)>
   8a770:	b0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a774:	9124a021 	add	x1, x1, #0x928
   8a778:	f90013f7 	str	x23, [sp, #32]
   8a77c:	91010020 	add	x0, x1, #0x40
   8a780:	528009e2 	mov	w2, #0x4f                  	// #79
   8a784:	97fffafb 	bl	89370 <assertion_failed>
   8a788:	52800001 	mov	w1, #0x0                   	// #0
   8a78c:	940001f9 	bl	8af70 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   8a790:	17ffffaf 	b	8a64c <CGPIOPin::SetMode(TGPIOMode, bool)+0x3c>
   8a794:	b0000080 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a798:	9124a001 	add	x1, x0, #0x928
   8a79c:	9100a020 	add	x0, x1, #0x28
   8a7a0:	52800d02 	mov	w2, #0x68                  	// #104
   8a7a4:	97fffaf3 	bl	89370 <assertion_failed>
   8a7a8:	aa1503e0 	mov	x0, x21
   8a7ac:	52800001 	mov	w1, #0x0                   	// #0
   8a7b0:	17ffffcf 	b	8a6ec <CGPIOPin::SetMode(TGPIOMode, bool)+0xdc>
   8a7b4:	aa1503e0 	mov	x0, x21
   8a7b8:	52800001 	mov	w1, #0x0                   	// #0
   8a7bc:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8a7c0:	f94013f7 	ldr	x23, [sp, #32]
   8a7c4:	f94017fe 	ldr	x30, [sp, #40]
   8a7c8:	a8c353f3 	ldp	x19, x20, [sp], #48
   8a7cc:	14000001 	b	8a7d0 <CGPIOPin::Write(unsigned int)>

000000000008a7d0 <CGPIOPin::Write(unsigned int)>:
   8a7d0:	b9400802 	ldr	w2, [x0, #8]
   8a7d4:	f81f0ffe 	str	x30, [sp, #-16]!
   8a7d8:	7100d45f 	cmp	w2, #0x35
   8a7dc:	54000268 	b.hi	8a828 <CGPIOPin::Write(unsigned int)+0x58>  // b.pmore
   8a7e0:	b9401403 	ldr	w3, [x0, #20]
   8a7e4:	71000c7f 	cmp	w3, #0x3
   8a7e8:	540002ac 	b.gt	8a83c <CGPIOPin::Write(unsigned int)+0x6c>
   8a7ec:	7100043f 	cmp	w1, #0x1
   8a7f0:	54000308 	b.hi	8a850 <CGPIOPin::Write(unsigned int)+0x80>  // b.pmore
   8a7f4:	b9400c08 	ldr	w8, [x0, #12]
   8a7f8:	7100003f 	cmp	w1, #0x0
   8a7fc:	52800385 	mov	w5, #0x1c                  	// #28
   8a800:	72bfc405 	movk	w5, #0xfe20, lsl #16
   8a804:	52800506 	mov	w6, #0x28                  	// #40
   8a808:	72bfc406 	movk	w6, #0xfe20, lsl #16
   8a80c:	b940100a 	ldr	w10, [x0, #16]
   8a810:	1a8610a7 	csel	w7, w5, w6, ne  // ne = any
   8a814:	f84107fe 	ldr	x30, [sp], #16
   8a818:	0b0800e9 	add	w9, w7, w8
   8a81c:	b9001801 	str	w1, [x0, #24]
   8a820:	b900012a 	str	w10, [x9]
   8a824:	d65f03c0 	ret
   8a828:	b0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a82c:	9124a021 	add	x1, x1, #0x928
   8a830:	9100a020 	add	x0, x1, #0x28
   8a834:	52801222 	mov	w2, #0x91                  	// #145
   8a838:	97ffface 	bl	89370 <assertion_failed>
   8a83c:	b0000080 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a840:	9124a001 	add	x1, x0, #0x928
   8a844:	91016020 	add	x0, x1, #0x58
   8a848:	52801282 	mov	w2, #0x94                  	// #148
   8a84c:	97fffac9 	bl	89370 <assertion_failed>
   8a850:	b0000084 	adrp	x4, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a854:	9124a081 	add	x1, x4, #0x928
   8a858:	91020020 	add	x0, x1, #0x80
   8a85c:	52801302 	mov	w2, #0x98                  	// #152
   8a860:	97fffac4 	bl	89370 <assertion_failed>
   8a864:	d503201f 	nop
   8a868:	d503201f 	nop
   8a86c:	d503201f 	nop

000000000008a870 <CGPIOPin::Read() const>:
   8a870:	b9400801 	ldr	w1, [x0, #8]
   8a874:	f81f0ffe 	str	x30, [sp, #-16]!
   8a878:	7100d43f 	cmp	w1, #0x35
   8a87c:	540001e8 	b.hi	8a8b8 <CGPIOPin::Read() const+0x48>  // b.pmore
   8a880:	b9401402 	ldr	w2, [x0, #20]
   8a884:	7100005f 	cmp	w2, #0x0
   8a888:	51000843 	sub	w3, w2, #0x2
   8a88c:	7a411860 	ccmp	w3, #0x1, #0x0, ne  // ne = any
   8a890:	540001e8 	b.hi	8a8cc <CGPIOPin::Read() const+0x5c>  // b.pmore
   8a894:	29419c06 	ldp	w6, w7, [x0, #12]
   8a898:	52800685 	mov	w5, #0x34                  	// #52
   8a89c:	72bfc405 	movk	w5, #0xfe20, lsl #16
   8a8a0:	f84107fe 	ldr	x30, [sp], #16
   8a8a4:	0b0500c8 	add	w8, w6, w5
   8a8a8:	b9400109 	ldr	w9, [x8]
   8a8ac:	6a07013f 	tst	w9, w7
   8a8b0:	1a9f07e0 	cset	w0, ne  // ne = any
   8a8b4:	d65f03c0 	ret
   8a8b8:	b0000080 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a8bc:	9124a001 	add	x1, x0, #0x928
   8a8c0:	9100a020 	add	x0, x1, #0x28
   8a8c4:	52801482 	mov	w2, #0xa4                  	// #164
   8a8c8:	97fffaaa 	bl	89370 <assertion_failed>
   8a8cc:	b0000084 	adrp	x4, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a8d0:	9124a081 	add	x1, x4, #0x928
   8a8d4:	91028020 	add	x0, x1, #0xa0
   8a8d8:	52801502 	mov	w2, #0xa8                  	// #168
   8a8dc:	97fffaa5 	bl	89370 <assertion_failed>

000000000008a8e0 <CGPIOPin::Invert()>:
   8a8e0:	b9401402 	ldr	w2, [x0, #20]
   8a8e4:	7100045f 	cmp	w2, #0x1
   8a8e8:	54000081 	b.ne	8a8f8 <CGPIOPin::Invert()+0x18>  // b.any
   8a8ec:	b9401804 	ldr	w4, [x0, #24]
   8a8f0:	52000081 	eor	w1, w4, #0x1
   8a8f4:	17ffffb7 	b	8a7d0 <CGPIOPin::Write(unsigned int)>
   8a8f8:	b0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a8fc:	9124a021 	add	x1, x1, #0x928
   8a900:	f81f0ffe 	str	x30, [sp, #-16]!
   8a904:	91040020 	add	x0, x1, #0x100
   8a908:	528016a2 	mov	w2, #0xb5                  	// #181
   8a90c:	97fffa99 	bl	89370 <assertion_failed>

000000000008a910 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)>:
   8a910:	b9401404 	ldr	w4, [x0, #20]
   8a914:	f81f0ffe 	str	x30, [sp, #-16]!
   8a918:	7100009f 	cmp	w4, #0x0
   8a91c:	51000885 	sub	w5, w4, #0x2
   8a920:	7a4118a0 	ccmp	w5, #0x1, #0x0, ne  // ne = any
   8a924:	54000588 	b.hi	8a9d4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xc4>  // b.pmore
   8a928:	b9403c06 	ldr	w6, [x0, #60]
   8a92c:	710018df 	cmp	w6, #0x6
   8a930:	54000201 	b.ne	8a970 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x60>  // b.any
   8a934:	b9404007 	ldr	w7, [x0, #64]
   8a938:	710018ff 	cmp	w7, #0x6
   8a93c:	54000241 	b.ne	8a984 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x74>  // b.any
   8a940:	b40002c1 	cbz	x1, 8a998 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x88>
   8a944:	f9401408 	ldr	x8, [x0, #40]
   8a948:	b5000328 	cbnz	x8, 8a9ac <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x9c>
   8a94c:	12001c6a 	and	w10, w3, #0xff
   8a950:	a9028801 	stp	x1, x2, [x0, #40]
   8a954:	3900e00a 	strb	w10, [x0, #56]
   8a958:	f940100b 	ldr	x11, [x0, #32]
   8a95c:	b400032b 	cbz	x11, 8a9c0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xb0>
   8a960:	aa0003e1 	mov	x1, x0
   8a964:	aa0b03e0 	mov	x0, x11
   8a968:	f84107fe 	ldr	x30, [sp], #16
   8a96c:	17fffe19 	b	8a1d0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
   8a970:	b0000080 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a974:	9124a001 	add	x1, x0, #0x928
   8a978:	91048020 	add	x0, x1, #0x120
   8a97c:	52801802 	mov	w2, #0xc0                  	// #192
   8a980:	97fffa7c 	bl	89370 <assertion_failed>
   8a984:	b0000082 	adrp	x2, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a988:	9124a041 	add	x1, x2, #0x928
   8a98c:	91052020 	add	x0, x1, #0x148
   8a990:	52801822 	mov	w2, #0xc1                  	// #193
   8a994:	97fffa77 	bl	89370 <assertion_failed>
   8a998:	b0000083 	adrp	x3, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a99c:	9124a061 	add	x1, x3, #0x928
   8a9a0:	9105c020 	add	x0, x1, #0x170
   8a9a4:	52801862 	mov	w2, #0xc3                  	// #195
   8a9a8:	97fffa72 	bl	89370 <assertion_failed>
   8a9ac:	b0000089 	adrp	x9, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a9b0:	9124a121 	add	x1, x9, #0x928
   8a9b4:	91060020 	add	x0, x1, #0x180
   8a9b8:	52801882 	mov	w2, #0xc4                  	// #196
   8a9bc:	97fffa6d 	bl	89370 <assertion_failed>
   8a9c0:	b000008c 	adrp	x12, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a9c4:	9124a181 	add	x1, x12, #0x928
   8a9c8:	91064020 	add	x0, x1, #0x190
   8a9cc:	52801962 	mov	w2, #0xcb                  	// #203
   8a9d0:	97fffa68 	bl	89370 <assertion_failed>
   8a9d4:	b0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   8a9d8:	9124a021 	add	x1, x1, #0x928
   8a9dc:	91028020 	add	x0, x1, #0xa0
   8a9e0:	528017c2 	mov	w2, #0xbe                  	// #190
   8a9e4:	97fffa63 	bl	89370 <assertion_failed>
   8a9e8:	d503201f 	nop
   8a9ec:	d503201f 	nop

000000000008a9f0 <CGPIOPin::DisconnectInterrupt()>:
   8a9f0:	aa0003e1 	mov	x1, x0
   8a9f4:	b9401400 	ldr	w0, [x0, #20]
   8a9f8:	f81f0ffe 	str	x30, [sp, #-16]!
   8a9fc:	7100001f 	cmp	w0, #0x0
   8aa00:	51000802 	sub	w2, w0, #0x2
   8aa04:	7a411840 	ccmp	w2, #0x1, #0x0, ne  // ne = any
   8aa08:	54000448 	b.hi	8aa90 <CGPIOPin::DisconnectInterrupt()+0xa0>  // b.pmore
   8aa0c:	b9403c23 	ldr	w3, [x1, #60]
   8aa10:	7100187f 	cmp	w3, #0x6
   8aa14:	54000161 	b.ne	8aa40 <CGPIOPin::DisconnectInterrupt()+0x50>  // b.any
   8aa18:	b9404025 	ldr	w5, [x1, #64]
   8aa1c:	710018bf 	cmp	w5, #0x6
   8aa20:	540001a1 	b.ne	8aa54 <CGPIOPin::DisconnectInterrupt()+0x64>  // b.any
   8aa24:	f9401427 	ldr	x7, [x1, #40]
   8aa28:	b4000207 	cbz	x7, 8aa68 <CGPIOPin::DisconnectInterrupt()+0x78>
   8aa2c:	f900143f 	str	xzr, [x1, #40]
   8aa30:	f9401020 	ldr	x0, [x1, #32]
   8aa34:	b4000240 	cbz	x0, 8aa7c <CGPIOPin::DisconnectInterrupt()+0x8c>
   8aa38:	f84107fe 	ldr	x30, [sp], #16
   8aa3c:	17fffe0d 	b	8a270 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
   8aa40:	b0000084 	adrp	x4, 9b000 <vtable for CSoftSerialDevice+0x90>
   8aa44:	9124a081 	add	x1, x4, #0x928
   8aa48:	91048020 	add	x0, x1, #0x120
   8aa4c:	52801aa2 	mov	w2, #0xd5                  	// #213
   8aa50:	97fffa48 	bl	89370 <assertion_failed>
   8aa54:	b0000086 	adrp	x6, 9b000 <vtable for CSoftSerialDevice+0x90>
   8aa58:	9124a0c1 	add	x1, x6, #0x928
   8aa5c:	91052020 	add	x0, x1, #0x148
   8aa60:	52801ac2 	mov	w2, #0xd6                  	// #214
   8aa64:	97fffa43 	bl	89370 <assertion_failed>
   8aa68:	b0000088 	adrp	x8, 9b000 <vtable for CSoftSerialDevice+0x90>
   8aa6c:	9124a101 	add	x1, x8, #0x928
   8aa70:	91068020 	add	x0, x1, #0x1a0
   8aa74:	52801b02 	mov	w2, #0xd8                  	// #216
   8aa78:	97fffa3e 	bl	89370 <assertion_failed>
   8aa7c:	b0000089 	adrp	x9, 9b000 <vtable for CSoftSerialDevice+0x90>
   8aa80:	9124a121 	add	x1, x9, #0x928
   8aa84:	91064020 	add	x0, x1, #0x190
   8aa88:	52801b62 	mov	w2, #0xdb                  	// #219
   8aa8c:	97fffa39 	bl	89370 <assertion_failed>
   8aa90:	b0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   8aa94:	9124a021 	add	x1, x1, #0x928
   8aa98:	91028020 	add	x0, x1, #0xa0
   8aa9c:	52801a62 	mov	w2, #0xd3                  	// #211
   8aaa0:	97fffa34 	bl	89370 <assertion_failed>
   8aaa4:	d503201f 	nop
   8aaa8:	d503201f 	nop
   8aaac:	d503201f 	nop

000000000008aab0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
   8aab0:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   8aab4:	aa0003f3 	mov	x19, x0
   8aab8:	b9401400 	ldr	w0, [x0, #20]
   8aabc:	a9017bf5 	stp	x21, x30, [sp, #16]
   8aac0:	7100001f 	cmp	w0, #0x0
   8aac4:	51000802 	sub	w2, w0, #0x2
   8aac8:	7a411840 	ccmp	w2, #0x1, #0x0, ne  // ne = any
   8aacc:	540007a8 	b.hi	8abc0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x110>  // b.pmore
   8aad0:	f9401663 	ldr	x3, [x19, #40]
   8aad4:	b40004e3 	cbz	x3, 8ab70 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xc0>
   8aad8:	b9403e65 	ldr	w5, [x19, #60]
   8aadc:	710018bf 	cmp	w5, #0x6
   8aae0:	54000521 	b.ne	8ab84 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xd4>  // b.any
   8aae4:	7100143f 	cmp	w1, #0x5
   8aae8:	5400058c 	b.gt	8ab98 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xe8>
   8aaec:	b9404268 	ldr	w8, [x19, #64]
   8aaf0:	6b01011f 	cmp	w8, w1
   8aaf4:	540005c0 	b.eq	8abac <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xfc>  // b.none
   8aaf8:	b9400e6b 	ldr	w11, [x19, #12]
   8aafc:	0b010434 	add	w20, w1, w1, lsl #1
   8ab00:	5280098a 	mov	w10, #0x4c                  	// #76
   8ab04:	72bfc40a 	movk	w10, #0xfe20, lsl #16
   8ab08:	f0016ed5 	adrp	x21, 2e65000 <temp_gold+0xf421a0>
   8ab0c:	b9003e61 	str	w1, [x19, #60]
   8ab10:	b94272a0 	ldr	w0, [x21, #624]
   8ab14:	0b0a016c 	add	w12, w11, w10
   8ab18:	0b140994 	add	w20, w12, w20, lsl #2
   8ab1c:	350001a0 	cbnz	w0, 8ab50 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xa0>
   8ab20:	b940126d 	ldr	w13, [x19, #16]
   8ab24:	b940028e 	ldr	w14, [x20]
   8ab28:	2a0d01cf 	orr	w15, w14, w13
   8ab2c:	b900028f 	str	w15, [x20]
   8ab30:	b94272b0 	ldr	w16, [x21, #624]
   8ab34:	35000090 	cbnz	w16, 8ab44 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x94>
   8ab38:	a9417bf5 	ldp	x21, x30, [sp, #16]
   8ab3c:	a8c253f3 	ldp	x19, x20, [sp], #32
   8ab40:	d65f03c0 	ret
   8ab44:	a9417bf5 	ldp	x21, x30, [sp, #16]
   8ab48:	a8c253f3 	ldp	x19, x20, [sp], #32
   8ab4c:	14002a65 	b	954e0 <LeaveCritical>
   8ab50:	94002a38 	bl	95430 <EnterCritical>
   8ab54:	b940126d 	ldr	w13, [x19, #16]
   8ab58:	b940028e 	ldr	w14, [x20]
   8ab5c:	2a0d01cf 	orr	w15, w14, w13
   8ab60:	b900028f 	str	w15, [x20]
   8ab64:	b94272b0 	ldr	w16, [x21, #624]
   8ab68:	34fffe90 	cbz	w16, 8ab38 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x88>
   8ab6c:	17fffff6 	b	8ab44 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x94>
   8ab70:	b0000084 	adrp	x4, 9b000 <vtable for CSoftSerialDevice+0x90>
   8ab74:	9124a081 	add	x1, x4, #0x928
   8ab78:	91068020 	add	x0, x1, #0x1a0
   8ab7c:	52801c82 	mov	w2, #0xe4                  	// #228
   8ab80:	97fff9fc 	bl	89370 <assertion_failed>
   8ab84:	b0000086 	adrp	x6, 9b000 <vtable for CSoftSerialDevice+0x90>
   8ab88:	9124a0c1 	add	x1, x6, #0x928
   8ab8c:	91048020 	add	x0, x1, #0x120
   8ab90:	52801cc2 	mov	w2, #0xe6                  	// #230
   8ab94:	97fff9f7 	bl	89370 <assertion_failed>
   8ab98:	b0000087 	adrp	x7, 9b000 <vtable for CSoftSerialDevice+0x90>
   8ab9c:	9124a0e1 	add	x1, x7, #0x928
   8aba0:	9106c020 	add	x0, x1, #0x1b0
   8aba4:	52801ce2 	mov	w2, #0xe7                  	// #231
   8aba8:	97fff9f2 	bl	89370 <assertion_failed>
   8abac:	b0000089 	adrp	x9, 9b000 <vtable for CSoftSerialDevice+0x90>
   8abb0:	9124a121 	add	x1, x9, #0x928
   8abb4:	91076020 	add	x0, x1, #0x1d8
   8abb8:	52801d02 	mov	w2, #0xe8                  	// #232
   8abbc:	97fff9ed 	bl	89370 <assertion_failed>
   8abc0:	b0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   8abc4:	9124a021 	add	x1, x1, #0x928
   8abc8:	91028020 	add	x0, x1, #0xa0
   8abcc:	52801c62 	mov	w2, #0xe3                  	// #227
   8abd0:	97fff9e8 	bl	89370 <assertion_failed>
   8abd4:	d503201f 	nop
   8abd8:	d503201f 	nop
   8abdc:	d503201f 	nop

000000000008abe0 <CGPIOPin::DisableInterrupt()>:
   8abe0:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   8abe4:	aa0003f4 	mov	x20, x0
   8abe8:	b9401400 	ldr	w0, [x0, #20]
   8abec:	a9017bf5 	stp	x21, x30, [sp, #16]
   8abf0:	7100001f 	cmp	w0, #0x0
   8abf4:	51000801 	sub	w1, w0, #0x2
   8abf8:	7a411820 	ccmp	w1, #0x1, #0x0, ne  // ne = any
   8abfc:	54000548 	b.hi	8aca4 <CGPIOPin::DisableInterrupt()+0xc4>  // b.pmore
   8ac00:	b9403e83 	ldr	w3, [x20, #60]
   8ac04:	7100147f 	cmp	w3, #0x5
   8ac08:	5400044c 	b.gt	8ac90 <CGPIOPin::DisableInterrupt()+0xb0>
   8ac0c:	b9400e86 	ldr	w6, [x20, #12]
   8ac10:	0b030473 	add	w19, w3, w3, lsl #1
   8ac14:	52800985 	mov	w5, #0x4c                  	// #76
   8ac18:	72bfc405 	movk	w5, #0xfe20, lsl #16
   8ac1c:	f0016ed5 	adrp	x21, 2e65000 <temp_gold+0xf421a0>
   8ac20:	b94272a0 	ldr	w0, [x21, #624]
   8ac24:	0b0500c7 	add	w7, w6, w5
   8ac28:	0b1308f3 	add	w19, w7, w19, lsl #2
   8ac2c:	35000180 	cbnz	w0, 8ac5c <CGPIOPin::DisableInterrupt()+0x7c>
   8ac30:	b9400268 	ldr	w8, [x19]
   8ac34:	b9401289 	ldr	w9, [x20, #16]
   8ac38:	0a29010a 	bic	w10, w8, w9
   8ac3c:	b900026a 	str	w10, [x19]
   8ac40:	b94272ab 	ldr	w11, [x21, #624]
   8ac44:	350001ab 	cbnz	w11, 8ac78 <CGPIOPin::DisableInterrupt()+0x98>
   8ac48:	528000cc 	mov	w12, #0x6                   	// #6
   8ac4c:	a9417bf5 	ldp	x21, x30, [sp, #16]
   8ac50:	b9003e8c 	str	w12, [x20, #60]
   8ac54:	a8c253f3 	ldp	x19, x20, [sp], #32
   8ac58:	d65f03c0 	ret
   8ac5c:	940029f5 	bl	95430 <EnterCritical>
   8ac60:	b9400268 	ldr	w8, [x19]
   8ac64:	b9401289 	ldr	w9, [x20, #16]
   8ac68:	0a29010a 	bic	w10, w8, w9
   8ac6c:	b900026a 	str	w10, [x19]
   8ac70:	b94272ab 	ldr	w11, [x21, #624]
   8ac74:	34fffeab 	cbz	w11, 8ac48 <CGPIOPin::DisableInterrupt()+0x68>
   8ac78:	94002a1a 	bl	954e0 <LeaveCritical>
   8ac7c:	528000cc 	mov	w12, #0x6                   	// #6
   8ac80:	a9417bf5 	ldp	x21, x30, [sp, #16]
   8ac84:	b9003e8c 	str	w12, [x20, #60]
   8ac88:	a8c253f3 	ldp	x19, x20, [sp], #32
   8ac8c:	d65f03c0 	ret
   8ac90:	b0000084 	adrp	x4, 9b000 <vtable for CSoftSerialDevice+0x90>
   8ac94:	9124a081 	add	x1, x4, #0x928
   8ac98:	9107e020 	add	x0, x1, #0x1f8
   8ac9c:	52801f62 	mov	w2, #0xfb                  	// #251
   8aca0:	97fff9b4 	bl	89370 <assertion_failed>
   8aca4:	b0000082 	adrp	x2, 9b000 <vtable for CSoftSerialDevice+0x90>
   8aca8:	9124a041 	add	x1, x2, #0x928
   8acac:	91028020 	add	x0, x1, #0xa0
   8acb0:	52801f22 	mov	w2, #0xf9                  	// #249
   8acb4:	97fff9af 	bl	89370 <assertion_failed>
   8acb8:	d503201f 	nop
   8acbc:	d503201f 	nop

000000000008acc0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
   8acc0:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   8acc4:	aa0003f3 	mov	x19, x0
   8acc8:	b9401400 	ldr	w0, [x0, #20]
   8accc:	a9017bf5 	stp	x21, x30, [sp, #16]
   8acd0:	7100001f 	cmp	w0, #0x0
   8acd4:	51000802 	sub	w2, w0, #0x2
   8acd8:	7a411840 	ccmp	w2, #0x1, #0x0, ne  // ne = any
   8acdc:	540007a8 	b.hi	8add0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x110>  // b.pmore
   8ace0:	f9401663 	ldr	x3, [x19, #40]
   8ace4:	b40004e3 	cbz	x3, 8ad80 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xc0>
   8ace8:	b9404265 	ldr	w5, [x19, #64]
   8acec:	710018bf 	cmp	w5, #0x6
   8acf0:	54000521 	b.ne	8ad94 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xd4>  // b.any
   8acf4:	7100143f 	cmp	w1, #0x5
   8acf8:	5400058c 	b.gt	8ada8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xe8>
   8acfc:	b9403e68 	ldr	w8, [x19, #60]
   8ad00:	6b01011f 	cmp	w8, w1
   8ad04:	540005c0 	b.eq	8adbc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xfc>  // b.none
   8ad08:	b9400e6b 	ldr	w11, [x19, #12]
   8ad0c:	0b010434 	add	w20, w1, w1, lsl #1
   8ad10:	5280098a 	mov	w10, #0x4c                  	// #76
   8ad14:	72bfc40a 	movk	w10, #0xfe20, lsl #16
   8ad18:	f0016ed5 	adrp	x21, 2e65000 <temp_gold+0xf421a0>
   8ad1c:	b9004261 	str	w1, [x19, #64]
   8ad20:	b94272a0 	ldr	w0, [x21, #624]
   8ad24:	0b0a016c 	add	w12, w11, w10
   8ad28:	0b140994 	add	w20, w12, w20, lsl #2
   8ad2c:	350001a0 	cbnz	w0, 8ad60 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xa0>
   8ad30:	b940126d 	ldr	w13, [x19, #16]
   8ad34:	b940028e 	ldr	w14, [x20]
   8ad38:	2a0d01cf 	orr	w15, w14, w13
   8ad3c:	b900028f 	str	w15, [x20]
   8ad40:	b94272b0 	ldr	w16, [x21, #624]
   8ad44:	35000090 	cbnz	w16, 8ad54 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x94>
   8ad48:	a9417bf5 	ldp	x21, x30, [sp, #16]
   8ad4c:	a8c253f3 	ldp	x19, x20, [sp], #32
   8ad50:	d65f03c0 	ret
   8ad54:	a9417bf5 	ldp	x21, x30, [sp, #16]
   8ad58:	a8c253f3 	ldp	x19, x20, [sp], #32
   8ad5c:	140029e1 	b	954e0 <LeaveCritical>
   8ad60:	940029b4 	bl	95430 <EnterCritical>
   8ad64:	b940126d 	ldr	w13, [x19, #16]
   8ad68:	b940028e 	ldr	w14, [x20]
   8ad6c:	2a0d01cf 	orr	w15, w14, w13
   8ad70:	b900028f 	str	w15, [x20]
   8ad74:	b94272b0 	ldr	w16, [x21, #624]
   8ad78:	34fffe90 	cbz	w16, 8ad48 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x88>
   8ad7c:	17fffff6 	b	8ad54 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x94>
   8ad80:	b0000084 	adrp	x4, 9b000 <vtable for CSoftSerialDevice+0x90>
   8ad84:	9124a081 	add	x1, x4, #0x928
   8ad88:	91068020 	add	x0, x1, #0x1a0
   8ad8c:	528021a2 	mov	w2, #0x10d                 	// #269
   8ad90:	97fff978 	bl	89370 <assertion_failed>
   8ad94:	b0000086 	adrp	x6, 9b000 <vtable for CSoftSerialDevice+0x90>
   8ad98:	9124a0c1 	add	x1, x6, #0x928
   8ad9c:	91052020 	add	x0, x1, #0x148
   8ada0:	528021e2 	mov	w2, #0x10f                 	// #271
   8ada4:	97fff973 	bl	89370 <assertion_failed>
   8ada8:	b0000087 	adrp	x7, 9b000 <vtable for CSoftSerialDevice+0x90>
   8adac:	9124a0e1 	add	x1, x7, #0x928
   8adb0:	9106c020 	add	x0, x1, #0x1b0
   8adb4:	52802202 	mov	w2, #0x110                 	// #272
   8adb8:	97fff96e 	bl	89370 <assertion_failed>
   8adbc:	b0000089 	adrp	x9, 9b000 <vtable for CSoftSerialDevice+0x90>
   8adc0:	9124a121 	add	x1, x9, #0x928
   8adc4:	91088020 	add	x0, x1, #0x220
   8adc8:	52802222 	mov	w2, #0x111                 	// #273
   8adcc:	97fff969 	bl	89370 <assertion_failed>
   8add0:	b0000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   8add4:	9124a021 	add	x1, x1, #0x928
   8add8:	91028020 	add	x0, x1, #0xa0
   8addc:	52802182 	mov	w2, #0x10c                 	// #268
   8ade0:	97fff964 	bl	89370 <assertion_failed>
   8ade4:	d503201f 	nop
   8ade8:	d503201f 	nop
   8adec:	d503201f 	nop

000000000008adf0 <CGPIOPin::DisableInterrupt2()>:
   8adf0:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   8adf4:	aa0003f4 	mov	x20, x0
   8adf8:	b9401400 	ldr	w0, [x0, #20]
   8adfc:	a9017bf5 	stp	x21, x30, [sp, #16]
   8ae00:	7100001f 	cmp	w0, #0x0
   8ae04:	51000801 	sub	w1, w0, #0x2
   8ae08:	7a411820 	ccmp	w1, #0x1, #0x0, ne  // ne = any
   8ae0c:	54000548 	b.hi	8aeb4 <CGPIOPin::DisableInterrupt2()+0xc4>  // b.pmore
   8ae10:	b9404283 	ldr	w3, [x20, #64]
   8ae14:	7100147f 	cmp	w3, #0x5
   8ae18:	5400044c 	b.gt	8aea0 <CGPIOPin::DisableInterrupt2()+0xb0>
   8ae1c:	b9400e86 	ldr	w6, [x20, #12]
   8ae20:	0b030473 	add	w19, w3, w3, lsl #1
   8ae24:	52800985 	mov	w5, #0x4c                  	// #76
   8ae28:	72bfc405 	movk	w5, #0xfe20, lsl #16
   8ae2c:	f0016ed5 	adrp	x21, 2e65000 <temp_gold+0xf421a0>
   8ae30:	b94272a0 	ldr	w0, [x21, #624]
   8ae34:	0b0500c7 	add	w7, w6, w5
   8ae38:	0b1308f3 	add	w19, w7, w19, lsl #2
   8ae3c:	35000180 	cbnz	w0, 8ae6c <CGPIOPin::DisableInterrupt2()+0x7c>
   8ae40:	b9400268 	ldr	w8, [x19]
   8ae44:	b9401289 	ldr	w9, [x20, #16]
   8ae48:	0a29010a 	bic	w10, w8, w9
   8ae4c:	b900026a 	str	w10, [x19]
   8ae50:	b94272ab 	ldr	w11, [x21, #624]
   8ae54:	350001ab 	cbnz	w11, 8ae88 <CGPIOPin::DisableInterrupt2()+0x98>
   8ae58:	528000cc 	mov	w12, #0x6                   	// #6
   8ae5c:	a9417bf5 	ldp	x21, x30, [sp, #16]
   8ae60:	b900428c 	str	w12, [x20, #64]
   8ae64:	a8c253f3 	ldp	x19, x20, [sp], #32
   8ae68:	d65f03c0 	ret
   8ae6c:	94002971 	bl	95430 <EnterCritical>
   8ae70:	b9400268 	ldr	w8, [x19]
   8ae74:	b9401289 	ldr	w9, [x20, #16]
   8ae78:	0a29010a 	bic	w10, w8, w9
   8ae7c:	b900026a 	str	w10, [x19]
   8ae80:	b94272ab 	ldr	w11, [x21, #624]
   8ae84:	34fffeab 	cbz	w11, 8ae58 <CGPIOPin::DisableInterrupt2()+0x68>
   8ae88:	94002996 	bl	954e0 <LeaveCritical>
   8ae8c:	528000cc 	mov	w12, #0x6                   	// #6
   8ae90:	a9417bf5 	ldp	x21, x30, [sp, #16]
   8ae94:	b900428c 	str	w12, [x20, #64]
   8ae98:	a8c253f3 	ldp	x19, x20, [sp], #32
   8ae9c:	d65f03c0 	ret
   8aea0:	b0000084 	adrp	x4, 9b000 <vtable for CSoftSerialDevice+0x90>
   8aea4:	9124a081 	add	x1, x4, #0x928
   8aea8:	91090020 	add	x0, x1, #0x240
   8aeac:	52802482 	mov	w2, #0x124                 	// #292
   8aeb0:	97fff930 	bl	89370 <assertion_failed>
   8aeb4:	b0000082 	adrp	x2, 9b000 <vtable for CSoftSerialDevice+0x90>
   8aeb8:	9124a041 	add	x1, x2, #0x928
   8aebc:	91028020 	add	x0, x1, #0xa0
   8aec0:	52802442 	mov	w2, #0x122                 	// #290
   8aec4:	97fff92b 	bl	89370 <assertion_failed>
   8aec8:	d503201f 	nop
   8aecc:	d503201f 	nop

000000000008aed0 <CGPIOPin::AcknowledgeInterrupt()>:
   8aed0:	f81f0ffe 	str	x30, [sp, #-16]!
   8aed4:	f9401401 	ldr	x1, [x0, #40]
   8aed8:	b4000141 	cbz	x1, 8af00 <CGPIOPin::AcknowledgeInterrupt()+0x30>
   8aedc:	3940e002 	ldrb	w2, [x0, #56]
   8aee0:	350001a2 	cbnz	w2, 8af14 <CGPIOPin::AcknowledgeInterrupt()+0x44>
   8aee4:	29419805 	ldp	w5, w6, [x0, #12]
   8aee8:	52800804 	mov	w4, #0x40                  	// #64
   8aeec:	72bfc404 	movk	w4, #0xfe20, lsl #16
   8aef0:	f84107fe 	ldr	x30, [sp], #16
   8aef4:	0b0400a7 	add	w7, w5, w4
   8aef8:	b90000e6 	str	w6, [x7]
   8aefc:	d65f03c0 	ret
   8af00:	b0000080 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   8af04:	9124a001 	add	x1, x0, #0x928
   8af08:	91068020 	add	x0, x1, #0x1a0
   8af0c:	52802662 	mov	w2, #0x133                 	// #307
   8af10:	97fff918 	bl	89370 <assertion_failed>
   8af14:	b0000083 	adrp	x3, 9b000 <vtable for CSoftSerialDevice+0x90>
   8af18:	9124a061 	add	x1, x3, #0x928
   8af1c:	9109a020 	add	x0, x1, #0x268
   8af20:	52802682 	mov	w2, #0x134                 	// #308
   8af24:	97fff913 	bl	89370 <assertion_failed>
   8af28:	d503201f 	nop
   8af2c:	d503201f 	nop

000000000008af30 <CGPIOPin::WriteAll(unsigned int, unsigned int)>:
   8af30:	6a200022 	bics	w2, w1, w0
   8af34:	54000080 	b.eq	8af44 <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x14>  // b.none
   8af38:	d2800503 	mov	x3, #0x28                  	// #40
   8af3c:	f2bfc403 	movk	x3, #0xfe20, lsl #16
   8af40:	b9000062 	str	w2, [x3]
   8af44:	6a010000 	ands	w0, w0, w1
   8af48:	54000080 	b.eq	8af58 <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x28>  // b.none
   8af4c:	d2800381 	mov	x1, #0x1c                  	// #28
   8af50:	f2bfc401 	movk	x1, #0xfe20, lsl #16
   8af54:	b9000020 	str	w0, [x1]
   8af58:	d65f03c0 	ret
   8af5c:	d503201f 	nop

000000000008af60 <CGPIOPin::ReadAll()>:
   8af60:	d2800680 	mov	x0, #0x34                  	// #52
   8af64:	f2bfc400 	movk	x0, #0xfe20, lsl #16
   8af68:	b9400000 	ldr	w0, [x0]
   8af6c:	d65f03c0 	ret

000000000008af70 <CGPIOPin::SetPullMode(TGPIOPullMode)>:
   8af70:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   8af74:	f0016ed3 	adrp	x19, 2e65000 <temp_gold+0xf421a0>
   8af78:	2a0103f4 	mov	w20, w1
   8af7c:	a9017bf5 	stp	x21, x30, [sp, #16]
   8af80:	aa0003f5 	mov	x21, x0
   8af84:	b9427260 	ldr	w0, [x19, #624]
   8af88:	35000360 	cbnz	w0, 8aff4 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x84>
   8af8c:	b9400aa0 	ldr	w0, [x21, #8]
   8af90:	7100d41f 	cmp	w0, #0x35
   8af94:	54000388 	b.hi	8b004 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x94>  // b.pmore
   8af98:	52800722 	mov	w2, #0x39                  	// #57
   8af9c:	72a7f102 	movk	w2, #0x3f88, lsl #16
   8afa0:	0b401043 	add	w3, w2, w0, lsr #4
   8afa4:	71000a9f 	cmp	w20, #0x2
   8afa8:	531f0c05 	ubfiz	w5, w0, #1, #4
   8afac:	531e7466 	lsl	w6, w3, #2
   8afb0:	540003ac 	b.gt	8b024 <CGPIOPin::SetPullMode(TGPIOPullMode)+0xb4>
   8afb4:	b0000087 	adrp	x7, 9b000 <vtable for CSoftSerialDevice+0x90>
   8afb8:	9124a0e8 	add	x8, x7, #0x928
   8afbc:	b94000ce 	ldr	w14, [x6]
   8afc0:	9109e109 	add	x9, x8, #0x278
   8afc4:	5280006a 	mov	w10, #0x3                   	// #3
   8afc8:	b874d92b 	ldr	w11, [x9, w20, sxtw #2]
   8afcc:	1ac5214c 	lsl	w12, w10, w5
   8afd0:	0a2c01cf 	bic	w15, w14, w12
   8afd4:	1ac5216d 	lsl	w13, w11, w5
   8afd8:	2a0f01b0 	orr	w16, w13, w15
   8afdc:	b90000d0 	str	w16, [x6]
   8afe0:	b9427271 	ldr	w17, [x19, #624]
   8afe4:	350001b1 	cbnz	w17, 8b018 <CGPIOPin::SetPullMode(TGPIOPullMode)+0xa8>
   8afe8:	a9417bf5 	ldp	x21, x30, [sp, #16]
   8afec:	a8c253f3 	ldp	x19, x20, [sp], #32
   8aff0:	d65f03c0 	ret
   8aff4:	9400290f 	bl	95430 <EnterCritical>
   8aff8:	b9400aa0 	ldr	w0, [x21, #8]
   8affc:	7100d41f 	cmp	w0, #0x35
   8b000:	54fffcc9 	b.ls	8af98 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x28>  // b.plast
   8b004:	90000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   8b008:	9124a021 	add	x1, x1, #0x928
   8b00c:	9100a020 	add	x0, x1, #0x28
   8b010:	52802da2 	mov	w2, #0x16d                 	// #365
   8b014:	97fff8d7 	bl	89370 <assertion_failed>
   8b018:	a9417bf5 	ldp	x21, x30, [sp, #16]
   8b01c:	a8c253f3 	ldp	x19, x20, [sp], #32
   8b020:	14002930 	b	954e0 <LeaveCritical>
   8b024:	90000084 	adrp	x4, 9b000 <vtable for CSoftSerialDevice+0x90>
   8b028:	9124a081 	add	x1, x4, #0x928
   8b02c:	910a2020 	add	x0, x1, #0x288
   8b030:	52802e22 	mov	w2, #0x171                 	// #369
   8b034:	97fff8cf 	bl	89370 <assertion_failed>
   8b038:	d503201f 	nop
   8b03c:	d503201f 	nop

000000000008b040 <CGPIOPin::SetAlternateFunction(unsigned int)>:
   8b040:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   8b044:	b9400803 	ldr	w3, [x0, #8]
   8b048:	a9015bf5 	stp	x21, x22, [sp, #16]
   8b04c:	f90013fe 	str	x30, [sp, #32]
   8b050:	7100d47f 	cmp	w3, #0x35
   8b054:	54000508 	b.hi	8b0f4 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb4>  // b.pmore
   8b058:	529999a0 	mov	w0, #0xcccd                	// #52429
   8b05c:	72b99980 	movk	w0, #0xcccc, lsl #16
   8b060:	52a7f113 	mov	w19, #0x3f880000            	// #1065877504
   8b064:	7100143f 	cmp	w1, #0x5
   8b068:	9ba07c62 	umull	x2, w3, w0
   8b06c:	2a0103f5 	mov	w21, w1
   8b070:	d363fc44 	lsr	x4, x2, #35
   8b074:	0b040885 	add	w5, w4, w4, lsl #2
   8b078:	0b130086 	add	w6, w4, w19
   8b07c:	531e74d3 	lsl	w19, w6, #2
   8b080:	4b050467 	sub	w7, w3, w5, lsl #1
   8b084:	0b0704f4 	add	w20, w7, w7, lsl #1
   8b088:	54000408 	b.hi	8b108 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc8>  // b.pmore
   8b08c:	d0016ed6 	adrp	x22, 2e65000 <temp_gold+0xf421a0>
   8b090:	b94272c0 	ldr	w0, [x22, #624]
   8b094:	35000240 	cbnz	w0, 8b0dc <CGPIOPin::SetAlternateFunction(unsigned int)+0x9c>
   8b098:	90000089 	adrp	x9, 9b000 <vtable for CSoftSerialDevice+0x90>
   8b09c:	9124a12a 	add	x10, x9, #0x928
   8b0a0:	b9400270 	ldr	w16, [x19]
   8b0a4:	910a614b 	add	x11, x10, #0x298
   8b0a8:	528000ec 	mov	w12, #0x7                   	// #7
   8b0ac:	b875596d 	ldr	w13, [x11, w21, uxtw #2]
   8b0b0:	1ad4218e 	lsl	w14, w12, w20
   8b0b4:	0a2e0211 	bic	w17, w16, w14
   8b0b8:	1ad421af 	lsl	w15, w13, w20
   8b0bc:	2a1101f2 	orr	w18, w15, w17
   8b0c0:	b9000272 	str	w18, [x19]
   8b0c4:	b94272de 	ldr	w30, [x22, #624]
   8b0c8:	350000fe 	cbnz	w30, 8b0e4 <CGPIOPin::SetAlternateFunction(unsigned int)+0xa4>
   8b0cc:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8b0d0:	f94013fe 	ldr	x30, [sp, #32]
   8b0d4:	a8c353f3 	ldp	x19, x20, [sp], #48
   8b0d8:	d65f03c0 	ret
   8b0dc:	940028d5 	bl	95430 <EnterCritical>
   8b0e0:	17ffffee 	b	8b098 <CGPIOPin::SetAlternateFunction(unsigned int)+0x58>
   8b0e4:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8b0e8:	f94013fe 	ldr	x30, [sp, #32]
   8b0ec:	a8c353f3 	ldp	x19, x20, [sp], #48
   8b0f0:	140028fc 	b	954e0 <LeaveCritical>
   8b0f4:	90000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   8b0f8:	9124a021 	add	x1, x1, #0x928
   8b0fc:	9100a020 	add	x0, x1, #0x28
   8b100:	52803022 	mov	w2, #0x181                 	// #385
   8b104:	97fff89b 	bl	89370 <assertion_failed>
   8b108:	90000088 	adrp	x8, 9b000 <vtable for CSoftSerialDevice+0x90>
   8b10c:	9124a101 	add	x1, x8, #0x928
   8b110:	910ac020 	add	x0, x1, #0x2b0
   8b114:	528030a2 	mov	w2, #0x185                 	// #389
   8b118:	97fff896 	bl	89370 <assertion_failed>
   8b11c:	d503201f 	nop

000000000008b120 <CGPIOPin::InterruptHandler()>:
   8b120:	b9401401 	ldr	w1, [x0, #20]
   8b124:	f81f0ffe 	str	x30, [sp, #-16]!
   8b128:	7100003f 	cmp	w1, #0x0
   8b12c:	51000822 	sub	w2, w1, #0x2
   8b130:	7a411840 	ccmp	w2, #0x1, #0x0, ne  // ne = any
   8b134:	540002c8 	b.hi	8b18c <CGPIOPin::InterruptHandler()+0x6c>  // b.pmore
   8b138:	b9403c03 	ldr	w3, [x0, #60]
   8b13c:	7100147f 	cmp	w3, #0x5
   8b140:	540000cc 	b.gt	8b158 <CGPIOPin::InterruptHandler()+0x38>
   8b144:	f9401406 	ldr	x6, [x0, #40]
   8b148:	b4000186 	cbz	x6, 8b178 <CGPIOPin::InterruptHandler()+0x58>
   8b14c:	f84107fe 	ldr	x30, [sp], #16
   8b150:	f9401800 	ldr	x0, [x0, #48]
   8b154:	d61f00c0 	br	x6
   8b158:	b9404004 	ldr	w4, [x0, #64]
   8b15c:	7100149f 	cmp	w4, #0x5
   8b160:	54ffff2d 	b.le	8b144 <CGPIOPin::InterruptHandler()+0x24>
   8b164:	90000085 	adrp	x5, 9b000 <vtable for CSoftSerialDevice+0x90>
   8b168:	9124a0a1 	add	x1, x5, #0x928
   8b16c:	910b0020 	add	x0, x1, #0x2c0
   8b170:	528032c2 	mov	w2, #0x196                 	// #406
   8b174:	97fff87f 	bl	89370 <assertion_failed>
   8b178:	90000087 	adrp	x7, 9b000 <vtable for CSoftSerialDevice+0x90>
   8b17c:	9124a0e1 	add	x1, x7, #0x928
   8b180:	91068020 	add	x0, x1, #0x1a0
   8b184:	52803302 	mov	w2, #0x198                 	// #408
   8b188:	97fff87a 	bl	89370 <assertion_failed>
   8b18c:	90000080 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   8b190:	9124a001 	add	x1, x0, #0x928
   8b194:	91028020 	add	x0, x1, #0xa0
   8b198:	52803282 	mov	w2, #0x194                 	// #404
   8b19c:	97fff875 	bl	89370 <assertion_failed>

000000000008b1a0 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
   8b1a0:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   8b1a4:	7100d41f 	cmp	w0, #0x35
   8b1a8:	a9017bf5 	stp	x21, x30, [sp, #16]
   8b1ac:	54000c68 	b.hi	8b338 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x198>  // b.pmore
   8b1b0:	52800273 	mov	w19, #0x13                  	// #19
   8b1b4:	72a7f113 	movk	w19, #0x3f88, lsl #16
   8b1b8:	d0016ed5 	adrp	x21, 2e65000 <temp_gold+0xf421a0>
   8b1bc:	0b401663 	add	w3, w19, w0, lsr #5
   8b1c0:	52800024 	mov	w4, #0x1                   	// #1
   8b1c4:	b94272a2 	ldr	w2, [x21, #624]
   8b1c8:	1ac02094 	lsl	w20, w4, w0
   8b1cc:	531e7473 	lsl	w19, w3, #2
   8b1d0:	35000a82 	cbnz	w2, 8b320 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x180>
   8b1d4:	b940026b 	ldr	w11, [x19]
   8b1d8:	d2801166 	mov	x6, #0x8b                  	// #139
   8b1dc:	f2bfc406 	movk	x6, #0xfe20, lsl #16
   8b1e0:	b201f3e5 	mov	x5, #0xaaaaaaaaaaaaaaaa    	// #-6148914691236517206
   8b1e4:	cb1300c7 	sub	x7, x6, x19
   8b1e8:	f2955565 	movk	x5, #0xaaab
   8b1ec:	2a3403e8 	mvn	w8, w20
   8b1f0:	aa1303e0 	mov	x0, x19
   8b1f4:	9bc57ce9 	umulh	x9, x7, x5
   8b1f8:	0a0b010c 	and	w12, w8, w11
   8b1fc:	b800c40c 	str	w12, [x0], #12
   8b200:	eb06001f 	cmp	x0, x6
   8b204:	d343152a 	ubfx	x10, x9, #3, #3
   8b208:	54000828 	b.hi	8b30c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x16c>  // b.pmore
   8b20c:	b40004aa 	cbz	x10, 8b2a0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x100>
   8b210:	f100055f 	cmp	x10, #0x1
   8b214:	540003c0 	b.eq	8b28c <CGPIOPin::DisableAllInterrupts(unsigned int)+0xec>  // b.none
   8b218:	f100095f 	cmp	x10, #0x2
   8b21c:	54000320 	b.eq	8b280 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xe0>  // b.none
   8b220:	f1000d5f 	cmp	x10, #0x3
   8b224:	54000280 	b.eq	8b274 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xd4>  // b.none
   8b228:	f100115f 	cmp	x10, #0x4
   8b22c:	540001e0 	b.eq	8b268 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xc8>  // b.none
   8b230:	f100155f 	cmp	x10, #0x5
   8b234:	54000140 	b.eq	8b25c <CGPIOPin::DisableAllInterrupts(unsigned int)+0xbc>  // b.none
   8b238:	f100195f 	cmp	x10, #0x6
   8b23c:	540000a0 	b.eq	8b250 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xb0>  // b.none
   8b240:	b940000d 	ldr	w13, [x0]
   8b244:	0a0d010e 	and	w14, w8, w13
   8b248:	b900000e 	str	w14, [x0]
   8b24c:	91006260 	add	x0, x19, #0x18
   8b250:	b940000f 	ldr	w15, [x0]
   8b254:	0a0f0110 	and	w16, w8, w15
   8b258:	b800c410 	str	w16, [x0], #12
   8b25c:	b9400011 	ldr	w17, [x0]
   8b260:	0a110112 	and	w18, w8, w17
   8b264:	b800c412 	str	w18, [x0], #12
   8b268:	b940001e 	ldr	w30, [x0]
   8b26c:	0a1e0101 	and	w1, w8, w30
   8b270:	b800c401 	str	w1, [x0], #12
   8b274:	b9400003 	ldr	w3, [x0]
   8b278:	0a030102 	and	w2, w8, w3
   8b27c:	b800c402 	str	w2, [x0], #12
   8b280:	b9400004 	ldr	w4, [x0]
   8b284:	0a040114 	and	w20, w8, w4
   8b288:	b800c414 	str	w20, [x0], #12
   8b28c:	b9400013 	ldr	w19, [x0]
   8b290:	0a130105 	and	w5, w8, w19
   8b294:	b800c405 	str	w5, [x0], #12
   8b298:	eb06001f 	cmp	x0, x6
   8b29c:	54000388 	b.hi	8b30c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x16c>  // b.pmore
   8b2a0:	b9400007 	ldr	w7, [x0]
   8b2a4:	91018000 	add	x0, x0, #0x60
   8b2a8:	0a070109 	and	w9, w8, w7
   8b2ac:	b81a0009 	stur	w9, [x0, #-96]
   8b2b0:	b85ac00a 	ldur	w10, [x0, #-84]
   8b2b4:	0a0a010b 	and	w11, w8, w10
   8b2b8:	b81ac00b 	stur	w11, [x0, #-84]
   8b2bc:	b85b800c 	ldur	w12, [x0, #-72]
   8b2c0:	0a0c010d 	and	w13, w8, w12
   8b2c4:	b81b800d 	stur	w13, [x0, #-72]
   8b2c8:	b85c400e 	ldur	w14, [x0, #-60]
   8b2cc:	0a0e010f 	and	w15, w8, w14
   8b2d0:	b81c400f 	stur	w15, [x0, #-60]
   8b2d4:	b85d0010 	ldur	w16, [x0, #-48]
   8b2d8:	0a100111 	and	w17, w8, w16
   8b2dc:	b81d0011 	stur	w17, [x0, #-48]
   8b2e0:	b85dc012 	ldur	w18, [x0, #-36]
   8b2e4:	0a12011e 	and	w30, w8, w18
   8b2e8:	b81dc01e 	stur	w30, [x0, #-36]
   8b2ec:	b85e8001 	ldur	w1, [x0, #-24]
   8b2f0:	0a010103 	and	w3, w8, w1
   8b2f4:	b81e8003 	stur	w3, [x0, #-24]
   8b2f8:	b85f4002 	ldur	w2, [x0, #-12]
   8b2fc:	0a020104 	and	w4, w8, w2
   8b300:	b81f4004 	stur	w4, [x0, #-12]
   8b304:	eb06001f 	cmp	x0, x6
   8b308:	54fffcc9 	b.ls	8b2a0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x100>  // b.plast
   8b30c:	b94272a6 	ldr	w6, [x21, #624]
   8b310:	350000e6 	cbnz	w6, 8b32c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x18c>
   8b314:	a9417bf5 	ldp	x21, x30, [sp, #16]
   8b318:	a8c253f3 	ldp	x19, x20, [sp], #32
   8b31c:	d65f03c0 	ret
   8b320:	2a0203e0 	mov	w0, w2
   8b324:	94002843 	bl	95430 <EnterCritical>
   8b328:	17ffffab 	b	8b1d4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x34>
   8b32c:	a9417bf5 	ldp	x21, x30, [sp, #16]
   8b330:	a8c253f3 	ldp	x19, x20, [sp], #32
   8b334:	1400286b 	b	954e0 <LeaveCritical>
   8b338:	90000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   8b33c:	9124a021 	add	x1, x1, #0x928
   8b340:	910c4020 	add	x0, x1, #0x310
   8b344:	528033c2 	mov	w2, #0x19e                 	// #414
   8b348:	97fff80a 	bl	89370 <assertion_failed>
   8b34c:	d503201f 	nop

000000000008b350 <__static_initialization_and_destruction_0(int, int)>:
   8b350:	529fffe2 	mov	w2, #0xffff                	// #65535
   8b354:	6b02003f 	cmp	w1, w2
   8b358:	7a410800 	ccmp	w0, #0x1, #0x0, eq  // eq = none
   8b35c:	54000040 	b.eq	8b364 <__static_initialization_and_destruction_0(int, int)+0x14>  // b.none
   8b360:	d65f03c0 	ret
   8b364:	d0016ec0 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   8b368:	52800021 	mov	w1, #0x1                   	// #1
   8b36c:	b9027001 	str	w1, [x0, #624]
   8b370:	d65f03c0 	ret
	...

000000000008b380 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
   8b380:	d0016ec0 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   8b384:	52800021 	mov	w1, #0x1                   	// #1
   8b388:	b9027001 	str	w1, [x0, #624]
   8b38c:	d65f03c0 	ret

000000000008b390 <CKernelOptions::CKernelOptions()>:
   8b390:	a9b853f3 	stp	x19, x20, [sp, #-128]!
   8b394:	52800083 	mov	w3, #0x4                   	// #4
   8b398:	aa0003f4 	mov	x20, x0
   8b39c:	52800782 	mov	w2, #0x3c                  	// #60
   8b3a0:	a9015bf5 	stp	x21, x22, [sp, #16]
   8b3a4:	90000095 	adrp	x21, 9b000 <vtable for CSoftSerialDevice+0x90>
   8b3a8:	913142b5 	add	x21, x21, #0xc50
   8b3ac:	aa1503e1 	mov	x1, x21
   8b3b0:	a90263f7 	stp	x23, x24, [sp, #32]
   8b3b4:	91208017 	add	x23, x0, #0x820
   8b3b8:	9120e018 	add	x24, x0, #0x838
   8b3bc:	f9002bfe 	str	x30, [sp, #80]
   8b3c0:	f9040c1f 	str	xzr, [x0, #2072]
   8b3c4:	aa1703e0 	mov	x0, x23
   8b3c8:	b9083683 	str	w3, [x20, #2100]
   8b3cc:	b9083e9f 	str	wzr, [x20, #2108]
   8b3d0:	3921029f 	strb	wzr, [x20, #2112]
   8b3d4:	f9042e9f 	str	xzr, [x20, #2136]
   8b3d8:	b9086282 	str	w2, [x20, #2144]
   8b3dc:	9400227e 	bl	93dd4 <strcpy>
   8b3e0:	910022a1 	add	x1, x21, #0x8
   8b3e4:	aa1803e0 	mov	x0, x24
   8b3e8:	9400227b 	bl	93dd4 <strcpy>
   8b3ec:	d0016ec4 	adrp	x4, 2e65000 <temp_gold+0xf421a0>
   8b3f0:	9101e3e0 	add	x0, sp, #0x78
   8b3f4:	3921069f 	strb	wzr, [x20, #2113]
   8b3f8:	52800001 	mov	w1, #0x0                   	// #0
   8b3fc:	f9013c94 	str	x20, [x4, #632]
   8b400:	97fff7fc 	bl	893f0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   8b404:	aa1403e2 	mov	x2, x20
   8b408:	9101e3e0 	add	x0, sp, #0x78
   8b40c:	52800021 	mov	w1, #0x1                   	// #1
   8b410:	72a000a1 	movk	w1, #0x5, lsl #16
   8b414:	52800004 	mov	w4, #0x0                   	// #0
   8b418:	52810183 	mov	w3, #0x80c                 	// #2060
   8b41c:	97fff7fd 	bl	89410 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   8b420:	72001c1f 	tst	w0, #0xff
   8b424:	54000720 	b.eq	8b508 <CKernelOptions::CKernelOptions()+0x178>  // b.none
   8b428:	b9400a80 	ldr	w0, [x20, #8]
   8b42c:	711ffc1f 	cmp	w0, #0x7ff
   8b430:	540006c8 	b.hi	8b508 <CKernelOptions::CKernelOptions()+0x178>  // b.pmore
   8b434:	91003281 	add	x1, x20, #0xc
   8b438:	910082a6 	add	x6, x21, #0x20
   8b43c:	a9036bf9 	stp	x25, x26, [sp, #48]
   8b440:	910282b6 	add	x22, x21, #0xa0
   8b444:	910042b9 	add	x25, x21, #0x10
   8b448:	8b204285 	add	x5, x20, w0, uxtw
   8b44c:	910062ba 	add	x26, x21, #0x18
   8b450:	a90473fb 	stp	x27, x28, [sp, #64]
   8b454:	390030bf 	strb	wzr, [x5, #12]
   8b458:	f90037e6 	str	x6, [sp, #104]
   8b45c:	f9040a81 	str	x1, [x20, #2064]
   8b460:	aa1403e0 	mov	x0, x20
   8b464:	940000db 	bl	8b7d0 <CKernelOptions::GetToken()>
   8b468:	aa0003fc 	mov	x28, x0
   8b46c:	b40004a0 	cbz	x0, 8b500 <CKernelOptions::CKernelOptions()+0x170>
   8b470:	39c00007 	ldrsb	w7, [x0]
   8b474:	34000127 	cbz	w7, 8b498 <CKernelOptions::CKernelOptions()+0x108>
   8b478:	7100f4ff 	cmp	w7, #0x3d
   8b47c:	aa0003f3 	mov	x19, x0
   8b480:	54000081 	b.ne	8b490 <CKernelOptions::CKernelOptions()+0x100>  // b.any
   8b484:	14000028 	b	8b524 <CKernelOptions::CKernelOptions()+0x194>
   8b488:	7100f51f 	cmp	w8, #0x3d
   8b48c:	540004c0 	b.eq	8b524 <CKernelOptions::CKernelOptions()+0x194>  // b.none
   8b490:	38c01e68 	ldrsb	w8, [x19, #1]!
   8b494:	35ffffa8 	cbnz	w8, 8b488 <CKernelOptions::CKernelOptions()+0xf8>
   8b498:	aa1603e1 	mov	x1, x22
   8b49c:	aa1c03e0 	mov	x0, x28
   8b4a0:	94002168 	bl	93a40 <strcmp>
   8b4a4:	34fffde0 	cbz	w0, 8b460 <CKernelOptions::CKernelOptions()+0xd0>
   8b4a8:	aa1903e1 	mov	x1, x25
   8b4ac:	aa1c03e0 	mov	x0, x28
   8b4b0:	94002164 	bl	93a40 <strcmp>
   8b4b4:	d280001b 	mov	x27, #0x0                   	// #0
   8b4b8:	34fffd40 	cbz	w0, 8b460 <CKernelOptions::CKernelOptions()+0xd0>
   8b4bc:	aa1a03e1 	mov	x1, x26
   8b4c0:	aa1c03e0 	mov	x0, x28
   8b4c4:	9400215f 	bl	93a40 <strcmp>
   8b4c8:	34000660 	cbz	w0, 8b594 <CKernelOptions::CKernelOptions()+0x204>
   8b4cc:	aa1c03e0 	mov	x0, x28
   8b4d0:	f94037e1 	ldr	x1, [sp, #104]
   8b4d4:	9400215b 	bl	93a40 <strcmp>
   8b4d8:	350006a0 	cbnz	w0, 8b5ac <CKernelOptions::CKernelOptions()+0x21c>
   8b4dc:	b4fffc3b 	cbz	x27, 8b460 <CKernelOptions::CKernelOptions()+0xd0>
   8b4e0:	39c0037e 	ldrsb	w30, [x27]
   8b4e4:	34fffbfe 	cbz	w30, 8b460 <CKernelOptions::CKernelOptions()+0xd0>
   8b4e8:	aa1b03e0 	mov	x0, x27
   8b4ec:	940000e9 	bl	8b890 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   8b4f0:	7100101f 	cmp	w0, #0x4
   8b4f4:	54fffb68 	b.hi	8b460 <CKernelOptions::CKernelOptions()+0xd0>  // b.pmore
   8b4f8:	b9083680 	str	w0, [x20, #2100]
   8b4fc:	17ffffd9 	b	8b460 <CKernelOptions::CKernelOptions()+0xd0>
   8b500:	a9436bf9 	ldp	x25, x26, [sp, #48]
   8b504:	a94473fb 	ldp	x27, x28, [sp, #64]
   8b508:	9101e3e0 	add	x0, sp, #0x78
   8b50c:	97fff7bd 	bl	89400 <CBcmPropertyTags::~CBcmPropertyTags()>
   8b510:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8b514:	a94263f7 	ldp	x23, x24, [sp, #32]
   8b518:	f9402bfe 	ldr	x30, [sp, #80]
   8b51c:	a8c853f3 	ldp	x19, x20, [sp], #128
   8b520:	d65f03c0 	ret
   8b524:	aa1303fb 	mov	x27, x19
   8b528:	aa1603e1 	mov	x1, x22
   8b52c:	aa1c03e0 	mov	x0, x28
   8b530:	3800177f 	strb	wzr, [x27], #1
   8b534:	94002143 	bl	93a40 <strcmp>
   8b538:	35000140 	cbnz	w0, 8b560 <CKernelOptions::CKernelOptions()+0x1d0>
   8b53c:	b4fff93b 	cbz	x27, 8b460 <CKernelOptions::CKernelOptions()+0xd0>
   8b540:	39c0066a 	ldrsb	w10, [x19, #1]
   8b544:	34fff8ea 	cbz	w10, 8b460 <CKernelOptions::CKernelOptions()+0xd0>
   8b548:	aa1b03e0 	mov	x0, x27
   8b54c:	940000d1 	bl	8b890 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   8b550:	3100041f 	cmn	w0, #0x1
   8b554:	54fff860 	b.eq	8b460 <CKernelOptions::CKernelOptions()+0xd0>  // b.none
   8b558:	b9081a80 	str	w0, [x20, #2072]
   8b55c:	17ffffc1 	b	8b460 <CKernelOptions::CKernelOptions()+0xd0>
   8b560:	aa1903e1 	mov	x1, x25
   8b564:	aa1c03e0 	mov	x0, x28
   8b568:	94002136 	bl	93a40 <strcmp>
   8b56c:	35fffa80 	cbnz	w0, 8b4bc <CKernelOptions::CKernelOptions()+0x12c>
   8b570:	b4fff79b 	cbz	x27, 8b460 <CKernelOptions::CKernelOptions()+0xd0>
   8b574:	39c00669 	ldrsb	w9, [x19, #1]
   8b578:	34fff749 	cbz	w9, 8b460 <CKernelOptions::CKernelOptions()+0xd0>
   8b57c:	aa1b03e0 	mov	x0, x27
   8b580:	940000c4 	bl	8b890 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   8b584:	3100041f 	cmn	w0, #0x1
   8b588:	54fff6c0 	b.eq	8b460 <CKernelOptions::CKernelOptions()+0xd0>  // b.none
   8b58c:	b9081e80 	str	w0, [x20, #2076]
   8b590:	17ffffb4 	b	8b460 <CKernelOptions::CKernelOptions()+0xd0>
   8b594:	aa1b03e1 	mov	x1, x27
   8b598:	d2800262 	mov	x2, #0x13                  	// #19
   8b59c:	aa1703e0 	mov	x0, x23
   8b5a0:	94002215 	bl	93df4 <strncpy>
   8b5a4:	3920ce9f 	strb	wzr, [x20, #2099]
   8b5a8:	17ffffae 	b	8b460 <CKernelOptions::CKernelOptions()+0xd0>
   8b5ac:	9100c2a1 	add	x1, x21, #0x30
   8b5b0:	aa1c03e0 	mov	x0, x28
   8b5b4:	94002123 	bl	93a40 <strcmp>
   8b5b8:	34000200 	cbz	w0, 8b5f8 <CKernelOptions::CKernelOptions()+0x268>
   8b5bc:	9100e2a1 	add	x1, x21, #0x38
   8b5c0:	aa1c03e0 	mov	x0, x28
   8b5c4:	9400211f 	bl	93a40 <strcmp>
   8b5c8:	35000240 	cbnz	w0, 8b610 <CKernelOptions::CKernelOptions()+0x280>
   8b5cc:	b4fff4bb 	cbz	x27, 8b460 <CKernelOptions::CKernelOptions()+0xd0>
   8b5d0:	39c00370 	ldrsb	w16, [x27]
   8b5d4:	34fff470 	cbz	w16, 8b460 <CKernelOptions::CKernelOptions()+0xd0>
   8b5d8:	aa1b03e0 	mov	x0, x27
   8b5dc:	940000ad 	bl	8b890 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   8b5e0:	5283cf11 	mov	w17, #0x1e78                	// #7800
   8b5e4:	51032012 	sub	w18, w0, #0xc8
   8b5e8:	6b11025f 	cmp	w18, w17
   8b5ec:	54fff3a8 	b.hi	8b460 <CKernelOptions::CKernelOptions()+0xd0>  // b.pmore
   8b5f0:	b9083e80 	str	w0, [x20, #2108]
   8b5f4:	17ffff9b 	b	8b460 <CKernelOptions::CKernelOptions()+0xd0>
   8b5f8:	aa1b03e1 	mov	x1, x27
   8b5fc:	d2800042 	mov	x2, #0x2                   	// #2
   8b600:	aa1803e0 	mov	x0, x24
   8b604:	940021fc 	bl	93df4 <strncpy>
   8b608:	3920ea9f 	strb	wzr, [x20, #2106]
   8b60c:	17ffff95 	b	8b460 <CKernelOptions::CKernelOptions()+0xd0>
   8b610:	910122a1 	add	x1, x21, #0x48
   8b614:	aa1c03e0 	mov	x0, x28
   8b618:	9400210a 	bl	93a40 <strcmp>
   8b61c:	35000100 	cbnz	w0, 8b63c <CKernelOptions::CKernelOptions()+0x2ac>
   8b620:	aa1b03e0 	mov	x0, x27
   8b624:	910162a1 	add	x1, x21, #0x58
   8b628:	94002106 	bl	93a40 <strcmp>
   8b62c:	35fff1a0 	cbnz	w0, 8b460 <CKernelOptions::CKernelOptions()+0xd0>
   8b630:	5280002f 	mov	w15, #0x1                   	// #1
   8b634:	3921028f 	strb	w15, [x20, #2112]
   8b638:	17ffff8a 	b	8b460 <CKernelOptions::CKernelOptions()+0xd0>
   8b63c:	910182a1 	add	x1, x21, #0x60
   8b640:	aa1c03e0 	mov	x0, x28
   8b644:	940020ff 	bl	93a40 <strcmp>
   8b648:	350000e0 	cbnz	w0, 8b664 <CKernelOptions::CKernelOptions()+0x2d4>
   8b64c:	aa1b03e1 	mov	x1, x27
   8b650:	d2800262 	mov	x2, #0x13                  	// #19
   8b654:	91210680 	add	x0, x20, #0x841
   8b658:	940021e7 	bl	93df4 <strncpy>
   8b65c:	3921529f 	strb	wzr, [x20, #2132]
   8b660:	17ffff80 	b	8b460 <CKernelOptions::CKernelOptions()+0xd0>
   8b664:	9101c2a1 	add	x1, x21, #0x70
   8b668:	aa1c03e0 	mov	x0, x28
   8b66c:	940020f5 	bl	93a40 <strcmp>
   8b670:	35000140 	cbnz	w0, 8b698 <CKernelOptions::CKernelOptions()+0x308>
   8b674:	b4ffef7b 	cbz	x27, 8b460 <CKernelOptions::CKernelOptions()+0xd0>
   8b678:	39c0036e 	ldrsb	w14, [x27]
   8b67c:	34ffef2e 	cbz	w14, 8b460 <CKernelOptions::CKernelOptions()+0xd0>
   8b680:	aa1b03e0 	mov	x0, x27
   8b684:	94000083 	bl	8b890 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   8b688:	7100081f 	cmp	w0, #0x2
   8b68c:	54ffeea8 	b.hi	8b460 <CKernelOptions::CKernelOptions()+0xd0>  // b.pmore
   8b690:	b9085a80 	str	w0, [x20, #2136]
   8b694:	17ffff73 	b	8b460 <CKernelOptions::CKernelOptions()+0xd0>
   8b698:	910202a1 	add	x1, x21, #0x80
   8b69c:	aa1c03e0 	mov	x0, x28
   8b6a0:	940020e8 	bl	93a40 <strcmp>
   8b6a4:	35000100 	cbnz	w0, 8b6c4 <CKernelOptions::CKernelOptions()+0x334>
   8b6a8:	aa1b03e0 	mov	x0, x27
   8b6ac:	910222a1 	add	x1, x21, #0x88
   8b6b0:	940020e4 	bl	93a40 <strcmp>
   8b6b4:	35ffed60 	cbnz	w0, 8b460 <CKernelOptions::CKernelOptions()+0xd0>
   8b6b8:	5280002d 	mov	w13, #0x1                   	// #1
   8b6bc:	b9085e8d 	str	w13, [x20, #2140]
   8b6c0:	17ffff68 	b	8b460 <CKernelOptions::CKernelOptions()+0xd0>
   8b6c4:	aa1c03e0 	mov	x0, x28
   8b6c8:	910242a1 	add	x1, x21, #0x90
   8b6cc:	940020dd 	bl	93a40 <strcmp>
   8b6d0:	7100001f 	cmp	w0, #0x0
   8b6d4:	fa400b64 	ccmp	x27, #0x0, #0x4, eq  // eq = none
   8b6d8:	54ffec40 	b.eq	8b460 <CKernelOptions::CKernelOptions()+0xd0>  // b.none
   8b6dc:	39c0036b 	ldrsb	w11, [x27]
   8b6e0:	34ffec0b 	cbz	w11, 8b460 <CKernelOptions::CKernelOptions()+0xd0>
   8b6e4:	aa1b03e0 	mov	x0, x27
   8b6e8:	9400006a 	bl	8b890 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   8b6ec:	5100a00c 	sub	w12, w0, #0x28
   8b6f0:	7100999f 	cmp	w12, #0x26
   8b6f4:	54ffeb68 	b.hi	8b460 <CKernelOptions::CKernelOptions()+0xd0>  // b.pmore
   8b6f8:	b9086280 	str	w0, [x20, #2144]
   8b6fc:	17ffff59 	b	8b460 <CKernelOptions::CKernelOptions()+0xd0>

000000000008b700 <CKernelOptions::~CKernelOptions()>:
   8b700:	d0016ec0 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   8b704:	f9013c1f 	str	xzr, [x0, #632]
   8b708:	d65f03c0 	ret
   8b70c:	d503201f 	nop

000000000008b710 <CKernelOptions::GetWidth() const>:
   8b710:	b9481800 	ldr	w0, [x0, #2072]
   8b714:	d65f03c0 	ret
   8b718:	d503201f 	nop
   8b71c:	d503201f 	nop

000000000008b720 <CKernelOptions::GetHeight() const>:
   8b720:	b9481c00 	ldr	w0, [x0, #2076]
   8b724:	d65f03c0 	ret
   8b728:	d503201f 	nop
   8b72c:	d503201f 	nop

000000000008b730 <CKernelOptions::GetLogDevice() const>:
   8b730:	91208000 	add	x0, x0, #0x820
   8b734:	d65f03c0 	ret
   8b738:	d503201f 	nop
   8b73c:	d503201f 	nop

000000000008b740 <CKernelOptions::GetLogLevel() const>:
   8b740:	b9483400 	ldr	w0, [x0, #2100]
   8b744:	d65f03c0 	ret
   8b748:	d503201f 	nop
   8b74c:	d503201f 	nop

000000000008b750 <CKernelOptions::GetKeyMap() const>:
   8b750:	9120e000 	add	x0, x0, #0x838
   8b754:	d65f03c0 	ret
   8b758:	d503201f 	nop
   8b75c:	d503201f 	nop

000000000008b760 <CKernelOptions::GetUSBPowerDelay() const>:
   8b760:	b9483c00 	ldr	w0, [x0, #2108]
   8b764:	d65f03c0 	ret
   8b768:	d503201f 	nop
   8b76c:	d503201f 	nop

000000000008b770 <CKernelOptions::GetUSBFullSpeed() const>:
   8b770:	39610000 	ldrb	w0, [x0, #2112]
   8b774:	d65f03c0 	ret
   8b778:	d503201f 	nop
   8b77c:	d503201f 	nop

000000000008b780 <CKernelOptions::GetSoundDevice() const>:
   8b780:	91210400 	add	x0, x0, #0x841
   8b784:	d65f03c0 	ret
   8b788:	d503201f 	nop
   8b78c:	d503201f 	nop

000000000008b790 <CKernelOptions::GetSoundOption() const>:
   8b790:	b9485800 	ldr	w0, [x0, #2136]
   8b794:	d65f03c0 	ret
   8b798:	d503201f 	nop
   8b79c:	d503201f 	nop

000000000008b7a0 <CKernelOptions::GetCPUSpeed() const>:
   8b7a0:	b9485c00 	ldr	w0, [x0, #2140]
   8b7a4:	d65f03c0 	ret
   8b7a8:	d503201f 	nop
   8b7ac:	d503201f 	nop

000000000008b7b0 <CKernelOptions::GetSoCMaxTemp() const>:
   8b7b0:	b9486000 	ldr	w0, [x0, #2144]
   8b7b4:	d65f03c0 	ret
   8b7b8:	d503201f 	nop
   8b7bc:	d503201f 	nop

000000000008b7c0 <CKernelOptions::Get()>:
   8b7c0:	d0016ec0 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   8b7c4:	f9413c00 	ldr	x0, [x0, #632]
   8b7c8:	d65f03c0 	ret
   8b7cc:	d503201f 	nop

000000000008b7d0 <CKernelOptions::GetToken()>:
   8b7d0:	aa0003e4 	mov	x4, x0
   8b7d4:	f9440800 	ldr	x0, [x0, #2064]
   8b7d8:	39c00001 	ldrsb	w1, [x0]
   8b7dc:	350000c1 	cbnz	w1, 8b7f4 <CKernelOptions::GetToken()+0x24>
   8b7e0:	14000011 	b	8b824 <CKernelOptions::GetToken()+0x54>
   8b7e4:	91000400 	add	x0, x0, #0x1
   8b7e8:	f9040880 	str	x0, [x4, #2064]
   8b7ec:	39c00001 	ldrsb	w1, [x0]
   8b7f0:	340001a1 	cbz	w1, 8b824 <CKernelOptions::GetToken()+0x54>
   8b7f4:	7100803f 	cmp	w1, #0x20
   8b7f8:	54ffff60 	b.eq	8b7e4 <CKernelOptions::GetToken()+0x14>  // b.none
   8b7fc:	aa0003e5 	mov	x5, x0
   8b800:	14000004 	b	8b810 <CKernelOptions::GetToken()+0x40>
   8b804:	7100807f 	cmp	w3, #0x20
   8b808:	54000120 	b.eq	8b82c <CKernelOptions::GetToken()+0x5c>  // b.none
   8b80c:	aa0203e5 	mov	x5, x2
   8b810:	910004a2 	add	x2, x5, #0x1
   8b814:	f9040882 	str	x2, [x4, #2064]
   8b818:	39c004a3 	ldrsb	w3, [x5, #1]
   8b81c:	35ffff43 	cbnz	w3, 8b804 <CKernelOptions::GetToken()+0x34>
   8b820:	d65f03c0 	ret
   8b824:	d2800000 	mov	x0, #0x0                   	// #0
   8b828:	d65f03c0 	ret
   8b82c:	910008a6 	add	x6, x5, #0x2
   8b830:	f9040886 	str	x6, [x4, #2064]
   8b834:	3900005f 	strb	wzr, [x2]
   8b838:	d65f03c0 	ret
   8b83c:	d503201f 	nop

000000000008b840 <CKernelOptions::GetOptionValue(char*)>:
   8b840:	39c00001 	ldrsb	w1, [x0]
   8b844:	35000081 	cbnz	w1, 8b854 <CKernelOptions::GetOptionValue(char*)+0x14>
   8b848:	14000007 	b	8b864 <CKernelOptions::GetOptionValue(char*)+0x24>
   8b84c:	38c01c01 	ldrsb	w1, [x0, #1]!
   8b850:	340000a1 	cbz	w1, 8b864 <CKernelOptions::GetOptionValue(char*)+0x24>
   8b854:	7100f43f 	cmp	w1, #0x3d
   8b858:	54ffffa1 	b.ne	8b84c <CKernelOptions::GetOptionValue(char*)+0xc>  // b.any
   8b85c:	3800141f 	strb	wzr, [x0], #1
   8b860:	d65f03c0 	ret
   8b864:	d2800000 	mov	x0, #0x0                   	// #0
   8b868:	d65f03c0 	ret
   8b86c:	d503201f 	nop

000000000008b870 <CKernelOptions::GetDecimal(char*)>:
   8b870:	b4000080 	cbz	x0, 8b880 <CKernelOptions::GetDecimal(char*)+0x10>
   8b874:	39c00002 	ldrsb	w2, [x0]
   8b878:	34000042 	cbz	w2, 8b880 <CKernelOptions::GetDecimal(char*)+0x10>
   8b87c:	14000005 	b	8b890 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   8b880:	12800000 	mov	w0, #0xffffffff            	// #-1
   8b884:	d65f03c0 	ret
   8b888:	d503201f 	nop
   8b88c:	d503201f 	nop

000000000008b890 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
   8b890:	aa0003e3 	mov	x3, x0
   8b894:	52800000 	mov	w0, #0x0                   	// #0
   8b898:	1400000a 	b	8b8c0 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x30>
   8b89c:	5100c024 	sub	w4, w1, #0x30
   8b8a0:	12001c86 	and	w6, w4, #0xff
   8b8a4:	0b020485 	add	w5, w4, w2, lsl #1
   8b8a8:	710024df 	cmp	w6, #0x9
   8b8ac:	54000128 	b.hi	8b8d0 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x40>  // b.pmore
   8b8b0:	6b05001f 	cmp	w0, w5
   8b8b4:	2a0503e0 	mov	w0, w5
   8b8b8:	3a4198a4 	ccmn	w5, #0x1, #0x4, ls  // ls = plast
   8b8bc:	540000a0 	b.eq	8b8d0 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x40>  // b.none
   8b8c0:	38c01461 	ldrsb	w1, [x3], #1
   8b8c4:	0b000802 	add	w2, w0, w0, lsl #2
   8b8c8:	35fffea1 	cbnz	w1, 8b89c <CKernelOptions::GetDecimal(char*) [clone .part.0]+0xc>
   8b8cc:	d65f03c0 	ret
   8b8d0:	12800000 	mov	w0, #0xffffffff            	// #-1
   8b8d4:	d65f03c0 	ret
	...

000000000008b8e0 <CLogger::CLogger(unsigned int, CTimer*, bool)>:
   8b8e0:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   8b8e4:	52800024 	mov	w4, #0x1                   	// #1
   8b8e8:	aa0003f3 	mov	x19, x0
   8b8ec:	d2880000 	mov	x0, #0x4000                	// #16384
   8b8f0:	b9000261 	str	w1, [x19]
   8b8f4:	f9000662 	str	x2, [x19, #8]
   8b8f8:	39004263 	strb	w3, [x19, #16]
   8b8fc:	a901fe7f 	stp	xzr, xzr, [x19, #24]
   8b900:	f900167f 	str	xzr, [x19, #40]
   8b904:	b9003264 	str	w4, [x19, #48]
   8b908:	f900e67f 	str	xzr, [x19, #456]
   8b90c:	b901d264 	str	w4, [x19, #464]
   8b910:	a91dfe7f 	stp	xzr, xzr, [x19, #472]
   8b914:	9400244f 	bl	94a50 <operator new[](unsigned long)>
   8b918:	d0016ec1 	adrp	x1, 2e65000 <temp_gold+0xf421a0>
   8b91c:	f9001260 	str	x0, [x19, #32]
   8b920:	f9014033 	str	x19, [x1, #640]
   8b924:	a8c17bf3 	ldp	x19, x30, [sp], #16
   8b928:	d65f03c0 	ret
   8b92c:	d503201f 	nop

000000000008b930 <CLogger::~CLogger()>:
   8b930:	d0016ec1 	adrp	x1, 2e65000 <temp_gold+0xf421a0>
   8b934:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   8b938:	aa0003f3 	mov	x19, x0
   8b93c:	f901403f 	str	xzr, [x1, #640]
   8b940:	b941cc04 	ldr	w4, [x0, #460]
   8b944:	14000008 	b	8b964 <CLogger::~CLogger()+0x34>
   8b948:	f9401c60 	ldr	x0, [x3, #56]
   8b94c:	9400245d 	bl	94ac0 <operator delete(void*, unsigned long)>
   8b950:	b941ce60 	ldr	w0, [x19, #460]
   8b954:	11000404 	add	w4, w0, #0x1
   8b958:	7100c89f 	cmp	w4, #0x32
   8b95c:	b901ce64 	str	w4, [x19, #460]
   8b960:	54000140 	b.eq	8b988 <CLogger::~CLogger()+0x58>  // b.none
   8b964:	b941ca62 	ldr	w2, [x19, #456]
   8b968:	8b244e63 	add	x3, x19, w4, uxtw #3
   8b96c:	d2802201 	mov	x1, #0x110                 	// #272
   8b970:	6b04005f 	cmp	w2, w4
   8b974:	54fffea1 	b.ne	8b948 <CLogger::~CLogger()+0x18>  // b.any
   8b978:	f9401260 	ldr	x0, [x19, #32]
   8b97c:	b40000c0 	cbz	x0, 8b994 <CLogger::~CLogger()+0x64>
   8b980:	a8c17bf3 	ldp	x19, x30, [sp], #16
   8b984:	14002443 	b	94a90 <operator delete[](void*)>
   8b988:	52800004 	mov	w4, #0x0                   	// #0
   8b98c:	b901ce7f 	str	wzr, [x19, #460]
   8b990:	17fffff5 	b	8b964 <CLogger::~CLogger()+0x34>
   8b994:	a8c17bf3 	ldp	x19, x30, [sp], #16
   8b998:	d65f03c0 	ret
   8b99c:	d503201f 	nop

000000000008b9a0 <CLogger::Initialize(CDevice*)>:
   8b9a0:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   8b9a4:	aa0003f3 	mov	x19, x0
   8b9a8:	f9000c01 	str	x1, [x0, #24]
   8b9ac:	940005a8 	bl	8d04c <CMachineInfo::Get()>
   8b9b0:	940003e1 	bl	8c934 <CMachineInfo::GetMachineName() const>
   8b9b4:	90000083 	adrp	x3, 9b000 <vtable for CSoftSerialDevice+0x90>
   8b9b8:	9133e063 	add	x3, x3, #0xcf8
   8b9bc:	aa0003e4 	mov	x4, x0
   8b9c0:	9100a061 	add	x1, x3, #0x28
   8b9c4:	aa1303e0 	mov	x0, x19
   8b9c8:	52800062 	mov	w2, #0x3                   	// #3
   8b9cc:	94000009 	bl	8b9f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8b9d0:	52800020 	mov	w0, #0x1                   	// #1
   8b9d4:	a8c17bf3 	ldp	x19, x30, [sp], #16
   8b9d8:	d65f03c0 	ret
   8b9dc:	d503201f 	nop

000000000008b9e0 <CLogger::SetNewTarget(CDevice*)>:
   8b9e0:	f9000c01 	str	x1, [x0, #24]
   8b9e4:	d65f03c0 	ret
   8b9e8:	d503201f 	nop
   8b9ec:	d503201f 	nop

000000000008b9f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
   8b9f0:	f8110ffe 	str	x30, [sp, #-240]!
   8b9f4:	9103c3e8 	add	x8, sp, #0xf0
   8b9f8:	9103c3eb 	add	x11, sp, #0xf0
   8b9fc:	a90e1fe6 	stp	x6, x7, [sp, #224]
   8ba00:	910343ea 	add	x10, sp, #0xd0
   8ba04:	128003e9 	mov	w9, #0xffffffe0            	// #-32
   8ba08:	a9032fe8 	stp	x8, x11, [sp, #48]
   8ba0c:	a9431fe6 	ldp	x6, x7, [sp, #48]
   8ba10:	a90d17e4 	stp	x4, x5, [sp, #208]
   8ba14:	12800fe5 	mov	w5, #0xffffff80            	// #-128
   8ba18:	910043e4 	add	x4, sp, #0x10
   8ba1c:	a9011fe6 	stp	x6, x7, [sp, #16]
   8ba20:	f90023ea 	str	x10, [sp, #64]
   8ba24:	b9004be9 	str	w9, [sp, #72]
   8ba28:	b9004fe5 	str	w5, [sp, #76]
   8ba2c:	a94423e7 	ldp	x7, x8, [sp, #64]
   8ba30:	3d8017e0 	str	q0, [sp, #80]
   8ba34:	a90223e7 	stp	x7, x8, [sp, #32]
   8ba38:	3d801be1 	str	q1, [sp, #96]
   8ba3c:	3d801fe2 	str	q2, [sp, #112]
   8ba40:	3d8023e3 	str	q3, [sp, #128]
   8ba44:	3d8027e4 	str	q4, [sp, #144]
   8ba48:	3d802be5 	str	q5, [sp, #160]
   8ba4c:	3d802fe6 	str	q6, [sp, #176]
   8ba50:	3d8033e7 	str	q7, [sp, #192]
   8ba54:	94000003 	bl	8ba60 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   8ba58:	f84f07fe 	ldr	x30, [sp], #240
   8ba5c:	d65f03c0 	ret

000000000008ba60 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
   8ba60:	a9b653f3 	stp	x19, x20, [sp, #-160]!
   8ba64:	aa0003f3 	mov	x19, x0
   8ba68:	910183e0 	add	x0, sp, #0x60
   8ba6c:	2a0203f4 	mov	w20, w2
   8ba70:	a9015bf5 	stp	x21, x22, [sp, #16]
   8ba74:	aa0403f5 	mov	x21, x4
   8ba78:	aa0103f6 	mov	x22, x1
   8ba7c:	f90017fe 	str	x30, [sp, #40]
   8ba80:	f9001fe3 	str	x3, [sp, #56]
   8ba84:	9400106b 	bl	8fc30 <CString::CString()>
   8ba88:	a9401ea6 	ldp	x6, x7, [x21]
   8ba8c:	910103e2 	add	x2, sp, #0x40
   8ba90:	910183e0 	add	x0, sp, #0x60
   8ba94:	a94116a4 	ldp	x4, x5, [x21, #16]
   8ba98:	a9041fe6 	stp	x6, x7, [sp, #64]
   8ba9c:	f9401fe1 	ldr	x1, [sp, #56]
   8baa0:	a90517e4 	stp	x4, x5, [sp, #80]
   8baa4:	9400120b 	bl	902d0 <CString::FormatV(char const*, std::__va_list)>
   8baa8:	910183e0 	add	x0, sp, #0x60
   8baac:	940010b1 	bl	8fd70 <CString::operator char const*() const>
   8bab0:	aa0003e3 	mov	x3, x0
   8bab4:	2a1403e2 	mov	w2, w20
   8bab8:	aa1303e0 	mov	x0, x19
   8babc:	aa1603e1 	mov	x1, x22
   8bac0:	940001d4 	bl	8c210 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
   8bac4:	b9400260 	ldr	w0, [x19]
   8bac8:	6b14001f 	cmp	w0, w20
   8bacc:	540005c3 	b.cc	8bb84 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x124>  // b.lo, b.ul, b.last
   8bad0:	910203e0 	add	x0, sp, #0x80
   8bad4:	94001057 	bl	8fc30 <CString::CString()>
   8bad8:	90000081 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   8badc:	9133e035 	add	x21, x1, #0xcf8
   8bae0:	340005f4 	cbz	w20, 8bb9c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x13c>
   8bae4:	f9400660 	ldr	x0, [x19, #8]
   8bae8:	b4000220 	cbz	x0, 8bb2c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xcc>
   8baec:	f90013f7 	str	x23, [sp, #32]
   8baf0:	94001c44 	bl	92c00 <CTimer::GetTimeString()>
   8baf4:	aa0003f7 	mov	x23, x0
   8baf8:	b4000820 	cbz	x0, 8bbfc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x19c>
   8bafc:	9400109d 	bl	8fd70 <CString::operator char const*() const>
   8bb00:	aa0003e1 	mov	x1, x0
   8bb04:	910203e0 	add	x0, sp, #0x80
   8bb08:	940010ee 	bl	8fec0 <CString::Append(char const*)>
   8bb0c:	9100e2a1 	add	x1, x21, #0x38
   8bb10:	910203e0 	add	x0, sp, #0x80
   8bb14:	940010eb 	bl	8fec0 <CString::Append(char const*)>
   8bb18:	f94002e2 	ldr	x2, [x23]
   8bb1c:	aa1703e0 	mov	x0, x23
   8bb20:	f9400443 	ldr	x3, [x2, #8]
   8bb24:	d63f0060 	blr	x3
   8bb28:	f94013f7 	ldr	x23, [sp, #32]
   8bb2c:	aa1603e1 	mov	x1, x22
   8bb30:	910203e0 	add	x0, sp, #0x80
   8bb34:	940010e3 	bl	8fec0 <CString::Append(char const*)>
   8bb38:	910102a1 	add	x1, x21, #0x40
   8bb3c:	910203e0 	add	x0, sp, #0x80
   8bb40:	940010e0 	bl	8fec0 <CString::Append(char const*)>
   8bb44:	910183e0 	add	x0, sp, #0x60
   8bb48:	9400108a 	bl	8fd70 <CString::operator char const*() const>
   8bb4c:	aa0003e1 	mov	x1, x0
   8bb50:	910203e0 	add	x0, sp, #0x80
   8bb54:	940010db 	bl	8fec0 <CString::Append(char const*)>
   8bb58:	340002f4 	cbz	w20, 8bbb4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x154>
   8bb5c:	910142a1 	add	x1, x21, #0x50
   8bb60:	910203e0 	add	x0, sp, #0x80
   8bb64:	940010d7 	bl	8fec0 <CString::Append(char const*)>
   8bb68:	910203e0 	add	x0, sp, #0x80
   8bb6c:	94001081 	bl	8fd70 <CString::operator char const*() const>
   8bb70:	aa0003e1 	mov	x1, x0
   8bb74:	aa1303e0 	mov	x0, x19
   8bb78:	94000082 	bl	8bd80 <CLogger::Write(char const*)>
   8bb7c:	910203e0 	add	x0, sp, #0x80
   8bb80:	94001068 	bl	8fd20 <CString::~CString()>
   8bb84:	910183e0 	add	x0, sp, #0x60
   8bb88:	94001066 	bl	8fd20 <CString::~CString()>
   8bb8c:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8bb90:	f94017fe 	ldr	x30, [sp, #40]
   8bb94:	a8ca53f3 	ldp	x19, x20, [sp], #160
   8bb98:	d65f03c0 	ret
   8bb9c:	9100c2a1 	add	x1, x21, #0x30
   8bba0:	910203e0 	add	x0, sp, #0x80
   8bba4:	9400107b 	bl	8fd90 <CString::operator=(char const*)>
   8bba8:	f9400660 	ldr	x0, [x19, #8]
   8bbac:	b5fffa00 	cbnz	x0, 8baec <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x8c>
   8bbb0:	17ffffdf 	b	8bb2c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xcc>
   8bbb4:	910122a1 	add	x1, x21, #0x48
   8bbb8:	910203e0 	add	x0, sp, #0x80
   8bbbc:	f90013f7 	str	x23, [sp, #32]
   8bbc0:	940010c0 	bl	8fec0 <CString::Append(char const*)>
   8bbc4:	910142a1 	add	x1, x21, #0x50
   8bbc8:	910203e0 	add	x0, sp, #0x80
   8bbcc:	940010bd 	bl	8fec0 <CString::Append(char const*)>
   8bbd0:	910203e0 	add	x0, sp, #0x80
   8bbd4:	94001067 	bl	8fd70 <CString::operator char const*() const>
   8bbd8:	aa0003e1 	mov	x1, x0
   8bbdc:	aa1303e0 	mov	x0, x19
   8bbe0:	94000068 	bl	8bd80 <CLogger::Write(char const*)>
   8bbe4:	f940f265 	ldr	x5, [x19, #480]
   8bbe8:	b4000045 	cbz	x5, 8bbf0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x190>
   8bbec:	d63f00a0 	blr	x5
   8bbf0:	52801fe0 	mov	w0, #0xff                  	// #255
   8bbf4:	94001a4f 	bl	92530 <set_qemu_exit_status>
   8bbf8:	94001a52 	bl	92540 <halt>
   8bbfc:	f94013f7 	ldr	x23, [sp, #32]
   8bc00:	17ffffcb 	b	8bb2c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xcc>
   8bc04:	d503201f 	nop
   8bc08:	d503201f 	nop
   8bc0c:	d503201f 	nop

000000000008bc10 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
   8bc10:	b9400005 	ldr	w5, [x0]
   8bc14:	6b0200bf 	cmp	w5, w2
   8bc18:	540006e3 	b.cc	8bcf4 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xe4>  // b.lo, b.ul, b.last
   8bc1c:	a9b053f3 	stp	x19, x20, [sp, #-256]!
   8bc20:	aa0003f3 	mov	x19, x0
   8bc24:	a9015bf5 	stp	x21, x22, [sp, #16]
   8bc28:	aa0303f5 	mov	x21, x3
   8bc2c:	f90013fe 	str	x30, [sp, #32]
   8bc30:	3900e3ff 	strb	wzr, [sp, #56]
   8bc34:	340002a2 	cbz	w2, 8bc88 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x78>
   8bc38:	9100e3e0 	add	x0, sp, #0x38
   8bc3c:	90000094 	adrp	x20, 9b000 <vtable for CSoftSerialDevice+0x90>
   8bc40:	9133e296 	add	x22, x20, #0xcf8
   8bc44:	940020bd 	bl	93f38 <strcat>
   8bc48:	910102c1 	add	x1, x22, #0x40
   8bc4c:	9100e3e0 	add	x0, sp, #0x38
   8bc50:	940020ba 	bl	93f38 <strcat>
   8bc54:	aa1503e1 	mov	x1, x21
   8bc58:	9100e3e0 	add	x0, sp, #0x38
   8bc5c:	940020b7 	bl	93f38 <strcat>
   8bc60:	910142c1 	add	x1, x22, #0x50
   8bc64:	9100e3e0 	add	x0, sp, #0x38
   8bc68:	940020b4 	bl	93f38 <strcat>
   8bc6c:	9100e3e1 	add	x1, sp, #0x38
   8bc70:	aa1303e0 	mov	x0, x19
   8bc74:	94000043 	bl	8bd80 <CLogger::Write(char const*)>
   8bc78:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8bc7c:	f94013fe 	ldr	x30, [sp, #32]
   8bc80:	a8d053f3 	ldp	x19, x20, [sp], #256
   8bc84:	d65f03c0 	ret
   8bc88:	90000080 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   8bc8c:	9133e016 	add	x22, x0, #0xcf8
   8bc90:	aa0103f4 	mov	x20, x1
   8bc94:	9100e3e0 	add	x0, sp, #0x38
   8bc98:	9100c2c1 	add	x1, x22, #0x30
   8bc9c:	9400204e 	bl	93dd4 <strcpy>
   8bca0:	aa1403e1 	mov	x1, x20
   8bca4:	9100e3e0 	add	x0, sp, #0x38
   8bca8:	940020a4 	bl	93f38 <strcat>
   8bcac:	910102c1 	add	x1, x22, #0x40
   8bcb0:	9100e3e0 	add	x0, sp, #0x38
   8bcb4:	940020a1 	bl	93f38 <strcat>
   8bcb8:	aa1503e1 	mov	x1, x21
   8bcbc:	9100e3e0 	add	x0, sp, #0x38
   8bcc0:	9400209e 	bl	93f38 <strcat>
   8bcc4:	910122c1 	add	x1, x22, #0x48
   8bcc8:	9100e3e0 	add	x0, sp, #0x38
   8bccc:	9400209b 	bl	93f38 <strcat>
   8bcd0:	910142c1 	add	x1, x22, #0x50
   8bcd4:	9100e3e0 	add	x0, sp, #0x38
   8bcd8:	94002098 	bl	93f38 <strcat>
   8bcdc:	9100e3e1 	add	x1, sp, #0x38
   8bce0:	aa1303e0 	mov	x0, x19
   8bce4:	94000027 	bl	8bd80 <CLogger::Write(char const*)>
   8bce8:	52801fe0 	mov	w0, #0xff                  	// #255
   8bcec:	94001a11 	bl	92530 <set_qemu_exit_status>
   8bcf0:	94001a14 	bl	92540 <halt>
   8bcf4:	d65f03c0 	ret
   8bcf8:	d503201f 	nop
   8bcfc:	d503201f 	nop

000000000008bd00 <CLogger::Get()>:
   8bd00:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   8bd04:	d0016ed4 	adrp	x20, 2e65000 <temp_gold+0xf421a0>
   8bd08:	f9414293 	ldr	x19, [x20, #640]
   8bd0c:	f9000bfe 	str	x30, [sp, #16]
   8bd10:	b40000b3 	cbz	x19, 8bd24 <CLogger::Get()+0x24>
   8bd14:	aa1303e0 	mov	x0, x19
   8bd18:	f9400bfe 	ldr	x30, [sp, #16]
   8bd1c:	a8c253f3 	ldp	x19, x20, [sp], #32
   8bd20:	d65f03c0 	ret
   8bd24:	d2803d00 	mov	x0, #0x1e8                 	// #488
   8bd28:	94002342 	bl	94a30 <operator new(unsigned long)>
   8bd2c:	aa0003f3 	mov	x19, x0
   8bd30:	52800021 	mov	w1, #0x1                   	// #1
   8bd34:	52800022 	mov	w2, #0x1                   	// #1
   8bd38:	d2880000 	mov	x0, #0x4000                	// #16384
   8bd3c:	b900027f 	str	wzr, [x19]
   8bd40:	f900067f 	str	xzr, [x19, #8]
   8bd44:	39004262 	strb	w2, [x19, #16]
   8bd48:	a901fe7f 	stp	xzr, xzr, [x19, #24]
   8bd4c:	f900167f 	str	xzr, [x19, #40]
   8bd50:	b9003261 	str	w1, [x19, #48]
   8bd54:	f900e67f 	str	xzr, [x19, #456]
   8bd58:	b901d261 	str	w1, [x19, #464]
   8bd5c:	a91dfe7f 	stp	xzr, xzr, [x19, #472]
   8bd60:	9400233c 	bl	94a50 <operator new[](unsigned long)>
   8bd64:	f9014293 	str	x19, [x20, #640]
   8bd68:	f9001260 	str	x0, [x19, #32]
   8bd6c:	aa1303e0 	mov	x0, x19
   8bd70:	f9400bfe 	ldr	x30, [sp, #16]
   8bd74:	a8c253f3 	ldp	x19, x20, [sp], #32
   8bd78:	d65f03c0 	ret
   8bd7c:	d503201f 	nop

000000000008bd80 <CLogger::Write(char const*)>:
   8bd80:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   8bd84:	aa0003f3 	mov	x19, x0
   8bd88:	aa0103e0 	mov	x0, x1
   8bd8c:	aa0103f4 	mov	x20, x1
   8bd90:	a9017bf5 	stp	x21, x30, [sp, #16]
   8bd94:	94001f21 	bl	93a18 <strlen>
   8bd98:	aa0003f5 	mov	x21, x0
   8bd9c:	f9400e60 	ldr	x0, [x19, #24]
   8bda0:	b40000c0 	cbz	x0, 8bdb8 <CLogger::Write(char const*)+0x38>
   8bda4:	f9400003 	ldr	x3, [x0]
   8bda8:	aa1503e2 	mov	x2, x21
   8bdac:	aa1403e1 	mov	x1, x20
   8bdb0:	f9400c64 	ldr	x4, [x3, #24]
   8bdb4:	d63f0080 	blr	x4
   8bdb8:	b9403260 	ldr	w0, [x19, #48]
   8bdbc:	35001040 	cbnz	w0, 8bfc4 <CLogger::Write(char const*)+0x244>
   8bdc0:	f24006a1 	ands	x1, x21, #0x3
   8bdc4:	8b150285 	add	x5, x20, x21
   8bdc8:	540005c0 	b.eq	8be80 <CLogger::Write(char const*)+0x100>  // b.none
   8bdcc:	38c01680 	ldrsb	w0, [x20], #1
   8bdd0:	7100341f 	cmp	w0, #0xd
   8bdd4:	54000140 	b.eq	8bdfc <CLogger::Write(char const*)+0x7c>  // b.none
   8bdd8:	b9402a62 	ldr	w2, [x19, #40]
   8bddc:	f9401266 	ldr	x6, [x19, #32]
   8bde0:	382268c0 	strb	w0, [x6, x2]
   8bde4:	29452267 	ldp	w7, w8, [x19, #40]
   8bde8:	110004e9 	add	w9, w7, #0x1
   8bdec:	12003522 	and	w2, w9, #0x3fff
   8bdf0:	6b08005f 	cmp	w2, w8
   8bdf4:	b9002a62 	str	w2, [x19, #40]
   8bdf8:	54000f00 	b.eq	8bfd8 <CLogger::Write(char const*)+0x258>  // b.none
   8bdfc:	f100043f 	cmp	x1, #0x1
   8be00:	54000400 	b.eq	8be80 <CLogger::Write(char const*)+0x100>  // b.none
   8be04:	f100083f 	cmp	x1, #0x2
   8be08:	54000240 	b.eq	8be50 <CLogger::Write(char const*)+0xd0>  // b.none
   8be0c:	38c0168d 	ldrsb	w13, [x20], #1
   8be10:	710035bf 	cmp	w13, #0xd
   8be14:	540001e0 	b.eq	8be50 <CLogger::Write(char const*)+0xd0>  // b.none
   8be18:	b9402a6e 	ldr	w14, [x19, #40]
   8be1c:	f940126f 	ldr	x15, [x19, #32]
   8be20:	382e69ed 	strb	w13, [x15, x14]
   8be24:	29454670 	ldp	w16, w17, [x19, #40]
   8be28:	11000612 	add	w18, w16, #0x1
   8be2c:	12003642 	and	w2, w18, #0x3fff
   8be30:	6b11005f 	cmp	w2, w17
   8be34:	b9002a62 	str	w2, [x19, #40]
   8be38:	540000c1 	b.ne	8be50 <CLogger::Write(char const*)+0xd0>  // b.any
   8be3c:	3940427e 	ldrb	w30, [x19, #16]
   8be40:	34000d9e 	cbz	w30, 8bff0 <CLogger::Write(char const*)+0x270>
   8be44:	11000455 	add	w21, w2, #0x1
   8be48:	120036a3 	and	w3, w21, #0x3fff
   8be4c:	b9002e63 	str	w3, [x19, #44]
   8be50:	38c01684 	ldrsb	w4, [x20], #1
   8be54:	7100349f 	cmp	w4, #0xd
   8be58:	54000140 	b.eq	8be80 <CLogger::Write(char const*)+0x100>  // b.none
   8be5c:	b9402a61 	ldr	w1, [x19, #40]
   8be60:	f9401260 	ldr	x0, [x19, #32]
   8be64:	38216804 	strb	w4, [x0, x1]
   8be68:	29451a62 	ldp	w2, w6, [x19, #40]
   8be6c:	11000447 	add	w7, w2, #0x1
   8be70:	120034e2 	and	w2, w7, #0x3fff
   8be74:	6b06005f 	cmp	w2, w6
   8be78:	b9002a62 	str	w2, [x19, #40]
   8be7c:	54000c20 	b.eq	8c000 <CLogger::Write(char const*)+0x280>  // b.none
   8be80:	eb1400bf 	cmp	x5, x20
   8be84:	54000720 	b.eq	8bf68 <CLogger::Write(char const*)+0x1e8>  // b.none
   8be88:	38c0168b 	ldrsb	w11, [x20], #1
   8be8c:	7100357f 	cmp	w11, #0xd
   8be90:	54000140 	b.eq	8beb8 <CLogger::Write(char const*)+0x138>  // b.none
   8be94:	b9402a6c 	ldr	w12, [x19, #40]
   8be98:	f940126d 	ldr	x13, [x19, #32]
   8be9c:	382c69ab 	strb	w11, [x13, x12]
   8bea0:	29453e6e 	ldp	w14, w15, [x19, #40]
   8bea4:	110005d0 	add	w16, w14, #0x1
   8bea8:	12003602 	and	w2, w16, #0x3fff
   8beac:	6b0f005f 	cmp	w2, w15
   8beb0:	b9002a62 	str	w2, [x19, #40]
   8beb4:	54000640 	b.eq	8bf7c <CLogger::Write(char const*)+0x1fc>  // b.none
   8beb8:	39c00295 	ldrsb	w21, [x20]
   8bebc:	710036bf 	cmp	w21, #0xd
   8bec0:	54000140 	b.eq	8bee8 <CLogger::Write(char const*)+0x168>  // b.none
   8bec4:	b9402a63 	ldr	w3, [x19, #40]
   8bec8:	f9401264 	ldr	x4, [x19, #32]
   8becc:	38236895 	strb	w21, [x4, x3]
   8bed0:	29450261 	ldp	w1, w0, [x19, #40]
   8bed4:	11000422 	add	w2, w1, #0x1
   8bed8:	12003442 	and	w2, w2, #0x3fff
   8bedc:	6b00005f 	cmp	w2, w0
   8bee0:	b9002a62 	str	w2, [x19, #40]
   8bee4:	54000580 	b.eq	8bf94 <CLogger::Write(char const*)+0x214>  // b.none
   8bee8:	39c00689 	ldrsb	w9, [x20, #1]
   8beec:	7100353f 	cmp	w9, #0xd
   8bef0:	54000140 	b.eq	8bf18 <CLogger::Write(char const*)+0x198>  // b.none
   8bef4:	b9402a6a 	ldr	w10, [x19, #40]
   8bef8:	f940126b 	ldr	x11, [x19, #32]
   8befc:	382a6969 	strb	w9, [x11, x10]
   8bf00:	2945366c 	ldp	w12, w13, [x19, #40]
   8bf04:	1100058e 	add	w14, w12, #0x1
   8bf08:	120035c2 	and	w2, w14, #0x3fff
   8bf0c:	6b0d005f 	cmp	w2, w13
   8bf10:	b9002a62 	str	w2, [x19, #40]
   8bf14:	540004c0 	b.eq	8bfac <CLogger::Write(char const*)+0x22c>  // b.none
   8bf18:	91000e94 	add	x20, x20, #0x3
   8bf1c:	38dff292 	ldursb	w18, [x20, #-1]
   8bf20:	7100365f 	cmp	w18, #0xd
   8bf24:	54fffae0 	b.eq	8be80 <CLogger::Write(char const*)+0x100>  // b.none
   8bf28:	b9402a7e 	ldr	w30, [x19, #40]
   8bf2c:	f9401275 	ldr	x21, [x19, #32]
   8bf30:	383e6ab2 	strb	w18, [x21, x30]
   8bf34:	29451263 	ldp	w3, w4, [x19, #40]
   8bf38:	11000461 	add	w1, w3, #0x1
   8bf3c:	12003422 	and	w2, w1, #0x3fff
   8bf40:	6b04005f 	cmp	w2, w4
   8bf44:	b9002a62 	str	w2, [x19, #40]
   8bf48:	54fff9c1 	b.ne	8be80 <CLogger::Write(char const*)+0x100>  // b.any
   8bf4c:	39404260 	ldrb	w0, [x19, #16]
   8bf50:	34000500 	cbz	w0, 8bff0 <CLogger::Write(char const*)+0x270>
   8bf54:	11000447 	add	w7, w2, #0x1
   8bf58:	eb1400bf 	cmp	x5, x20
   8bf5c:	120034e8 	and	w8, w7, #0x3fff
   8bf60:	b9002e68 	str	w8, [x19, #44]
   8bf64:	54fff921 	b.ne	8be88 <CLogger::Write(char const*)+0x108>  // b.any
   8bf68:	b9403273 	ldr	w19, [x19, #48]
   8bf6c:	35000313 	cbnz	w19, 8bfcc <CLogger::Write(char const*)+0x24c>
   8bf70:	a9417bf5 	ldp	x21, x30, [sp, #16]
   8bf74:	a8c253f3 	ldp	x19, x20, [sp], #32
   8bf78:	d65f03c0 	ret
   8bf7c:	39404271 	ldrb	w17, [x19, #16]
   8bf80:	34000391 	cbz	w17, 8bff0 <CLogger::Write(char const*)+0x270>
   8bf84:	11000452 	add	w18, w2, #0x1
   8bf88:	1200365e 	and	w30, w18, #0x3fff
   8bf8c:	b9002e7e 	str	w30, [x19, #44]
   8bf90:	17ffffca 	b	8beb8 <CLogger::Write(char const*)+0x138>
   8bf94:	39404266 	ldrb	w6, [x19, #16]
   8bf98:	340002c6 	cbz	w6, 8bff0 <CLogger::Write(char const*)+0x270>
   8bf9c:	11000447 	add	w7, w2, #0x1
   8bfa0:	120034e8 	and	w8, w7, #0x3fff
   8bfa4:	b9002e68 	str	w8, [x19, #44]
   8bfa8:	17ffffd0 	b	8bee8 <CLogger::Write(char const*)+0x168>
   8bfac:	3940426f 	ldrb	w15, [x19, #16]
   8bfb0:	3400020f 	cbz	w15, 8bff0 <CLogger::Write(char const*)+0x270>
   8bfb4:	11000450 	add	w16, w2, #0x1
   8bfb8:	12003611 	and	w17, w16, #0x3fff
   8bfbc:	b9002e71 	str	w17, [x19, #44]
   8bfc0:	17ffffd6 	b	8bf18 <CLogger::Write(char const*)+0x198>
   8bfc4:	9400251b 	bl	95430 <EnterCritical>
   8bfc8:	17ffff7e 	b	8bdc0 <CLogger::Write(char const*)+0x40>
   8bfcc:	a9417bf5 	ldp	x21, x30, [sp, #16]
   8bfd0:	a8c253f3 	ldp	x19, x20, [sp], #32
   8bfd4:	14002543 	b	954e0 <LeaveCritical>
   8bfd8:	3940426a 	ldrb	w10, [x19, #16]
   8bfdc:	340000aa 	cbz	w10, 8bff0 <CLogger::Write(char const*)+0x270>
   8bfe0:	1100044b 	add	w11, w2, #0x1
   8bfe4:	1200356c 	and	w12, w11, #0x3fff
   8bfe8:	b9002e6c 	str	w12, [x19, #44]
   8bfec:	17ffff84 	b	8bdfc <CLogger::Write(char const*)+0x7c>
   8bff0:	51000445 	sub	w5, w2, #0x1
   8bff4:	120034a6 	and	w6, w5, #0x3fff
   8bff8:	b9002a66 	str	w6, [x19, #40]
   8bffc:	17ffffdb 	b	8bf68 <CLogger::Write(char const*)+0x1e8>
   8c000:	39404268 	ldrb	w8, [x19, #16]
   8c004:	34ffff68 	cbz	w8, 8bff0 <CLogger::Write(char const*)+0x270>
   8c008:	11000449 	add	w9, w2, #0x1
   8c00c:	1200352a 	and	w10, w9, #0x3fff
   8c010:	b9002e6a 	str	w10, [x19, #44]
   8c014:	17ffff9b 	b	8be80 <CLogger::Write(char const*)+0x100>
   8c018:	d503201f 	nop
   8c01c:	d503201f 	nop

000000000008c020 <CLogger::Read(void*, unsigned int, bool)>:
   8c020:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   8c024:	aa0003f3 	mov	x19, x0
   8c028:	2a0203f4 	mov	w20, w2
   8c02c:	b9403000 	ldr	w0, [x0, #48]
   8c030:	a9015bf5 	stp	x21, x22, [sp, #16]
   8c034:	aa0103f5 	mov	x21, x1
   8c038:	12001c76 	and	w22, w3, #0xff
   8c03c:	f90013fe 	str	x30, [sp, #32]
   8c040:	35000d20 	cbnz	w0, 8c1e4 <CLogger::Read(void*, unsigned int, bool)+0x1c4>
   8c044:	29451260 	ldp	w0, w4, [x19, #40]
   8c048:	6b04001f 	cmp	w0, w4
   8c04c:	54000da0 	b.eq	8c200 <CLogger::Read(void*, unsigned int, bool)+0x1e0>  // b.none
   8c050:	2a1403e2 	mov	w2, w20
   8c054:	d2800005 	mov	x5, #0x0                   	// #0
   8c058:	f2400446 	ands	x6, x2, #0x3
   8c05c:	540004a0 	b.eq	8c0f0 <CLogger::Read(void*, unsigned int, bool)+0xd0>  // b.none
   8c060:	f9401267 	ldr	x7, [x19, #32]
   8c064:	11000483 	add	w3, w4, #0x1
   8c068:	52800034 	mov	w20, #0x1                   	// #1
   8c06c:	d2800025 	mov	x5, #0x1                   	// #1
   8c070:	38e448e8 	ldrsb	w8, [x7, w4, uxtw]
   8c074:	12003464 	and	w4, w3, #0x3fff
   8c078:	390002a8 	strb	w8, [x21]
   8c07c:	b9402a69 	ldr	w9, [x19, #40]
   8c080:	6b04013f 	cmp	w9, w4
   8c084:	540008e0 	b.eq	8c1a0 <CLogger::Read(void*, unsigned int, bool)+0x180>  // b.none
   8c088:	eb0500df 	cmp	x6, x5
   8c08c:	54000320 	b.eq	8c0f0 <CLogger::Read(void*, unsigned int, bool)+0xd0>  // b.none
   8c090:	f10008df 	cmp	x6, #0x2
   8c094:	54000180 	b.eq	8c0c4 <CLogger::Read(void*, unsigned int, bool)+0xa4>  // b.none
   8c098:	f940126b 	ldr	x11, [x19, #32]
   8c09c:	2a0403ea 	mov	w10, w4
   8c0a0:	0b140084 	add	w4, w4, w20
   8c0a4:	12003484 	and	w4, w4, #0x3fff
   8c0a8:	52800054 	mov	w20, #0x2                   	// #2
   8c0ac:	38ea696c 	ldrsb	w12, [x11, x10]
   8c0b0:	38256aac 	strb	w12, [x21, x5]
   8c0b4:	d2800045 	mov	x5, #0x2                   	// #2
   8c0b8:	b9402a6d 	ldr	w13, [x19, #40]
   8c0bc:	6b0401bf 	cmp	w13, w4
   8c0c0:	54000700 	b.eq	8c1a0 <CLogger::Read(void*, unsigned int, bool)+0x180>  // b.none
   8c0c4:	f940126f 	ldr	x15, [x19, #32]
   8c0c8:	1100048e 	add	w14, w4, #0x1
   8c0cc:	110004b4 	add	w20, w5, #0x1
   8c0d0:	38e449f0 	ldrsb	w16, [x15, w4, uxtw]
   8c0d4:	120035c4 	and	w4, w14, #0x3fff
   8c0d8:	38256ab0 	strb	w16, [x21, x5]
   8c0dc:	910004a5 	add	x5, x5, #0x1
   8c0e0:	b9402a71 	ldr	w17, [x19, #40]
   8c0e4:	6b04023f 	cmp	w17, w4
   8c0e8:	540005c0 	b.eq	8c1a0 <CLogger::Read(void*, unsigned int, bool)+0x180>  // b.none
   8c0ec:	d503201f 	nop
   8c0f0:	eb0200bf 	cmp	x5, x2
   8c0f4:	11000492 	add	w18, w4, #0x1
   8c0f8:	2a0503f4 	mov	w20, w5
   8c0fc:	54000520 	b.eq	8c1a0 <CLogger::Read(void*, unsigned int, bool)+0x180>  // b.none
   8c100:	f9401260 	ldr	x0, [x19, #32]
   8c104:	910004be 	add	x30, x5, #0x1
   8c108:	110004b4 	add	w20, w5, #0x1
   8c10c:	91000ca6 	add	x6, x5, #0x3
   8c110:	910007c1 	add	x1, x30, #0x1
   8c114:	38e44803 	ldrsb	w3, [x0, w4, uxtw]
   8c118:	12003644 	and	w4, w18, #0x3fff
   8c11c:	11000488 	add	w8, w4, #0x1
   8c120:	38256aa3 	strb	w3, [x21, x5]
   8c124:	910010a5 	add	x5, x5, #0x4
   8c128:	b9402a67 	ldr	w7, [x19, #40]
   8c12c:	6b0400ff 	cmp	w7, w4
   8c130:	54000380 	b.eq	8c1a0 <CLogger::Read(void*, unsigned int, bool)+0x180>  // b.none
   8c134:	f9401269 	ldr	x9, [x19, #32]
   8c138:	110007d4 	add	w20, w30, #0x1
   8c13c:	38e4492a 	ldrsb	w10, [x9, w4, uxtw]
   8c140:	12003504 	and	w4, w8, #0x3fff
   8c144:	1100048b 	add	w11, w4, #0x1
   8c148:	383e6aaa 	strb	w10, [x21, x30]
   8c14c:	b9402a6c 	ldr	w12, [x19, #40]
   8c150:	6b04019f 	cmp	w12, w4
   8c154:	54000260 	b.eq	8c1a0 <CLogger::Read(void*, unsigned int, bool)+0x180>  // b.none
   8c158:	f940126d 	ldr	x13, [x19, #32]
   8c15c:	11000434 	add	w20, w1, #0x1
   8c160:	38e449ae 	ldrsb	w14, [x13, w4, uxtw]
   8c164:	12003564 	and	w4, w11, #0x3fff
   8c168:	1100048f 	add	w15, w4, #0x1
   8c16c:	38216aae 	strb	w14, [x21, x1]
   8c170:	b9402a70 	ldr	w16, [x19, #40]
   8c174:	6b04021f 	cmp	w16, w4
   8c178:	54000140 	b.eq	8c1a0 <CLogger::Read(void*, unsigned int, bool)+0x180>  // b.none
   8c17c:	f9401271 	ldr	x17, [x19, #32]
   8c180:	110004d4 	add	w20, w6, #0x1
   8c184:	38e44a32 	ldrsb	w18, [x17, w4, uxtw]
   8c188:	120035e4 	and	w4, w15, #0x3fff
   8c18c:	38266ab2 	strb	w18, [x21, x6]
   8c190:	b9402a7e 	ldr	w30, [x19, #40]
   8c194:	6b0403df 	cmp	w30, w4
   8c198:	54fffac1 	b.ne	8c0f0 <CLogger::Read(void*, unsigned int, bool)+0xd0>  // b.any
   8c19c:	d503201f 	nop
   8c1a0:	35000116 	cbnz	w22, 8c1c0 <CLogger::Read(void*, unsigned int, bool)+0x1a0>
   8c1a4:	b9403273 	ldr	w19, [x19, #48]
   8c1a8:	35000133 	cbnz	w19, 8c1cc <CLogger::Read(void*, unsigned int, bool)+0x1ac>
   8c1ac:	2a1403e0 	mov	w0, w20
   8c1b0:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8c1b4:	f94013fe 	ldr	x30, [sp, #32]
   8c1b8:	a8c353f3 	ldp	x19, x20, [sp], #48
   8c1bc:	d65f03c0 	ret
   8c1c0:	b9002e64 	str	w4, [x19, #44]
   8c1c4:	b9403273 	ldr	w19, [x19, #48]
   8c1c8:	34ffff33 	cbz	w19, 8c1ac <CLogger::Read(void*, unsigned int, bool)+0x18c>
   8c1cc:	940024c5 	bl	954e0 <LeaveCritical>
   8c1d0:	2a1403e0 	mov	w0, w20
   8c1d4:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8c1d8:	f94013fe 	ldr	x30, [sp, #32]
   8c1dc:	a8c353f3 	ldp	x19, x20, [sp], #48
   8c1e0:	d65f03c0 	ret
   8c1e4:	94002493 	bl	95430 <EnterCritical>
   8c1e8:	29451261 	ldp	w1, w4, [x19, #40]
   8c1ec:	6b04003f 	cmp	w1, w4
   8c1f0:	54fff301 	b.ne	8c050 <CLogger::Read(void*, unsigned int, bool)+0x30>  // b.any
   8c1f4:	b9403275 	ldr	w21, [x19, #48]
   8c1f8:	34000055 	cbz	w21, 8c200 <CLogger::Read(void*, unsigned int, bool)+0x1e0>
   8c1fc:	940024b9 	bl	954e0 <LeaveCritical>
   8c200:	12800014 	mov	w20, #0xffffffff            	// #-1
   8c204:	17ffffea 	b	8c1ac <CLogger::Read(void*, unsigned int, bool)+0x18c>
   8c208:	d503201f 	nop
   8c20c:	d503201f 	nop

000000000008c210 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
   8c210:	a9bc53f3 	stp	x19, x20, [sp, #-64]!
   8c214:	aa0003f3 	mov	x19, x0
   8c218:	d2802200 	mov	x0, #0x110                 	// #272
   8c21c:	a9017bf5 	stp	x21, x30, [sp, #16]
   8c220:	2a0203f5 	mov	w21, w2
   8c224:	a90207e3 	stp	x3, x1, [sp, #32]
   8c228:	94002202 	bl	94a30 <operator new(unsigned long)>
   8c22c:	aa0003f4 	mov	x20, x0
   8c230:	d2800642 	mov	x2, #0x32                  	// #50
   8c234:	b8004415 	str	w21, [x0], #4
   8c238:	f94017e1 	ldr	x1, [sp, #40]
   8c23c:	94001eee 	bl	93df4 <strncpy>
   8c240:	9100da80 	add	x0, x20, #0x36
   8c244:	d2801902 	mov	x2, #0xc8                  	// #200
   8c248:	f94013e1 	ldr	x1, [sp, #32]
   8c24c:	3900d69f 	strb	wzr, [x20, #53]
   8c250:	94001ee9 	bl	93df4 <strncpy>
   8c254:	3903f69f 	strb	wzr, [x20, #253]
   8c258:	f9400660 	ldr	x0, [x19, #8]
   8c25c:	b40000c0 	cbz	x0, 8c274 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x64>
   8c260:	9100f3e2 	add	x2, sp, #0x3c
   8c264:	9100e3e1 	add	x1, sp, #0x38
   8c268:	940019f2 	bl	92a30 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
   8c26c:	72001c1f 	tst	w0, #0xff
   8c270:	540005c1 	b.ne	8c328 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x118>  // b.any
   8c274:	a9107e9f 	stp	xzr, xzr, [x20, #256]
   8c278:	b941d266 	ldr	w6, [x19, #464]
   8c27c:	350004e6 	cbnz	w6, 8c318 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x108>
   8c280:	b941ca67 	ldr	w7, [x19, #456]
   8c284:	8b274e68 	add	x8, x19, w7, uxtw #3
   8c288:	f9001d14 	str	x20, [x8, #56]
   8c28c:	110004e9 	add	w9, w7, #0x1
   8c290:	7100c93f 	cmp	w9, #0x32
   8c294:	54000320 	b.eq	8c2f8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe8>  // b.none
   8c298:	b941ce6a 	ldr	w10, [x19, #460]
   8c29c:	b901ca69 	str	w9, [x19, #456]
   8c2a0:	6b0a013f 	cmp	w9, w10
   8c2a4:	54000100 	b.eq	8c2c4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xb4>  // b.none
   8c2a8:	35000246 	cbnz	w6, 8c2f0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe0>
   8c2ac:	f940ee6e 	ldr	x14, [x19, #472]
   8c2b0:	b400004e 	cbz	x14, 8c2b8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xa8>
   8c2b4:	d63f01c0 	blr	x14
   8c2b8:	a9417bf5 	ldp	x21, x30, [sp, #16]
   8c2bc:	a8c453f3 	ldp	x19, x20, [sp], #64
   8c2c0:	d65f03c0 	ret
   8c2c4:	1100052d 	add	w13, w9, #0x1
   8c2c8:	8b294e6b 	add	x11, x19, w9, uxtw #3
   8c2cc:	f9401d60 	ldr	x0, [x11, #56]
   8c2d0:	7100c9bf 	cmp	w13, #0x32
   8c2d4:	540001c1 	b.ne	8c30c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xfc>  // b.any
   8c2d8:	b901ce7f 	str	wzr, [x19, #460]
   8c2dc:	350003c6 	cbnz	w6, 8c354 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x144>
   8c2e0:	b4fffe60 	cbz	x0, 8c2ac <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x9c>
   8c2e4:	d2802201 	mov	x1, #0x110                 	// #272
   8c2e8:	940021f6 	bl	94ac0 <operator delete(void*, unsigned long)>
   8c2ec:	17fffff0 	b	8c2ac <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x9c>
   8c2f0:	9400247c 	bl	954e0 <LeaveCritical>
   8c2f4:	17ffffee 	b	8c2ac <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x9c>
   8c2f8:	b941ce6c 	ldr	w12, [x19, #460]
   8c2fc:	b901ca7f 	str	wzr, [x19, #456]
   8c300:	35fffd4c 	cbnz	w12, 8c2a8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x98>
   8c304:	f9401e60 	ldr	x0, [x19, #56]
   8c308:	5280002d 	mov	w13, #0x1                   	// #1
   8c30c:	b901ce6d 	str	w13, [x19, #460]
   8c310:	34fffe86 	cbz	w6, 8c2e0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xd0>
   8c314:	14000010 	b	8c354 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x144>
   8c318:	2a0603e0 	mov	w0, w6
   8c31c:	94002445 	bl	95430 <EnterCritical>
   8c320:	b941d266 	ldr	w6, [x19, #464]
   8c324:	17ffffd7 	b	8c280 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
   8c328:	294703e2 	ldp	w2, w0, [sp, #56]
   8c32c:	5282eb23 	mov	w3, #0x1759                	// #5977
   8c330:	72ba36e3 	movk	w3, #0xd1b7, lsl #16
   8c334:	9ba37c04 	umull	x4, w0, w3
   8c338:	f9400660 	ldr	x0, [x19, #8]
   8c33c:	f9008282 	str	x2, [x20, #256]
   8c340:	d36dfc85 	lsr	x5, x4, #45
   8c344:	b9010a85 	str	w5, [x20, #264]
   8c348:	94001972 	bl	92910 <CTimer::GetTimeZone() const>
   8c34c:	b9010e80 	str	w0, [x20, #268]
   8c350:	17ffffca 	b	8c278 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x68>
   8c354:	f90013e0 	str	x0, [sp, #32]
   8c358:	94002462 	bl	954e0 <LeaveCritical>
   8c35c:	f94013e0 	ldr	x0, [sp, #32]
   8c360:	17ffffe0 	b	8c2e0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xd0>
   8c364:	d503201f 	nop
   8c368:	d503201f 	nop
   8c36c:	d503201f 	nop

000000000008c370 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
   8c370:	a9bb53f3 	stp	x19, x20, [sp, #-80]!
   8c374:	aa0003f3 	mov	x19, x0
   8c378:	b941d000 	ldr	w0, [x0, #464]
   8c37c:	a9015bf5 	stp	x21, x22, [sp, #16]
   8c380:	aa0403f5 	mov	x21, x4
   8c384:	aa0503f6 	mov	x22, x5
   8c388:	a90263f7 	stp	x23, x24, [sp, #32]
   8c38c:	aa0103f8 	mov	x24, x1
   8c390:	aa0603f7 	mov	x23, x6
   8c394:	a9037bf9 	stp	x25, x30, [sp, #48]
   8c398:	aa0303f9 	mov	x25, x3
   8c39c:	35000460 	cbnz	w0, 8c428 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xb8>
   8c3a0:	b941ca63 	ldr	w3, [x19, #456]
   8c3a4:	b941ce61 	ldr	w1, [x19, #460]
   8c3a8:	6b03003f 	cmp	w1, w3
   8c3ac:	54000520 	b.eq	8c450 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xe0>  // b.none
   8c3b0:	11000424 	add	w4, w1, #0x1
   8c3b4:	8b214e65 	add	x5, x19, w1, uxtw #3
   8c3b8:	f9401cb4 	ldr	x20, [x5, #56]
   8c3bc:	7100c89f 	cmp	w4, #0x32
   8c3c0:	1a9f1086 	csel	w6, w4, wzr, ne  // ne = any
   8c3c4:	b901ce66 	str	w6, [x19, #460]
   8c3c8:	35000500 	cbnz	w0, 8c468 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xf8>
   8c3cc:	aa1403e1 	mov	x1, x20
   8c3d0:	aa0203e0 	mov	x0, x2
   8c3d4:	b8404422 	ldr	w2, [x1], #4
   8c3d8:	b9000302 	str	w2, [x24]
   8c3dc:	94001e7e 	bl	93dd4 <strcpy>
   8c3e0:	9100da81 	add	x1, x20, #0x36
   8c3e4:	aa1903e0 	mov	x0, x25
   8c3e8:	94001e7b 	bl	93dd4 <strcpy>
   8c3ec:	f9408287 	ldr	x7, [x20, #256]
   8c3f0:	aa1403e0 	mov	x0, x20
   8c3f4:	d2802201 	mov	x1, #0x110                 	// #272
   8c3f8:	f90002a7 	str	x7, [x21]
   8c3fc:	b9410a88 	ldr	w8, [x20, #264]
   8c400:	b90002c8 	str	w8, [x22]
   8c404:	b9410e89 	ldr	w9, [x20, #268]
   8c408:	b90002e9 	str	w9, [x23]
   8c40c:	940021ad 	bl	94ac0 <operator delete(void*, unsigned long)>
   8c410:	52800020 	mov	w0, #0x1                   	// #1
   8c414:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8c418:	a94263f7 	ldp	x23, x24, [sp, #32]
   8c41c:	a9437bf9 	ldp	x25, x30, [sp, #48]
   8c420:	a8c553f3 	ldp	x19, x20, [sp], #80
   8c424:	d65f03c0 	ret
   8c428:	f90027e2 	str	x2, [sp, #72]
   8c42c:	94002401 	bl	95430 <EnterCritical>
   8c430:	b941ca60 	ldr	w0, [x19, #456]
   8c434:	b941ce61 	ldr	w1, [x19, #460]
   8c438:	f94027e2 	ldr	x2, [sp, #72]
   8c43c:	6b01001f 	cmp	w0, w1
   8c440:	b941d260 	ldr	w0, [x19, #464]
   8c444:	54fffb61 	b.ne	8c3b0 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x40>  // b.any
   8c448:	34000040 	cbz	w0, 8c450 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xe0>
   8c44c:	94002425 	bl	954e0 <LeaveCritical>
   8c450:	52800000 	mov	w0, #0x0                   	// #0
   8c454:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8c458:	a94263f7 	ldp	x23, x24, [sp, #32]
   8c45c:	a9437bf9 	ldp	x25, x30, [sp, #48]
   8c460:	a8c553f3 	ldp	x19, x20, [sp], #80
   8c464:	d65f03c0 	ret
   8c468:	f90027e2 	str	x2, [sp, #72]
   8c46c:	9400241d 	bl	954e0 <LeaveCritical>
   8c470:	f94027e2 	ldr	x2, [sp, #72]
   8c474:	17ffffd6 	b	8c3cc <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x5c>
   8c478:	d503201f 	nop
   8c47c:	d503201f 	nop

000000000008c480 <CLogger::RegisterEventNotificationHandler(void (*)())>:
   8c480:	f900ec01 	str	x1, [x0, #472]
   8c484:	d65f03c0 	ret
   8c488:	d503201f 	nop
   8c48c:	d503201f 	nop

000000000008c490 <CLogger::RegisterPanicHandler(void (*)())>:
   8c490:	f900f001 	str	x1, [x0, #480]
   8c494:	d65f03c0 	ret

000000000008c498 <CMachineInfo::CMachineInfo()>:
   8c498:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   8c49c:	910003fd 	mov	x29, sp
   8c4a0:	f9000bf3 	str	x19, [sp, #16]
   8c4a4:	f90017e0 	str	x0, [sp, #40]
   8c4a8:	f94017e0 	ldr	x0, [sp, #40]
   8c4ac:	b900001f 	str	wzr, [x0]
   8c4b0:	f94017e0 	ldr	x0, [sp, #40]
   8c4b4:	52800241 	mov	w1, #0x12                  	// #18
   8c4b8:	b9000401 	str	w1, [x0, #4]
   8c4bc:	f94017e0 	ldr	x0, [sp, #40]
   8c4c0:	b900081f 	str	wzr, [x0, #8]
   8c4c4:	f94017e0 	ldr	x0, [sp, #40]
   8c4c8:	b9000c1f 	str	wzr, [x0, #12]
   8c4cc:	f94017e0 	ldr	x0, [sp, #40]
   8c4d0:	52800081 	mov	w1, #0x4                   	// #4
   8c4d4:	b9001001 	str	w1, [x0, #16]
   8c4d8:	f94017e0 	ldr	x0, [sp, #40]
   8c4dc:	b900141f 	str	wzr, [x0, #20]
   8c4e0:	f94017e0 	ldr	x0, [sp, #40]
   8c4e4:	528e3ea1 	mov	w1, #0x71f5                	// #29173
   8c4e8:	79003001 	strh	w1, [x0, #24]
   8c4ec:	f94017e0 	ldr	x0, [sp, #40]
   8c4f0:	f900101f 	str	xzr, [x0, #32]
   8c4f4:	b0016ec0 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   8c4f8:	910a2000 	add	x0, x0, #0x288
   8c4fc:	f9400000 	ldr	x0, [x0]
   8c500:	f100001f 	cmp	x0, #0x0
   8c504:	540004c0 	b.eq	8c59c <CMachineInfo::CMachineInfo()+0x104>  // b.none
   8c508:	b0016ec0 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   8c50c:	910a2000 	add	x0, x0, #0x288
   8c510:	f9400000 	ldr	x0, [x0]
   8c514:	b9400001 	ldr	w1, [x0]
   8c518:	f94017e0 	ldr	x0, [sp, #40]
   8c51c:	b9000001 	str	w1, [x0]
   8c520:	b0016ec0 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   8c524:	910a2000 	add	x0, x0, #0x288
   8c528:	f9400000 	ldr	x0, [x0]
   8c52c:	b9400401 	ldr	w1, [x0, #4]
   8c530:	f94017e0 	ldr	x0, [sp, #40]
   8c534:	b9000401 	str	w1, [x0, #4]
   8c538:	b0016ec0 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   8c53c:	910a2000 	add	x0, x0, #0x288
   8c540:	f9400000 	ldr	x0, [x0]
   8c544:	b9400801 	ldr	w1, [x0, #8]
   8c548:	f94017e0 	ldr	x0, [sp, #40]
   8c54c:	b9000801 	str	w1, [x0, #8]
   8c550:	b0016ec0 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   8c554:	910a2000 	add	x0, x0, #0x288
   8c558:	f9400000 	ldr	x0, [x0]
   8c55c:	b9400c01 	ldr	w1, [x0, #12]
   8c560:	f94017e0 	ldr	x0, [sp, #40]
   8c564:	b9000c01 	str	w1, [x0, #12]
   8c568:	b0016ec0 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   8c56c:	910a2000 	add	x0, x0, #0x288
   8c570:	f9400000 	ldr	x0, [x0]
   8c574:	b9401001 	ldr	w1, [x0, #16]
   8c578:	f94017e0 	ldr	x0, [sp, #40]
   8c57c:	b9001001 	str	w1, [x0, #16]
   8c580:	b0016ec0 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   8c584:	910a2000 	add	x0, x0, #0x288
   8c588:	f9400000 	ldr	x0, [x0]
   8c58c:	b9401401 	ldr	w1, [x0, #20]
   8c590:	f94017e0 	ldr	x0, [sp, #40]
   8c594:	b9001401 	str	w1, [x0, #20]
   8c598:	140000ca 	b	8c8c0 <CMachineInfo::CMachineInfo()+0x428>
   8c59c:	b0016ec0 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   8c5a0:	910a2000 	add	x0, x0, #0x288
   8c5a4:	f94017e1 	ldr	x1, [sp, #40]
   8c5a8:	f9000001 	str	x1, [x0]
   8c5ac:	910163e0 	add	x0, sp, #0x58
   8c5b0:	52800021 	mov	w1, #0x1                   	// #1
   8c5b4:	97fff38f 	bl	893f0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   8c5b8:	910123e1 	add	x1, sp, #0x48
   8c5bc:	910163e0 	add	x0, sp, #0x58
   8c5c0:	52800004 	mov	w4, #0x0                   	// #0
   8c5c4:	52800203 	mov	w3, #0x10                  	// #16
   8c5c8:	aa0103e2 	mov	x2, x1
   8c5cc:	52800021 	mov	w1, #0x1                   	// #1
   8c5d0:	72a000c1 	movk	w1, #0x6, lsl #16
   8c5d4:	97fff38f 	bl	89410 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   8c5d8:	12001c00 	and	w0, w0, #0xff
   8c5dc:	7100001f 	cmp	w0, #0x0
   8c5e0:	540000a0 	b.eq	8c5f4 <CMachineInfo::CMachineInfo()+0x15c>  // b.none
   8c5e4:	b94057e0 	ldr	w0, [sp, #84]
   8c5e8:	12003c01 	and	w1, w0, #0xffff
   8c5ec:	f94017e0 	ldr	x0, [sp, #40]
   8c5f0:	79003001 	strh	w1, [x0, #24]
   8c5f4:	9100e3e1 	add	x1, sp, #0x38
   8c5f8:	910163e0 	add	x0, sp, #0x58
   8c5fc:	52800004 	mov	w4, #0x0                   	// #0
   8c600:	52800203 	mov	w3, #0x10                  	// #16
   8c604:	aa0103e2 	mov	x2, x1
   8c608:	52800041 	mov	w1, #0x2                   	// #2
   8c60c:	72a00021 	movk	w1, #0x1, lsl #16
   8c610:	97fff380 	bl	89410 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   8c614:	12001c00 	and	w0, w0, #0xff
   8c618:	52000000 	eor	w0, w0, #0x1
   8c61c:	12001c00 	and	w0, w0, #0xff
   8c620:	7100001f 	cmp	w0, #0x0
   8c624:	54000060 	b.eq	8c630 <CMachineInfo::CMachineInfo()+0x198>  // b.none
   8c628:	52800013 	mov	w19, #0x0                   	// #0
   8c62c:	140000a2 	b	8c8b4 <CMachineInfo::CMachineInfo()+0x41c>
   8c630:	b94047e1 	ldr	w1, [sp, #68]
   8c634:	f94017e0 	ldr	x0, [sp, #40]
   8c638:	b9000001 	str	w1, [x0]
   8c63c:	f94017e0 	ldr	x0, [sp, #40]
   8c640:	b9400000 	ldr	w0, [x0]
   8c644:	12090000 	and	w0, w0, #0x800000
   8c648:	7100001f 	cmp	w0, #0x0
   8c64c:	54000c80 	b.eq	8c7dc <CMachineInfo::CMachineInfo()+0x344>  // b.none
   8c650:	f94017e0 	ldr	x0, [sp, #40]
   8c654:	b9400000 	ldr	w0, [x0]
   8c658:	53047c00 	lsr	w0, w0, #4
   8c65c:	12001c00 	and	w0, w0, #0xff
   8c660:	b90067e0 	str	w0, [sp, #100]
   8c664:	b9006fff 	str	wzr, [sp, #108]
   8c668:	b9406fe0 	ldr	w0, [sp, #108]
   8c66c:	71003c1f 	cmp	w0, #0xf
   8c670:	54000248 	b.hi	8c6b8 <CMachineInfo::CMachineInfo()+0x220>  // b.pmore
   8c674:	d0000080 	adrp	x0, 9e000 <font_data+0x1558>
   8c678:	910d0002 	add	x2, x0, #0x340
   8c67c:	b9406fe1 	ldr	w1, [sp, #108]
   8c680:	aa0103e0 	mov	x0, x1
   8c684:	d37ff800 	lsl	x0, x0, #1
   8c688:	8b010000 	add	x0, x0, x1
   8c68c:	d37ef400 	lsl	x0, x0, #2
   8c690:	8b000040 	add	x0, x2, x0
   8c694:	b9400000 	ldr	w0, [x0]
   8c698:	b94067e1 	ldr	w1, [sp, #100]
   8c69c:	6b00003f 	cmp	w1, w0
   8c6a0:	540000a0 	b.eq	8c6b4 <CMachineInfo::CMachineInfo()+0x21c>  // b.none
   8c6a4:	b9406fe0 	ldr	w0, [sp, #108]
   8c6a8:	11000400 	add	w0, w0, #0x1
   8c6ac:	b9006fe0 	str	w0, [sp, #108]
   8c6b0:	17ffffee 	b	8c668 <CMachineInfo::CMachineInfo()+0x1d0>
   8c6b4:	d503201f 	nop
   8c6b8:	b9406fe0 	ldr	w0, [sp, #108]
   8c6bc:	71003c1f 	cmp	w0, #0xf
   8c6c0:	54000069 	b.ls	8c6cc <CMachineInfo::CMachineInfo()+0x234>  // b.plast
   8c6c4:	52800013 	mov	w19, #0x0                   	// #0
   8c6c8:	1400007b 	b	8c8b4 <CMachineInfo::CMachineInfo()+0x41c>
   8c6cc:	d0000080 	adrp	x0, 9e000 <font_data+0x1558>
   8c6d0:	910d0002 	add	x2, x0, #0x340
   8c6d4:	b9406fe1 	ldr	w1, [sp, #108]
   8c6d8:	aa0103e0 	mov	x0, x1
   8c6dc:	d37ff800 	lsl	x0, x0, #1
   8c6e0:	8b010000 	add	x0, x0, x1
   8c6e4:	d37ef400 	lsl	x0, x0, #2
   8c6e8:	8b000040 	add	x0, x2, x0
   8c6ec:	b9400401 	ldr	w1, [x0, #4]
   8c6f0:	f94017e0 	ldr	x0, [sp, #40]
   8c6f4:	b9000401 	str	w1, [x0, #4]
   8c6f8:	d0000080 	adrp	x0, 9e000 <font_data+0x1558>
   8c6fc:	910d0002 	add	x2, x0, #0x340
   8c700:	b9406fe1 	ldr	w1, [sp, #108]
   8c704:	aa0103e0 	mov	x0, x1
   8c708:	d37ff800 	lsl	x0, x0, #1
   8c70c:	8b010000 	add	x0, x0, x1
   8c710:	d37ef400 	lsl	x0, x0, #2
   8c714:	8b000040 	add	x0, x2, x0
   8c718:	b9400801 	ldr	w1, [x0, #8]
   8c71c:	f94017e0 	ldr	x0, [sp, #40]
   8c720:	b9000801 	str	w1, [x0, #8]
   8c724:	f94017e0 	ldr	x0, [sp, #40]
   8c728:	b9400000 	ldr	w0, [x0]
   8c72c:	12000c00 	and	w0, w0, #0xf
   8c730:	11000401 	add	w1, w0, #0x1
   8c734:	f94017e0 	ldr	x0, [sp, #40]
   8c738:	b9000c01 	str	w1, [x0, #12]
   8c73c:	f94017e0 	ldr	x0, [sp, #40]
   8c740:	b9400000 	ldr	w0, [x0]
   8c744:	530c7c00 	lsr	w0, w0, #12
   8c748:	12000c01 	and	w1, w0, #0xf
   8c74c:	f94017e0 	ldr	x0, [sp, #40]
   8c750:	b9001001 	str	w1, [x0, #16]
   8c754:	f94017e0 	ldr	x0, [sp, #40]
   8c758:	b9400000 	ldr	w0, [x0]
   8c75c:	53147c00 	lsr	w0, w0, #20
   8c760:	12000800 	and	w0, w0, #0x7
   8c764:	52802001 	mov	w1, #0x100                 	// #256
   8c768:	1ac02020 	lsl	w0, w1, w0
   8c76c:	2a0003e1 	mov	w1, w0
   8c770:	f94017e0 	ldr	x0, [sp, #40]
   8c774:	b9001401 	str	w1, [x0, #20]
   8c778:	f94017e0 	ldr	x0, [sp, #40]
   8c77c:	b9401000 	ldr	w0, [x0, #16]
   8c780:	71000c1f 	cmp	w0, #0x3
   8c784:	5400008d 	b.le	8c794 <CMachineInfo::CMachineInfo()+0x2fc>
   8c788:	f94017e0 	ldr	x0, [sp, #40]
   8c78c:	52800081 	mov	w1, #0x4                   	// #4
   8c790:	b9001001 	str	w1, [x0, #16]
   8c794:	f94017e0 	ldr	x0, [sp, #40]
   8c798:	b9400400 	ldr	w0, [x0, #4]
   8c79c:	71000c1f 	cmp	w0, #0x3
   8c7a0:	54000881 	b.ne	8c8b0 <CMachineInfo::CMachineInfo()+0x418>  // b.any
   8c7a4:	f94017e0 	ldr	x0, [sp, #40]
   8c7a8:	b9401400 	ldr	w0, [x0, #20]
   8c7ac:	7104001f 	cmp	w0, #0x100
   8c7b0:	54000801 	b.ne	8c8b0 <CMachineInfo::CMachineInfo()+0x418>  // b.any
   8c7b4:	f94017e0 	ldr	x0, [sp, #40]
   8c7b8:	b9400c00 	ldr	w0, [x0, #12]
   8c7bc:	7100041f 	cmp	w0, #0x1
   8c7c0:	54000061 	b.ne	8c7cc <CMachineInfo::CMachineInfo()+0x334>  // b.any
   8c7c4:	52800020 	mov	w0, #0x1                   	// #1
   8c7c8:	14000002 	b	8c7d0 <CMachineInfo::CMachineInfo()+0x338>
   8c7cc:	52800040 	mov	w0, #0x2                   	// #2
   8c7d0:	f94017e1 	ldr	x1, [sp, #40]
   8c7d4:	b9000420 	str	w0, [x1, #4]
   8c7d8:	14000036 	b	8c8b0 <CMachineInfo::CMachineInfo()+0x418>
   8c7dc:	b9006bff 	str	wzr, [sp, #104]
   8c7e0:	b9406be0 	ldr	w0, [sp, #104]
   8c7e4:	7100401f 	cmp	w0, #0x10
   8c7e8:	54000208 	b.hi	8c828 <CMachineInfo::CMachineInfo()+0x390>  // b.pmore
   8c7ec:	d0000080 	adrp	x0, 9e000 <font_data+0x1558>
   8c7f0:	9108c001 	add	x1, x0, #0x230
   8c7f4:	b9406be0 	ldr	w0, [sp, #104]
   8c7f8:	d37cec00 	lsl	x0, x0, #4
   8c7fc:	8b000020 	add	x0, x1, x0
   8c800:	b9400001 	ldr	w1, [x0]
   8c804:	f94017e0 	ldr	x0, [sp, #40]
   8c808:	b9400000 	ldr	w0, [x0]
   8c80c:	6b00003f 	cmp	w1, w0
   8c810:	540000a0 	b.eq	8c824 <CMachineInfo::CMachineInfo()+0x38c>  // b.none
   8c814:	b9406be0 	ldr	w0, [sp, #104]
   8c818:	11000400 	add	w0, w0, #0x1
   8c81c:	b9006be0 	str	w0, [sp, #104]
   8c820:	17fffff0 	b	8c7e0 <CMachineInfo::CMachineInfo()+0x348>
   8c824:	d503201f 	nop
   8c828:	b9406be0 	ldr	w0, [sp, #104]
   8c82c:	7100401f 	cmp	w0, #0x10
   8c830:	54000069 	b.ls	8c83c <CMachineInfo::CMachineInfo()+0x3a4>  // b.plast
   8c834:	52800013 	mov	w19, #0x0                   	// #0
   8c838:	1400001f 	b	8c8b4 <CMachineInfo::CMachineInfo()+0x41c>
   8c83c:	d0000080 	adrp	x0, 9e000 <font_data+0x1558>
   8c840:	9108c001 	add	x1, x0, #0x230
   8c844:	b9406be0 	ldr	w0, [sp, #104]
   8c848:	d37cec00 	lsl	x0, x0, #4
   8c84c:	8b000020 	add	x0, x1, x0
   8c850:	b9400401 	ldr	w1, [x0, #4]
   8c854:	f94017e0 	ldr	x0, [sp, #40]
   8c858:	b9000401 	str	w1, [x0, #4]
   8c85c:	f94017e0 	ldr	x0, [sp, #40]
   8c860:	52800021 	mov	w1, #0x1                   	// #1
   8c864:	b9000801 	str	w1, [x0, #8]
   8c868:	d0000080 	adrp	x0, 9e000 <font_data+0x1558>
   8c86c:	9108c001 	add	x1, x0, #0x230
   8c870:	b9406be0 	ldr	w0, [sp, #104]
   8c874:	d37cec00 	lsl	x0, x0, #4
   8c878:	8b000020 	add	x0, x1, x0
   8c87c:	b9400801 	ldr	w1, [x0, #8]
   8c880:	f94017e0 	ldr	x0, [sp, #40]
   8c884:	b9000c01 	str	w1, [x0, #12]
   8c888:	f94017e0 	ldr	x0, [sp, #40]
   8c88c:	b900101f 	str	wzr, [x0, #16]
   8c890:	d0000080 	adrp	x0, 9e000 <font_data+0x1558>
   8c894:	9108c001 	add	x1, x0, #0x230
   8c898:	b9406be0 	ldr	w0, [sp, #104]
   8c89c:	d37cec00 	lsl	x0, x0, #4
   8c8a0:	8b000020 	add	x0, x1, x0
   8c8a4:	b9400c01 	ldr	w1, [x0, #12]
   8c8a8:	f94017e0 	ldr	x0, [sp, #40]
   8c8ac:	b9001401 	str	w1, [x0, #20]
   8c8b0:	52800033 	mov	w19, #0x1                   	// #1
   8c8b4:	910163e0 	add	x0, sp, #0x58
   8c8b8:	97fff2d2 	bl	89400 <CBcmPropertyTags::~CBcmPropertyTags()>
   8c8bc:	7100067f 	cmp	w19, #0x1
   8c8c0:	f9400bf3 	ldr	x19, [sp, #16]
   8c8c4:	a8c77bfd 	ldp	x29, x30, [sp], #112
   8c8c8:	d65f03c0 	ret

000000000008c8cc <CMachineInfo::~CMachineInfo()>:
   8c8cc:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   8c8d0:	aa0003f3 	mov	x19, x0
   8c8d4:	52800240 	mov	w0, #0x12                  	// #18
   8c8d8:	f9401274 	ldr	x20, [x19, #32]
   8c8dc:	f9000bfe 	str	x30, [sp, #16]
   8c8e0:	b9000660 	str	w0, [x19, #4]
   8c8e4:	b40000d4 	cbz	x20, 8c8fc <CMachineInfo::~CMachineInfo()+0x30>
   8c8e8:	aa1403e0 	mov	x0, x20
   8c8ec:	94002891 	bl	96b30 <CDeviceTreeBlob::~CDeviceTreeBlob()>
   8c8f0:	aa1403e0 	mov	x0, x20
   8c8f4:	d2800101 	mov	x1, #0x8                   	// #8
   8c8f8:	94002072 	bl	94ac0 <operator delete(void*, unsigned long)>
   8c8fc:	b0016ec2 	adrp	x2, 2e65000 <temp_gold+0xf421a0>
   8c900:	f900127f 	str	xzr, [x19, #32]
   8c904:	f9414441 	ldr	x1, [x2, #648]
   8c908:	eb13003f 	cmp	x1, x19
   8c90c:	54000080 	b.eq	8c91c <CMachineInfo::~CMachineInfo()+0x50>  // b.none
   8c910:	f9400bfe 	ldr	x30, [sp, #16]
   8c914:	a8c253f3 	ldp	x19, x20, [sp], #32
   8c918:	d65f03c0 	ret
   8c91c:	f901445f 	str	xzr, [x2, #648]
   8c920:	f9400bfe 	ldr	x30, [sp, #16]
   8c924:	a8c253f3 	ldp	x19, x20, [sp], #32
   8c928:	d65f03c0 	ret

000000000008c92c <CMachineInfo::GetMachineModel() const>:
   8c92c:	b9400400 	ldr	w0, [x0, #4]
   8c930:	d65f03c0 	ret

000000000008c934 <CMachineInfo::GetMachineName() const>:
   8c934:	b9800401 	ldrsw	x1, [x0, #4]
   8c938:	d0000080 	adrp	x0, 9e000 <font_data+0x1558>
   8c93c:	9108c002 	add	x2, x0, #0x230
   8c940:	91074043 	add	x3, x2, #0x1d0
   8c944:	f8617860 	ldr	x0, [x3, x1, lsl #3]
   8c948:	d65f03c0 	ret

000000000008c94c <CMachineInfo::GetModelMajor() const>:
   8c94c:	b9400800 	ldr	w0, [x0, #8]
   8c950:	d65f03c0 	ret

000000000008c954 <CMachineInfo::GetModelRevision() const>:
   8c954:	b9400c00 	ldr	w0, [x0, #12]
   8c958:	d65f03c0 	ret

000000000008c95c <CMachineInfo::GetSoCType() const>:
   8c95c:	b9401000 	ldr	w0, [x0, #16]
   8c960:	d65f03c0 	ret

000000000008c964 <CMachineInfo::GetRAMSize() const>:
   8c964:	b9401400 	ldr	w0, [x0, #20]
   8c968:	d65f03c0 	ret

000000000008c96c <CMachineInfo::GetSoCName() const>:
   8c96c:	b9801001 	ldrsw	x1, [x0, #16]
   8c970:	d0000080 	adrp	x0, 9e000 <font_data+0x1558>
   8c974:	9108c002 	add	x2, x0, #0x230
   8c978:	9109a043 	add	x3, x2, #0x268
   8c97c:	f8617860 	ldr	x0, [x3, x1, lsl #3]
   8c980:	d65f03c0 	ret

000000000008c984 <CMachineInfo::GetRevisionRaw() const>:
   8c984:	b9400000 	ldr	w0, [x0]
   8c988:	d65f03c0 	ret

000000000008c98c <CMachineInfo::GetActLEDInfo() const>:
   8c98c:	b9800401 	ldrsw	x1, [x0, #4]
   8c990:	d0000080 	adrp	x0, 9e000 <font_data+0x1558>
   8c994:	9108c002 	add	x2, x0, #0x230
   8c998:	910a4043 	add	x3, x2, #0x290
   8c99c:	b8617860 	ldr	w0, [x3, x1, lsl #2]
   8c9a0:	d65f03c0 	ret

000000000008c9a4 <CMachineInfo::GetClockRate(unsigned int) const>:
   8c9a4:	a9bc53f3 	stp	x19, x20, [sp, #-64]!
   8c9a8:	2a0103f3 	mov	w19, w1
   8c9ac:	aa0003f4 	mov	x20, x0
   8c9b0:	52800001 	mov	w1, #0x0                   	// #0
   8c9b4:	910083e0 	add	x0, sp, #0x20
   8c9b8:	f9000bfe 	str	x30, [sp, #16]
   8c9bc:	97fff28d 	bl	893f0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   8c9c0:	910083e0 	add	x0, sp, #0x20
   8c9c4:	52800041 	mov	w1, #0x2                   	// #2
   8c9c8:	72a00061 	movk	w1, #0x3, lsl #16
   8c9cc:	52800084 	mov	w4, #0x4                   	// #4
   8c9d0:	b90037f3 	str	w19, [sp, #52]
   8c9d4:	52800283 	mov	w3, #0x14                  	// #20
   8c9d8:	9100a3e2 	add	x2, sp, #0x28
   8c9dc:	97fff28d 	bl	89410 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   8c9e0:	72001c1f 	tst	w0, #0xff
   8c9e4:	54000321 	b.ne	8ca48 <CMachineInfo::GetClockRate(unsigned int) const+0xa4>  // b.any
   8c9e8:	71000a7f 	cmp	w19, #0x2
   8c9ec:	540004c0 	b.eq	8ca84 <CMachineInfo::GetClockRate(unsigned int) const+0xe0>  // b.none
   8c9f0:	54000189 	b.ls	8ca20 <CMachineInfo::GetClockRate(unsigned int) const+0x7c>  // b.plast
   8c9f4:	7100127f 	cmp	w19, #0x4
   8c9f8:	54000360 	b.eq	8ca64 <CMachineInfo::GetClockRate(unsigned int) const+0xc0>  // b.none
   8c9fc:	71003a7f 	cmp	w19, #0xe
   8ca00:	52800014 	mov	w20, #0x0                   	// #0
   8ca04:	54000461 	b.ne	8ca90 <CMachineInfo::GetClockRate(unsigned int) const+0xec>  // b.any
   8ca08:	910083e0 	add	x0, sp, #0x20
   8ca0c:	97fff27d 	bl	89400 <CBcmPropertyTags::~CBcmPropertyTags()>
   8ca10:	2a1403e0 	mov	w0, w20
   8ca14:	f9400bfe 	ldr	x30, [sp, #16]
   8ca18:	a8c453f3 	ldp	x19, x20, [sp], #64
   8ca1c:	d65f03c0 	ret
   8ca20:	7100067f 	cmp	w19, #0x1
   8ca24:	54000361 	b.ne	8ca90 <CMachineInfo::GetClockRate(unsigned int) const+0xec>  // b.any
   8ca28:	910083e0 	add	x0, sp, #0x20
   8ca2c:	529c2014 	mov	w20, #0xe100                	// #57600
   8ca30:	72a0beb4 	movk	w20, #0x5f5, lsl #16
   8ca34:	97fff273 	bl	89400 <CBcmPropertyTags::~CBcmPropertyTags()>
   8ca38:	2a1403e0 	mov	w0, w20
   8ca3c:	f9400bfe 	ldr	x30, [sp, #16]
   8ca40:	a8c453f3 	ldp	x19, x20, [sp], #64
   8ca44:	d65f03c0 	ret
   8ca48:	b9403bf4 	ldr	w20, [sp, #56]
   8ca4c:	910083e0 	add	x0, sp, #0x20
   8ca50:	97fff26c 	bl	89400 <CBcmPropertyTags::~CBcmPropertyTags()>
   8ca54:	f9400bfe 	ldr	x30, [sp, #16]
   8ca58:	2a1403e0 	mov	w0, w20
   8ca5c:	a8c453f3 	ldp	x19, x20, [sp], #64
   8ca60:	d65f03c0 	ret
   8ca64:	b9400a81 	ldr	w1, [x20, #8]
   8ca68:	52965002 	mov	w2, #0xb280                	// #45696
   8ca6c:	72a1dcc2 	movk	w2, #0xee6, lsl #16
   8ca70:	52946000 	mov	w0, #0xa300                	// #41728
   8ca74:	72a23c20 	movk	w0, #0x11e1, lsl #16
   8ca78:	71000c3f 	cmp	w1, #0x3
   8ca7c:	1a803054 	csel	w20, w2, w0, cc  // cc = lo, ul, last
   8ca80:	17ffffe2 	b	8ca08 <CMachineInfo::GetClockRate(unsigned int) const+0x64>
   8ca84:	528d8014 	mov	w20, #0x6c00                	// #27648
   8ca88:	72a05b94 	movk	w20, #0x2dc, lsl #16
   8ca8c:	17ffffdf 	b	8ca08 <CMachineInfo::GetClockRate(unsigned int) const+0x64>
   8ca90:	f0000063 	adrp	x3, 9b000 <vtable for CSoftSerialDevice+0x90>
   8ca94:	91354064 	add	x4, x3, #0xd50
   8ca98:	9106e081 	add	x1, x4, #0x1b8
   8ca9c:	91072080 	add	x0, x4, #0x1c8
   8caa0:	52802a22 	mov	w2, #0x151                 	// #337
   8caa4:	97fff233 	bl	89370 <assertion_failed>

000000000008caa8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
   8caa8:	7100d83f 	cmp	w1, #0x36
   8caac:	54000140 	b.eq	8cad4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x2c>  // b.none
   8cab0:	7100dc3f 	cmp	w1, #0x37
   8cab4:	54000261 	b.ne	8cb00 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x58>  // b.any
   8cab8:	b9400405 	ldr	w5, [x0, #4]
   8cabc:	52800504 	mov	w4, #0x28                  	// #40
   8cac0:	528005a6 	mov	w6, #0x2d                  	// #45
   8cac4:	71000cbf 	cmp	w5, #0x3
   8cac8:	1a86c087 	csel	w7, w4, w6, gt
   8cacc:	2a0703e0 	mov	w0, w7
   8cad0:	d65f03c0 	ret
   8cad4:	b9400402 	ldr	w2, [x0, #4]
   8cad8:	52800507 	mov	w7, #0x28                  	// #40
   8cadc:	71000c5f 	cmp	w2, #0x3
   8cae0:	54ffff6d 	b.le	8cacc <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
   8cae4:	b9400803 	ldr	w3, [x0, #8]
   8cae8:	52800520 	mov	w0, #0x29                  	// #41
   8caec:	528005a1 	mov	w1, #0x2d                  	// #45
   8caf0:	71000c7f 	cmp	w3, #0x3
   8caf4:	1a803027 	csel	w7, w1, w0, cc  // cc = lo, ul, last
   8caf8:	2a0703e0 	mov	w0, w7
   8cafc:	d65f03c0 	ret
   8cb00:	f0000068 	adrp	x8, 9b000 <vtable for CSoftSerialDevice+0x90>
   8cb04:	91354109 	add	x9, x8, #0xd50
   8cb08:	f81f0ffe 	str	x30, [sp, #-16]!
   8cb0c:	9106e121 	add	x1, x9, #0x1b8
   8cb10:	91072120 	add	x0, x9, #0x1c8
   8cb14:	52803242 	mov	w2, #0x192                 	// #402
   8cb18:	97fff216 	bl	89370 <assertion_failed>

000000000008cb1c <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>:
   8cb1c:	b9400800 	ldr	w0, [x0, #8]
   8cb20:	71000c1f 	cmp	w0, #0x3
   8cb24:	54000108 	b.hi	8cb44 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x28>  // b.pmore
   8cb28:	7100043f 	cmp	w1, #0x1
   8cb2c:	540001a0 	b.eq	8cb60 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x44>  // b.none
   8cb30:	7100183f 	cmp	w1, #0x6
   8cb34:	528ca002 	mov	w2, #0x6500                	// #25856
   8cb38:	72a3b9a2 	movk	w2, #0x1dcd, lsl #16
   8cb3c:	1a9f0040 	csel	w0, w2, wzr, eq  // eq = none
   8cb40:	d65f03c0 	ret
   8cb44:	7100043f 	cmp	w1, #0x1
   8cb48:	54000120 	b.eq	8cb6c <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x50>  // b.none
   8cb4c:	7100183f 	cmp	w1, #0x6
   8cb50:	5282f001 	mov	w1, #0x1780                	// #6016
   8cb54:	72a59681 	movk	w1, #0x2cb4, lsl #16
   8cb58:	1a9f0020 	csel	w0, w1, wzr, eq  // eq = none
   8cb5c:	d65f03c0 	ret
   8cb60:	529f0000 	mov	w0, #0xf800                	// #63488
   8cb64:	72a02480 	movk	w0, #0x124, lsl #16
   8cb68:	d65f03c0 	ret
   8cb6c:	529f3000 	mov	w0, #0xf980                	// #63872
   8cb70:	72a066e0 	movk	w0, #0x337, lsl #16
   8cb74:	d65f03c0 	ret

000000000008cb78 <CMachineInfo::GetDevice(TDeviceId) const>:
   8cb78:	350000a1 	cbnz	w1, 8cb8c <CMachineInfo::GetDevice(TDeviceId) const+0x14>
   8cb7c:	b9400400 	ldr	w0, [x0, #4]
   8cb80:	7100041f 	cmp	w0, #0x1
   8cb84:	1a9f07e0 	cset	w0, ne  // ne = any
   8cb88:	d65f03c0 	ret
   8cb8c:	f0000061 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   8cb90:	91354022 	add	x2, x1, #0xd50
   8cb94:	f81f0ffe 	str	x30, [sp, #-16]!
   8cb98:	9106e041 	add	x1, x2, #0x1b8
   8cb9c:	91072040 	add	x0, x2, #0x1c8
   8cba0:	528039a2 	mov	w2, #0x1cd                 	// #461
   8cba4:	97fff1f3 	bl	89370 <assertion_failed>

000000000008cba8 <CMachineInfo::ArePWMChannelsSwapped() const>:
   8cba8:	b9400400 	ldr	w0, [x0, #4]
   8cbac:	529fff61 	mov	w1, #0xfffb                	// #65531
   8cbb0:	72afffe1 	movk	w1, #0x7fff, lsl #16
   8cbb4:	51001002 	sub	w2, w0, #0x4
   8cbb8:	51001803 	sub	w3, w0, #0x6
   8cbbc:	6b01005f 	cmp	w2, w1
   8cbc0:	7a419860 	ccmp	w3, #0x1, #0x0, ls  // ls = plast
   8cbc4:	1a9f97e0 	cset	w0, hi  // hi = pmore
   8cbc8:	d65f03c0 	ret

000000000008cbcc <CMachineInfo::AllocateDMAChannel(unsigned int)>:
   8cbcc:	b0016ec2 	adrp	x2, 2e65000 <temp_gold+0xf421a0>
   8cbd0:	f81f0ffe 	str	x30, [sp, #-16]!
   8cbd4:	aa0003e3 	mov	x3, x0
   8cbd8:	f941444f 	ldr	x15, [x2, #648]
   8cbdc:	b40000af 	cbz	x15, 8cbf0 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x24>
   8cbe0:	eb0301ff 	cmp	x15, x3
   8cbe4:	54000120 	b.eq	8cc08 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x3c>  // b.none
   8cbe8:	aa0f03e3 	mov	x3, x15
   8cbec:	b5ffffaf 	cbnz	x15, 8cbe0 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x14>
   8cbf0:	f0000060 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   8cbf4:	91354003 	add	x3, x0, #0xd50
   8cbf8:	9106e061 	add	x1, x3, #0x1b8
   8cbfc:	91074060 	add	x0, x3, #0x1d0
   8cc00:	52803ba2 	mov	w2, #0x1dd                 	// #477
   8cc04:	97fff1db 	bl	89370 <assertion_failed>
   8cc08:	721c6c3f 	tst	w1, #0xfffffff0
   8cc0c:	54000a60 	b.eq	8cd58 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x18c>  // b.none
   8cc10:	7102043f 	cmp	w1, #0x81
   8cc14:	54000ce0 	b.eq	8cdb0 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1e4>  // b.none
   8cc18:	71020c3f 	cmp	w1, #0x83
   8cc1c:	52800164 	mov	w4, #0xb                   	// #11
   8cc20:	1a8413e6 	csel	w6, wzr, w4, ne  // ne = any
   8cc24:	528000e1 	mov	w1, #0x7                   	// #7
   8cc28:	528001c5 	mov	w5, #0xe                   	// #14
   8cc2c:	1a851027 	csel	w7, w1, w5, ne  // ne = any
   8cc30:	79403068 	ldrh	w8, [x3, #24]
   8cc34:	1ac72909 	asr	w9, w8, w7
   8cc38:	37000ac9 	tbnz	w9, #0, 8cd90 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1c4>
   8cc3c:	510004e0 	sub	w0, w7, #0x1
   8cc40:	6b0000df 	cmp	w6, w0
   8cc44:	54000b2c 	b.gt	8cda8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1dc>
   8cc48:	1ac0290a 	asr	w10, w8, w0
   8cc4c:	37000a0a 	tbnz	w10, #0, 8cd8c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1c0>
   8cc50:	510008e0 	sub	w0, w7, #0x2
   8cc54:	6b0000df 	cmp	w6, w0
   8cc58:	54000a8c 	b.gt	8cda8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1dc>
   8cc5c:	1ac0290b 	asr	w11, w8, w0
   8cc60:	3700096b 	tbnz	w11, #0, 8cd8c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1c0>
   8cc64:	51000ce0 	sub	w0, w7, #0x3
   8cc68:	6b0000df 	cmp	w6, w0
   8cc6c:	540009ec 	b.gt	8cda8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1dc>
   8cc70:	1ac0290c 	asr	w12, w8, w0
   8cc74:	370008cc 	tbnz	w12, #0, 8cd8c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1c0>
   8cc78:	510010e0 	sub	w0, w7, #0x4
   8cc7c:	6b0000df 	cmp	w6, w0
   8cc80:	5400094c 	b.gt	8cda8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1dc>
   8cc84:	1ac0290d 	asr	w13, w8, w0
   8cc88:	3700082d 	tbnz	w13, #0, 8cd8c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1c0>
   8cc8c:	510014e0 	sub	w0, w7, #0x5
   8cc90:	6b0000df 	cmp	w6, w0
   8cc94:	540008ac 	b.gt	8cda8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1dc>
   8cc98:	1ac0290e 	asr	w14, w8, w0
   8cc9c:	3700078e 	tbnz	w14, #0, 8cd8c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1c0>
   8cca0:	510018e0 	sub	w0, w7, #0x6
   8cca4:	6b0000df 	cmp	w6, w0
   8cca8:	5400080c 	b.gt	8cda8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1dc>
   8ccac:	1ac0290f 	asr	w15, w8, w0
   8ccb0:	370006ef 	tbnz	w15, #0, 8cd8c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1c0>
   8ccb4:	51001ce0 	sub	w0, w7, #0x7
   8ccb8:	6b0000df 	cmp	w6, w0
   8ccbc:	5400076c 	b.gt	8cda8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1dc>
   8ccc0:	1ac02910 	asr	w16, w8, w0
   8ccc4:	37000650 	tbnz	w16, #0, 8cd8c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1c0>
   8ccc8:	510020e0 	sub	w0, w7, #0x8
   8cccc:	6b0000df 	cmp	w6, w0
   8ccd0:	540006cc 	b.gt	8cda8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1dc>
   8ccd4:	1ac02911 	asr	w17, w8, w0
   8ccd8:	370005b1 	tbnz	w17, #0, 8cd8c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1c0>
   8ccdc:	510024e0 	sub	w0, w7, #0x9
   8cce0:	6b0000df 	cmp	w6, w0
   8cce4:	5400062c 	b.gt	8cda8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1dc>
   8cce8:	1ac02912 	asr	w18, w8, w0
   8ccec:	37000512 	tbnz	w18, #0, 8cd8c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1c0>
   8ccf0:	510028e0 	sub	w0, w7, #0xa
   8ccf4:	6b0000df 	cmp	w6, w0
   8ccf8:	5400058c 	b.gt	8cda8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1dc>
   8ccfc:	1ac0291e 	asr	w30, w8, w0
   8cd00:	3700047e 	tbnz	w30, #0, 8cd8c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1c0>
   8cd04:	51002ce0 	sub	w0, w7, #0xb
   8cd08:	6b0000df 	cmp	w6, w0
   8cd0c:	540004ec 	b.gt	8cda8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1dc>
   8cd10:	1ac02902 	asr	w2, w8, w0
   8cd14:	370003c2 	tbnz	w2, #0, 8cd8c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1c0>
   8cd18:	510030e0 	sub	w0, w7, #0xc
   8cd1c:	6b0000df 	cmp	w6, w0
   8cd20:	5400044c 	b.gt	8cda8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1dc>
   8cd24:	1ac02904 	asr	w4, w8, w0
   8cd28:	37000324 	tbnz	w4, #0, 8cd8c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1c0>
   8cd2c:	510034e0 	sub	w0, w7, #0xd
   8cd30:	6b0000df 	cmp	w6, w0
   8cd34:	540003ac 	b.gt	8cda8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1dc>
   8cd38:	1ac02901 	asr	w1, w8, w0
   8cd3c:	37000281 	tbnz	w1, #0, 8cd8c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1c0>
   8cd40:	510038e5 	sub	w5, w7, #0xe
   8cd44:	6b0500df 	cmp	w6, w5
   8cd48:	5400030c 	b.gt	8cda8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1dc>
   8cd4c:	360002e8 	tbz	w8, #0, 8cda8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1dc>
   8cd50:	52800007 	mov	w7, #0x0                   	// #0
   8cd54:	1400000f 	b	8cd90 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1c4>
   8cd58:	71001c3f 	cmp	w1, #0x7
   8cd5c:	54000308 	b.hi	8cdbc <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1f0>  // b.pmore
   8cd60:	794031ea 	ldrh	w10, [x15, #24]
   8cd64:	52801000 	mov	w0, #0x80                  	// #128
   8cd68:	1ac1294b 	asr	w11, w10, w1
   8cd6c:	360000cb 	tbz	w11, #0, 8cd84 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1b8>
   8cd70:	5280002c 	mov	w12, #0x1                   	// #1
   8cd74:	2a0103e0 	mov	w0, w1
   8cd78:	1ac1218d 	lsl	w13, w12, w1
   8cd7c:	0a2d014e 	bic	w14, w10, w13
   8cd80:	790031ee 	strh	w14, [x15, #24]
   8cd84:	f84107fe 	ldr	x30, [sp], #16
   8cd88:	d65f03c0 	ret
   8cd8c:	2a0003e7 	mov	w7, w0
   8cd90:	52800026 	mov	w6, #0x1                   	// #1
   8cd94:	2a0703e0 	mov	w0, w7
   8cd98:	1ac720c7 	lsl	w7, w6, w7
   8cd9c:	0a270108 	bic	w8, w8, w7
   8cda0:	79003068 	strh	w8, [x3, #24]
   8cda4:	17fffff8 	b	8cd84 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1b8>
   8cda8:	52801000 	mov	w0, #0x80                  	// #128
   8cdac:	17fffff6 	b	8cd84 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1b8>
   8cdb0:	52800006 	mov	w6, #0x0                   	// #0
   8cdb4:	528000c7 	mov	w7, #0x6                   	// #6
   8cdb8:	17ffff9e 	b	8cc30 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x64>
   8cdbc:	f0000063 	adrp	x3, 9b000 <vtable for CSoftSerialDevice+0x90>
   8cdc0:	91354069 	add	x9, x3, #0xd50
   8cdc4:	9106e121 	add	x1, x9, #0x1b8
   8cdc8:	91078120 	add	x0, x9, #0x1e0
   8cdcc:	52803cc2 	mov	w2, #0x1e6                 	// #486
   8cdd0:	97fff168 	bl	89370 <assertion_failed>

000000000008cdd4 <CMachineInfo::FreeDMAChannel(unsigned int)>:
   8cdd4:	b0016ec2 	adrp	x2, 2e65000 <temp_gold+0xf421a0>
   8cdd8:	f81f0ffe 	str	x30, [sp, #-16]!
   8cddc:	f941444c 	ldr	x12, [x2, #648]
   8cde0:	b40000ac 	cbz	x12, 8cdf4 <CMachineInfo::FreeDMAChannel(unsigned int)+0x20>
   8cde4:	eb00019f 	cmp	x12, x0
   8cde8:	54000120 	b.eq	8ce0c <CMachineInfo::FreeDMAChannel(unsigned int)+0x38>  // b.none
   8cdec:	aa0c03e0 	mov	x0, x12
   8cdf0:	b5ffffac 	cbnz	x12, 8cde4 <CMachineInfo::FreeDMAChannel(unsigned int)+0x10>
   8cdf4:	f0000060 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   8cdf8:	91354003 	add	x3, x0, #0xd50
   8cdfc:	9106e061 	add	x1, x3, #0x1b8
   8ce00:	91074060 	add	x0, x3, #0x1d0
   8ce04:	52804142 	mov	w2, #0x20a                 	// #522
   8ce08:	97fff15a 	bl	89370 <assertion_failed>
   8ce0c:	71001c3f 	cmp	w1, #0x7
   8ce10:	54000148 	b.hi	8ce38 <CMachineInfo::FreeDMAChannel(unsigned int)+0x64>  // b.pmore
   8ce14:	79403185 	ldrh	w5, [x12, #24]
   8ce18:	1ac128a6 	asr	w6, w5, w1
   8ce1c:	370001a6 	tbnz	w6, #0, 8ce50 <CMachineInfo::FreeDMAChannel(unsigned int)+0x7c>
   8ce20:	52800029 	mov	w9, #0x1                   	// #1
   8ce24:	f84107fe 	ldr	x30, [sp], #16
   8ce28:	1ac1212a 	lsl	w10, w9, w1
   8ce2c:	2a05014b 	orr	w11, w10, w5
   8ce30:	7900318b 	strh	w11, [x12, #24]
   8ce34:	d65f03c0 	ret
   8ce38:	f0000061 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   8ce3c:	91354024 	add	x4, x1, #0xd50
   8ce40:	9106e081 	add	x1, x4, #0x1b8
   8ce44:	91078080 	add	x0, x4, #0x1e0
   8ce48:	52804242 	mov	w2, #0x212                 	// #530
   8ce4c:	97fff149 	bl	89370 <assertion_failed>
   8ce50:	f0000067 	adrp	x7, 9b000 <vtable for CSoftSerialDevice+0x90>
   8ce54:	913540e8 	add	x8, x7, #0xd50
   8ce58:	9106e101 	add	x1, x8, #0x1b8
   8ce5c:	91080100 	add	x0, x8, #0x200
   8ce60:	52804262 	mov	w2, #0x213                 	// #531
   8ce64:	97fff143 	bl	89370 <assertion_failed>

000000000008ce68 <CMachineInfo::FetchDTB()>:
   8ce68:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   8ce6c:	d2801f14 	mov	x20, #0xf8                  	// #248
   8ce70:	a9015bf5 	stp	x21, x22, [sp, #16]
   8ce74:	b9400295 	ldr	w21, [x20]
   8ce78:	f90013fe 	str	x30, [sp, #32]
   8ce7c:	34000175 	cbz	w21, 8cea8 <CMachineInfo::FetchDTB()+0x40>
   8ce80:	aa0003f3 	mov	x19, x0
   8ce84:	f9401000 	ldr	x0, [x0, #32]
   8ce88:	b5000180 	cbnz	x0, 8ceb8 <CMachineInfo::FetchDTB()+0x50>
   8ce8c:	d2800100 	mov	x0, #0x8                   	// #8
   8ce90:	94001ee8 	bl	94a30 <operator new(unsigned long)>
   8ce94:	aa0003f6 	mov	x22, x0
   8ce98:	2a1503e1 	mov	w1, w21
   8ce9c:	94002705 	bl	96ab0 <CDeviceTreeBlob::CDeviceTreeBlob(void const*)>
   8cea0:	f9001276 	str	x22, [x19, #32]
   8cea4:	b900029f 	str	wzr, [x20]
   8cea8:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8ceac:	f94013fe 	ldr	x30, [sp, #32]
   8ceb0:	a8c353f3 	ldp	x19, x20, [sp], #48
   8ceb4:	d65f03c0 	ret
   8ceb8:	f0000061 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   8cebc:	91354022 	add	x2, x1, #0xd50
   8cec0:	9106e041 	add	x1, x2, #0x1b8
   8cec4:	9108a040 	add	x0, x2, #0x228
   8cec8:	528043c2 	mov	w2, #0x21e                 	// #542
   8cecc:	97fff129 	bl	89370 <assertion_failed>

000000000008ced0 <CMachineInfo::GetPCIeDMAMemory() const>:
   8ced0:	b0016ec1 	adrp	x1, 2e65000 <temp_gold+0xf421a0>
   8ced4:	a9bc53f3 	stp	x19, x20, [sp, #-64]!
   8ced8:	aa0003f4 	mov	x20, x0
   8cedc:	f9414433 	ldr	x19, [x1, #648]
   8cee0:	a9015bf5 	stp	x21, x22, [sp, #16]
   8cee4:	aa0803f5 	mov	x21, x8
   8cee8:	f9001bfe 	str	x30, [sp, #48]
   8ceec:	b40000b3 	cbz	x19, 8cf00 <CMachineInfo::GetPCIeDMAMemory() const+0x30>
   8cef0:	eb14027f 	cmp	x19, x20
   8cef4:	54000140 	b.eq	8cf1c <CMachineInfo::GetPCIeDMAMemory() const+0x4c>  // b.none
   8cef8:	aa1303f4 	mov	x20, x19
   8cefc:	b5ffffb3 	cbnz	x19, 8cef0 <CMachineInfo::GetPCIeDMAMemory() const+0x20>
   8cf00:	f0000060 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   8cf04:	91354002 	add	x2, x0, #0xd50
   8cf08:	a90263f7 	stp	x23, x24, [sp, #32]
   8cf0c:	9106e041 	add	x1, x2, #0x1b8
   8cf10:	91074040 	add	x0, x2, #0x1d0
   8cf14:	52804502 	mov	w2, #0x228                 	// #552
   8cf18:	97fff116 	bl	89370 <assertion_failed>
   8cf1c:	f9401260 	ldr	x0, [x19, #32]
   8cf20:	b4000240 	cbz	x0, 8cf68 <CMachineInfo::GetPCIeDMAMemory() const+0x98>
   8cf24:	f0000076 	adrp	x22, 9b000 <vtable for CSoftSerialDevice+0x90>
   8cf28:	913542d6 	add	x22, x22, #0xd50
   8cf2c:	9108e2c1 	add	x1, x22, #0x238
   8cf30:	d2800002 	mov	x2, #0x0                   	// #0
   8cf34:	94002703 	bl	96b40 <CDeviceTreeBlob::FindNode(char const*, TDeviceTreeNode const*) const>
   8cf38:	b4000180 	cbz	x0, 8cf68 <CMachineInfo::GetPCIeDMAMemory() const+0x98>
   8cf3c:	910942c2 	add	x2, x22, #0x250
   8cf40:	aa0003e1 	mov	x1, x0
   8cf44:	f9401260 	ldr	x0, [x19, #32]
   8cf48:	940027b2 	bl	96e10 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const>
   8cf4c:	aa0003f6 	mov	x22, x0
   8cf50:	b40000c0 	cbz	x0, 8cf68 <CMachineInfo::GetPCIeDMAMemory() const+0x98>
   8cf54:	aa0003e1 	mov	x1, x0
   8cf58:	f9401260 	ldr	x0, [x19, #32]
   8cf5c:	94002809 	bl	96f80 <CDeviceTreeBlob::GetPropertyValueLength(TDeviceTreeProperty const*) const>
   8cf60:	f100701f 	cmp	x0, #0x1c
   8cf64:	54000280 	b.eq	8cfb4 <CMachineInfo::GetPCIeDMAMemory() const+0xe4>  // b.none
   8cf68:	b9400683 	ldr	w3, [x20, #4]
   8cf6c:	b9401684 	ldr	w4, [x20, #20]
   8cf70:	71003c7f 	cmp	w3, #0xf
   8cf74:	d36c7c85 	ubfiz	x5, x4, #20, #32
   8cf78:	54000140 	b.eq	8cfa0 <CMachineInfo::GetPCIeDMAMemory() const+0xd0>  // b.none
   8cf7c:	713ffc9f 	cmp	w4, #0xfff
   8cf80:	9a9f97e7 	cset	x7, hi  // hi = pmore
   8cf84:	d35e74e8 	lsl	x8, x7, #34
   8cf88:	a9007ea8 	stp	x8, xzr, [x21]
   8cf8c:	f9000aa5 	str	x5, [x21, #16]
   8cf90:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8cf94:	f9401bfe 	ldr	x30, [sp, #48]
   8cf98:	a8c453f3 	ldp	x19, x20, [sp], #64
   8cf9c:	d65f03c0 	ret
   8cfa0:	b9400e86 	ldr	w6, [x20, #12]
   8cfa4:	d2800008 	mov	x8, #0x0                   	// #0
   8cfa8:	710010df 	cmp	w6, #0x4
   8cfac:	54fffee9 	b.ls	8cf88 <CMachineInfo::GetPCIeDMAMemory() const+0xb8>  // b.plast
   8cfb0:	17fffff3 	b	8cf7c <CMachineInfo::GetPCIeDMAMemory() const+0xac>
   8cfb4:	52800022 	mov	w2, #0x1                   	// #1
   8cfb8:	aa1603e1 	mov	x1, x22
   8cfbc:	f9401260 	ldr	x0, [x19, #32]
   8cfc0:	a90263f7 	stp	x23, x24, [sp, #32]
   8cfc4:	9400280f 	bl	97000 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const>
   8cfc8:	2a0003f8 	mov	w24, w0
   8cfcc:	52800042 	mov	w2, #0x2                   	// #2
   8cfd0:	f9401260 	ldr	x0, [x19, #32]
   8cfd4:	aa1603e1 	mov	x1, x22
   8cfd8:	9400280a 	bl	97000 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const>
   8cfdc:	2a0003e9 	mov	w9, w0
   8cfe0:	52800062 	mov	w2, #0x3                   	// #3
   8cfe4:	f9401260 	ldr	x0, [x19, #32]
   8cfe8:	aa1603e1 	mov	x1, x22
   8cfec:	aa188138 	orr	x24, x9, x24, lsl #32
   8cff0:	94002804 	bl	97000 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const>
   8cff4:	2a0003f7 	mov	w23, w0
   8cff8:	52800082 	mov	w2, #0x4                   	// #4
   8cffc:	f9401260 	ldr	x0, [x19, #32]
   8d000:	aa1603e1 	mov	x1, x22
   8d004:	940027ff 	bl	97000 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const>
   8d008:	2a0003ea 	mov	w10, w0
   8d00c:	528000a2 	mov	w2, #0x5                   	// #5
   8d010:	f9401260 	ldr	x0, [x19, #32]
   8d014:	aa1603e1 	mov	x1, x22
   8d018:	aa178157 	orr	x23, x10, x23, lsl #32
   8d01c:	940027f9 	bl	97000 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const>
   8d020:	2a0003f4 	mov	w20, w0
   8d024:	aa1603e1 	mov	x1, x22
   8d028:	f9401260 	ldr	x0, [x19, #32]
   8d02c:	528000c2 	mov	w2, #0x6                   	// #6
   8d030:	940027f4 	bl	97000 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const>
   8d034:	2a0003eb 	mov	w11, w0
   8d038:	a9005eb8 	stp	x24, x23, [x21]
   8d03c:	aa14816c 	orr	x12, x11, x20, lsl #32
   8d040:	a94263f7 	ldp	x23, x24, [sp, #32]
   8d044:	f9000aac 	str	x12, [x21, #16]
   8d048:	17ffffd2 	b	8cf90 <CMachineInfo::GetPCIeDMAMemory() const+0xc0>

000000000008d04c <CMachineInfo::Get()>:
   8d04c:	90016ec0 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   8d050:	f9414400 	ldr	x0, [x0, #648]
   8d054:	b4000040 	cbz	x0, 8d05c <CMachineInfo::Get()+0x10>
   8d058:	d65f03c0 	ret
   8d05c:	d0000061 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   8d060:	91354022 	add	x2, x1, #0xd50
   8d064:	f81f0ffe 	str	x30, [sp, #-16]!
   8d068:	9106e041 	add	x1, x2, #0x1b8
   8d06c:	91074040 	add	x0, x2, #0x1d0
   8d070:	52804b42 	mov	w2, #0x25a                 	// #602
   8d074:	97fff0bf 	bl	89370 <assertion_failed>
	...

000000000008d080 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)>:
   8d080:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   8d084:	aa0003f3 	mov	x19, x0
   8d088:	2a0403f4 	mov	w20, w4
   8d08c:	a9015bf5 	stp	x21, x22, [sp, #16]
   8d090:	2a0203f6 	mov	w22, w2
   8d094:	12001c75 	and	w21, w3, #0xff
   8d098:	a9027bf7 	stp	x23, x30, [sp, #32]
   8d09c:	2a0103f7 	mov	w23, w1
   8d0a0:	97fff250 	bl	899e0 <CDevice::CDevice()>
   8d0a4:	d0000065 	adrp	x5, 9b000 <vtable for CSoftSerialDevice+0x90>
   8d0a8:	913f00a1 	add	x1, x5, #0xfc0
   8d0ac:	29035a77 	stp	w23, w22, [x19, #24]
   8d0b0:	9100c260 	add	x0, x19, #0x30
   8d0b4:	39008275 	strb	w21, [x19, #32]
   8d0b8:	f9000261 	str	x1, [x19]
   8d0bc:	b9002674 	str	w20, [x19, #36]
   8d0c0:	f900167f 	str	xzr, [x19, #40]
   8d0c4:	94002a63 	bl	97a50 <CCharGenerator::CCharGenerator()>
   8d0c8:	52800024 	mov	w4, #0x1                   	// #1
   8d0cc:	12800403 	mov	w3, #0xffffffdf            	// #-33
   8d0d0:	f9001e7f 	str	xzr, [x19, #56]
   8d0d4:	91020260 	add	x0, x19, #0x80
   8d0d8:	d2800002 	mov	x2, #0x0                   	// #0
   8d0dc:	f805427f 	stur	xzr, [x19, #84]
   8d0e0:	52801021 	mov	w1, #0x81                  	// #129
   8d0e4:	f900327f 	str	xzr, [x19, #96]
   8d0e8:	3901a264 	strb	w4, [x19, #104]
   8d0ec:	7900d663 	strh	w3, [x19, #106]
   8d0f0:	b9006e7f 	str	wzr, [x19, #108]
   8d0f4:	3901e27f 	strb	wzr, [x19, #120]
   8d0f8:	94002a9a 	bl	97b60 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>
   8d0fc:	52800020 	mov	w0, #0x1                   	// #1
   8d100:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8d104:	a9427bf7 	ldp	x23, x30, [sp, #32]
   8d108:	b900da60 	str	w0, [x19, #216]
   8d10c:	a8c353f3 	ldp	x19, x20, [sp], #48
   8d110:	d65f03c0 	ret
   8d114:	d503201f 	nop
   8d118:	d503201f 	nop
   8d11c:	d503201f 	nop

000000000008d120 <CScreenDevice::~CScreenDevice()>:
   8d120:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   8d124:	aa0003f3 	mov	x19, x0
   8d128:	d0000060 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   8d12c:	913f0002 	add	x2, x0, #0xfc0
   8d130:	39408261 	ldrb	w1, [x19, #32]
   8d134:	f9000bfe 	str	x30, [sp, #16]
   8d138:	f9000262 	str	x2, [x19]
   8d13c:	34000081 	cbz	w1, 8d14c <CScreenDevice::~CScreenDevice()+0x2c>
   8d140:	f9401e60 	ldr	x0, [x19, #56]
   8d144:	b4000040 	cbz	x0, 8d14c <CScreenDevice::~CScreenDevice()+0x2c>
   8d148:	94001e52 	bl	94a90 <operator delete[](void*)>
   8d14c:	f9001e7f 	str	xzr, [x19, #56]
   8d150:	f9401674 	ldr	x20, [x19, #40]
   8d154:	b40000d4 	cbz	x20, 8d16c <CScreenDevice::~CScreenDevice()+0x4c>
   8d158:	aa1403e0 	mov	x0, x20
   8d15c:	9400287d 	bl	97350 <CBcmFrameBuffer::~CBcmFrameBuffer()>
   8d160:	aa1403e0 	mov	x0, x20
   8d164:	d2801401 	mov	x1, #0xa0                  	// #160
   8d168:	94001e56 	bl	94ac0 <operator delete(void*, unsigned long)>
   8d16c:	91020260 	add	x0, x19, #0x80
   8d170:	f900167f 	str	xzr, [x19, #40]
   8d174:	94002acf 	bl	97cb0 <CDMAChannel::~CDMAChannel()>
   8d178:	9100c260 	add	x0, x19, #0x30
   8d17c:	94002a39 	bl	97a60 <CCharGenerator::~CCharGenerator()>
   8d180:	aa1303e0 	mov	x0, x19
   8d184:	f9400bfe 	ldr	x30, [sp, #16]
   8d188:	a8c253f3 	ldp	x19, x20, [sp], #32
   8d18c:	17fff1f1 	b	89950 <CDevice::~CDevice()>

000000000008d190 <CScreenDevice::~CScreenDevice()>:
   8d190:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   8d194:	aa0003f3 	mov	x19, x0
   8d198:	97ffffe2 	bl	8d120 <CScreenDevice::~CScreenDevice()>
   8d19c:	aa1303e0 	mov	x0, x19
   8d1a0:	d2801c01 	mov	x1, #0xe0                  	// #224
   8d1a4:	a8c17bf3 	ldp	x19, x30, [sp], #16
   8d1a8:	14001e46 	b	94ac0 <operator delete(void*, unsigned long)>
   8d1ac:	d503201f 	nop

000000000008d1b0 <CScreenDevice::Initialize()>:
   8d1b0:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   8d1b4:	aa0003f3 	mov	x19, x0
   8d1b8:	a9017bf5 	stp	x21, x30, [sp, #16]
   8d1bc:	39408015 	ldrb	w21, [x0, #32]
   8d1c0:	350005f5 	cbnz	w21, 8d27c <CScreenDevice::Initialize()+0xcc>
   8d1c4:	d2801400 	mov	x0, #0xa0                  	// #160
   8d1c8:	94001e1a 	bl	94a30 <operator new(unsigned long)>
   8d1cc:	29430a61 	ldp	w1, w2, [x19, #24]
   8d1d0:	aa0003f4 	mov	x20, x0
   8d1d4:	52800007 	mov	w7, #0x0                   	// #0
   8d1d8:	52800005 	mov	w5, #0x0                   	// #0
   8d1dc:	52800004 	mov	w4, #0x0                   	// #0
   8d1e0:	b9402666 	ldr	w6, [x19, #36]
   8d1e4:	52800203 	mov	w3, #0x10                  	// #16
   8d1e8:	940027fe 	bl	971e0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)>
   8d1ec:	aa1403e0 	mov	x0, x20
   8d1f0:	f9001674 	str	x20, [x19, #40]
   8d1f4:	94002873 	bl	973c0 <CBcmFrameBuffer::Initialize()>
   8d1f8:	72001c1f 	tst	w0, #0xff
   8d1fc:	540000a1 	b.ne	8d210 <CScreenDevice::Initialize()+0x60>  // b.any
   8d200:	2a1503e0 	mov	w0, w21
   8d204:	a9417bf5 	ldp	x21, x30, [sp, #16]
   8d208:	a8c253f3 	ldp	x19, x20, [sp], #32
   8d20c:	d65f03c0 	ret
   8d210:	f9401660 	ldr	x0, [x19, #40]
   8d214:	940028bb 	bl	97500 <CBcmFrameBuffer::GetDepth() const>
   8d218:	7100401f 	cmp	w0, #0x10
   8d21c:	54ffff21 	b.ne	8d200 <CScreenDevice::Initialize()+0x50>  // b.any
   8d220:	f9401660 	ldr	x0, [x19, #40]
   8d224:	940028bb 	bl	97510 <CBcmFrameBuffer::GetBuffer() const>
   8d228:	2a0003e4 	mov	w4, w0
   8d22c:	f9401660 	ldr	x0, [x19, #40]
   8d230:	f9001e64 	str	x4, [x19, #56]
   8d234:	940028bb 	bl	97520 <CBcmFrameBuffer::GetSize() const>
   8d238:	b9004260 	str	w0, [x19, #64]
   8d23c:	f9401660 	ldr	x0, [x19, #40]
   8d240:	940028ac 	bl	974f0 <CBcmFrameBuffer::GetPitch() const>
   8d244:	b9004660 	str	w0, [x19, #68]
   8d248:	f9401660 	ldr	x0, [x19, #40]
   8d24c:	94002899 	bl	974b0 <CBcmFrameBuffer::GetWidth() const>
   8d250:	b9004a60 	str	w0, [x19, #72]
   8d254:	f9401660 	ldr	x0, [x19, #40]
   8d258:	9400289a 	bl	974c0 <CBcmFrameBuffer::GetHeight() const>
   8d25c:	b9404665 	ldr	w5, [x19, #68]
   8d260:	2a0003f4 	mov	w20, w0
   8d264:	b9004e60 	str	w0, [x19, #76]
   8d268:	f24004bf 	tst	x5, #0x3
   8d26c:	54fffca1 	b.ne	8d200 <CScreenDevice::Initialize()+0x50>  // b.any
   8d270:	53017ca6 	lsr	w6, w5, #1
   8d274:	b9004666 	str	w6, [x19, #68]
   8d278:	1400000b 	b	8d2a4 <CScreenDevice::Initialize()+0xf4>
   8d27c:	29430400 	ldp	w0, w1, [x0, #24]
   8d280:	1b017c02 	mul	w2, w0, w1
   8d284:	29088260 	stp	w0, w0, [x19, #68]
   8d288:	b9004e61 	str	w1, [x19, #76]
   8d28c:	531f7843 	lsl	w3, w2, #1
   8d290:	d37f7c40 	ubfiz	x0, x2, #1, #32
   8d294:	b9004263 	str	w3, [x19, #64]
   8d298:	94001dee 	bl	94a50 <operator new[](unsigned long)>
   8d29c:	b9404e74 	ldr	w20, [x19, #76]
   8d2a0:	f9001e60 	str	x0, [x19, #56]
   8d2a4:	9100c275 	add	x21, x19, #0x30
   8d2a8:	aa1503e0 	mov	x0, x21
   8d2ac:	940029f5 	bl	97a80 <CCharGenerator::GetCharHeight() const>
   8d2b0:	1ac00a94 	udiv	w20, w20, w0
   8d2b4:	aa1503e0 	mov	x0, x21
   8d2b8:	940029f2 	bl	97a80 <CCharGenerator::GetCharHeight() const>
   8d2bc:	b9405a68 	ldr	w8, [x19, #88]
   8d2c0:	1b007e87 	mul	w7, w20, w0
   8d2c4:	aa1303e0 	mov	x0, x19
   8d2c8:	b9006668 	str	w8, [x19, #100]
   8d2cc:	b9005267 	str	w7, [x19, #80]
   8d2d0:	290bfe67 	stp	w7, wzr, [x19, #92]
   8d2d4:	940001ef 	bl	8da90 <CScreenDevice::ClearDisplayEnd()>
   8d2d8:	3941a269 	ldrb	w9, [x19, #104]
   8d2dc:	34000069 	cbz	w9, 8d2e8 <CScreenDevice::Initialize()+0x138>
   8d2e0:	aa1303e0 	mov	x0, x19
   8d2e4:	94000533 	bl	8e7b0 <CScreenDevice::InvertCursor() [clone .part.8]>
   8d2e8:	97fff352 	bl	8a030 <CDeviceNameService::Get()>
   8d2ec:	b940266b 	ldr	w11, [x19, #36]
   8d2f0:	d000006a 	adrp	x10, 9b000 <vtable for CSoftSerialDevice+0x90>
   8d2f4:	52800035 	mov	w21, #0x1                   	// #1
   8d2f8:	aa1303e3 	mov	x3, x19
   8d2fc:	913fc141 	add	x1, x10, #0xff0
   8d300:	52800004 	mov	w4, #0x0                   	// #0
   8d304:	0b150162 	add	w2, w11, w21
   8d308:	97fff21e 	bl	89b80 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   8d30c:	2a1503e0 	mov	w0, w21
   8d310:	a9417bf5 	ldp	x21, x30, [sp, #16]
   8d314:	a8c253f3 	ldp	x19, x20, [sp], #32
   8d318:	d65f03c0 	ret
   8d31c:	d503201f 	nop

000000000008d320 <CScreenDevice::GetWidth() const>:
   8d320:	b9404800 	ldr	w0, [x0, #72]
   8d324:	d65f03c0 	ret
   8d328:	d503201f 	nop
   8d32c:	d503201f 	nop

000000000008d330 <CScreenDevice::GetHeight() const>:
   8d330:	b9404c00 	ldr	w0, [x0, #76]
   8d334:	d65f03c0 	ret
   8d338:	d503201f 	nop
   8d33c:	d503201f 	nop

000000000008d340 <CScreenDevice::GetColumns() const>:
   8d340:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   8d344:	9100c000 	add	x0, x0, #0x30
   8d348:	b9401813 	ldr	w19, [x0, #24]
   8d34c:	940029c9 	bl	97a70 <CCharGenerator::GetCharWidth() const>
   8d350:	1ac00a60 	udiv	w0, w19, w0
   8d354:	a8c17bf3 	ldp	x19, x30, [sp], #16
   8d358:	d65f03c0 	ret
   8d35c:	d503201f 	nop

000000000008d360 <CScreenDevice::GetRows() const>:
   8d360:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   8d364:	9100c000 	add	x0, x0, #0x30
   8d368:	b9402013 	ldr	w19, [x0, #32]
   8d36c:	940029c5 	bl	97a80 <CCharGenerator::GetCharHeight() const>
   8d370:	1ac00a60 	udiv	w0, w19, w0
   8d374:	a8c17bf3 	ldp	x19, x30, [sp], #16
   8d378:	d65f03c0 	ret
   8d37c:	d503201f 	nop

000000000008d380 <CScreenDevice::GetFrameBuffer()>:
   8d380:	f9401400 	ldr	x0, [x0, #40]
   8d384:	d65f03c0 	ret
   8d388:	d503201f 	nop
   8d38c:	d503201f 	nop

000000000008d390 <CScreenDevice::GetStatus()>:
   8d390:	3941a003 	ldrb	w3, [x0, #104]
   8d394:	a945a407 	ldp	x7, x9, [x0, #88]
   8d398:	3941e002 	ldrb	w2, [x0, #120]
   8d39c:	a9012507 	stp	x7, x9, [x8, #16]
   8d3a0:	b9404004 	ldr	w4, [x0, #64]
   8d3a4:	39008103 	strb	w3, [x8, #32]
   8d3a8:	b9405405 	ldr	w5, [x0, #84]
   8d3ac:	3900c102 	strb	w2, [x8, #48]
   8d3b0:	7940d406 	ldrh	w6, [x0, #106]
   8d3b4:	b9406c0a 	ldr	w10, [x0, #108]
   8d3b8:	29011504 	stp	w4, w5, [x8, #8]
   8d3bc:	f9401c01 	ldr	x1, [x0, #56]
   8d3c0:	79004506 	strh	w6, [x8, #34]
   8d3c4:	f9403800 	ldr	x0, [x0, #112]
   8d3c8:	b900250a 	str	w10, [x8, #36]
   8d3cc:	f9000101 	str	x1, [x8]
   8d3d0:	f9001500 	str	x0, [x8, #40]
   8d3d4:	d65f03c0 	ret
   8d3d8:	d503201f 	nop
   8d3dc:	d503201f 	nop

000000000008d3e0 <CScreenDevice::SetStatus(TScreenStatus const&)>:
   8d3e0:	b9404003 	ldr	w3, [x0, #64]
   8d3e4:	b9400822 	ldr	w2, [x1, #8]
   8d3e8:	6b02007f 	cmp	w3, w2
   8d3ec:	54000060 	b.eq	8d3f8 <CScreenDevice::SetStatus(TScreenStatus const&)+0x18>  // b.none
   8d3f0:	52800000 	mov	w0, #0x0                   	// #0
   8d3f4:	d65f03c0 	ret
   8d3f8:	29489404 	ldp	w4, w5, [x0, #68]
   8d3fc:	6b05009f 	cmp	w4, w5
   8d400:	54ffff81 	b.ne	8d3f0 <CScreenDevice::SetStatus(TScreenStatus const&)+0x10>  // b.any
   8d404:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   8d408:	aa0003f3 	mov	x19, x0
   8d40c:	aa0103f4 	mov	x20, x1
   8d410:	b940d800 	ldr	w0, [x0, #216]
   8d414:	f9000bfe 	str	x30, [sp, #16]
   8d418:	350004c0 	cbnz	w0, 8d4b0 <CScreenDevice::SetStatus(TScreenStatus const&)+0xd0>
   8d41c:	3941e260 	ldrb	w0, [x19, #120]
   8d420:	35000580 	cbnz	w0, 8d4d0 <CScreenDevice::SetStatus(TScreenStatus const&)+0xf0>
   8d424:	3940c021 	ldrb	w1, [x1, #48]
   8d428:	35000541 	cbnz	w1, 8d4d0 <CScreenDevice::SetStatus(TScreenStatus const&)+0xf0>
   8d42c:	b9404262 	ldr	w2, [x19, #64]
   8d430:	f9400281 	ldr	x1, [x20]
   8d434:	f9401e60 	ldr	x0, [x19, #56]
   8d438:	94001be6 	bl	943d0 <memcpy>
   8d43c:	2941a688 	ldp	w8, w9, [x20, #12]
   8d440:	b940168a 	ldr	w10, [x20, #20]
   8d444:	b9401a8b 	ldr	w11, [x20, #24]
   8d448:	b9005668 	str	w8, [x19, #84]
   8d44c:	b9401e8c 	ldr	w12, [x20, #28]
   8d450:	b9005a69 	str	w9, [x19, #88]
   8d454:	3940828d 	ldrb	w13, [x20, #32]
   8d458:	b9005e6a 	str	w10, [x19, #92]
   8d45c:	7940468e 	ldrh	w14, [x20, #34]
   8d460:	b900626b 	str	w11, [x19, #96]
   8d464:	79404a8f 	ldrh	w15, [x20, #36]
   8d468:	b900666c 	str	w12, [x19, #100]
   8d46c:	39409a90 	ldrb	w16, [x20, #38]
   8d470:	3901a26d 	strb	w13, [x19, #104]
   8d474:	39409e91 	ldrb	w17, [x20, #39]
   8d478:	7900d66e 	strh	w14, [x19, #106]
   8d47c:	b9402a92 	ldr	w18, [x20, #40]
   8d480:	7900da6f 	strh	w15, [x19, #108]
   8d484:	b9402e83 	ldr	w3, [x20, #44]
   8d488:	3901ba70 	strb	w16, [x19, #110]
   8d48c:	b940da62 	ldr	w2, [x19, #216]
   8d490:	3901be71 	strb	w17, [x19, #111]
   8d494:	290e0e72 	stp	w18, w3, [x19, #112]
   8d498:	35000242 	cbnz	w2, 8d4e0 <CScreenDevice::SetStatus(TScreenStatus const&)+0x100>
   8d49c:	d5033fbf 	dmb	sy
   8d4a0:	52800020 	mov	w0, #0x1                   	// #1
   8d4a4:	f9400bfe 	ldr	x30, [sp, #16]
   8d4a8:	a8c253f3 	ldp	x19, x20, [sp], #32
   8d4ac:	d65f03c0 	ret
   8d4b0:	94001fe0 	bl	95430 <EnterCritical>
   8d4b4:	3941e266 	ldrb	w6, [x19, #120]
   8d4b8:	35000066 	cbnz	w6, 8d4c4 <CScreenDevice::SetStatus(TScreenStatus const&)+0xe4>
   8d4bc:	3940c287 	ldrb	w7, [x20, #48]
   8d4c0:	34fffb67 	cbz	w7, 8d42c <CScreenDevice::SetStatus(TScreenStatus const&)+0x4c>
   8d4c4:	b940da7e 	ldr	w30, [x19, #216]
   8d4c8:	3400005e 	cbz	w30, 8d4d0 <CScreenDevice::SetStatus(TScreenStatus const&)+0xf0>
   8d4cc:	94002005 	bl	954e0 <LeaveCritical>
   8d4d0:	52800000 	mov	w0, #0x0                   	// #0
   8d4d4:	f9400bfe 	ldr	x30, [sp, #16]
   8d4d8:	a8c253f3 	ldp	x19, x20, [sp], #32
   8d4dc:	d65f03c0 	ret
   8d4e0:	94002000 	bl	954e0 <LeaveCritical>
   8d4e4:	17ffffee 	b	8d49c <CScreenDevice::SetStatus(TScreenStatus const&)+0xbc>
   8d4e8:	d503201f 	nop
   8d4ec:	d503201f 	nop

000000000008d4f0 <CScreenDevice::Write(void const*, unsigned long)>:
   8d4f0:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   8d4f4:	aa0003f3 	mov	x19, x0
   8d4f8:	aa0103f4 	mov	x20, x1
   8d4fc:	b940d800 	ldr	w0, [x0, #216]
   8d500:	a9015bf5 	stp	x21, x22, [sp, #16]
   8d504:	aa0203f5 	mov	x21, x2
   8d508:	f90017fe 	str	x30, [sp, #40]
   8d50c:	35000b60 	cbnz	w0, 8d678 <CScreenDevice::Write(void const*, unsigned long)+0x188>
   8d510:	52800021 	mov	w1, #0x1                   	// #1
   8d514:	3941a260 	ldrb	w0, [x19, #104]
   8d518:	d10006b6 	sub	x22, x21, #0x1
   8d51c:	3901e261 	strb	w1, [x19, #120]
   8d520:	35000a20 	cbnz	w0, 8d664 <CScreenDevice::Write(void const*, unsigned long)+0x174>
   8d524:	b4000c55 	cbz	x21, 8d6ac <CScreenDevice::Write(void const*, unsigned long)+0x1bc>
   8d528:	f2400aa2 	ands	x2, x21, #0x7
   8d52c:	8b150295 	add	x21, x20, x21
   8d530:	54000420 	b.eq	8d5b4 <CScreenDevice::Write(void const*, unsigned long)+0xc4>  // b.none
   8d534:	f100045f 	cmp	x2, #0x1
   8d538:	54000340 	b.eq	8d5a0 <CScreenDevice::Write(void const*, unsigned long)+0xb0>  // b.none
   8d53c:	f100085f 	cmp	x2, #0x2
   8d540:	540002a0 	b.eq	8d594 <CScreenDevice::Write(void const*, unsigned long)+0xa4>  // b.none
   8d544:	f1000c5f 	cmp	x2, #0x3
   8d548:	54000200 	b.eq	8d588 <CScreenDevice::Write(void const*, unsigned long)+0x98>  // b.none
   8d54c:	f100105f 	cmp	x2, #0x4
   8d550:	54000160 	b.eq	8d57c <CScreenDevice::Write(void const*, unsigned long)+0x8c>  // b.none
   8d554:	f100145f 	cmp	x2, #0x5
   8d558:	540000c0 	b.eq	8d570 <CScreenDevice::Write(void const*, unsigned long)+0x80>  // b.none
   8d55c:	f100185f 	cmp	x2, #0x6
   8d560:	540009e1 	b.ne	8d69c <CScreenDevice::Write(void const*, unsigned long)+0x1ac>  // b.any
   8d564:	aa1303e0 	mov	x0, x19
   8d568:	38401681 	ldrb	w1, [x20], #1
   8d56c:	94000055 	bl	8d6c0 <CScreenDevice::Write(char)>
   8d570:	aa1303e0 	mov	x0, x19
   8d574:	38401681 	ldrb	w1, [x20], #1
   8d578:	94000052 	bl	8d6c0 <CScreenDevice::Write(char)>
   8d57c:	aa1303e0 	mov	x0, x19
   8d580:	38401681 	ldrb	w1, [x20], #1
   8d584:	9400004f 	bl	8d6c0 <CScreenDevice::Write(char)>
   8d588:	aa1303e0 	mov	x0, x19
   8d58c:	38401681 	ldrb	w1, [x20], #1
   8d590:	9400004c 	bl	8d6c0 <CScreenDevice::Write(char)>
   8d594:	aa1303e0 	mov	x0, x19
   8d598:	38401681 	ldrb	w1, [x20], #1
   8d59c:	94000049 	bl	8d6c0 <CScreenDevice::Write(char)>
   8d5a0:	38401681 	ldrb	w1, [x20], #1
   8d5a4:	aa1303e0 	mov	x0, x19
   8d5a8:	94000046 	bl	8d6c0 <CScreenDevice::Write(char)>
   8d5ac:	eb15029f 	cmp	x20, x21
   8d5b0:	540003e0 	b.eq	8d62c <CScreenDevice::Write(void const*, unsigned long)+0x13c>  // b.none
   8d5b4:	f90013f7 	str	x23, [sp, #32]
   8d5b8:	aa1403f7 	mov	x23, x20
   8d5bc:	aa1303e0 	mov	x0, x19
   8d5c0:	384016e1 	ldrb	w1, [x23], #1
   8d5c4:	91002294 	add	x20, x20, #0x8
   8d5c8:	9400003e 	bl	8d6c0 <CScreenDevice::Write(char)>
   8d5cc:	aa1303e0 	mov	x0, x19
   8d5d0:	394002e1 	ldrb	w1, [x23]
   8d5d4:	9400003b 	bl	8d6c0 <CScreenDevice::Write(char)>
   8d5d8:	385fa281 	ldurb	w1, [x20, #-6]
   8d5dc:	aa1303e0 	mov	x0, x19
   8d5e0:	94000038 	bl	8d6c0 <CScreenDevice::Write(char)>
   8d5e4:	385fb281 	ldurb	w1, [x20, #-5]
   8d5e8:	aa1303e0 	mov	x0, x19
   8d5ec:	94000035 	bl	8d6c0 <CScreenDevice::Write(char)>
   8d5f0:	385fc281 	ldurb	w1, [x20, #-4]
   8d5f4:	aa1303e0 	mov	x0, x19
   8d5f8:	94000032 	bl	8d6c0 <CScreenDevice::Write(char)>
   8d5fc:	385fd281 	ldurb	w1, [x20, #-3]
   8d600:	aa1303e0 	mov	x0, x19
   8d604:	9400002f 	bl	8d6c0 <CScreenDevice::Write(char)>
   8d608:	385fe281 	ldurb	w1, [x20, #-2]
   8d60c:	aa1303e0 	mov	x0, x19
   8d610:	9400002c 	bl	8d6c0 <CScreenDevice::Write(char)>
   8d614:	aa1303e0 	mov	x0, x19
   8d618:	385ff281 	ldurb	w1, [x20, #-1]
   8d61c:	94000029 	bl	8d6c0 <CScreenDevice::Write(char)>
   8d620:	eb15029f 	cmp	x20, x21
   8d624:	54fffca1 	b.ne	8d5b8 <CScreenDevice::Write(void const*, unsigned long)+0xc8>  // b.any
   8d628:	f94013f7 	ldr	x23, [sp, #32]
   8d62c:	110006d4 	add	w20, w22, #0x1
   8d630:	3941a263 	ldrb	w3, [x19, #104]
   8d634:	34000063 	cbz	w3, 8d640 <CScreenDevice::Write(void const*, unsigned long)+0x150>
   8d638:	aa1303e0 	mov	x0, x19
   8d63c:	9400045d 	bl	8e7b0 <CScreenDevice::InvertCursor() [clone .part.8]>
   8d640:	b940da64 	ldr	w4, [x19, #216]
   8d644:	3901e27f 	strb	wzr, [x19, #120]
   8d648:	350001c4 	cbnz	w4, 8d680 <CScreenDevice::Write(void const*, unsigned long)+0x190>
   8d64c:	d5033fbf 	dmb	sy
   8d650:	2a1403e0 	mov	w0, w20
   8d654:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8d658:	f94017fe 	ldr	x30, [sp, #40]
   8d65c:	a8c353f3 	ldp	x19, x20, [sp], #48
   8d660:	d65f03c0 	ret
   8d664:	aa1303e0 	mov	x0, x19
   8d668:	94000452 	bl	8e7b0 <CScreenDevice::InvertCursor() [clone .part.8]>
   8d66c:	b5fff5f5 	cbnz	x21, 8d528 <CScreenDevice::Write(void const*, unsigned long)+0x38>
   8d670:	52800014 	mov	w20, #0x0                   	// #0
   8d674:	17ffffef 	b	8d630 <CScreenDevice::Write(void const*, unsigned long)+0x140>
   8d678:	94001f6e 	bl	95430 <EnterCritical>
   8d67c:	17ffffa5 	b	8d510 <CScreenDevice::Write(void const*, unsigned long)+0x20>
   8d680:	94001f98 	bl	954e0 <LeaveCritical>
   8d684:	d5033fbf 	dmb	sy
   8d688:	2a1403e0 	mov	w0, w20
   8d68c:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8d690:	f94017fe 	ldr	x30, [sp, #40]
   8d694:	a8c353f3 	ldp	x19, x20, [sp], #48
   8d698:	d65f03c0 	ret
   8d69c:	aa1303e0 	mov	x0, x19
   8d6a0:	38401681 	ldrb	w1, [x20], #1
   8d6a4:	94000007 	bl	8d6c0 <CScreenDevice::Write(char)>
   8d6a8:	17ffffaf 	b	8d564 <CScreenDevice::Write(void const*, unsigned long)+0x74>
   8d6ac:	52800014 	mov	w20, #0x0                   	// #0
   8d6b0:	17ffffe4 	b	8d640 <CScreenDevice::Write(void const*, unsigned long)+0x150>
   8d6b4:	d503201f 	nop
   8d6b8:	d503201f 	nop
   8d6bc:	d503201f 	nop

000000000008d6c0 <CScreenDevice::Write(char)>:
   8d6c0:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   8d6c4:	13001c21 	sxtb	w1, w1
   8d6c8:	aa0003f3 	mov	x19, x0
   8d6cc:	b9405402 	ldr	w2, [x0, #84]
   8d6d0:	71000c5f 	cmp	w2, #0x3
   8d6d4:	54000f00 	b.eq	8d8b4 <CScreenDevice::Write(char)+0x1f4>  // b.none
   8d6d8:	54000269 	b.ls	8d724 <CScreenDevice::Write(char)+0x64>  // b.plast
   8d6dc:	7100145f 	cmp	w2, #0x5
   8d6e0:	54000700 	b.eq	8d7c0 <CScreenDevice::Write(char)+0x100>  // b.none
   8d6e4:	54000b03 	b.cc	8d844 <CScreenDevice::Write(char)+0x184>  // b.lo, b.ul, b.last
   8d6e8:	7100185f 	cmp	w2, #0x6
   8d6ec:	54000c60 	b.eq	8d878 <CScreenDevice::Write(char)+0x1b8>  // b.none
   8d6f0:	71001c5f 	cmp	w2, #0x7
   8d6f4:	54000121 	b.ne	8d718 <CScreenDevice::Write(char)+0x58>  // b.any
   8d6f8:	7101a03f 	cmp	w1, #0x68
   8d6fc:	540002c0 	b.eq	8d754 <CScreenDevice::Write(char)+0x94>  // b.none
   8d700:	7101b03f 	cmp	w1, #0x6c
   8d704:	54000280 	b.eq	8d754 <CScreenDevice::Write(char)+0x94>  // b.none
   8d708:	5100c024 	sub	w4, w1, #0x30
   8d70c:	12001c85 	and	w5, w4, #0xff
   8d710:	710024bf 	cmp	w5, #0x9
   8d714:	540012a9 	b.ls	8d968 <CScreenDevice::Write(char)+0x2a8>  // b.plast
   8d718:	b900567f 	str	wzr, [x19, #84]
   8d71c:	a8c17bf3 	ldp	x19, x30, [sp], #16
   8d720:	d65f03c0 	ret
   8d724:	7100045f 	cmp	w2, #0x1
   8d728:	540009e0 	b.eq	8d864 <CScreenDevice::Write(char)+0x1a4>  // b.none
   8d72c:	54000228 	b.hi	8d770 <CScreenDevice::Write(char)+0xb0>  // b.pmore
   8d730:	7100283f 	cmp	w1, #0xa
   8d734:	54001280 	b.eq	8d984 <CScreenDevice::Write(char)+0x2c4>  // b.none
   8d738:	5400054c 	b.gt	8d7e0 <CScreenDevice::Write(char)+0x120>
   8d73c:	7100203f 	cmp	w1, #0x8
   8d740:	540014c0 	b.eq	8d9d8 <CScreenDevice::Write(char)+0x318>  // b.none
   8d744:	7100243f 	cmp	w1, #0x9
   8d748:	540013c1 	b.ne	8d9c0 <CScreenDevice::Write(char)+0x300>  // b.any
   8d74c:	a8c17bf3 	ldp	x19, x30, [sp], #16
   8d750:	1400028c 	b	8e180 <CScreenDevice::Tabulator()>
   8d754:	b9407263 	ldr	w3, [x19, #112]
   8d758:	7100647f 	cmp	w3, #0x19
   8d75c:	54fffde1 	b.ne	8d718 <CScreenDevice::Write(char)+0x58>  // b.any
   8d760:	7101a03f 	cmp	w1, #0x68
   8d764:	1a9f17e1 	cset	w1, eq  // eq = none
   8d768:	3901a261 	strb	w1, [x19, #104]
   8d76c:	17ffffeb 	b	8d718 <CScreenDevice::Write(char)+0x58>
   8d770:	7101203f 	cmp	w1, #0x48
   8d774:	540016c0 	b.eq	8da4c <CScreenDevice::Write(char)+0x38c>  // b.none
   8d778:	5400050c 	b.gt	8d818 <CScreenDevice::Write(char)+0x158>
   8d77c:	7101083f 	cmp	w1, #0x42
   8d780:	54001740 	b.eq	8da68 <CScreenDevice::Write(char)+0x3a8>  // b.none
   8d784:	540003cc 	b.gt	8d7fc <CScreenDevice::Write(char)+0x13c>
   8d788:	7100fc3f 	cmp	w1, #0x3f
   8d78c:	54001680 	b.eq	8da5c <CScreenDevice::Write(char)+0x39c>  // b.none
   8d790:	7101043f 	cmp	w1, #0x41
   8d794:	54000be1 	b.ne	8d910 <CScreenDevice::Write(char)+0x250>  // b.any
   8d798:	b940580c 	ldr	w12, [x0, #88]
   8d79c:	b940640d 	ldr	w13, [x0, #100]
   8d7a0:	6b0d019f 	cmp	w12, w13
   8d7a4:	54fffba2 	b.cs	8d718 <CScreenDevice::Write(char)+0x58>  // b.hs, b.nlast
   8d7a8:	9100c000 	add	x0, x0, #0x30
   8d7ac:	940028b5 	bl	97a80 <CCharGenerator::GetCharHeight() const>
   8d7b0:	b940666e 	ldr	w14, [x19, #100]
   8d7b4:	4b0001cf 	sub	w15, w14, w0
   8d7b8:	b900666f 	str	w15, [x19, #100]
   8d7bc:	17ffffd7 	b	8d718 <CScreenDevice::Write(char)+0x58>
   8d7c0:	5100c02b 	sub	w11, w1, #0x30
   8d7c4:	12001d6c 	and	w12, w11, #0xff
   8d7c8:	7100259f 	cmp	w12, #0x9
   8d7cc:	54fffa68 	b.hi	8d718 <CScreenDevice::Write(char)+0x58>  // b.pmore
   8d7d0:	528000cd 	mov	w13, #0x6                   	// #6
   8d7d4:	b900740b 	str	w11, [x0, #116]
   8d7d8:	b900540d 	str	w13, [x0, #84]
   8d7dc:	17ffffd0 	b	8d71c <CScreenDevice::Write(char)+0x5c>
   8d7e0:	7100343f 	cmp	w1, #0xd
   8d7e4:	54000ea0 	b.eq	8d9b8 <CScreenDevice::Write(char)+0x2f8>  // b.none
   8d7e8:	71006c3f 	cmp	w1, #0x1b
   8d7ec:	54000ea1 	b.ne	8d9c0 <CScreenDevice::Write(char)+0x300>  // b.any
   8d7f0:	5280003e 	mov	w30, #0x1                   	// #1
   8d7f4:	b900541e 	str	w30, [x0, #84]
   8d7f8:	17ffffc9 	b	8d71c <CScreenDevice::Write(char)+0x5c>
   8d7fc:	71010c3f 	cmp	w1, #0x43
   8d800:	540011a0 	b.eq	8da34 <CScreenDevice::Write(char)+0x374>  // b.none
   8d804:	7101103f 	cmp	w1, #0x44
   8d808:	54000841 	b.ne	8d910 <CScreenDevice::Write(char)+0x250>  // b.any
   8d80c:	9400018d 	bl	8de40 <CScreenDevice::CursorLeft()>
   8d810:	b900567f 	str	wzr, [x19, #84]
   8d814:	17ffffc2 	b	8d71c <CScreenDevice::Write(char)+0x5c>
   8d818:	7101343f 	cmp	w1, #0x4d
   8d81c:	5400074c 	b.gt	8d904 <CScreenDevice::Write(char)+0x244>
   8d820:	7101303f 	cmp	w1, #0x4c
   8d824:	54fff7aa 	b.ge	8d718 <CScreenDevice::Write(char)+0x58>  // b.tcont
   8d828:	7101283f 	cmp	w1, #0x4a
   8d82c:	540010a0 	b.eq	8da40 <CScreenDevice::Write(char)+0x380>  // b.none
   8d830:	71012c3f 	cmp	w1, #0x4b
   8d834:	540006e1 	b.ne	8d910 <CScreenDevice::Write(char)+0x250>  // b.any
   8d838:	9400014a 	bl	8dd60 <CScreenDevice::ClearLineEnd()>
   8d83c:	b900567f 	str	wzr, [x19, #84]
   8d840:	17ffffb7 	b	8d71c <CScreenDevice::Write(char)+0x5c>
   8d844:	5100c02e 	sub	w14, w1, #0x30
   8d848:	12001dcf 	and	w15, w14, #0xff
   8d84c:	710025ff 	cmp	w15, #0x9
   8d850:	54fff648 	b.hi	8d718 <CScreenDevice::Write(char)+0x58>  // b.pmore
   8d854:	528000f0 	mov	w16, #0x7                   	// #7
   8d858:	b900700e 	str	w14, [x0, #112]
   8d85c:	b9005410 	str	w16, [x0, #84]
   8d860:	17ffffaf 	b	8d71c <CScreenDevice::Write(char)+0x5c>
   8d864:	71016c3f 	cmp	w1, #0x5b
   8d868:	54fff581 	b.ne	8d718 <CScreenDevice::Write(char)+0x58>  // b.any
   8d86c:	52800049 	mov	w9, #0x2                   	// #2
   8d870:	b9005409 	str	w9, [x0, #84]
   8d874:	17ffffaa 	b	8d71c <CScreenDevice::Write(char)+0x5c>
   8d878:	7101203f 	cmp	w1, #0x48
   8d87c:	54000900 	b.eq	8d99c <CScreenDevice::Write(char)+0x2dc>  // b.none
   8d880:	7101c83f 	cmp	w1, #0x72
   8d884:	54000940 	b.eq	8d9ac <CScreenDevice::Write(char)+0x2ec>  // b.none
   8d888:	5100c031 	sub	w17, w1, #0x30
   8d88c:	12001e32 	and	w18, w17, #0xff
   8d890:	7100265f 	cmp	w18, #0x9
   8d894:	54fff428 	b.hi	8d718 <CScreenDevice::Write(char)+0x58>  // b.pmore
   8d898:	b940741e 	ldr	w30, [x0, #116]
   8d89c:	0b1e0bc2 	add	w2, w30, w30, lsl #2
   8d8a0:	0b020620 	add	w0, w17, w2, lsl #1
   8d8a4:	71031c1f 	cmp	w0, #0xc7
   8d8a8:	b9007660 	str	w0, [x19, #116]
   8d8ac:	54fff368 	b.hi	8d718 <CScreenDevice::Write(char)+0x58>  // b.pmore
   8d8b0:	17ffff9b 	b	8d71c <CScreenDevice::Write(char)+0x5c>
   8d8b4:	7101403f 	cmp	w1, #0x50
   8d8b8:	54fff300 	b.eq	8d718 <CScreenDevice::Write(char)+0x58>  // b.none
   8d8bc:	5400046d 	b.le	8d948 <CScreenDevice::Write(char)+0x288>
   8d8c0:	7101a03f 	cmp	w1, #0x68
   8d8c4:	540008e0 	b.eq	8d9e0 <CScreenDevice::Write(char)+0x320>  // b.none
   8d8c8:	5400034d 	b.le	8d930 <CScreenDevice::Write(char)+0x270>
   8d8cc:	7101b03f 	cmp	w1, #0x6c
   8d8d0:	54000880 	b.eq	8d9e0 <CScreenDevice::Write(char)+0x320>  // b.none
   8d8d4:	7101b43f 	cmp	w1, #0x6d
   8d8d8:	54fff181 	b.ne	8d708 <CScreenDevice::Write(char)+0x48>  // b.any
   8d8dc:	b9407003 	ldr	w3, [x0, #112]
   8d8e0:	7100087f 	cmp	w3, #0x2
   8d8e4:	54000560 	b.eq	8d990 <CScreenDevice::Write(char)+0x2d0>  // b.none
   8d8e8:	54000908 	b.hi	8da08 <CScreenDevice::Write(char)+0x348>  // b.pmore
   8d8ec:	340009c3 	cbz	w3, 8da24 <CScreenDevice::Write(char)+0x364>
   8d8f0:	7100047f 	cmp	w3, #0x1
   8d8f4:	54fff121 	b.ne	8d718 <CScreenDevice::Write(char)+0x58>  // b.any
   8d8f8:	1280ffe7 	mov	w7, #0xfffff800            	// #-2048
   8d8fc:	7900d407 	strh	w7, [x0, #106]
   8d900:	17ffff86 	b	8d718 <CScreenDevice::Write(char)+0x58>
   8d904:	7101403f 	cmp	w1, #0x50
   8d908:	54fff080 	b.eq	8d718 <CScreenDevice::Write(char)+0x58>  // b.none
   8d90c:	d503201f 	nop
   8d910:	5100c030 	sub	w16, w1, #0x30
   8d914:	12001e11 	and	w17, w16, #0xff
   8d918:	7100263f 	cmp	w17, #0x9
   8d91c:	54ffefe8 	b.hi	8d718 <CScreenDevice::Write(char)+0x58>  // b.pmore
   8d920:	52800072 	mov	w18, #0x3                   	// #3
   8d924:	b9007270 	str	w16, [x19, #112]
   8d928:	b9005672 	str	w18, [x19, #84]
   8d92c:	17ffff7c 	b	8d71c <CScreenDevice::Write(char)+0x5c>
   8d930:	7101603f 	cmp	w1, #0x58
   8d934:	54ffeea1 	b.ne	8d708 <CScreenDevice::Write(char)+0x48>  // b.any
   8d938:	b9407001 	ldr	w1, [x0, #112]
   8d93c:	34ffeee1 	cbz	w1, 8d718 <CScreenDevice::Write(char)+0x58>
   8d940:	9400037c 	bl	8e730 <CScreenDevice::EraseChars(unsigned int) [clone .part.6]>
   8d944:	17ffff75 	b	8d718 <CScreenDevice::Write(char)+0x58>
   8d948:	7100ec3f 	cmp	w1, #0x3b
   8d94c:	54000580 	b.eq	8d9fc <CScreenDevice::Write(char)+0x33c>  // b.none
   8d950:	54ffedcb 	b.lt	8d708 <CScreenDevice::Write(char)+0x48>  // b.tstop
   8d954:	51013029 	sub	w9, w1, #0x4c
   8d958:	12001d2a 	and	w10, w9, #0xff
   8d95c:	7100055f 	cmp	w10, #0x1
   8d960:	54ffedc9 	b.ls	8d718 <CScreenDevice::Write(char)+0x58>  // b.plast
   8d964:	17ffff69 	b	8d708 <CScreenDevice::Write(char)+0x48>
   8d968:	b9407266 	ldr	w6, [x19, #112]
   8d96c:	0b0608c7 	add	w7, w6, w6, lsl #2
   8d970:	0b070488 	add	w8, w4, w7, lsl #1
   8d974:	71018d1f 	cmp	w8, #0x63
   8d978:	b9007268 	str	w8, [x19, #112]
   8d97c:	54ffece8 	b.hi	8d718 <CScreenDevice::Write(char)+0x58>  // b.pmore
   8d980:	17ffff67 	b	8d71c <CScreenDevice::Write(char)+0x5c>
   8d984:	b900601f 	str	wzr, [x0, #96]
   8d988:	a8c17bf3 	ldp	x19, x30, [sp], #16
   8d98c:	1400010d 	b	8ddc0 <CScreenDevice::CursorDown()>
   8d990:	528003e4 	mov	w4, #0x1f                  	// #31
   8d994:	7900d404 	strh	w4, [x0, #106]
   8d998:	17ffff60 	b	8d718 <CScreenDevice::Write(char)+0x58>
   8d99c:	294e0801 	ldp	w1, w2, [x0, #112]
   8d9a0:	9400014c 	bl	8ded0 <CScreenDevice::CursorMove(unsigned int, unsigned int)>
   8d9a4:	b900567f 	str	wzr, [x19, #84]
   8d9a8:	17ffff5d 	b	8d71c <CScreenDevice::Write(char)+0x5c>
   8d9ac:	294e0801 	ldp	w1, w2, [x0, #112]
   8d9b0:	940001bc 	bl	8e0a0 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
   8d9b4:	17ffff59 	b	8d718 <CScreenDevice::Write(char)+0x58>
   8d9b8:	b900601f 	str	wzr, [x0, #96]
   8d9bc:	17ffff58 	b	8d71c <CScreenDevice::Write(char)+0x5c>
   8d9c0:	12001c22 	and	w2, w1, #0xff
   8d9c4:	71007c5f 	cmp	w2, #0x1f
   8d9c8:	54ffeaa9 	b.ls	8d71c <CScreenDevice::Write(char)+0x5c>  // b.plast
   8d9cc:	aa1303e0 	mov	x0, x19
   8d9d0:	a8c17bf3 	ldp	x19, x30, [sp], #16
   8d9d4:	1400034b 	b	8e700 <CScreenDevice::DisplayChar(char) [clone .part.5]>
   8d9d8:	a8c17bf3 	ldp	x19, x30, [sp], #16
   8d9dc:	14000119 	b	8de40 <CScreenDevice::CursorLeft()>
   8d9e0:	b9407260 	ldr	w0, [x19, #112]
   8d9e4:	7100101f 	cmp	w0, #0x4
   8d9e8:	54ffe981 	b.ne	8d718 <CScreenDevice::Write(char)+0x58>  // b.any
   8d9ec:	7101a03f 	cmp	w1, #0x68
   8d9f0:	1a9f17e1 	cset	w1, eq  // eq = none
   8d9f4:	3901be61 	strb	w1, [x19, #111]
   8d9f8:	17ffff48 	b	8d718 <CScreenDevice::Write(char)+0x58>
   8d9fc:	528000a8 	mov	w8, #0x5                   	// #5
   8da00:	b9005408 	str	w8, [x0, #84]
   8da04:	17ffff46 	b	8d71c <CScreenDevice::Write(char)+0x5c>
   8da08:	71001c7f 	cmp	w3, #0x7
   8da0c:	54000081 	b.ne	8da1c <CScreenDevice::Write(char)+0x35c>  // b.any
   8da10:	52800025 	mov	w5, #0x1                   	// #1
   8da14:	3901b805 	strb	w5, [x0, #110]
   8da18:	17ffff40 	b	8d718 <CScreenDevice::Write(char)+0x58>
   8da1c:	71006c7f 	cmp	w3, #0x1b
   8da20:	54ffe7c1 	b.ne	8d718 <CScreenDevice::Write(char)+0x58>  // b.any
   8da24:	12800406 	mov	w6, #0xffffffdf            	// #-33
   8da28:	3901ba7f 	strb	wzr, [x19, #110]
   8da2c:	7900d666 	strh	w6, [x19, #106]
   8da30:	17ffff3a 	b	8d718 <CScreenDevice::Write(char)+0x58>
   8da34:	94000143 	bl	8df40 <CScreenDevice::CursorRight()>
   8da38:	b900567f 	str	wzr, [x19, #84]
   8da3c:	17ffff38 	b	8d71c <CScreenDevice::Write(char)+0x5c>
   8da40:	94000014 	bl	8da90 <CScreenDevice::ClearDisplayEnd()>
   8da44:	b900567f 	str	wzr, [x19, #84]
   8da48:	17ffff35 	b	8d71c <CScreenDevice::Write(char)+0x5c>
   8da4c:	b940580a 	ldr	w10, [x0, #88]
   8da50:	b900541f 	str	wzr, [x0, #84]
   8da54:	290c281f 	stp	wzr, w10, [x0, #96]
   8da58:	17ffff31 	b	8d71c <CScreenDevice::Write(char)+0x5c>
   8da5c:	5280008b 	mov	w11, #0x4                   	// #4
   8da60:	b900540b 	str	w11, [x0, #84]
   8da64:	17ffff2e 	b	8d71c <CScreenDevice::Write(char)+0x5c>
   8da68:	940000d6 	bl	8ddc0 <CScreenDevice::CursorDown()>
   8da6c:	b900567f 	str	wzr, [x19, #84]
   8da70:	17ffff2b 	b	8d71c <CScreenDevice::Write(char)+0x5c>
   8da74:	d503201f 	nop
   8da78:	d503201f 	nop
   8da7c:	d503201f 	nop

000000000008da80 <CScreenDevice::CarriageReturn()>:
   8da80:	b900601f 	str	wzr, [x0, #96]
   8da84:	d65f03c0 	ret
   8da88:	d503201f 	nop
   8da8c:	d503201f 	nop

000000000008da90 <CScreenDevice::ClearDisplayEnd()>:
   8da90:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8da94:	910003fd 	mov	x29, sp
   8da98:	a90153f3 	stp	x19, x20, [sp, #16]
   8da9c:	aa0003f3 	mov	x19, x0
   8daa0:	b9406274 	ldr	w20, [x19, #96]
   8daa4:	b9404800 	ldr	w0, [x0, #72]
   8daa8:	f90013f5 	str	x21, [sp, #32]
   8daac:	9100c275 	add	x21, x19, #0x30
   8dab0:	6b00029f 	cmp	w20, w0
   8dab4:	54000162 	b.cs	8dae0 <CScreenDevice::ClearDisplayEnd()+0x50>  // b.hs, b.nlast
   8dab8:	b9406662 	ldr	w2, [x19, #100]
   8dabc:	2a1403e1 	mov	w1, w20
   8dac0:	aa1303e0 	mov	x0, x19
   8dac4:	9400029f 	bl	8e540 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   8dac8:	aa1503e0 	mov	x0, x21
   8dacc:	940027e9 	bl	97a70 <CCharGenerator::GetCharWidth() const>
   8dad0:	b9404a61 	ldr	w1, [x19, #72]
   8dad4:	0b000294 	add	w20, w20, w0
   8dad8:	6b14003f 	cmp	w1, w20
   8dadc:	54fffee8 	b.hi	8dab8 <CScreenDevice::ClearDisplayEnd()+0x28>  // b.pmore
   8dae0:	aa1503e0 	mov	x0, x21
   8dae4:	b9406675 	ldr	w21, [x19, #100]
   8dae8:	940027e6 	bl	97a80 <CCharGenerator::GetCharHeight() const>
   8daec:	29481262 	ldp	w2, w4, [x19, #64]
   8daf0:	f9401e6a 	ldr	x10, [x19, #56]
   8daf4:	0b0002a3 	add	w3, w21, w0
   8daf8:	1b047c65 	mul	w5, w3, w4
   8dafc:	53017c46 	lsr	w6, w2, #1
   8db00:	2a0503e7 	mov	w7, w5
   8db04:	4b0500c8 	sub	w8, w6, w5
   8db08:	51000509 	sub	w9, w8, #0x1
   8db0c:	8b070543 	add	x3, x10, x7, lsl #1
   8db10:	34000aa8 	cbz	w8, 8dc64 <CScreenDevice::ClearDisplayEnd()+0x1d4>
   8db14:	8b2840eb 	add	x11, x7, w8, uxtw
   8db18:	8b0b054c 	add	x12, x10, x11, lsl #1
   8db1c:	9101b26d 	add	x13, x19, #0x6c
   8db20:	9101ba6e 	add	x14, x19, #0x6e
   8db24:	eb0d019f 	cmp	x12, x13
   8db28:	fa4e8062 	ccmp	x3, x14, #0x2, hi  // hi = pmore
   8db2c:	7a462920 	ccmp	w9, #0x6, #0x0, cs  // cs = hs, nlast
   8db30:	54000a29 	b.ls	8dc74 <CScreenDevice::ClearDisplayEnd()+0x1e4>  // b.plast
   8db34:	53037d0f 	lsr	w15, w8, #3
   8db38:	7940da72 	ldrh	w18, [x19, #108]
   8db3c:	8b2f5070 	add	x16, x3, w15, uxtw #4
   8db40:	cb030211 	sub	x17, x16, x3
   8db44:	aa0303e0 	mov	x0, x3
   8db48:	d100423e 	sub	x30, x17, #0x10
   8db4c:	d344ffd4 	lsr	x20, x30, #4
   8db50:	91000681 	add	x1, x20, #0x1
   8db54:	f2400835 	ands	x21, x1, #0x7
   8db58:	4e020e40 	dup	v0.8h, w18
   8db5c:	540002c0 	b.eq	8dbb4 <CScreenDevice::ClearDisplayEnd()+0x124>  // b.none
   8db60:	f10006bf 	cmp	x21, #0x1
   8db64:	54000220 	b.eq	8dba8 <CScreenDevice::ClearDisplayEnd()+0x118>  // b.none
   8db68:	f1000abf 	cmp	x21, #0x2
   8db6c:	540001c0 	b.eq	8dba4 <CScreenDevice::ClearDisplayEnd()+0x114>  // b.none
   8db70:	f1000ebf 	cmp	x21, #0x3
   8db74:	54000160 	b.eq	8dba0 <CScreenDevice::ClearDisplayEnd()+0x110>  // b.none
   8db78:	f10012bf 	cmp	x21, #0x4
   8db7c:	54000100 	b.eq	8db9c <CScreenDevice::ClearDisplayEnd()+0x10c>  // b.none
   8db80:	f10016bf 	cmp	x21, #0x5
   8db84:	540000a0 	b.eq	8db98 <CScreenDevice::ClearDisplayEnd()+0x108>  // b.none
   8db88:	f1001abf 	cmp	x21, #0x6
   8db8c:	54000040 	b.eq	8db94 <CScreenDevice::ClearDisplayEnd()+0x104>  // b.none
   8db90:	3c810400 	str	q0, [x0], #16
   8db94:	3c810400 	str	q0, [x0], #16
   8db98:	3c810400 	str	q0, [x0], #16
   8db9c:	3c810400 	str	q0, [x0], #16
   8dba0:	3c810400 	str	q0, [x0], #16
   8dba4:	3c810400 	str	q0, [x0], #16
   8dba8:	3c810400 	str	q0, [x0], #16
   8dbac:	eb10001f 	cmp	x0, x16
   8dbb0:	540001a0 	b.eq	8dbe4 <CScreenDevice::ClearDisplayEnd()+0x154>  // b.none
   8dbb4:	aa0003e2 	mov	x2, x0
   8dbb8:	91020000 	add	x0, x0, #0x80
   8dbbc:	3c810440 	str	q0, [x2], #16
   8dbc0:	3c990000 	stur	q0, [x0, #-112]
   8dbc4:	3d800440 	str	q0, [x2, #16]
   8dbc8:	3c9b0000 	stur	q0, [x0, #-80]
   8dbcc:	3c9c0000 	stur	q0, [x0, #-64]
   8dbd0:	3c9d0000 	stur	q0, [x0, #-48]
   8dbd4:	3c9e0000 	stur	q0, [x0, #-32]
   8dbd8:	3c9f0000 	stur	q0, [x0, #-16]
   8dbdc:	eb10001f 	cmp	x0, x16
   8dbe0:	54fffea1 	b.ne	8dbb4 <CScreenDevice::ClearDisplayEnd()+0x124>  // b.any
   8dbe4:	121d7104 	and	w4, w8, #0xfffffff8
   8dbe8:	2a0403e5 	mov	w5, w4
   8dbec:	6b04011f 	cmp	w8, w4
   8dbf0:	d37ff8a6 	lsl	x6, x5, #1
   8dbf4:	4b040127 	sub	w7, w9, w4
   8dbf8:	8b060068 	add	x8, x3, x6
   8dbfc:	54000340 	b.eq	8dc64 <CScreenDevice::ClearDisplayEnd()+0x1d4>  // b.none
   8dc00:	7940da69 	ldrh	w9, [x19, #108]
   8dc04:	78266869 	strh	w9, [x3, x6]
   8dc08:	340002e7 	cbz	w7, 8dc64 <CScreenDevice::ClearDisplayEnd()+0x1d4>
   8dc0c:	7940da63 	ldrh	w3, [x19, #108]
   8dc10:	710004ff 	cmp	w7, #0x1
   8dc14:	79000503 	strh	w3, [x8, #2]
   8dc18:	54000260 	b.eq	8dc64 <CScreenDevice::ClearDisplayEnd()+0x1d4>  // b.none
   8dc1c:	7940da6a 	ldrh	w10, [x19, #108]
   8dc20:	710008ff 	cmp	w7, #0x2
   8dc24:	7900090a 	strh	w10, [x8, #4]
   8dc28:	540001e0 	b.eq	8dc64 <CScreenDevice::ClearDisplayEnd()+0x1d4>  // b.none
   8dc2c:	7940da6b 	ldrh	w11, [x19, #108]
   8dc30:	71000cff 	cmp	w7, #0x3
   8dc34:	79000d0b 	strh	w11, [x8, #6]
   8dc38:	54000160 	b.eq	8dc64 <CScreenDevice::ClearDisplayEnd()+0x1d4>  // b.none
   8dc3c:	7940da6c 	ldrh	w12, [x19, #108]
   8dc40:	710010ff 	cmp	w7, #0x4
   8dc44:	7900110c 	strh	w12, [x8, #8]
   8dc48:	540000e0 	b.eq	8dc64 <CScreenDevice::ClearDisplayEnd()+0x1d4>  // b.none
   8dc4c:	7940da6d 	ldrh	w13, [x19, #108]
   8dc50:	710014ff 	cmp	w7, #0x5
   8dc54:	7900150d 	strh	w13, [x8, #10]
   8dc58:	54000060 	b.eq	8dc64 <CScreenDevice::ClearDisplayEnd()+0x1d4>  // b.none
   8dc5c:	7940da73 	ldrh	w19, [x19, #108]
   8dc60:	79001913 	strh	w19, [x8, #12]
   8dc64:	a94153f3 	ldp	x19, x20, [sp, #16]
   8dc68:	f94013f5 	ldr	x21, [sp, #32]
   8dc6c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8dc70:	d65f03c0 	ret
   8dc74:	d37f7d2e 	ubfiz	x14, x9, #1, #32
   8dc78:	d341fdd2 	lsr	x18, x14, #1
   8dc7c:	910009d0 	add	x16, x14, #0x2
   8dc80:	9100065e 	add	x30, x18, #0x1
   8dc84:	8b100071 	add	x17, x3, x16
   8dc88:	f2400bd4 	ands	x20, x30, #0x7
   8dc8c:	540003a0 	b.eq	8dd00 <CScreenDevice::ClearDisplayEnd()+0x270>  // b.none
   8dc90:	f100069f 	cmp	x20, #0x1
   8dc94:	540002e0 	b.eq	8dcf0 <CScreenDevice::ClearDisplayEnd()+0x260>  // b.none
   8dc98:	f1000a9f 	cmp	x20, #0x2
   8dc9c:	54000260 	b.eq	8dce8 <CScreenDevice::ClearDisplayEnd()+0x258>  // b.none
   8dca0:	f1000e9f 	cmp	x20, #0x3
   8dca4:	540001e0 	b.eq	8dce0 <CScreenDevice::ClearDisplayEnd()+0x250>  // b.none
   8dca8:	f100129f 	cmp	x20, #0x4
   8dcac:	54000160 	b.eq	8dcd8 <CScreenDevice::ClearDisplayEnd()+0x248>  // b.none
   8dcb0:	f100169f 	cmp	x20, #0x5
   8dcb4:	540000e0 	b.eq	8dcd0 <CScreenDevice::ClearDisplayEnd()+0x240>  // b.none
   8dcb8:	f1001a9f 	cmp	x20, #0x6
   8dcbc:	54000060 	b.eq	8dcc8 <CScreenDevice::ClearDisplayEnd()+0x238>  // b.none
   8dcc0:	7940da61 	ldrh	w1, [x19, #108]
   8dcc4:	78002461 	strh	w1, [x3], #2
   8dcc8:	7940da75 	ldrh	w21, [x19, #108]
   8dccc:	78002475 	strh	w21, [x3], #2
   8dcd0:	7940da60 	ldrh	w0, [x19, #108]
   8dcd4:	78002460 	strh	w0, [x3], #2
   8dcd8:	7940da62 	ldrh	w2, [x19, #108]
   8dcdc:	78002462 	strh	w2, [x3], #2
   8dce0:	7940da64 	ldrh	w4, [x19, #108]
   8dce4:	78002464 	strh	w4, [x3], #2
   8dce8:	7940da65 	ldrh	w5, [x19, #108]
   8dcec:	78002465 	strh	w5, [x3], #2
   8dcf0:	7940da66 	ldrh	w6, [x19, #108]
   8dcf4:	78002466 	strh	w6, [x3], #2
   8dcf8:	eb11007f 	cmp	x3, x17
   8dcfc:	54fffb40 	b.eq	8dc64 <CScreenDevice::ClearDisplayEnd()+0x1d4>  // b.none
   8dd00:	7940da67 	ldrh	w7, [x19, #108]
   8dd04:	aa0303e8 	mov	x8, x3
   8dd08:	91004063 	add	x3, x3, #0x10
   8dd0c:	78002507 	strh	w7, [x8], #2
   8dd10:	7940da69 	ldrh	w9, [x19, #108]
   8dd14:	79000109 	strh	w9, [x8]
   8dd18:	7940da6a 	ldrh	w10, [x19, #108]
   8dd1c:	781f406a 	sturh	w10, [x3, #-12]
   8dd20:	7940da6b 	ldrh	w11, [x19, #108]
   8dd24:	781f606b 	sturh	w11, [x3, #-10]
   8dd28:	7940da6c 	ldrh	w12, [x19, #108]
   8dd2c:	781f806c 	sturh	w12, [x3, #-8]
   8dd30:	7940da6d 	ldrh	w13, [x19, #108]
   8dd34:	781fa06d 	sturh	w13, [x3, #-6]
   8dd38:	7940da6e 	ldrh	w14, [x19, #108]
   8dd3c:	781fc06e 	sturh	w14, [x3, #-4]
   8dd40:	eb11007f 	cmp	x3, x17
   8dd44:	7940da6f 	ldrh	w15, [x19, #108]
   8dd48:	781fe06f 	sturh	w15, [x3, #-2]
   8dd4c:	54fffda1 	b.ne	8dd00 <CScreenDevice::ClearDisplayEnd()+0x270>  // b.any
   8dd50:	17ffffc5 	b	8dc64 <CScreenDevice::ClearDisplayEnd()+0x1d4>
   8dd54:	d503201f 	nop
   8dd58:	d503201f 	nop
   8dd5c:	d503201f 	nop

000000000008dd60 <CScreenDevice::ClearLineEnd()>:
   8dd60:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   8dd64:	aa0003f4 	mov	x20, x0
   8dd68:	b9406293 	ldr	w19, [x20, #96]
   8dd6c:	b9404800 	ldr	w0, [x0, #72]
   8dd70:	f9000ffe 	str	x30, [sp, #24]
   8dd74:	6b00027f 	cmp	w19, w0
   8dd78:	540001e2 	b.cs	8ddb4 <CScreenDevice::ClearLineEnd()+0x54>  // b.hs, b.nlast
   8dd7c:	f9000bf5 	str	x21, [sp, #16]
   8dd80:	9100c295 	add	x21, x20, #0x30
   8dd84:	d503201f 	nop
   8dd88:	b9406682 	ldr	w2, [x20, #100]
   8dd8c:	2a1303e1 	mov	w1, w19
   8dd90:	aa1403e0 	mov	x0, x20
   8dd94:	940001eb 	bl	8e540 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   8dd98:	aa1503e0 	mov	x0, x21
   8dd9c:	94002735 	bl	97a70 <CCharGenerator::GetCharWidth() const>
   8dda0:	b9404a81 	ldr	w1, [x20, #72]
   8dda4:	0b000273 	add	w19, w19, w0
   8dda8:	6b13003f 	cmp	w1, w19
   8ddac:	54fffee8 	b.hi	8dd88 <CScreenDevice::ClearLineEnd()+0x28>  // b.pmore
   8ddb0:	f9400bf5 	ldr	x21, [sp, #16]
   8ddb4:	f9400ffe 	ldr	x30, [sp, #24]
   8ddb8:	a8c253f3 	ldp	x19, x20, [sp], #32
   8ddbc:	d65f03c0 	ret

000000000008ddc0 <CScreenDevice::CursorDown()>:
   8ddc0:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   8ddc4:	9100c014 	add	x20, x0, #0x30
   8ddc8:	aa0003f3 	mov	x19, x0
   8ddcc:	aa1403e0 	mov	x0, x20
   8ddd0:	f9000bfe 	str	x30, [sp, #16]
   8ddd4:	9400272b 	bl	97a80 <CCharGenerator::GetCharHeight() const>
   8ddd8:	b9406661 	ldr	w1, [x19, #100]
   8dddc:	b9405e62 	ldr	w2, [x19, #92]
   8dde0:	0b010000 	add	w0, w0, w1
   8dde4:	6b02001f 	cmp	w0, w2
   8dde8:	b9006660 	str	w0, [x19, #100]
   8ddec:	54000082 	b.cs	8ddfc <CScreenDevice::CursorDown()+0x3c>  // b.hs, b.nlast
   8ddf0:	f9400bfe 	ldr	x30, [sp, #16]
   8ddf4:	a8c253f3 	ldp	x19, x20, [sp], #32
   8ddf8:	d65f03c0 	ret
   8ddfc:	aa1303e0 	mov	x0, x19
   8de00:	940000f4 	bl	8e1d0 <CScreenDevice::Scroll()>
   8de04:	aa1403e0 	mov	x0, x20
   8de08:	9400271e 	bl	97a80 <CCharGenerator::GetCharHeight() const>
   8de0c:	b9406663 	ldr	w3, [x19, #100]
   8de10:	f9400bfe 	ldr	x30, [sp, #16]
   8de14:	4b000064 	sub	w4, w3, w0
   8de18:	b9006664 	str	w4, [x19, #100]
   8de1c:	a8c253f3 	ldp	x19, x20, [sp], #32
   8de20:	d65f03c0 	ret
   8de24:	d503201f 	nop
   8de28:	d503201f 	nop
   8de2c:	d503201f 	nop

000000000008de30 <CScreenDevice::CursorHome()>:
   8de30:	b9405801 	ldr	w1, [x0, #88]
   8de34:	290c041f 	stp	wzr, w1, [x0, #96]
   8de38:	d65f03c0 	ret
   8de3c:	d503201f 	nop

000000000008de40 <CScreenDevice::CursorLeft()>:
   8de40:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   8de44:	aa0003f3 	mov	x19, x0
   8de48:	b9406000 	ldr	w0, [x0, #96]
   8de4c:	f9000ffe 	str	x30, [sp, #24]
   8de50:	35000300 	cbnz	w0, 8deb0 <CScreenDevice::CursorLeft()+0x70>
   8de54:	b9405a62 	ldr	w2, [x19, #88]
   8de58:	b9406661 	ldr	w1, [x19, #100]
   8de5c:	6b02003f 	cmp	w1, w2
   8de60:	54000088 	b.hi	8de70 <CScreenDevice::CursorLeft()+0x30>  // b.pmore
   8de64:	f9400ffe 	ldr	x30, [sp, #24]
   8de68:	a8c253f3 	ldp	x19, x20, [sp], #32
   8de6c:	d65f03c0 	ret
   8de70:	b9404a74 	ldr	w20, [x19, #72]
   8de74:	f9000bf5 	str	x21, [sp, #16]
   8de78:	9100c275 	add	x21, x19, #0x30
   8de7c:	aa1503e0 	mov	x0, x21
   8de80:	940026fc 	bl	97a70 <CCharGenerator::GetCharWidth() const>
   8de84:	4b000283 	sub	w3, w20, w0
   8de88:	aa1503e0 	mov	x0, x21
   8de8c:	b9006263 	str	w3, [x19, #96]
   8de90:	940026fc 	bl	97a80 <CCharGenerator::GetCharHeight() const>
   8de94:	b9406664 	ldr	w4, [x19, #100]
   8de98:	f9400bf5 	ldr	x21, [sp, #16]
   8de9c:	f9400ffe 	ldr	x30, [sp, #24]
   8dea0:	4b000085 	sub	w5, w4, w0
   8dea4:	b9006665 	str	w5, [x19, #100]
   8dea8:	a8c253f3 	ldp	x19, x20, [sp], #32
   8deac:	d65f03c0 	ret
   8deb0:	9100c260 	add	x0, x19, #0x30
   8deb4:	940026ef 	bl	97a70 <CCharGenerator::GetCharWidth() const>
   8deb8:	b9406266 	ldr	w6, [x19, #96]
   8debc:	f9400ffe 	ldr	x30, [sp, #24]
   8dec0:	4b0000c7 	sub	w7, w6, w0
   8dec4:	b9006267 	str	w7, [x19, #96]
   8dec8:	a8c253f3 	ldp	x19, x20, [sp], #32
   8decc:	d65f03c0 	ret

000000000008ded0 <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
   8ded0:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   8ded4:	51000453 	sub	w19, w2, #0x1
   8ded8:	aa0003f4 	mov	x20, x0
   8dedc:	a9015bf5 	stp	x21, x22, [sp, #16]
   8dee0:	9100c016 	add	x22, x0, #0x30
   8dee4:	2a0103f5 	mov	w21, w1
   8dee8:	aa1603e0 	mov	x0, x22
   8deec:	f90013fe 	str	x30, [sp, #32]
   8def0:	940026e0 	bl	97a70 <CCharGenerator::GetCharWidth() const>
   8def4:	1b007e73 	mul	w19, w19, w0
   8def8:	aa1603e0 	mov	x0, x22
   8defc:	940026e1 	bl	97a80 <CCharGenerator::GetCharHeight() const>
   8df00:	b9404a81 	ldr	w1, [x20, #72]
   8df04:	6b13003f 	cmp	w1, w19
   8df08:	54000149 	b.ls	8df30 <CScreenDevice::CursorMove(unsigned int, unsigned int)+0x60>  // b.plast
   8df0c:	510006a2 	sub	w2, w21, #0x1
   8df10:	b9405a83 	ldr	w3, [x20, #88]
   8df14:	1b007c40 	mul	w0, w2, w0
   8df18:	6b00007f 	cmp	w3, w0
   8df1c:	540000a8 	b.hi	8df30 <CScreenDevice::CursorMove(unsigned int, unsigned int)+0x60>  // b.pmore
   8df20:	b9405e84 	ldr	w4, [x20, #92]
   8df24:	6b00009f 	cmp	w4, w0
   8df28:	54000049 	b.ls	8df30 <CScreenDevice::CursorMove(unsigned int, unsigned int)+0x60>  // b.plast
   8df2c:	290c0293 	stp	w19, w0, [x20, #96]
   8df30:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8df34:	f94013fe 	ldr	x30, [sp, #32]
   8df38:	a8c353f3 	ldp	x19, x20, [sp], #48
   8df3c:	d65f03c0 	ret

000000000008df40 <CScreenDevice::CursorRight()>:
   8df40:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   8df44:	aa0003f3 	mov	x19, x0
   8df48:	9100c000 	add	x0, x0, #0x30
   8df4c:	940026c9 	bl	97a70 <CCharGenerator::GetCharWidth() const>
   8df50:	b9406261 	ldr	w1, [x19, #96]
   8df54:	b9404a62 	ldr	w2, [x19, #72]
   8df58:	0b010000 	add	w0, w0, w1
   8df5c:	6b02001f 	cmp	w0, w2
   8df60:	b9006260 	str	w0, [x19, #96]
   8df64:	54000062 	b.cs	8df70 <CScreenDevice::CursorRight()+0x30>  // b.hs, b.nlast
   8df68:	a8c17bf3 	ldp	x19, x30, [sp], #16
   8df6c:	d65f03c0 	ret
   8df70:	aa1303e0 	mov	x0, x19
   8df74:	b900627f 	str	wzr, [x19, #96]
   8df78:	a8c17bf3 	ldp	x19, x30, [sp], #16
   8df7c:	17ffff91 	b	8ddc0 <CScreenDevice::CursorDown()>

000000000008df80 <CScreenDevice::CursorUp()>:
   8df80:	b9405801 	ldr	w1, [x0, #88]
   8df84:	b9406402 	ldr	w2, [x0, #100]
   8df88:	6b01005f 	cmp	w2, w1
   8df8c:	54000048 	b.hi	8df94 <CScreenDevice::CursorUp()+0x14>  // b.pmore
   8df90:	d65f03c0 	ret
   8df94:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   8df98:	aa0003f3 	mov	x19, x0
   8df9c:	9100c000 	add	x0, x0, #0x30
   8dfa0:	940026b8 	bl	97a80 <CCharGenerator::GetCharHeight() const>
   8dfa4:	b9406663 	ldr	w3, [x19, #100]
   8dfa8:	4b000060 	sub	w0, w3, w0
   8dfac:	b9006660 	str	w0, [x19, #100]
   8dfb0:	a8c17bf3 	ldp	x19, x30, [sp], #16
   8dfb4:	d65f03c0 	ret
   8dfb8:	d503201f 	nop
   8dfbc:	d503201f 	nop

000000000008dfc0 <CScreenDevice::DeleteChars(unsigned int)>:
   8dfc0:	d65f03c0 	ret
   8dfc4:	d503201f 	nop
   8dfc8:	d503201f 	nop
   8dfcc:	d503201f 	nop

000000000008dfd0 <CScreenDevice::DeleteLines(unsigned int)>:
   8dfd0:	d65f03c0 	ret
   8dfd4:	d503201f 	nop
   8dfd8:	d503201f 	nop
   8dfdc:	d503201f 	nop

000000000008dfe0 <CScreenDevice::DisplayChar(char)>:
   8dfe0:	13001c21 	sxtb	w1, w1
   8dfe4:	12001c22 	and	w2, w1, #0xff
   8dfe8:	71007c5f 	cmp	w2, #0x1f
   8dfec:	54000049 	b.ls	8dff4 <CScreenDevice::DisplayChar(char)+0x14>  // b.plast
   8dff0:	140001c4 	b	8e700 <CScreenDevice::DisplayChar(char) [clone .part.5]>
   8dff4:	d65f03c0 	ret
   8dff8:	d503201f 	nop
   8dffc:	d503201f 	nop

000000000008e000 <CScreenDevice::EraseChars(unsigned int)>:
   8e000:	35000041 	cbnz	w1, 8e008 <CScreenDevice::EraseChars(unsigned int)+0x8>
   8e004:	d65f03c0 	ret
   8e008:	140001ca 	b	8e730 <CScreenDevice::EraseChars(unsigned int) [clone .part.6]>
   8e00c:	d503201f 	nop

000000000008e010 <CScreenDevice::GetTextBackgroundColor()>:
   8e010:	3941b802 	ldrb	w2, [x0, #110]
   8e014:	7940d401 	ldrh	w1, [x0, #106]
   8e018:	7940d800 	ldrh	w0, [x0, #108]
   8e01c:	7100005f 	cmp	w2, #0x0
   8e020:	1a801020 	csel	w0, w1, w0, ne  // ne = any
   8e024:	d65f03c0 	ret
   8e028:	d503201f 	nop
   8e02c:	d503201f 	nop

000000000008e030 <CScreenDevice::GetTextColor()>:
   8e030:	3941b802 	ldrb	w2, [x0, #110]
   8e034:	7940d401 	ldrh	w1, [x0, #106]
   8e038:	7940d800 	ldrh	w0, [x0, #108]
   8e03c:	7100005f 	cmp	w2, #0x0
   8e040:	1a811000 	csel	w0, w0, w1, ne  // ne = any
   8e044:	d65f03c0 	ret
   8e048:	d503201f 	nop
   8e04c:	d503201f 	nop

000000000008e050 <CScreenDevice::InsertLines(unsigned int)>:
   8e050:	d65f03c0 	ret
   8e054:	d503201f 	nop
   8e058:	d503201f 	nop
   8e05c:	d503201f 	nop

000000000008e060 <CScreenDevice::InsertMode(bool)>:
   8e060:	3901bc01 	strb	w1, [x0, #111]
   8e064:	d65f03c0 	ret
   8e068:	d503201f 	nop
   8e06c:	d503201f 	nop

000000000008e070 <CScreenDevice::NewLine()>:
   8e070:	b900601f 	str	wzr, [x0, #96]
   8e074:	17ffff53 	b	8ddc0 <CScreenDevice::CursorDown()>
   8e078:	d503201f 	nop
   8e07c:	d503201f 	nop

000000000008e080 <CScreenDevice::ReverseScroll()>:
   8e080:	d65f03c0 	ret
   8e084:	d503201f 	nop
   8e088:	d503201f 	nop
   8e08c:	d503201f 	nop

000000000008e090 <CScreenDevice::SetCursorMode(bool)>:
   8e090:	3901a001 	strb	w1, [x0, #104]
   8e094:	d65f03c0 	ret
   8e098:	d503201f 	nop
   8e09c:	d503201f 	nop

000000000008e0a0 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
   8e0a0:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   8e0a4:	51000433 	sub	w19, w1, #0x1
   8e0a8:	2a0203f4 	mov	w20, w2
   8e0ac:	a9015bf5 	stp	x21, x22, [sp, #16]
   8e0b0:	9100c016 	add	x22, x0, #0x30
   8e0b4:	aa0003f5 	mov	x21, x0
   8e0b8:	aa1603e0 	mov	x0, x22
   8e0bc:	f90013fe 	str	x30, [sp, #32]
   8e0c0:	94002670 	bl	97a80 <CCharGenerator::GetCharHeight() const>
   8e0c4:	1b007e73 	mul	w19, w19, w0
   8e0c8:	aa1603e0 	mov	x0, x22
   8e0cc:	9400266d 	bl	97a80 <CCharGenerator::GetCharHeight() const>
   8e0d0:	b94052a1 	ldr	w1, [x21, #80]
   8e0d4:	1b147c00 	mul	w0, w0, w20
   8e0d8:	7100001f 	cmp	w0, #0x0
   8e0dc:	7a531020 	ccmp	w1, w19, #0x0, ne  // ne = any
   8e0e0:	1a9f97e2 	cset	w2, hi  // hi = pmore
   8e0e4:	6b00027f 	cmp	w19, w0
   8e0e8:	7a403020 	ccmp	w1, w0, #0x0, cc  // cc = lo, ul, last
   8e0ec:	1a9f37e3 	cset	w3, cs  // cs = hs, nlast
   8e0f0:	6a03005f 	tst	w2, w3
   8e0f4:	540000e1 	b.ne	8e110 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)+0x70>  // b.any
   8e0f8:	b9405ab3 	ldr	w19, [x21, #88]
   8e0fc:	f94013fe 	ldr	x30, [sp, #32]
   8e100:	290c4ebf 	stp	wzr, w19, [x21, #96]
   8e104:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8e108:	a8c353f3 	ldp	x19, x20, [sp], #48
   8e10c:	d65f03c0 	ret
   8e110:	290b02b3 	stp	w19, w0, [x21, #88]
   8e114:	17fffffa 	b	8e0fc <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)+0x5c>
   8e118:	d503201f 	nop
   8e11c:	d503201f 	nop

000000000008e120 <CScreenDevice::SetStandoutMode(unsigned int)>:
   8e120:	7100083f 	cmp	w1, #0x2
   8e124:	54000260 	b.eq	8e170 <CScreenDevice::SetStandoutMode(unsigned int)+0x50>  // b.none
   8e128:	540000e8 	b.hi	8e144 <CScreenDevice::SetStandoutMode(unsigned int)+0x24>  // b.pmore
   8e12c:	340001a1 	cbz	w1, 8e160 <CScreenDevice::SetStandoutMode(unsigned int)+0x40>
   8e130:	7100043f 	cmp	w1, #0x1
   8e134:	54000061 	b.ne	8e140 <CScreenDevice::SetStandoutMode(unsigned int)+0x20>  // b.any
   8e138:	1280ffe4 	mov	w4, #0xfffff800            	// #-2048
   8e13c:	7900d404 	strh	w4, [x0, #106]
   8e140:	d65f03c0 	ret
   8e144:	71001c3f 	cmp	w1, #0x7
   8e148:	54000081 	b.ne	8e158 <CScreenDevice::SetStandoutMode(unsigned int)+0x38>  // b.any
   8e14c:	52800022 	mov	w2, #0x1                   	// #1
   8e150:	3901b802 	strb	w2, [x0, #110]
   8e154:	d65f03c0 	ret
   8e158:	71006c3f 	cmp	w1, #0x1b
   8e15c:	54ffff21 	b.ne	8e140 <CScreenDevice::SetStandoutMode(unsigned int)+0x20>  // b.any
   8e160:	12800403 	mov	w3, #0xffffffdf            	// #-33
   8e164:	3901b81f 	strb	wzr, [x0, #110]
   8e168:	7900d403 	strh	w3, [x0, #106]
   8e16c:	d65f03c0 	ret
   8e170:	528003e1 	mov	w1, #0x1f                  	// #31
   8e174:	7900d401 	strh	w1, [x0, #106]
   8e178:	d65f03c0 	ret
   8e17c:	d503201f 	nop

000000000008e180 <CScreenDevice::Tabulator()>:
   8e180:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   8e184:	aa0003f3 	mov	x19, x0
   8e188:	9100c000 	add	x0, x0, #0x30
   8e18c:	94002639 	bl	97a70 <CCharGenerator::GetCharWidth() const>
   8e190:	b9406261 	ldr	w1, [x19, #96]
   8e194:	531d7000 	lsl	w0, w0, #3
   8e198:	b9404a62 	ldr	w2, [x19, #72]
   8e19c:	0b010003 	add	w3, w0, w1
   8e1a0:	1ac00864 	udiv	w4, w3, w0
   8e1a4:	1b007c85 	mul	w5, w4, w0
   8e1a8:	6b0200bf 	cmp	w5, w2
   8e1ac:	b9006265 	str	w5, [x19, #96]
   8e1b0:	54000062 	b.cs	8e1bc <CScreenDevice::Tabulator()+0x3c>  // b.hs, b.nlast
   8e1b4:	a8c17bf3 	ldp	x19, x30, [sp], #16
   8e1b8:	d65f03c0 	ret
   8e1bc:	aa1303e0 	mov	x0, x19
   8e1c0:	b900627f 	str	wzr, [x19, #96]
   8e1c4:	a8c17bf3 	ldp	x19, x30, [sp], #16
   8e1c8:	17fffefe 	b	8ddc0 <CScreenDevice::CursorDown()>
   8e1cc:	d503201f 	nop

000000000008e1d0 <CScreenDevice::Scroll()>:
   8e1d0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8e1d4:	910003fd 	mov	x29, sp
   8e1d8:	a9025bf5 	stp	x21, x22, [sp, #32]
   8e1dc:	aa0003f5 	mov	x21, x0
   8e1e0:	9100c000 	add	x0, x0, #0x30
   8e1e4:	a90153f3 	stp	x19, x20, [sp, #16]
   8e1e8:	94002626 	bl	97a80 <CCharGenerator::GetCharHeight() const>
   8e1ec:	2a0003f6 	mov	w22, w0
   8e1f0:	294b02a3 	ldp	w3, w0, [x21, #88]
   8e1f4:	b94046aa 	ldr	w10, [x21, #68]
   8e1f8:	f9401ea6 	ldr	x6, [x21, #56]
   8e1fc:	4b030002 	sub	w2, w0, w3
   8e200:	4b160044 	sub	w4, w2, w22
   8e204:	1b0a7c73 	mul	w19, w3, w10
   8e208:	1b0a7c85 	mul	w5, w4, w10
   8e20c:	8b1304d3 	add	x19, x6, x19, lsl #1
   8e210:	531f78a7 	lsl	w7, w5, #1
   8e214:	35000de7 	cbnz	w7, 8e3d0 <CScreenDevice::Scroll()+0x200>
   8e218:	1b0a7ecb 	mul	w11, w22, w10
   8e21c:	d341fd60 	lsr	x0, x11, #1
   8e220:	51000405 	sub	w5, w0, #0x1
   8e224:	b4000ce0 	cbz	x0, 8e3c0 <CScreenDevice::Scroll()+0x1f0>
   8e228:	71002cbf 	cmp	w5, #0xb
   8e22c:	7940daa4 	ldrh	w4, [x21, #108]
   8e230:	54000869 	b.ls	8e33c <CScreenDevice::Scroll()+0x16c>  // b.plast
   8e234:	4e040c80 	dup	v0.4s, w4
   8e238:	5100100c 	sub	w12, w0, #0x4
   8e23c:	d2800036 	mov	x22, #0x1                   	// #1
   8e240:	53027d8d 	lsr	w13, w12, #2
   8e244:	110005a3 	add	w3, w13, #0x1
   8e248:	120009ae 	and	w14, w13, #0x7
   8e24c:	7100047f 	cmp	w3, #0x1
   8e250:	3d800260 	str	q0, [x19]
   8e254:	54000689 	b.ls	8e324 <CScreenDevice::Scroll()+0x154>  // b.plast
   8e258:	3400046e 	cbz	w14, 8e2e4 <CScreenDevice::Scroll()+0x114>
   8e25c:	710005df 	cmp	w14, #0x1
   8e260:	54000380 	b.eq	8e2d0 <CScreenDevice::Scroll()+0x100>  // b.none
   8e264:	710009df 	cmp	w14, #0x2
   8e268:	540002e0 	b.eq	8e2c4 <CScreenDevice::Scroll()+0xf4>  // b.none
   8e26c:	71000ddf 	cmp	w14, #0x3
   8e270:	54000240 	b.eq	8e2b8 <CScreenDevice::Scroll()+0xe8>  // b.none
   8e274:	710011df 	cmp	w14, #0x4
   8e278:	540001a0 	b.eq	8e2ac <CScreenDevice::Scroll()+0xdc>  // b.none
   8e27c:	710015df 	cmp	w14, #0x5
   8e280:	54000100 	b.eq	8e2a0 <CScreenDevice::Scroll()+0xd0>  // b.none
   8e284:	710019df 	cmp	w14, #0x6
   8e288:	54000060 	b.eq	8e294 <CScreenDevice::Scroll()+0xc4>  // b.none
   8e28c:	d2800056 	mov	x22, #0x2                   	// #2
   8e290:	3d800660 	str	q0, [x19, #16]
   8e294:	d37ceecf 	lsl	x15, x22, #4
   8e298:	910006d6 	add	x22, x22, #0x1
   8e29c:	3caf6a60 	str	q0, [x19, x15]
   8e2a0:	d37ceed0 	lsl	x16, x22, #4
   8e2a4:	910006d6 	add	x22, x22, #0x1
   8e2a8:	3cb06a60 	str	q0, [x19, x16]
   8e2ac:	d37ceed1 	lsl	x17, x22, #4
   8e2b0:	910006d6 	add	x22, x22, #0x1
   8e2b4:	3cb16a60 	str	q0, [x19, x17]
   8e2b8:	d37ceed2 	lsl	x18, x22, #4
   8e2bc:	910006d6 	add	x22, x22, #0x1
   8e2c0:	3cb26a60 	str	q0, [x19, x18]
   8e2c4:	d37ceede 	lsl	x30, x22, #4
   8e2c8:	910006d6 	add	x22, x22, #0x1
   8e2cc:	3cbe6a60 	str	q0, [x19, x30]
   8e2d0:	d37ceed5 	lsl	x21, x22, #4
   8e2d4:	910006d6 	add	x22, x22, #0x1
   8e2d8:	6b16007f 	cmp	w3, w22
   8e2dc:	3cb56a60 	str	q0, [x19, x21]
   8e2e0:	54000229 	b.ls	8e324 <CScreenDevice::Scroll()+0x154>  // b.plast
   8e2e4:	910006c2 	add	x2, x22, #0x1
   8e2e8:	d37ceec7 	lsl	x7, x22, #4
   8e2ec:	8b161274 	add	x20, x19, x22, lsl #4
   8e2f0:	d37cec46 	lsl	x6, x2, #4
   8e2f4:	8b021269 	add	x9, x19, x2, lsl #4
   8e2f8:	910022d6 	add	x22, x22, #0x8
   8e2fc:	3ca76a60 	str	q0, [x19, x7]
   8e300:	6b16007f 	cmp	w3, w22
   8e304:	3ca66a60 	str	q0, [x19, x6]
   8e308:	3d800520 	str	q0, [x9, #16]
   8e30c:	3d800e80 	str	q0, [x20, #48]
   8e310:	3d801280 	str	q0, [x20, #64]
   8e314:	3d801680 	str	q0, [x20, #80]
   8e318:	3d801a80 	str	q0, [x20, #96]
   8e31c:	3d801e80 	str	q0, [x20, #112]
   8e320:	54fffe28 	b.hi	8e2e4 <CScreenDevice::Scroll()+0x114>  // b.pmore
   8e324:	531e746c 	lsl	w12, w3, #2
   8e328:	2a0c03ed 	mov	w13, w12
   8e32c:	6b00019f 	cmp	w12, w0
   8e330:	4b0c00a5 	sub	w5, w5, w12
   8e334:	8b0d0a73 	add	x19, x19, x13, lsl #2
   8e338:	54000440 	b.eq	8e3c0 <CScreenDevice::Scroll()+0x1f0>  // b.none
   8e33c:	b9000264 	str	w4, [x19]
   8e340:	34000405 	cbz	w5, 8e3c0 <CScreenDevice::Scroll()+0x1f0>
   8e344:	710004bf 	cmp	w5, #0x1
   8e348:	b9000664 	str	w4, [x19, #4]
   8e34c:	540003a0 	b.eq	8e3c0 <CScreenDevice::Scroll()+0x1f0>  // b.none
   8e350:	710008bf 	cmp	w5, #0x2
   8e354:	b9000a64 	str	w4, [x19, #8]
   8e358:	54000340 	b.eq	8e3c0 <CScreenDevice::Scroll()+0x1f0>  // b.none
   8e35c:	71000cbf 	cmp	w5, #0x3
   8e360:	b9000e64 	str	w4, [x19, #12]
   8e364:	540002e0 	b.eq	8e3c0 <CScreenDevice::Scroll()+0x1f0>  // b.none
   8e368:	710010bf 	cmp	w5, #0x4
   8e36c:	b9001264 	str	w4, [x19, #16]
   8e370:	54000280 	b.eq	8e3c0 <CScreenDevice::Scroll()+0x1f0>  // b.none
   8e374:	710014bf 	cmp	w5, #0x5
   8e378:	b9001664 	str	w4, [x19, #20]
   8e37c:	54000220 	b.eq	8e3c0 <CScreenDevice::Scroll()+0x1f0>  // b.none
   8e380:	710018bf 	cmp	w5, #0x6
   8e384:	b9001a64 	str	w4, [x19, #24]
   8e388:	540001c0 	b.eq	8e3c0 <CScreenDevice::Scroll()+0x1f0>  // b.none
   8e38c:	71001cbf 	cmp	w5, #0x7
   8e390:	b9001e64 	str	w4, [x19, #28]
   8e394:	54000160 	b.eq	8e3c0 <CScreenDevice::Scroll()+0x1f0>  // b.none
   8e398:	710020bf 	cmp	w5, #0x8
   8e39c:	b9002264 	str	w4, [x19, #32]
   8e3a0:	54000100 	b.eq	8e3c0 <CScreenDevice::Scroll()+0x1f0>  // b.none
   8e3a4:	710024bf 	cmp	w5, #0x9
   8e3a8:	b9002664 	str	w4, [x19, #36]
   8e3ac:	540000a0 	b.eq	8e3c0 <CScreenDevice::Scroll()+0x1f0>  // b.none
   8e3b0:	710028bf 	cmp	w5, #0xa
   8e3b4:	b9002a64 	str	w4, [x19, #40]
   8e3b8:	54000040 	b.eq	8e3c0 <CScreenDevice::Scroll()+0x1f0>  // b.none
   8e3bc:	b9002e64 	str	w4, [x19, #44]
   8e3c0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8e3c4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8e3c8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8e3cc:	d65f03c0 	ret
   8e3d0:	0b160068 	add	w8, w3, w22
   8e3d4:	2a0703f4 	mov	w20, w7
   8e3d8:	f9001bf7 	str	x23, [sp, #48]
   8e3dc:	910202b7 	add	x23, x21, #0x80
   8e3e0:	aa1303e1 	mov	x1, x19
   8e3e4:	1b0a7d09 	mul	w9, w8, w10
   8e3e8:	aa1403e3 	mov	x3, x20
   8e3ec:	52800005 	mov	w5, #0x0                   	// #0
   8e3f0:	52800044 	mov	w4, #0x2                   	// #2
   8e3f4:	aa1703e0 	mov	x0, x23
   8e3f8:	8b0904c2 	add	x2, x6, x9, lsl #1
   8e3fc:	9400267d 	bl	97df0 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)>
   8e400:	aa1703e0 	mov	x0, x23
   8e404:	940027fb 	bl	983f0 <CDMAChannel::Start()>
   8e408:	aa1703e0 	mov	x0, x23
   8e40c:	94002849 	bl	98530 <CDMAChannel::Wait()>
   8e410:	927ef681 	and	x1, x20, #0xfffffffffffffffc
   8e414:	b94046aa 	ldr	w10, [x21, #68]
   8e418:	8b010273 	add	x19, x19, x1
   8e41c:	f9401bf7 	ldr	x23, [sp, #48]
   8e420:	17ffff7e 	b	8e218 <CScreenDevice::Scroll()+0x48>
   8e424:	d503201f 	nop
   8e428:	d503201f 	nop
   8e42c:	d503201f 	nop

000000000008e430 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
   8e430:	a9bb53f3 	stp	x19, x20, [sp, #-80]!
   8e434:	aa0003f4 	mov	x20, x0
   8e438:	a9015bf5 	stp	x21, x22, [sp, #16]
   8e43c:	9100c015 	add	x21, x0, #0x30
   8e440:	52800016 	mov	w22, #0x0                   	// #0
   8e444:	aa1503e0 	mov	x0, x21
   8e448:	a90263f7 	stp	x23, x24, [sp, #32]
   8e44c:	13001c38 	sxtb	w24, w1
   8e450:	2a0203f7 	mov	w23, w2
   8e454:	a9036bf9 	stp	x25, x26, [sp, #48]
   8e458:	2a0303fa 	mov	w26, w3
   8e45c:	12003c99 	and	w25, w4, #0xffff
   8e460:	f90023fe 	str	x30, [sp, #64]
   8e464:	94002587 	bl	97a80 <CCharGenerator::GetCharHeight() const>
   8e468:	6b16001f 	cmp	w0, w22
   8e46c:	540005a9 	b.ls	8e520 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xf0>  // b.plast
   8e470:	aa1503e0 	mov	x0, x21
   8e474:	52800013 	mov	w19, #0x0                   	// #0
   8e478:	9400257e 	bl	97a70 <CCharGenerator::GetCharWidth() const>
   8e47c:	6b13001f 	cmp	w0, w19
   8e480:	2a1303e2 	mov	w2, w19
   8e484:	2a1603e3 	mov	w3, w22
   8e488:	2a1803e1 	mov	w1, w24
   8e48c:	aa1503e0 	mov	x0, x21
   8e490:	540003c9 	b.ls	8e508 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xd8>  // b.plast
   8e494:	d503201f 	nop
   8e498:	94002582 	bl	97aa0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
   8e49c:	72001c1f 	tst	w0, #0xff
   8e4a0:	2a1903e2 	mov	w2, w25
   8e4a4:	54000081 	b.ne	8e4b4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x84>  // b.any
   8e4a8:	3941ba80 	ldrb	w0, [x20, #110]
   8e4ac:	34000460 	cbz	w0, 8e538 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x108>
   8e4b0:	7940d682 	ldrh	w2, [x20, #106]
   8e4b4:	0b170263 	add	w3, w19, w23
   8e4b8:	b9404a81 	ldr	w1, [x20, #72]
   8e4bc:	6b03003f 	cmp	w1, w3
   8e4c0:	54000129 	b.ls	8e4e4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xb4>  // b.plast
   8e4c4:	b9404e84 	ldr	w4, [x20, #76]
   8e4c8:	6b04035f 	cmp	w26, w4
   8e4cc:	540000c2 	b.cs	8e4e4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xb4>  // b.hs, b.nlast
   8e4d0:	b9404685 	ldr	w5, [x20, #68]
   8e4d4:	f9401e88 	ldr	x8, [x20, #56]
   8e4d8:	1b055f46 	madd	w6, w26, w5, w23
   8e4dc:	0b1300c7 	add	w7, w6, w19
   8e4e0:	78277902 	strh	w2, [x8, x7, lsl #1]
   8e4e4:	aa1503e0 	mov	x0, x21
   8e4e8:	11000673 	add	w19, w19, #0x1
   8e4ec:	94002561 	bl	97a70 <CCharGenerator::GetCharWidth() const>
   8e4f0:	6b13001f 	cmp	w0, w19
   8e4f4:	2a1303e2 	mov	w2, w19
   8e4f8:	2a1603e3 	mov	w3, w22
   8e4fc:	2a1803e1 	mov	w1, w24
   8e500:	aa1503e0 	mov	x0, x21
   8e504:	54fffca8 	b.hi	8e498 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x68>  // b.pmore
   8e508:	aa1503e0 	mov	x0, x21
   8e50c:	110006d6 	add	w22, w22, #0x1
   8e510:	9400255c 	bl	97a80 <CCharGenerator::GetCharHeight() const>
   8e514:	6b16001f 	cmp	w0, w22
   8e518:	1100075a 	add	w26, w26, #0x1
   8e51c:	54fffaa8 	b.hi	8e470 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x40>  // b.pmore
   8e520:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8e524:	a94263f7 	ldp	x23, x24, [sp, #32]
   8e528:	a9436bf9 	ldp	x25, x26, [sp, #48]
   8e52c:	f94023fe 	ldr	x30, [sp, #64]
   8e530:	a8c553f3 	ldp	x19, x20, [sp], #80
   8e534:	d65f03c0 	ret
   8e538:	7940da82 	ldrh	w2, [x20, #108]
   8e53c:	17ffffde 	b	8e4b4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x84>

000000000008e540 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
   8e540:	a9bc53f3 	stp	x19, x20, [sp, #-64]!
   8e544:	aa0003f4 	mov	x20, x0
   8e548:	a9015bf5 	stp	x21, x22, [sp, #16]
   8e54c:	9100c016 	add	x22, x0, #0x30
   8e550:	2a0103f5 	mov	w21, w1
   8e554:	aa1603e0 	mov	x0, x22
   8e558:	a90263f7 	stp	x23, x24, [sp, #32]
   8e55c:	2a0203f7 	mov	w23, w2
   8e560:	52800018 	mov	w24, #0x0                   	// #0
   8e564:	f9001bfe 	str	x30, [sp, #48]
   8e568:	94002546 	bl	97a80 <CCharGenerator::GetCharHeight() const>
   8e56c:	6b18001f 	cmp	w0, w24
   8e570:	54000409 	b.ls	8e5f0 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0xb0>  // b.plast
   8e574:	d503201f 	nop
   8e578:	aa1603e0 	mov	x0, x22
   8e57c:	52800013 	mov	w19, #0x0                   	// #0
   8e580:	9400253c 	bl	97a70 <CCharGenerator::GetCharWidth() const>
   8e584:	6b13001f 	cmp	w0, w19
   8e588:	0b150261 	add	w1, w19, w21
   8e58c:	54000269 	b.ls	8e5d8 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x98>  // b.plast
   8e590:	b9404a80 	ldr	w0, [x20, #72]
   8e594:	6b01001f 	cmp	w0, w1
   8e598:	54000149 	b.ls	8e5c0 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x80>  // b.plast
   8e59c:	b9404e82 	ldr	w2, [x20, #76]
   8e5a0:	6b0202ff 	cmp	w23, w2
   8e5a4:	540000e2 	b.cs	8e5c0 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x80>  // b.hs, b.nlast
   8e5a8:	b9404684 	ldr	w4, [x20, #68]
   8e5ac:	7940da83 	ldrh	w3, [x20, #108]
   8e5b0:	f9401e87 	ldr	x7, [x20, #56]
   8e5b4:	1b0456e5 	madd	w5, w23, w4, w21
   8e5b8:	0b1300a6 	add	w6, w5, w19
   8e5bc:	782678e3 	strh	w3, [x7, x6, lsl #1]
   8e5c0:	aa1603e0 	mov	x0, x22
   8e5c4:	11000673 	add	w19, w19, #0x1
   8e5c8:	9400252a 	bl	97a70 <CCharGenerator::GetCharWidth() const>
   8e5cc:	6b13001f 	cmp	w0, w19
   8e5d0:	0b150261 	add	w1, w19, w21
   8e5d4:	54fffde8 	b.hi	8e590 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x50>  // b.pmore
   8e5d8:	aa1603e0 	mov	x0, x22
   8e5dc:	11000718 	add	w24, w24, #0x1
   8e5e0:	94002528 	bl	97a80 <CCharGenerator::GetCharHeight() const>
   8e5e4:	6b18001f 	cmp	w0, w24
   8e5e8:	110006f7 	add	w23, w23, #0x1
   8e5ec:	54fffc68 	b.hi	8e578 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x38>  // b.pmore
   8e5f0:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8e5f4:	a94263f7 	ldp	x23, x24, [sp, #32]
   8e5f8:	f9401bfe 	ldr	x30, [sp, #48]
   8e5fc:	a8c453f3 	ldp	x19, x20, [sp], #64
   8e600:	d65f03c0 	ret
   8e604:	d503201f 	nop
   8e608:	d503201f 	nop
   8e60c:	d503201f 	nop

000000000008e610 <CScreenDevice::InvertCursor()>:
   8e610:	3941a001 	ldrb	w1, [x0, #104]
   8e614:	35000041 	cbnz	w1, 8e61c <CScreenDevice::InvertCursor()+0xc>
   8e618:	d65f03c0 	ret
   8e61c:	14000065 	b	8e7b0 <CScreenDevice::InvertCursor() [clone .part.8]>

000000000008e620 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
   8e620:	b9404804 	ldr	w4, [x0, #72]
   8e624:	12003c63 	and	w3, w3, #0xffff
   8e628:	6b01009f 	cmp	w4, w1
   8e62c:	54000129 	b.ls	8e650 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)+0x30>  // b.plast
   8e630:	b9404c05 	ldr	w5, [x0, #76]
   8e634:	6b0200bf 	cmp	w5, w2
   8e638:	540000c9 	b.ls	8e650 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)+0x30>  // b.plast
   8e63c:	b9404406 	ldr	w6, [x0, #68]
   8e640:	f9401c00 	ldr	x0, [x0, #56]
   8e644:	d503201f 	nop
   8e648:	1b060442 	madd	w2, w2, w6, w1
   8e64c:	78227803 	strh	w3, [x0, x2, lsl #1]
   8e650:	d65f03c0 	ret
   8e654:	d503201f 	nop
   8e658:	d503201f 	nop
   8e65c:	d503201f 	nop

000000000008e660 <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
   8e660:	b9404803 	ldr	w3, [x0, #72]
   8e664:	6b01007f 	cmp	w3, w1
   8e668:	54000089 	b.ls	8e678 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x18>  // b.plast
   8e66c:	b9404c04 	ldr	w4, [x0, #76]
   8e670:	6b02009f 	cmp	w4, w2
   8e674:	54000068 	b.hi	8e680 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x20>  // b.pmore
   8e678:	7940d800 	ldrh	w0, [x0, #108]
   8e67c:	d65f03c0 	ret
   8e680:	b9404405 	ldr	w5, [x0, #68]
   8e684:	f9401c00 	ldr	x0, [x0, #56]
   8e688:	d503201f 	nop
   8e68c:	1b050441 	madd	w1, w2, w5, w1
   8e690:	78617800 	ldrh	w0, [x0, x1, lsl #1]
   8e694:	d65f03c0 	ret
   8e698:	d503201f 	nop
   8e69c:	d503201f 	nop

000000000008e6a0 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
   8e6a0:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   8e6a4:	12000433 	and	w19, w1, #0x3
   8e6a8:	2a0203f4 	mov	w20, w2
   8e6ac:	92400694 	and	x20, x20, #0x3
   8e6b0:	a9015bf5 	stp	x21, x22, [sp, #16]
   8e6b4:	aa0003f5 	mov	x21, x0
   8e6b8:	9100c000 	add	x0, x0, #0x30
   8e6bc:	b9404ab6 	ldr	w22, [x21, #72]
   8e6c0:	f90013fe 	str	x30, [sp, #32]
   8e6c4:	940024eb 	bl	97a70 <CCharGenerator::GetCharWidth() const>
   8e6c8:	1b000265 	madd	w5, w19, w0, w0
   8e6cc:	b0000061 	adrp	x1, 9b000 <vtable for CSoftSerialDevice+0x90>
   8e6d0:	913fc022 	add	x2, x1, #0xff0
   8e6d4:	91002046 	add	x6, x2, #0x8
   8e6d8:	aa1503e0 	mov	x0, x21
   8e6dc:	f94013fe 	ldr	x30, [sp, #32]
   8e6e0:	1280ffe4 	mov	w4, #0xfffff800            	// #-2048
   8e6e4:	52800003 	mov	w3, #0x0                   	// #0
   8e6e8:	38666a81 	ldrb	w1, [x20, x6]
   8e6ec:	4b0502c2 	sub	w2, w22, w5
   8e6f0:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8e6f4:	a8c353f3 	ldp	x19, x20, [sp], #48
   8e6f8:	17ffff4e 	b	8e430 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   8e6fc:	d503201f 	nop

000000000008e700 <CScreenDevice::DisplayChar(char) [clone .part.5]>:
   8e700:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   8e704:	aa0003f3 	mov	x19, x0
   8e708:	3941b804 	ldrb	w4, [x0, #110]
   8e70c:	7940d805 	ldrh	w5, [x0, #108]
   8e710:	7940d402 	ldrh	w2, [x0, #106]
   8e714:	7100009f 	cmp	w4, #0x0
   8e718:	1a8210a4 	csel	w4, w5, w2, ne  // ne = any
   8e71c:	294c0c02 	ldp	w2, w3, [x0, #96]
   8e720:	97ffff44 	bl	8e430 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   8e724:	aa1303e0 	mov	x0, x19
   8e728:	a8c17bf3 	ldp	x19, x30, [sp], #16
   8e72c:	17fffe05 	b	8df40 <CScreenDevice::CursorRight()>

000000000008e730 <CScreenDevice::EraseChars(unsigned int) [clone .part.6]>:
   8e730:	a9bc53f3 	stp	x19, x20, [sp, #-64]!
   8e734:	aa0003f4 	mov	x20, x0
   8e738:	a90263f7 	stp	x23, x24, [sp, #32]
   8e73c:	2a0103f7 	mov	w23, w1
   8e740:	b9406018 	ldr	w24, [x0, #96]
   8e744:	a9015bf5 	stp	x21, x22, [sp, #16]
   8e748:	9100c016 	add	x22, x0, #0x30
   8e74c:	aa1603e0 	mov	x0, x22
   8e750:	f9001bfe 	str	x30, [sp, #48]
   8e754:	940024c7 	bl	97a70 <CCharGenerator::GetCharWidth() const>
   8e758:	b9404a95 	ldr	w21, [x20, #72]
   8e75c:	1b176000 	madd	w0, w0, w23, w24
   8e760:	b9406293 	ldr	w19, [x20, #96]
   8e764:	6b0002bf 	cmp	w21, w0
   8e768:	1a8092b7 	csel	w23, w21, w0, ls  // ls = plast
   8e76c:	6b17027f 	cmp	w19, w23
   8e770:	54000162 	b.cs	8e79c <CScreenDevice::EraseChars(unsigned int) [clone .part.6]+0x6c>  // b.hs, b.nlast
   8e774:	d503201f 	nop
   8e778:	b9406682 	ldr	w2, [x20, #100]
   8e77c:	2a1303e1 	mov	w1, w19
   8e780:	aa1403e0 	mov	x0, x20
   8e784:	97ffff6f 	bl	8e540 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   8e788:	aa1603e0 	mov	x0, x22
   8e78c:	940024b9 	bl	97a70 <CCharGenerator::GetCharWidth() const>
   8e790:	0b000273 	add	w19, w19, w0
   8e794:	6b17027f 	cmp	w19, w23
   8e798:	54ffff03 	b.cc	8e778 <CScreenDevice::EraseChars(unsigned int) [clone .part.6]+0x48>  // b.lo, b.ul, b.last
   8e79c:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8e7a0:	a94263f7 	ldp	x23, x24, [sp, #32]
   8e7a4:	f9401bfe 	ldr	x30, [sp, #48]
   8e7a8:	a8c453f3 	ldp	x19, x20, [sp], #64
   8e7ac:	d65f03c0 	ret

000000000008e7b0 <CScreenDevice::InvertCursor() [clone .part.8]>:
   8e7b0:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   8e7b4:	aa0003f4 	mov	x20, x0
   8e7b8:	a9015bf5 	stp	x21, x22, [sp, #16]
   8e7bc:	9100c016 	add	x22, x0, #0x30
   8e7c0:	aa1603e0 	mov	x0, x22
   8e7c4:	f90013fe 	str	x30, [sp, #32]
   8e7c8:	940024b2 	bl	97a90 <CCharGenerator::GetUnderline() const>
   8e7cc:	2a0003f5 	mov	w21, w0
   8e7d0:	aa1603e0 	mov	x0, x22
   8e7d4:	940024ab 	bl	97a80 <CCharGenerator::GetCharHeight() const>
   8e7d8:	6b15001f 	cmp	w0, w21
   8e7dc:	54000349 	b.ls	8e844 <CScreenDevice::InvertCursor() [clone .part.8]+0x94>  // b.plast
   8e7e0:	aa1603e0 	mov	x0, x22
   8e7e4:	52800013 	mov	w19, #0x0                   	// #0
   8e7e8:	940024a2 	bl	97a70 <CCharGenerator::GetCharWidth() const>
   8e7ec:	6b13001f 	cmp	w0, w19
   8e7f0:	54000209 	b.ls	8e830 <CScreenDevice::InvertCursor() [clone .part.8]+0x80>  // b.plast
   8e7f4:	d503201f 	nop
   8e7f8:	294c0281 	ldp	w1, w0, [x20, #96]
   8e7fc:	b9404a82 	ldr	w2, [x20, #72]
   8e800:	0b010265 	add	w5, w19, w1
   8e804:	0b0002a6 	add	w6, w21, w0
   8e808:	6b0200bf 	cmp	w5, w2
   8e80c:	54000082 	b.cs	8e81c <CScreenDevice::InvertCursor() [clone .part.8]+0x6c>  // b.hs, b.nlast
   8e810:	b9404e83 	ldr	w3, [x20, #76]
   8e814:	6b0300df 	cmp	w6, w3
   8e818:	540001e3 	b.cc	8e854 <CScreenDevice::InvertCursor() [clone .part.8]+0xa4>  // b.lo, b.ul, b.last
   8e81c:	11000673 	add	w19, w19, #0x1
   8e820:	aa1603e0 	mov	x0, x22
   8e824:	94002493 	bl	97a70 <CCharGenerator::GetCharWidth() const>
   8e828:	6b13001f 	cmp	w0, w19
   8e82c:	54fffe68 	b.hi	8e7f8 <CScreenDevice::InvertCursor() [clone .part.8]+0x48>  // b.pmore
   8e830:	aa1603e0 	mov	x0, x22
   8e834:	110006b5 	add	w21, w21, #0x1
   8e838:	94002492 	bl	97a80 <CCharGenerator::GetCharHeight() const>
   8e83c:	6b15001f 	cmp	w0, w21
   8e840:	54fffd08 	b.hi	8e7e0 <CScreenDevice::InvertCursor() [clone .part.8]+0x30>  // b.pmore
   8e844:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8e848:	f94013fe 	ldr	x30, [sp, #32]
   8e84c:	a8c353f3 	ldp	x19, x20, [sp], #48
   8e850:	d65f03c0 	ret
   8e854:	b9404684 	ldr	w4, [x20, #68]
   8e858:	f9401e8a 	ldr	x10, [x20, #56]
   8e85c:	7940da87 	ldrh	w7, [x20, #108]
   8e860:	d503201f 	nop
   8e864:	1b0414c8 	madd	w8, w6, w4, w5
   8e868:	d37ff909 	lsl	x9, x8, #1
   8e86c:	7869694b 	ldrh	w11, [x10, x9]
   8e870:	6b07017f 	cmp	w11, w7
   8e874:	54000080 	b.eq	8e884 <CScreenDevice::InvertCursor() [clone .part.8]+0xd4>  // b.none
   8e878:	11000673 	add	w19, w19, #0x1
   8e87c:	78296947 	strh	w7, [x10, x9]
   8e880:	17ffffe8 	b	8e820 <CScreenDevice::InvertCursor() [clone .part.8]+0x70>
   8e884:	7940d68c 	ldrh	w12, [x20, #106]
   8e888:	11000673 	add	w19, w19, #0x1
   8e88c:	7829694c 	strh	w12, [x10, x9]
   8e890:	17ffffe4 	b	8e820 <CScreenDevice::InvertCursor() [clone .part.8]+0x70>
	...

000000000008e8a0 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)>:
   8e8a0:	a9ba53f3 	stp	x19, x20, [sp, #-96]!
   8e8a4:	aa0003f3 	mov	x19, x0
   8e8a8:	12001c54 	and	w20, w2, #0xff
   8e8ac:	a9015bf5 	stp	x21, x22, [sp, #16]
   8e8b0:	2a0303f6 	mov	w22, w3
   8e8b4:	91044015 	add	x21, x0, #0x110
   8e8b8:	a90263f7 	stp	x23, x24, [sp, #32]
   8e8bc:	91020018 	add	x24, x0, #0x80
   8e8c0:	91032017 	add	x23, x0, #0xc8
   8e8c4:	a9036bf9 	stp	x25, x26, [sp, #48]
   8e8c8:	52800039 	mov	w25, #0x1                   	// #1
   8e8cc:	a9047bfb 	stp	x27, x30, [sp, #64]
   8e8d0:	9100e01b 	add	x27, x0, #0x38
   8e8d4:	f9002fe1 	str	x1, [sp, #88]
   8e8d8:	97ffec42 	bl	899e0 <CDevice::CDevice()>
   8e8dc:	f9402fe1 	ldr	x1, [sp, #88]
   8e8e0:	d0000062 	adrp	x2, 9c000 <vtable for CSerialDevice>
   8e8e4:	91004043 	add	x3, x2, #0x10
   8e8e8:	aa1b03e0 	mov	x0, x27
   8e8ec:	39008274 	strb	w20, [x19, #32]
   8e8f0:	f9000263 	str	x3, [x19]
   8e8f4:	b9002676 	str	w22, [x19, #36]
   8e8f8:	f900167f 	str	xzr, [x19, #40]
   8e8fc:	f9000e61 	str	x1, [x19, #24]
   8e900:	3900c27f 	strb	wzr, [x19, #48]
   8e904:	97ffeef7 	bl	8a4e0 <CGPIOPin::CGPIOPin()>
   8e908:	aa1803e0 	mov	x0, x24
   8e90c:	97ffeef5 	bl	8a4e0 <CGPIOPin::CGPIOPin()>
   8e910:	aa1703e0 	mov	x0, x23
   8e914:	97ffeef3 	bl	8a4e0 <CGPIOPin::CGPIOPin()>
   8e918:	aa1503e0 	mov	x0, x21
   8e91c:	97ffeef1 	bl	8a4e0 <CGPIOPin::CGPIOPin()>
   8e920:	b9402665 	ldr	w5, [x19, #36]
   8e924:	7100029f 	cmp	w20, #0x0
   8e928:	1a9f07e0 	cset	w0, ne  // ne = any
   8e92c:	b9095a7f 	str	wzr, [x19, #2392]
   8e930:	0b190004 	add	w4, w0, w25
   8e934:	b9095e7f 	str	wzr, [x19, #2396]
   8e938:	b909627f 	str	wzr, [x19, #2400]
   8e93c:	b911667f 	str	wzr, [x19, #4452]
   8e940:	710014bf 	cmp	w5, #0x5
   8e944:	b9116a7f 	str	wzr, [x19, #4456]
   8e948:	b9116e79 	str	w25, [x19, #4460]
   8e94c:	f908ba7f 	str	xzr, [x19, #4464]
   8e950:	b9118a64 	str	w4, [x19, #4488]
   8e954:	b9118e79 	str	w25, [x19, #4492]
   8e958:	54000568 	b.hi	8ea04 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x164>  // b.pmore
   8e95c:	90000086 	adrp	x6, 9e000 <font_data+0x1558>
   8e960:	911440d4 	add	x20, x6, #0x510
   8e964:	2a1603fa 	mov	w26, w22
   8e968:	8b1a1287 	add	x7, x20, x26, lsl #4
   8e96c:	b94030e8 	ldr	w8, [x7, #48]
   8e970:	7100d51f 	cmp	w8, #0x35
   8e974:	54000488 	b.hi	8ea04 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x164>  // b.pmore
   8e978:	f0016ea9 	adrp	x9, 2e65000 <temp_gold+0xf421a0>
   8e97c:	910a412a 	add	x10, x9, #0x290
   8e980:	2a0503eb 	mov	w11, w5
   8e984:	9100614c 	add	x12, x10, #0x18
   8e988:	f86b798d 	ldr	x13, [x12, x11, lsl #3]
   8e98c:	b500066d 	cbnz	x13, 8ea58 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1b8>
   8e990:	f87a7a8f 	ldr	x15, [x20, x26, lsl #3]
   8e994:	f82b7993 	str	x19, [x12, x11, lsl #3]
   8e998:	f900166f 	str	x15, [x19, #40]
   8e99c:	b400068f 	cbz	x15, 8ea6c <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1cc>
   8e9a0:	340003f6 	cbz	w22, 8ea1c <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x17c>
   8e9a4:	9100c291 	add	x17, x20, #0x30
   8e9a8:	d37cef52 	lsl	x18, x26, #4
   8e9ac:	8b120236 	add	x22, x17, x18
   8e9b0:	b8726a21 	ldr	w1, [x17, x18]
   8e9b4:	aa1703e0 	mov	x0, x23
   8e9b8:	97ffeef2 	bl	8a580 <CGPIOPin::AssignPin(unsigned int)>
   8e9bc:	b94006db 	ldr	w27, [x22, #4]
   8e9c0:	aa1703e0 	mov	x0, x23
   8e9c4:	52800022 	mov	w2, #0x1                   	// #1
   8e9c8:	52800037 	mov	w23, #0x1                   	// #1
   8e9cc:	11001361 	add	w1, w27, #0x4
   8e9d0:	97ffef10 	bl	8a610 <CGPIOPin::SetMode(TGPIOMode, bool)>
   8e9d4:	aa1503e0 	mov	x0, x21
   8e9d8:	b9400ac1 	ldr	w1, [x22, #8]
   8e9dc:	97ffeee9 	bl	8a580 <CGPIOPin::AssignPin(unsigned int)>
   8e9e0:	b9400ed8 	ldr	w24, [x22, #12]
   8e9e4:	52800022 	mov	w2, #0x1                   	// #1
   8e9e8:	aa1503e0 	mov	x0, x21
   8e9ec:	11001301 	add	w1, w24, #0x4
   8e9f0:	97ffef08 	bl	8a610 <CGPIOPin::SetMode(TGPIOMode, bool)>
   8e9f4:	aa1503e0 	mov	x0, x21
   8e9f8:	52800041 	mov	w1, #0x2                   	// #2
   8e9fc:	97fff15d 	bl	8af70 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   8ea00:	3900c277 	strb	w23, [x19, #48]
   8ea04:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8ea08:	a94263f7 	ldp	x23, x24, [sp, #32]
   8ea0c:	a9436bf9 	ldp	x25, x26, [sp, #48]
   8ea10:	a9447bfb 	ldp	x27, x30, [sp, #64]
   8ea14:	a8c653f3 	ldp	x19, x20, [sp], #96
   8ea18:	d65f03c0 	ret
   8ea1c:	aa1b03e0 	mov	x0, x27
   8ea20:	52800401 	mov	w1, #0x20                  	// #32
   8ea24:	97ffeed7 	bl	8a580 <CGPIOPin::AssignPin(unsigned int)>
   8ea28:	2a1903e2 	mov	w2, w25
   8ea2c:	aa1b03e0 	mov	x0, x27
   8ea30:	52800001 	mov	w1, #0x0                   	// #0
   8ea34:	97ffeef7 	bl	8a610 <CGPIOPin::SetMode(TGPIOMode, bool)>
   8ea38:	aa1803e0 	mov	x0, x24
   8ea3c:	52800421 	mov	w1, #0x21                  	// #33
   8ea40:	97ffeed0 	bl	8a580 <CGPIOPin::AssignPin(unsigned int)>
   8ea44:	2a1903e2 	mov	w2, w25
   8ea48:	aa1803e0 	mov	x0, x24
   8ea4c:	52800001 	mov	w1, #0x0                   	// #0
   8ea50:	97ffeef0 	bl	8a610 <CGPIOPin::SetMode(TGPIOMode, bool)>
   8ea54:	17ffffd4 	b	8e9a4 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x104>
   8ea58:	d000006e 	adrp	x14, 9c000 <vtable for CSerialDevice>
   8ea5c:	910101c1 	add	x1, x14, #0x40
   8ea60:	91004020 	add	x0, x1, #0x10
   8ea64:	52801602 	mov	w2, #0xb0                  	// #176
   8ea68:	97ffea42 	bl	89370 <assertion_failed>
   8ea6c:	d0000070 	adrp	x16, 9c000 <vtable for CSerialDevice>
   8ea70:	91010201 	add	x1, x16, #0x40
   8ea74:	9100a020 	add	x0, x1, #0x28
   8ea78:	52801682 	mov	w2, #0xb4                  	// #180
   8ea7c:	97ffea3d 	bl	89370 <assertion_failed>

000000000008ea80 <CSerialDevice::~CSerialDevice()>:
   8ea80:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   8ea84:	aa0003f3 	mov	x19, x0
   8ea88:	d0000060 	adrp	x0, 9c000 <vtable for CSerialDevice>
   8ea8c:	91004002 	add	x2, x0, #0x10
   8ea90:	f90013fe 	str	x30, [sp, #32]
   8ea94:	3940c261 	ldrb	w1, [x19, #48]
   8ea98:	f9000262 	str	x2, [x19]
   8ea9c:	340006e1 	cbz	w1, 8eb78 <CSerialDevice::~CSerialDevice()+0xf8>
   8eaa0:	f0016ea4 	adrp	x4, 2e65000 <temp_gold+0xf421a0>
   8eaa4:	910a4094 	add	x20, x4, #0x290
   8eaa8:	a9015bf5 	stp	x21, x22, [sp, #16]
   8eaac:	52800025 	mov	w5, #0x1                   	// #1
   8eab0:	b9402663 	ldr	w3, [x19, #36]
   8eab4:	b9401687 	ldr	w7, [x20, #20]
   8eab8:	1ac320a6 	lsl	w6, w5, w3
   8eabc:	0a2600e8 	bic	w8, w7, w6
   8eac0:	b9001688 	str	w8, [x20, #20]
   8eac4:	d5033f9f 	dsb	sy
   8eac8:	f9401669 	ldr	x9, [x19, #40]
   8eacc:	b900393f 	str	wzr, [x9, #56]
   8ead0:	f940166a 	ldr	x10, [x19, #40]
   8ead4:	b900315f 	str	wzr, [x10, #48]
   8ead8:	f9400e6b 	ldr	x11, [x19, #24]
   8eadc:	b400018b 	cbz	x11, 8eb0c <CSerialDevice::~CSerialDevice()+0x8c>
   8eae0:	b942908c 	ldr	w12, [x4, #656]
   8eae4:	5100058d 	sub	w13, w12, #0x1
   8eae8:	b902908d 	str	w13, [x4, #656]
   8eaec:	3500010d 	cbnz	w13, 8eb0c <CSerialDevice::~CSerialDevice()+0x8c>
   8eaf0:	f9400680 	ldr	x0, [x20, #8]
   8eaf4:	b4000600 	cbz	x0, 8ebb4 <CSerialDevice::~CSerialDevice()+0x134>
   8eaf8:	3940428f 	ldrb	w15, [x20, #16]
   8eafc:	3400056f 	cbz	w15, 8eba8 <CSerialDevice::~CSerialDevice()+0x128>
   8eb00:	94001e70 	bl	964c0 <CInterruptSystem::DisconnectFIQ()>
   8eb04:	f900069f 	str	xzr, [x20, #8]
   8eb08:	3900429f 	strb	wzr, [x20, #16]
   8eb0c:	91032275 	add	x21, x19, #0xc8
   8eb10:	52800022 	mov	w2, #0x1                   	// #1
   8eb14:	aa1503e0 	mov	x0, x21
   8eb18:	52800001 	mov	w1, #0x0                   	// #0
   8eb1c:	97ffeebd 	bl	8a610 <CGPIOPin::SetMode(TGPIOMode, bool)>
   8eb20:	91044276 	add	x22, x19, #0x110
   8eb24:	52800022 	mov	w2, #0x1                   	// #1
   8eb28:	52800001 	mov	w1, #0x0                   	// #0
   8eb2c:	aa1603e0 	mov	x0, x22
   8eb30:	97ffeeb8 	bl	8a610 <CGPIOPin::SetMode(TGPIOMode, bool)>
   8eb34:	b9402671 	ldr	w17, [x19, #36]
   8eb38:	91006290 	add	x16, x20, #0x18
   8eb3c:	aa1603e0 	mov	x0, x22
   8eb40:	3900c27f 	strb	wzr, [x19, #48]
   8eb44:	f8317a1f 	str	xzr, [x16, x17, lsl #3]
   8eb48:	97ffee86 	bl	8a560 <CGPIOPin::~CGPIOPin()>
   8eb4c:	aa1503e0 	mov	x0, x21
   8eb50:	97ffee84 	bl	8a560 <CGPIOPin::~CGPIOPin()>
   8eb54:	91020260 	add	x0, x19, #0x80
   8eb58:	97ffee82 	bl	8a560 <CGPIOPin::~CGPIOPin()>
   8eb5c:	9100e260 	add	x0, x19, #0x38
   8eb60:	97ffee80 	bl	8a560 <CGPIOPin::~CGPIOPin()>
   8eb64:	aa1303e0 	mov	x0, x19
   8eb68:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8eb6c:	f94013fe 	ldr	x30, [sp, #32]
   8eb70:	a8c353f3 	ldp	x19, x20, [sp], #48
   8eb74:	17ffeb77 	b	89950 <CDevice::~CDevice()>
   8eb78:	91044260 	add	x0, x19, #0x110
   8eb7c:	97ffee79 	bl	8a560 <CGPIOPin::~CGPIOPin()>
   8eb80:	91032260 	add	x0, x19, #0xc8
   8eb84:	97ffee77 	bl	8a560 <CGPIOPin::~CGPIOPin()>
   8eb88:	91020260 	add	x0, x19, #0x80
   8eb8c:	97ffee75 	bl	8a560 <CGPIOPin::~CGPIOPin()>
   8eb90:	9100e260 	add	x0, x19, #0x38
   8eb94:	97ffee73 	bl	8a560 <CGPIOPin::~CGPIOPin()>
   8eb98:	aa1303e0 	mov	x0, x19
   8eb9c:	f94013fe 	ldr	x30, [sp, #32]
   8eba0:	a8c353f3 	ldp	x19, x20, [sp], #48
   8eba4:	17ffeb6b 	b	89950 <CDevice::~CDevice()>
   8eba8:	52801321 	mov	w1, #0x99                  	// #153
   8ebac:	94001e9d 	bl	96620 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   8ebb0:	17ffffd5 	b	8eb04 <CSerialDevice::~CSerialDevice()+0x84>
   8ebb4:	d000006e 	adrp	x14, 9c000 <vtable for CSerialDevice>
   8ebb8:	910101c1 	add	x1, x14, #0x40
   8ebbc:	91010020 	add	x0, x1, #0x40
   8ebc0:	52801c02 	mov	w2, #0xe0                  	// #224
   8ebc4:	97ffe9eb 	bl	89370 <assertion_failed>
   8ebc8:	d503201f 	nop
   8ebcc:	d503201f 	nop

000000000008ebd0 <CSerialDevice::~CSerialDevice()>:
   8ebd0:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   8ebd4:	aa0003f3 	mov	x19, x0
   8ebd8:	97ffffaa 	bl	8ea80 <CSerialDevice::~CSerialDevice()>
   8ebdc:	aa1303e0 	mov	x0, x19
   8ebe0:	d2823201 	mov	x1, #0x1190                	// #4496
   8ebe4:	a8c17bf3 	ldp	x19, x30, [sp], #16
   8ebe8:	140017b6 	b	94ac0 <operator delete(void*, unsigned long)>
   8ebec:	d503201f 	nop

000000000008ebf0 <CSerialDevice::Initialize(unsigned int)>:
   8ebf0:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   8ebf4:	a9015bf5 	stp	x21, x22, [sp, #16]
   8ebf8:	f90017fe 	str	x30, [sp, #40]
   8ebfc:	3940c015 	ldrb	w21, [x0, #48]
   8ec00:	350000d5 	cbnz	w21, 8ec18 <CSerialDevice::Initialize(unsigned int)+0x28>
   8ec04:	2a1503e0 	mov	w0, w21
   8ec08:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8ec0c:	f94017fe 	ldr	x30, [sp, #40]
   8ec10:	a8c353f3 	ldp	x19, x20, [sp], #48
   8ec14:	d65f03c0 	ret
   8ec18:	2a0103f4 	mov	w20, w1
   8ec1c:	aa0003f3 	mov	x19, x0
   8ec20:	97fff90b 	bl	8d04c <CMachineInfo::Get()>
   8ec24:	52800041 	mov	w1, #0x2                   	// #2
   8ec28:	97fff75f 	bl	8c9a4 <CMachineInfo::GetClockRate(unsigned int) const>
   8ec2c:	34000d80 	cbz	w0, 8eddc <CSerialDevice::Initialize(unsigned int)+0x1ec>
   8ec30:	5104b282 	sub	w2, w20, #0x12c
   8ec34:	5280fa83 	mov	w3, #0x7d4                 	// #2004
   8ec38:	72a007a3 	movk	w3, #0x3d, lsl #16
   8ec3c:	6b03005f 	cmp	w2, w3
   8ec40:	54000da8 	b.hi	8edf4 <CSerialDevice::Initialize(unsigned int)+0x204>  // b.pmore
   8ec44:	531c6e84 	lsl	w4, w20, #4
   8ec48:	529fffc5 	mov	w5, #0xfffe                	// #65534
   8ec4c:	1ac40816 	udiv	w22, w0, w4
   8ec50:	510006c6 	sub	w6, w22, #0x1
   8ec54:	6b0500df 	cmp	w6, w5
   8ec58:	54000da8 	b.hi	8ee0c <CSerialDevice::Initialize(unsigned int)+0x21c>  // b.pmore
   8ec5c:	1b0482c8 	msub	w8, w22, w4, w0
   8ec60:	531d7109 	lsl	w9, w8, #3
   8ec64:	1ad4092a 	udiv	w10, w9, w20
   8ec68:	1200014b 	and	w11, w10, #0x1
   8ec6c:	0b4a0574 	add	w20, w11, w10, lsr #1
   8ec70:	7100fe9f 	cmp	w20, #0x3f
   8ec74:	54000d88 	b.hi	8ee24 <CSerialDevice::Initialize(unsigned int)+0x234>  // b.pmore
   8ec78:	f9400e60 	ldr	x0, [x19, #24]
   8ec7c:	b40002a0 	cbz	x0, 8ecd0 <CSerialDevice::Initialize(unsigned int)+0xe0>
   8ec80:	f90013f7 	str	x23, [sp, #32]
   8ec84:	f0016eb7 	adrp	x23, 2e65000 <temp_gold+0xf421a0>
   8ec88:	910a42ed 	add	x13, x23, #0x290
   8ec8c:	b94292f0 	ldr	w16, [x23, #656]
   8ec90:	35000790 	cbnz	w16, 8ed80 <CSerialDevice::Initialize(unsigned int)+0x190>
   8ec94:	3940826e 	ldrb	w14, [x19, #32]
   8ec98:	b000000f 	adrp	x15, 8f000 <CSerialDevice::Write(void const*, unsigned long)+0x1b0>
   8ec9c:	912ec1e2 	add	x2, x15, #0xbb0
   8eca0:	f90005a0 	str	x0, [x13, #8]
   8eca4:	d2800003 	mov	x3, #0x0                   	// #0
   8eca8:	390041ae 	strb	w14, [x13, #16]
   8ecac:	3500086e 	cbnz	w14, 8edb8 <CSerialDevice::Initialize(unsigned int)+0x1c8>
   8ecb0:	52801321 	mov	w1, #0x99                  	// #153
   8ecb4:	94001e2f 	bl	96570 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   8ecb8:	b94292f0 	ldr	w16, [x23, #656]
   8ecbc:	7100161f 	cmp	w16, #0x5
   8ecc0:	54000be8 	b.hi	8ee3c <CSerialDevice::Initialize(unsigned int)+0x24c>  // b.pmore
   8ecc4:	11000601 	add	w1, w16, #0x1
   8ecc8:	b90292e1 	str	w1, [x23, #656]
   8eccc:	f94013f7 	ldr	x23, [sp, #32]
   8ecd0:	5280ffe2 	mov	w2, #0x7ff                 	// #2047
   8ecd4:	f9401663 	ldr	x3, [x19, #40]
   8ecd8:	b900387f 	str	wzr, [x3, #56]
   8ecdc:	f9401660 	ldr	x0, [x19, #40]
   8ece0:	b9004402 	str	w2, [x0, #68]
   8ece4:	f9401664 	ldr	x4, [x19, #40]
   8ece8:	b9002496 	str	w22, [x4, #36]
   8ecec:	f9401665 	ldr	x5, [x19, #40]
   8ecf0:	b90028b4 	str	w20, [x5, #40]
   8ecf4:	f9400e76 	ldr	x22, [x19, #24]
   8ecf8:	b4000596 	cbz	x22, 8eda8 <CSerialDevice::Initialize(unsigned int)+0x1b8>
   8ecfc:	f940166d 	ldr	x13, [x19, #40]
   8ed00:	52800128 	mov	w8, #0x9                   	// #9
   8ed04:	52800e09 	mov	w9, #0x70                  	// #112
   8ed08:	52808a0a 	mov	w10, #0x450                 	// #1104
   8ed0c:	f0016eab 	adrp	x11, 2e65000 <temp_gold+0xf421a0>
   8ed10:	910a4174 	add	x20, x11, #0x290
   8ed14:	5280002c 	mov	w12, #0x1                   	// #1
   8ed18:	b90035a8 	str	w8, [x13, #52]
   8ed1c:	f940166e 	ldr	x14, [x19, #40]
   8ed20:	b9002dc9 	str	w9, [x14, #44]
   8ed24:	f940166f 	ldr	x15, [x19, #40]
   8ed28:	b90039ea 	str	w10, [x15, #56]
   8ed2c:	b9402671 	ldr	w17, [x19, #36]
   8ed30:	b9401690 	ldr	w16, [x20, #20]
   8ed34:	1ad12192 	lsl	w18, w12, w17
   8ed38:	2a10025e 	orr	w30, w18, w16
   8ed3c:	b900169e 	str	w30, [x20, #20]
   8ed40:	d5033f9f 	dsb	sy
   8ed44:	f9401662 	ldr	x2, [x19, #40]
   8ed48:	52806021 	mov	w1, #0x301                 	// #769
   8ed4c:	b9003041 	str	w1, [x2, #48]
   8ed50:	97ffecb8 	bl	8a030 <CDeviceNameService::Get()>
   8ed54:	d0000063 	adrp	x3, 9c000 <vtable for CSerialDevice>
   8ed58:	91010064 	add	x4, x3, #0x40
   8ed5c:	aa1303e2 	mov	x2, x19
   8ed60:	91040081 	add	x1, x4, #0x100
   8ed64:	52800003 	mov	w3, #0x0                   	// #0
   8ed68:	97ffeb52 	bl	89ab0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   8ed6c:	2a1503e0 	mov	w0, w21
   8ed70:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8ed74:	f94017fe 	ldr	x30, [sp, #40]
   8ed78:	a8c353f3 	ldp	x19, x20, [sp], #48
   8ed7c:	d65f03c0 	ret
   8ed80:	f94005b1 	ldr	x17, [x13, #8]
   8ed84:	eb11001f 	cmp	x0, x17
   8ed88:	54000200 	b.eq	8edc8 <CSerialDevice::Initialize(unsigned int)+0x1d8>  // b.none
   8ed8c:	3900c27f 	strb	wzr, [x19, #48]
   8ed90:	910061b7 	add	x23, x13, #0x18
   8ed94:	52800015 	mov	w21, #0x0                   	// #0
   8ed98:	b9402673 	ldr	w19, [x19, #36]
   8ed9c:	f8337aff 	str	xzr, [x23, x19, lsl #3]
   8eda0:	f94013f7 	ldr	x23, [sp, #32]
   8eda4:	17ffff98 	b	8ec04 <CSerialDevice::Initialize(unsigned int)+0x14>
   8eda8:	f9401667 	ldr	x7, [x19, #40]
   8edac:	52800e06 	mov	w6, #0x70                  	// #112
   8edb0:	b9002ce6 	str	w6, [x7, #44]
   8edb4:	17ffffe4 	b	8ed44 <CSerialDevice::Initialize(unsigned int)+0x154>
   8edb8:	52801321 	mov	w1, #0x99                  	// #153
   8edbc:	94001e5d 	bl	96730 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
   8edc0:	b94292f0 	ldr	w16, [x23, #656]
   8edc4:	17ffffbe 	b	8ecbc <CSerialDevice::Initialize(unsigned int)+0xcc>
   8edc8:	39408272 	ldrb	w18, [x19, #32]
   8edcc:	394041be 	ldrb	w30, [x13, #16]
   8edd0:	6b1e025f 	cmp	w18, w30
   8edd4:	54fff740 	b.eq	8ecbc <CSerialDevice::Initialize(unsigned int)+0xcc>  // b.none
   8edd8:	17ffffed 	b	8ed8c <CSerialDevice::Initialize(unsigned int)+0x19c>
   8eddc:	d0000061 	adrp	x1, 9c000 <vtable for CSerialDevice>
   8ede0:	91010021 	add	x1, x1, #0x40
   8ede4:	f90013f7 	str	x23, [sp, #32]
   8ede8:	91016020 	add	x0, x1, #0x58
   8edec:	52801fa2 	mov	w2, #0xfd                  	// #253
   8edf0:	97ffe960 	bl	89370 <assertion_failed>
   8edf4:	d0000060 	adrp	x0, 9c000 <vtable for CSerialDevice>
   8edf8:	91010001 	add	x1, x0, #0x40
   8edfc:	f90013f7 	str	x23, [sp, #32]
   8ee00:	9101a020 	add	x0, x1, #0x68
   8ee04:	52801fe2 	mov	w2, #0xff                  	// #255
   8ee08:	97ffe95a 	bl	89370 <assertion_failed>
   8ee0c:	d0000067 	adrp	x7, 9c000 <vtable for CSerialDevice>
   8ee10:	910100e1 	add	x1, x7, #0x40
   8ee14:	f90013f7 	str	x23, [sp, #32]
   8ee18:	91026020 	add	x0, x1, #0x98
   8ee1c:	52802042 	mov	w2, #0x102                 	// #258
   8ee20:	97ffe954 	bl	89370 <assertion_failed>
   8ee24:	d000006c 	adrp	x12, 9c000 <vtable for CSerialDevice>
   8ee28:	91010181 	add	x1, x12, #0x40
   8ee2c:	f90013f7 	str	x23, [sp, #32]
   8ee30:	91030020 	add	x0, x1, #0xc0
   8ee34:	528020a2 	mov	w2, #0x105                 	// #261
   8ee38:	97ffe94e 	bl	89370 <assertion_failed>
   8ee3c:	d0000075 	adrp	x21, 9c000 <vtable for CSerialDevice>
   8ee40:	910102a1 	add	x1, x21, #0x40
   8ee44:	91036020 	add	x0, x1, #0xd8
   8ee48:	528024e2 	mov	w2, #0x127                 	// #295
   8ee4c:	97ffe949 	bl	89370 <assertion_failed>

000000000008ee50 <CSerialDevice::Write(void const*, unsigned long)>:
   8ee50:	a9bc53f3 	stp	x19, x20, [sp, #-64]!
   8ee54:	aa0003f3 	mov	x19, x0
   8ee58:	f9001ffe 	str	x30, [sp, #56]
   8ee5c:	3940c000 	ldrb	w0, [x0, #48]
   8ee60:	a9015bf5 	stp	x21, x22, [sp, #16]
   8ee64:	a90263f7 	stp	x23, x24, [sp, #32]
   8ee68:	34001ae0 	cbz	w0, 8f1c4 <CSerialDevice::Write(void const*, unsigned long)+0x374>
   8ee6c:	aa0103f5 	mov	x21, x1
   8ee70:	aa0203f8 	mov	x24, x2
   8ee74:	b9518e60 	ldr	w0, [x19, #4492]
   8ee78:	35001500 	cbnz	w0, 8f118 <CSerialDevice::Write(void const*, unsigned long)+0x2c8>
   8ee7c:	b4001b15 	cbz	x21, 8f1dc <CSerialDevice::Write(void const*, unsigned long)+0x38c>
   8ee80:	b4001bb8 	cbz	x24, 8f1f4 <CSerialDevice::Write(void const*, unsigned long)+0x3a4>
   8ee84:	f2400703 	ands	x3, x24, #0x3
   8ee88:	d2800014 	mov	x20, #0x0                   	// #0
   8ee8c:	540004e0 	b.eq	8ef28 <CSerialDevice::Write(void const*, unsigned long)+0xd8>  // b.none
   8ee90:	f100047f 	cmp	x3, #0x1
   8ee94:	540002e0 	b.eq	8eef0 <CSerialDevice::Write(void const*, unsigned long)+0xa0>  // b.none
   8ee98:	f100087f 	cmp	x3, #0x2
   8ee9c:	54000160 	b.eq	8eec8 <CSerialDevice::Write(void const*, unsigned long)+0x78>  // b.none
   8eea0:	aa1303e0 	mov	x0, x19
   8eea4:	394002a1 	ldrb	w1, [x21]
   8eea8:	52800016 	mov	w22, #0x0                   	// #0
   8eeac:	9400029d 	bl	8f920 <CSerialDevice::Write(unsigned char)>
   8eeb0:	72001c1f 	tst	w0, #0xff
   8eeb4:	54000a80 	b.eq	8f004 <CSerialDevice::Write(void const*, unsigned long)+0x1b4>  // b.none
   8eeb8:	394002a4 	ldrb	w4, [x21]
   8eebc:	7100289f 	cmp	w4, #0xa
   8eec0:	54001700 	b.eq	8f1a0 <CSerialDevice::Write(void const*, unsigned long)+0x350>  // b.none
   8eec4:	d2800034 	mov	x20, #0x1                   	// #1
   8eec8:	aa1303e0 	mov	x0, x19
   8eecc:	38746aa1 	ldrb	w1, [x21, x20]
   8eed0:	2a1403f6 	mov	w22, w20
   8eed4:	94000293 	bl	8f920 <CSerialDevice::Write(unsigned char)>
   8eed8:	72001c1f 	tst	w0, #0xff
   8eedc:	54000940 	b.eq	8f004 <CSerialDevice::Write(void const*, unsigned long)+0x1b4>  // b.none
   8eee0:	38746aa6 	ldrb	w6, [x21, x20]
   8eee4:	710028df 	cmp	w6, #0xa
   8eee8:	540014a0 	b.eq	8f17c <CSerialDevice::Write(void const*, unsigned long)+0x32c>  // b.none
   8eeec:	91000694 	add	x20, x20, #0x1
   8eef0:	aa1303e0 	mov	x0, x19
   8eef4:	38746aa1 	ldrb	w1, [x21, x20]
   8eef8:	2a1403f7 	mov	w23, w20
   8eefc:	94000289 	bl	8f920 <CSerialDevice::Write(unsigned char)>
   8ef00:	72001c1f 	tst	w0, #0xff
   8ef04:	2a1403f6 	mov	w22, w20
   8ef08:	540007e0 	b.eq	8f004 <CSerialDevice::Write(void const*, unsigned long)+0x1b4>  // b.none
   8ef0c:	38746aa8 	ldrb	w8, [x21, x20]
   8ef10:	7100291f 	cmp	w8, #0xa
   8ef14:	54001240 	b.eq	8f15c <CSerialDevice::Write(void const*, unsigned long)+0x30c>  // b.none
   8ef18:	91000694 	add	x20, x20, #0x1
   8ef1c:	110006f6 	add	w22, w23, #0x1
   8ef20:	eb14031f 	cmp	x24, x20
   8ef24:	54000700 	b.eq	8f004 <CSerialDevice::Write(void const*, unsigned long)+0x1b4>  // b.none
   8ef28:	f9001bf9 	str	x25, [sp, #48]
   8ef2c:	14000024 	b	8efbc <CSerialDevice::Write(void const*, unsigned long)+0x16c>
   8ef30:	91000694 	add	x20, x20, #0x1
   8ef34:	aa1303e0 	mov	x0, x19
   8ef38:	38746aa1 	ldrb	w1, [x21, x20]
   8ef3c:	2a1403f6 	mov	w22, w20
   8ef40:	94000278 	bl	8f920 <CSerialDevice::Write(unsigned char)>
   8ef44:	72001c1f 	tst	w0, #0xff
   8ef48:	540005c0 	b.eq	8f000 <CSerialDevice::Write(void const*, unsigned long)+0x1b0>  // b.none
   8ef4c:	38746aac 	ldrb	w12, [x21, x20]
   8ef50:	7100299f 	cmp	w12, #0xa
   8ef54:	54000ac0 	b.eq	8f0ac <CSerialDevice::Write(void const*, unsigned long)+0x25c>  // b.none
   8ef58:	91000699 	add	x25, x20, #0x1
   8ef5c:	aa1303e0 	mov	x0, x19
   8ef60:	38796aa1 	ldrb	w1, [x21, x25]
   8ef64:	2a1903f6 	mov	w22, w25
   8ef68:	9400026e 	bl	8f920 <CSerialDevice::Write(unsigned char)>
   8ef6c:	72001c1f 	tst	w0, #0xff
   8ef70:	54000480 	b.eq	8f000 <CSerialDevice::Write(void const*, unsigned long)+0x1b0>  // b.none
   8ef74:	38796aae 	ldrb	w14, [x21, x25]
   8ef78:	710029df 	cmp	w14, #0xa
   8ef7c:	54000aa0 	b.eq	8f0d0 <CSerialDevice::Write(void const*, unsigned long)+0x280>  // b.none
   8ef80:	91000a97 	add	x23, x20, #0x2
   8ef84:	aa1303e0 	mov	x0, x19
   8ef88:	38776aa1 	ldrb	w1, [x21, x23]
   8ef8c:	2a1703f9 	mov	w25, w23
   8ef90:	2a1703f6 	mov	w22, w23
   8ef94:	94000263 	bl	8f920 <CSerialDevice::Write(unsigned char)>
   8ef98:	72001c1f 	tst	w0, #0xff
   8ef9c:	54000320 	b.eq	8f000 <CSerialDevice::Write(void const*, unsigned long)+0x1b0>  // b.none
   8efa0:	38776ab0 	ldrb	w16, [x21, x23]
   8efa4:	71002a1f 	cmp	w16, #0xa
   8efa8:	54000a60 	b.eq	8f0f4 <CSerialDevice::Write(void const*, unsigned long)+0x2a4>  // b.none
   8efac:	91000e94 	add	x20, x20, #0x3
   8efb0:	11000736 	add	w22, w25, #0x1
   8efb4:	eb14031f 	cmp	x24, x20
   8efb8:	54000240 	b.eq	8f000 <CSerialDevice::Write(void const*, unsigned long)+0x1b0>  // b.none
   8efbc:	aa1303e0 	mov	x0, x19
   8efc0:	38746aa1 	ldrb	w1, [x21, x20]
   8efc4:	2a1403f6 	mov	w22, w20
   8efc8:	94000256 	bl	8f920 <CSerialDevice::Write(unsigned char)>
   8efcc:	72001c1f 	tst	w0, #0xff
   8efd0:	54000180 	b.eq	8f000 <CSerialDevice::Write(void const*, unsigned long)+0x1b0>  // b.none
   8efd4:	38746aaa 	ldrb	w10, [x21, x20]
   8efd8:	7100295f 	cmp	w10, #0xa
   8efdc:	54fffaa1 	b.ne	8ef30 <CSerialDevice::Write(void const*, unsigned long)+0xe0>  // b.any
   8efe0:	b9516e6b 	ldr	w11, [x19, #4460]
   8efe4:	3607fa6b 	tbz	w11, #0, 8ef30 <CSerialDevice::Write(void const*, unsigned long)+0xe0>
   8efe8:	528001a1 	mov	w1, #0xd                   	// #13
   8efec:	aa1303e0 	mov	x0, x19
   8eff0:	9400024c 	bl	8f920 <CSerialDevice::Write(unsigned char)>
   8eff4:	72001c1f 	tst	w0, #0xff
   8eff8:	54fff9c1 	b.ne	8ef30 <CSerialDevice::Write(void const*, unsigned long)+0xe0>  // b.any
   8effc:	d503201f 	nop
   8f000:	f9401bf9 	ldr	x25, [sp, #48]
   8f004:	b9518e72 	ldr	w18, [x19, #4492]
   8f008:	350008d2 	cbnz	w18, 8f120 <CSerialDevice::Write(void const*, unsigned long)+0x2d0>
   8f00c:	f9400e7e 	ldr	x30, [x19, #24]
   8f010:	b400043e 	cbz	x30, 8f094 <CSerialDevice::Write(void const*, unsigned long)+0x244>
   8f014:	b9518a60 	ldr	w0, [x19, #4488]
   8f018:	35000960 	cbnz	w0, 8f144 <CSerialDevice::Write(void const*, unsigned long)+0x2f4>
   8f01c:	b9516660 	ldr	w0, [x19, #4452]
   8f020:	b9516a61 	ldr	w1, [x19, #4456]
   8f024:	6b00003f 	cmp	w1, w0
   8f028:	54000360 	b.eq	8f094 <CSerialDevice::Write(void const*, unsigned long)+0x244>  // b.none
   8f02c:	b9516662 	ldr	w2, [x19, #4452]
   8f030:	b9516a63 	ldr	w3, [x19, #4456]
   8f034:	6b02007f 	cmp	w3, w2
   8f038:	540001e1 	b.ne	8f074 <CSerialDevice::Write(void const*, unsigned long)+0x224>  // b.any
   8f03c:	14000014 	b	8f08c <CSerialDevice::Write(void const*, unsigned long)+0x23c>
   8f040:	b9516a68 	ldr	w8, [x19, #4456]
   8f044:	8b284269 	add	x9, x19, w8, uxtw
   8f048:	1100050a 	add	w10, w8, #0x1
   8f04c:	b9116a6a 	str	w10, [x19, #4456]
   8f050:	3965912b 	ldrb	w11, [x9, #2404]
   8f054:	b900008b 	str	w11, [x4]
   8f058:	b9516a6c 	ldr	w12, [x19, #4456]
   8f05c:	1200298d 	and	w13, w12, #0x7ff
   8f060:	b9116a6d 	str	w13, [x19, #4456]
   8f064:	b951666e 	ldr	w14, [x19, #4452]
   8f068:	b9516a6f 	ldr	w15, [x19, #4456]
   8f06c:	6b0f01df 	cmp	w14, w15
   8f070:	540000e0 	b.eq	8f08c <CSerialDevice::Write(void const*, unsigned long)+0x23c>  // b.none
   8f074:	f9401664 	ldr	x4, [x19, #40]
   8f078:	b9401885 	ldr	w5, [x4, #24]
   8f07c:	362ffe25 	tbz	w5, #5, 8f040 <CSerialDevice::Write(void const*, unsigned long)+0x1f0>
   8f080:	b9403886 	ldr	w6, [x4, #56]
   8f084:	321b00c7 	orr	w7, w6, #0x20
   8f088:	b9003887 	str	w7, [x4, #56]
   8f08c:	b9518a73 	ldr	w19, [x19, #4488]
   8f090:	350004d3 	cbnz	w19, 8f128 <CSerialDevice::Write(void const*, unsigned long)+0x2d8>
   8f094:	2a1603e0 	mov	w0, w22
   8f098:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8f09c:	a94263f7 	ldp	x23, x24, [sp, #32]
   8f0a0:	f9401ffe 	ldr	x30, [sp, #56]
   8f0a4:	a8c453f3 	ldp	x19, x20, [sp], #64
   8f0a8:	d65f03c0 	ret
   8f0ac:	b9516e6d 	ldr	w13, [x19, #4460]
   8f0b0:	3607f54d 	tbz	w13, #0, 8ef58 <CSerialDevice::Write(void const*, unsigned long)+0x108>
   8f0b4:	528001a1 	mov	w1, #0xd                   	// #13
   8f0b8:	aa1303e0 	mov	x0, x19
   8f0bc:	94000219 	bl	8f920 <CSerialDevice::Write(unsigned char)>
   8f0c0:	72001c1f 	tst	w0, #0xff
   8f0c4:	54fff4a1 	b.ne	8ef58 <CSerialDevice::Write(void const*, unsigned long)+0x108>  // b.any
   8f0c8:	f9401bf9 	ldr	x25, [sp, #48]
   8f0cc:	17ffffce 	b	8f004 <CSerialDevice::Write(void const*, unsigned long)+0x1b4>
   8f0d0:	b9516e6f 	ldr	w15, [x19, #4460]
   8f0d4:	3607f56f 	tbz	w15, #0, 8ef80 <CSerialDevice::Write(void const*, unsigned long)+0x130>
   8f0d8:	528001a1 	mov	w1, #0xd                   	// #13
   8f0dc:	aa1303e0 	mov	x0, x19
   8f0e0:	94000210 	bl	8f920 <CSerialDevice::Write(unsigned char)>
   8f0e4:	72001c1f 	tst	w0, #0xff
   8f0e8:	54fff4c1 	b.ne	8ef80 <CSerialDevice::Write(void const*, unsigned long)+0x130>  // b.any
   8f0ec:	f9401bf9 	ldr	x25, [sp, #48]
   8f0f0:	17ffffc5 	b	8f004 <CSerialDevice::Write(void const*, unsigned long)+0x1b4>
   8f0f4:	b9516e71 	ldr	w17, [x19, #4460]
   8f0f8:	3607f5b1 	tbz	w17, #0, 8efac <CSerialDevice::Write(void const*, unsigned long)+0x15c>
   8f0fc:	528001a1 	mov	w1, #0xd                   	// #13
   8f100:	aa1303e0 	mov	x0, x19
   8f104:	94000207 	bl	8f920 <CSerialDevice::Write(unsigned char)>
   8f108:	72001c1f 	tst	w0, #0xff
   8f10c:	54fff501 	b.ne	8efac <CSerialDevice::Write(void const*, unsigned long)+0x15c>  // b.any
   8f110:	f9401bf9 	ldr	x25, [sp, #48]
   8f114:	17ffffbc 	b	8f004 <CSerialDevice::Write(void const*, unsigned long)+0x1b4>
   8f118:	940018c6 	bl	95430 <EnterCritical>
   8f11c:	17ffff58 	b	8ee7c <CSerialDevice::Write(void const*, unsigned long)+0x2c>
   8f120:	940018f0 	bl	954e0 <LeaveCritical>
   8f124:	17ffffba 	b	8f00c <CSerialDevice::Write(void const*, unsigned long)+0x1bc>
   8f128:	940018ee 	bl	954e0 <LeaveCritical>
   8f12c:	2a1603e0 	mov	w0, w22
   8f130:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8f134:	a94263f7 	ldp	x23, x24, [sp, #32]
   8f138:	f9401ffe 	ldr	x30, [sp, #56]
   8f13c:	a8c453f3 	ldp	x19, x20, [sp], #64
   8f140:	d65f03c0 	ret
   8f144:	940018bb 	bl	95430 <EnterCritical>
   8f148:	b9516675 	ldr	w21, [x19, #4452]
   8f14c:	b9516a78 	ldr	w24, [x19, #4456]
   8f150:	6b1802bf 	cmp	w21, w24
   8f154:	54fff6c1 	b.ne	8f02c <CSerialDevice::Write(void const*, unsigned long)+0x1dc>  // b.any
   8f158:	17ffffcd 	b	8f08c <CSerialDevice::Write(void const*, unsigned long)+0x23c>
   8f15c:	b9516e69 	ldr	w9, [x19, #4460]
   8f160:	3607edc9 	tbz	w9, #0, 8ef18 <CSerialDevice::Write(void const*, unsigned long)+0xc8>
   8f164:	528001a1 	mov	w1, #0xd                   	// #13
   8f168:	aa1303e0 	mov	x0, x19
   8f16c:	940001ed 	bl	8f920 <CSerialDevice::Write(unsigned char)>
   8f170:	72001c1f 	tst	w0, #0xff
   8f174:	54ffed21 	b.ne	8ef18 <CSerialDevice::Write(void const*, unsigned long)+0xc8>  // b.any
   8f178:	17ffffa3 	b	8f004 <CSerialDevice::Write(void const*, unsigned long)+0x1b4>
   8f17c:	b9516e67 	ldr	w7, [x19, #4460]
   8f180:	3607eb67 	tbz	w7, #0, 8eeec <CSerialDevice::Write(void const*, unsigned long)+0x9c>
   8f184:	528001a1 	mov	w1, #0xd                   	// #13
   8f188:	aa1303e0 	mov	x0, x19
   8f18c:	940001e5 	bl	8f920 <CSerialDevice::Write(unsigned char)>
   8f190:	72001c1f 	tst	w0, #0xff
   8f194:	54fff380 	b.eq	8f004 <CSerialDevice::Write(void const*, unsigned long)+0x1b4>  // b.none
   8f198:	91000694 	add	x20, x20, #0x1
   8f19c:	17ffff55 	b	8eef0 <CSerialDevice::Write(void const*, unsigned long)+0xa0>
   8f1a0:	b9516e65 	ldr	w5, [x19, #4460]
   8f1a4:	3607e905 	tbz	w5, #0, 8eec4 <CSerialDevice::Write(void const*, unsigned long)+0x74>
   8f1a8:	528001a1 	mov	w1, #0xd                   	// #13
   8f1ac:	aa1303e0 	mov	x0, x19
   8f1b0:	940001dc 	bl	8f920 <CSerialDevice::Write(unsigned char)>
   8f1b4:	72001c1f 	tst	w0, #0xff
   8f1b8:	54fff260 	b.eq	8f004 <CSerialDevice::Write(void const*, unsigned long)+0x1b4>  // b.none
   8f1bc:	d2800034 	mov	x20, #0x1                   	// #1
   8f1c0:	17ffff42 	b	8eec8 <CSerialDevice::Write(void const*, unsigned long)+0x78>
   8f1c4:	b0000061 	adrp	x1, 9c000 <vtable for CSerialDevice>
   8f1c8:	91010021 	add	x1, x1, #0x40
   8f1cc:	f9001bf9 	str	x25, [sp, #48]
   8f1d0:	91042020 	add	x0, x1, #0x108
   8f1d4:	528029a2 	mov	w2, #0x14d                 	// #333
   8f1d8:	97ffe866 	bl	89370 <assertion_failed>
   8f1dc:	b0000062 	adrp	x2, 9c000 <vtable for CSerialDevice>
   8f1e0:	91010041 	add	x1, x2, #0x40
   8f1e4:	f9001bf9 	str	x25, [sp, #48]
   8f1e8:	91046020 	add	x0, x1, #0x118
   8f1ec:	52802b42 	mov	w2, #0x15a                 	// #346
   8f1f0:	97ffe860 	bl	89370 <assertion_failed>
   8f1f4:	52800016 	mov	w22, #0x0                   	// #0
   8f1f8:	17ffff83 	b	8f004 <CSerialDevice::Write(void const*, unsigned long)+0x1b4>
   8f1fc:	d503201f 	nop

000000000008f200 <CSerialDevice::Read(void*, unsigned long)>:
   8f200:	a9be7bf3 	stp	x19, x30, [sp, #-32]!
   8f204:	aa0003f3 	mov	x19, x0
   8f208:	3940c000 	ldrb	w0, [x0, #48]
   8f20c:	34001e80 	cbz	w0, 8f5dc <CSerialDevice::Read(void*, unsigned long)+0x3dc>
   8f210:	b4001f01 	cbz	x1, 8f5f0 <CSerialDevice::Read(void*, unsigned long)+0x3f0>
   8f214:	f9400e63 	ldr	x3, [x19, #24]
   8f218:	b4001123 	cbz	x3, 8f43c <CSerialDevice::Read(void*, unsigned long)+0x23c>
   8f21c:	b9518a60 	ldr	w0, [x19, #4488]
   8f220:	35001c80 	cbnz	w0, 8f5b0 <CSerialDevice::Read(void*, unsigned long)+0x3b0>
   8f224:	b9496269 	ldr	w9, [x19, #2400]
   8f228:	37f80fe9 	tbnz	w9, #31, 8f424 <CSerialDevice::Read(void*, unsigned long)+0x224>
   8f22c:	b4001f42 	cbz	x2, 8f614 <CSerialDevice::Read(void*, unsigned long)+0x414>
   8f230:	b9495a6a 	ldr	w10, [x19, #2392]
   8f234:	b9495e6e 	ldr	w14, [x19, #2396]
   8f238:	6b0a01df 	cmp	w14, w10
   8f23c:	54001ec0 	b.eq	8f614 <CSerialDevice::Read(void*, unsigned long)+0x414>  // b.none
   8f240:	d100044f 	sub	x15, x2, #0x1
   8f244:	52800031 	mov	w17, #0x1                   	// #1
   8f248:	8b0f0030 	add	x16, x1, x15
   8f24c:	aa0103e3 	mov	x3, x1
   8f250:	cb010212 	sub	x18, x16, x1
   8f254:	4b01023e 	sub	w30, w17, w1
   8f258:	f2400641 	ands	x1, x18, #0x3
   8f25c:	54000660 	b.eq	8f328 <CSerialDevice::Read(void*, unsigned long)+0x128>  // b.none
   8f260:	b9495e64 	ldr	w4, [x19, #2396]
   8f264:	8b244266 	add	x6, x19, w4, uxtw
   8f268:	0b0303c0 	add	w0, w30, w3
   8f26c:	91000463 	add	x3, x3, #0x1
   8f270:	11000485 	add	w5, w4, #0x1
   8f274:	b9095e65 	str	w5, [x19, #2396]
   8f278:	394560c7 	ldrb	w7, [x6, #344]
   8f27c:	381ff067 	sturb	w7, [x3, #-1]
   8f280:	b9495e68 	ldr	w8, [x19, #2396]
   8f284:	1200290b 	and	w11, w8, #0x7ff
   8f288:	b9095e6b 	str	w11, [x19, #2396]
   8f28c:	b9495a6c 	ldr	w12, [x19, #2392]
   8f290:	b9495e6d 	ldr	w13, [x19, #2396]
   8f294:	6b0d019f 	cmp	w12, w13
   8f298:	54000ca0 	b.eq	8f42c <CSerialDevice::Read(void*, unsigned long)+0x22c>  // b.none
   8f29c:	f100043f 	cmp	x1, #0x1
   8f2a0:	54000440 	b.eq	8f328 <CSerialDevice::Read(void*, unsigned long)+0x128>  // b.none
   8f2a4:	f100083f 	cmp	x1, #0x2
   8f2a8:	54000200 	b.eq	8f2e8 <CSerialDevice::Read(void*, unsigned long)+0xe8>  // b.none
   8f2ac:	b9495e62 	ldr	w2, [x19, #2396]
   8f2b0:	8b224269 	add	x9, x19, w2, uxtw
   8f2b4:	0b0303c0 	add	w0, w30, w3
   8f2b8:	91000463 	add	x3, x3, #0x1
   8f2bc:	1100044a 	add	w10, w2, #0x1
   8f2c0:	b9095e6a 	str	w10, [x19, #2396]
   8f2c4:	3945612e 	ldrb	w14, [x9, #344]
   8f2c8:	381ff06e 	sturb	w14, [x3, #-1]
   8f2cc:	b9495e6f 	ldr	w15, [x19, #2396]
   8f2d0:	120029f1 	and	w17, w15, #0x7ff
   8f2d4:	b9095e71 	str	w17, [x19, #2396]
   8f2d8:	b9495a72 	ldr	w18, [x19, #2392]
   8f2dc:	b9495e61 	ldr	w1, [x19, #2396]
   8f2e0:	6b01025f 	cmp	w18, w1
   8f2e4:	54000a40 	b.eq	8f42c <CSerialDevice::Read(void*, unsigned long)+0x22c>  // b.none
   8f2e8:	b9495e64 	ldr	w4, [x19, #2396]
   8f2ec:	8b244266 	add	x6, x19, w4, uxtw
   8f2f0:	0b0303c0 	add	w0, w30, w3
   8f2f4:	91000463 	add	x3, x3, #0x1
   8f2f8:	11000485 	add	w5, w4, #0x1
   8f2fc:	b9095e65 	str	w5, [x19, #2396]
   8f300:	394560c7 	ldrb	w7, [x6, #344]
   8f304:	381ff067 	sturb	w7, [x3, #-1]
   8f308:	b9495e68 	ldr	w8, [x19, #2396]
   8f30c:	1200290b 	and	w11, w8, #0x7ff
   8f310:	b9095e6b 	str	w11, [x19, #2396]
   8f314:	b9495a6c 	ldr	w12, [x19, #2392]
   8f318:	b9495e6d 	ldr	w13, [x19, #2396]
   8f31c:	6b0d019f 	cmp	w12, w13
   8f320:	54000860 	b.eq	8f42c <CSerialDevice::Read(void*, unsigned long)+0x22c>  // b.none
   8f324:	d503201f 	nop
   8f328:	b9495e62 	ldr	w2, [x19, #2396]
   8f32c:	8b224269 	add	x9, x19, w2, uxtw
   8f330:	eb10007f 	cmp	x3, x16
   8f334:	0b0303c0 	add	w0, w30, w3
   8f338:	1100044a 	add	w10, w2, #0x1
   8f33c:	b9095e6a 	str	w10, [x19, #2396]
   8f340:	3945612e 	ldrb	w14, [x9, #344]
   8f344:	3900006e 	strb	w14, [x3]
   8f348:	b9495e6f 	ldr	w15, [x19, #2396]
   8f34c:	120029f1 	and	w17, w15, #0x7ff
   8f350:	b9095e71 	str	w17, [x19, #2396]
   8f354:	540006c0 	b.eq	8f42c <CSerialDevice::Read(void*, unsigned long)+0x22c>  // b.none
   8f358:	b9495a61 	ldr	w1, [x19, #2392]
   8f35c:	91000472 	add	x18, x3, #0x1
   8f360:	b9495e64 	ldr	w4, [x19, #2396]
   8f364:	6b04003f 	cmp	w1, w4
   8f368:	54000620 	b.eq	8f42c <CSerialDevice::Read(void*, unsigned long)+0x22c>  // b.none
   8f36c:	b9495e67 	ldr	w7, [x19, #2396]
   8f370:	8b274266 	add	x6, x19, w7, uxtw
   8f374:	0b1203c0 	add	w0, w30, w18
   8f378:	91000645 	add	x5, x18, #0x1
   8f37c:	110004e8 	add	w8, w7, #0x1
   8f380:	b9095e68 	str	w8, [x19, #2396]
   8f384:	394560cb 	ldrb	w11, [x6, #344]
   8f388:	3900046b 	strb	w11, [x3, #1]
   8f38c:	b9495e6c 	ldr	w12, [x19, #2396]
   8f390:	1200298d 	and	w13, w12, #0x7ff
   8f394:	b9095e6d 	str	w13, [x19, #2396]
   8f398:	b9495a62 	ldr	w2, [x19, #2392]
   8f39c:	b9495e69 	ldr	w9, [x19, #2396]
   8f3a0:	6b09005f 	cmp	w2, w9
   8f3a4:	54000440 	b.eq	8f42c <CSerialDevice::Read(void*, unsigned long)+0x22c>  // b.none
   8f3a8:	b9495e6e 	ldr	w14, [x19, #2396]
   8f3ac:	8b2e426f 	add	x15, x19, w14, uxtw
   8f3b0:	0b0503c0 	add	w0, w30, w5
   8f3b4:	91000c6a 	add	x10, x3, #0x3
   8f3b8:	110005d1 	add	w17, w14, #0x1
   8f3bc:	b9095e71 	str	w17, [x19, #2396]
   8f3c0:	394561e1 	ldrb	w1, [x15, #344]
   8f3c4:	39000641 	strb	w1, [x18, #1]
   8f3c8:	b9495e72 	ldr	w18, [x19, #2396]
   8f3cc:	12002a44 	and	w4, w18, #0x7ff
   8f3d0:	b9095e64 	str	w4, [x19, #2396]
   8f3d4:	b9495a65 	ldr	w5, [x19, #2392]
   8f3d8:	b9495e67 	ldr	w7, [x19, #2396]
   8f3dc:	6b0700bf 	cmp	w5, w7
   8f3e0:	54000260 	b.eq	8f42c <CSerialDevice::Read(void*, unsigned long)+0x22c>  // b.none
   8f3e4:	b9495e66 	ldr	w6, [x19, #2396]
   8f3e8:	8b264268 	add	x8, x19, w6, uxtw
   8f3ec:	0b0a03c0 	add	w0, w30, w10
   8f3f0:	91001063 	add	x3, x3, #0x4
   8f3f4:	110004cb 	add	w11, w6, #0x1
   8f3f8:	b9095e6b 	str	w11, [x19, #2396]
   8f3fc:	3945610c 	ldrb	w12, [x8, #344]
   8f400:	381ff06c 	sturb	w12, [x3, #-1]
   8f404:	b9495e68 	ldr	w8, [x19, #2396]
   8f408:	1200290b 	and	w11, w8, #0x7ff
   8f40c:	b9095e6b 	str	w11, [x19, #2396]
   8f410:	b9495a6c 	ldr	w12, [x19, #2392]
   8f414:	b9495e6d 	ldr	w13, [x19, #2396]
   8f418:	6b0d019f 	cmp	w12, w13
   8f41c:	54fff861 	b.ne	8f328 <CSerialDevice::Read(void*, unsigned long)+0x128>  // b.any
   8f420:	14000003 	b	8f42c <CSerialDevice::Read(void*, unsigned long)+0x22c>
   8f424:	b9496260 	ldr	w0, [x19, #2400]
   8f428:	b909627f 	str	wzr, [x19, #2400]
   8f42c:	b9518a70 	ldr	w16, [x19, #4488]
   8f430:	35000cd0 	cbnz	w16, 8f5c8 <CSerialDevice::Read(void*, unsigned long)+0x3c8>
   8f434:	a8c27bf3 	ldp	x19, x30, [sp], #32
   8f438:	d65f03c0 	ret
   8f43c:	b4000f02 	cbz	x2, 8f61c <CSerialDevice::Read(void*, unsigned long)+0x41c>
   8f440:	f9401664 	ldr	x4, [x19, #40]
   8f444:	b9401885 	ldr	w5, [x4, #24]
   8f448:	37200ea5 	tbnz	w5, #4, 8f61c <CSerialDevice::Read(void*, unsigned long)+0x41c>
   8f44c:	b940008d 	ldr	w13, [x4]
   8f450:	37500dad 	tbnz	w13, #10, 8f604 <CSerialDevice::Read(void*, unsigned long)+0x404>
   8f454:	37580dcd 	tbnz	w13, #11, 8f60c <CSerialDevice::Read(void*, unsigned long)+0x40c>
   8f458:	37400a8d 	tbnz	w13, #8, 8f5a8 <CSerialDevice::Read(void*, unsigned long)+0x3a8>
   8f45c:	d1000446 	sub	x6, x2, #0x1
   8f460:	52800027 	mov	w7, #0x1                   	// #1
   8f464:	f24004c8 	ands	x8, x6, #0x3
   8f468:	8b060029 	add	x9, x1, x6
   8f46c:	4b0100ea 	sub	w10, w7, w1
   8f470:	aa0103e2 	mov	x2, x1
   8f474:	54000460 	b.eq	8f500 <CSerialDevice::Read(void*, unsigned long)+0x300>  // b.none
   8f478:	3900002d 	strb	w13, [x1]
   8f47c:	0b010140 	add	w0, w10, w1
   8f480:	f940166b 	ldr	x11, [x19, #40]
   8f484:	b940196c 	ldr	w12, [x11, #24]
   8f488:	3727fd6c 	tbnz	w12, #4, 8f434 <CSerialDevice::Read(void*, unsigned long)+0x234>
   8f48c:	b940016d 	ldr	w13, [x11]
   8f490:	37500bad 	tbnz	w13, #10, 8f604 <CSerialDevice::Read(void*, unsigned long)+0x404>
   8f494:	37580bcd 	tbnz	w13, #11, 8f60c <CSerialDevice::Read(void*, unsigned long)+0x40c>
   8f498:	91000422 	add	x2, x1, #0x1
   8f49c:	3740086d 	tbnz	w13, #8, 8f5a8 <CSerialDevice::Read(void*, unsigned long)+0x3a8>
   8f4a0:	f100051f 	cmp	x8, #0x1
   8f4a4:	540002e0 	b.eq	8f500 <CSerialDevice::Read(void*, unsigned long)+0x300>  // b.none
   8f4a8:	f100091f 	cmp	x8, #0x2
   8f4ac:	54000160 	b.eq	8f4d8 <CSerialDevice::Read(void*, unsigned long)+0x2d8>  // b.none
   8f4b0:	3900004d 	strb	w13, [x2]
   8f4b4:	0b020140 	add	w0, w10, w2
   8f4b8:	f940166d 	ldr	x13, [x19, #40]
   8f4bc:	b94019ae 	ldr	w14, [x13, #24]
   8f4c0:	3727fbae 	tbnz	w14, #4, 8f434 <CSerialDevice::Read(void*, unsigned long)+0x234>
   8f4c4:	b94001ad 	ldr	w13, [x13]
   8f4c8:	375009ed 	tbnz	w13, #10, 8f604 <CSerialDevice::Read(void*, unsigned long)+0x404>
   8f4cc:	37580a0d 	tbnz	w13, #11, 8f60c <CSerialDevice::Read(void*, unsigned long)+0x40c>
   8f4d0:	91000442 	add	x2, x2, #0x1
   8f4d4:	374006ad 	tbnz	w13, #8, 8f5a8 <CSerialDevice::Read(void*, unsigned long)+0x3a8>
   8f4d8:	3900004d 	strb	w13, [x2]
   8f4dc:	0b020140 	add	w0, w10, w2
   8f4e0:	f940166f 	ldr	x15, [x19, #40]
   8f4e4:	b94019f0 	ldr	w16, [x15, #24]
   8f4e8:	3727fa70 	tbnz	w16, #4, 8f434 <CSerialDevice::Read(void*, unsigned long)+0x234>
   8f4ec:	b94001ed 	ldr	w13, [x15]
   8f4f0:	375008ad 	tbnz	w13, #10, 8f604 <CSerialDevice::Read(void*, unsigned long)+0x404>
   8f4f4:	375808cd 	tbnz	w13, #11, 8f60c <CSerialDevice::Read(void*, unsigned long)+0x40c>
   8f4f8:	91000442 	add	x2, x2, #0x1
   8f4fc:	3740056d 	tbnz	w13, #8, 8f5a8 <CSerialDevice::Read(void*, unsigned long)+0x3a8>
   8f500:	eb09005f 	cmp	x2, x9
   8f504:	3900004d 	strb	w13, [x2]
   8f508:	0b020140 	add	w0, w10, w2
   8f50c:	54fff940 	b.eq	8f434 <CSerialDevice::Read(void*, unsigned long)+0x234>  // b.none
   8f510:	f9401671 	ldr	x17, [x19, #40]
   8f514:	b9401a32 	ldr	w18, [x17, #24]
   8f518:	3727f8f2 	tbnz	w18, #4, 8f434 <CSerialDevice::Read(void*, unsigned long)+0x234>
   8f51c:	b940023e 	ldr	w30, [x17]
   8f520:	3750073e 	tbnz	w30, #10, 8f604 <CSerialDevice::Read(void*, unsigned long)+0x404>
   8f524:	3758075e 	tbnz	w30, #11, 8f60c <CSerialDevice::Read(void*, unsigned long)+0x40c>
   8f528:	91000441 	add	x1, x2, #0x1
   8f52c:	374003fe 	tbnz	w30, #8, 8f5a8 <CSerialDevice::Read(void*, unsigned long)+0x3a8>
   8f530:	3900045e 	strb	w30, [x2, #1]
   8f534:	0b010140 	add	w0, w10, w1
   8f538:	f9401662 	ldr	x2, [x19, #40]
   8f53c:	b9401843 	ldr	w3, [x2, #24]
   8f540:	3727f7a3 	tbnz	w3, #4, 8f434 <CSerialDevice::Read(void*, unsigned long)+0x234>
   8f544:	b9400044 	ldr	w4, [x2]
   8f548:	375005e4 	tbnz	w4, #10, 8f604 <CSerialDevice::Read(void*, unsigned long)+0x404>
   8f54c:	37580604 	tbnz	w4, #11, 8f60c <CSerialDevice::Read(void*, unsigned long)+0x40c>
   8f550:	91000420 	add	x0, x1, #0x1
   8f554:	374002a4 	tbnz	w4, #8, 8f5a8 <CSerialDevice::Read(void*, unsigned long)+0x3a8>
   8f558:	39000424 	strb	w4, [x1, #1]
   8f55c:	0b000140 	add	w0, w10, w0
   8f560:	f9401666 	ldr	x6, [x19, #40]
   8f564:	b94018c5 	ldr	w5, [x6, #24]
   8f568:	3727f665 	tbnz	w5, #4, 8f434 <CSerialDevice::Read(void*, unsigned long)+0x234>
   8f56c:	b94000c7 	ldr	w7, [x6]
   8f570:	375004a7 	tbnz	w7, #10, 8f604 <CSerialDevice::Read(void*, unsigned long)+0x404>
   8f574:	375804c7 	tbnz	w7, #11, 8f60c <CSerialDevice::Read(void*, unsigned long)+0x40c>
   8f578:	91000828 	add	x8, x1, #0x2
   8f57c:	37400167 	tbnz	w7, #8, 8f5a8 <CSerialDevice::Read(void*, unsigned long)+0x3a8>
   8f580:	39000827 	strb	w7, [x1, #2]
   8f584:	0b080140 	add	w0, w10, w8
   8f588:	f940166b 	ldr	x11, [x19, #40]
   8f58c:	b940196c 	ldr	w12, [x11, #24]
   8f590:	3727f52c 	tbnz	w12, #4, 8f434 <CSerialDevice::Read(void*, unsigned long)+0x234>
   8f594:	b940016d 	ldr	w13, [x11]
   8f598:	3750036d 	tbnz	w13, #10, 8f604 <CSerialDevice::Read(void*, unsigned long)+0x404>
   8f59c:	3758038d 	tbnz	w13, #11, 8f60c <CSerialDevice::Read(void*, unsigned long)+0x40c>
   8f5a0:	91000c22 	add	x2, x1, #0x3
   8f5a4:	3647faed 	tbz	w13, #8, 8f500 <CSerialDevice::Read(void*, unsigned long)+0x300>
   8f5a8:	12800040 	mov	w0, #0xfffffffd            	// #-3
   8f5ac:	17ffffa2 	b	8f434 <CSerialDevice::Read(void*, unsigned long)+0x234>
   8f5b0:	a9010be1 	stp	x1, x2, [sp, #16]
   8f5b4:	9400179f 	bl	95430 <EnterCritical>
   8f5b8:	b9496269 	ldr	w9, [x19, #2400]
   8f5bc:	a9410be1 	ldp	x1, x2, [sp, #16]
   8f5c0:	36ffe369 	tbz	w9, #31, 8f22c <CSerialDevice::Read(void*, unsigned long)+0x2c>
   8f5c4:	17ffff98 	b	8f424 <CSerialDevice::Read(void*, unsigned long)+0x224>
   8f5c8:	b90013e0 	str	w0, [sp, #16]
   8f5cc:	940017c5 	bl	954e0 <LeaveCritical>
   8f5d0:	b94013e0 	ldr	w0, [sp, #16]
   8f5d4:	a8c27bf3 	ldp	x19, x30, [sp], #32
   8f5d8:	d65f03c0 	ret
   8f5dc:	b0000061 	adrp	x1, 9c000 <vtable for CSerialDevice>
   8f5e0:	91010021 	add	x1, x1, #0x40
   8f5e4:	91042020 	add	x0, x1, #0x108
   8f5e8:	528032e2 	mov	w2, #0x197                 	// #407
   8f5ec:	97ffe761 	bl	89370 <assertion_failed>
   8f5f0:	b0000062 	adrp	x2, 9c000 <vtable for CSerialDevice>
   8f5f4:	91010041 	add	x1, x2, #0x40
   8f5f8:	91046020 	add	x0, x1, #0x118
   8f5fc:	52803342 	mov	w2, #0x19a                 	// #410
   8f600:	97ffe75c 	bl	89370 <assertion_failed>
   8f604:	12800000 	mov	w0, #0xffffffff            	// #-1
   8f608:	17ffff8b 	b	8f434 <CSerialDevice::Read(void*, unsigned long)+0x234>
   8f60c:	12800020 	mov	w0, #0xfffffffe            	// #-2
   8f610:	17ffff89 	b	8f434 <CSerialDevice::Read(void*, unsigned long)+0x234>
   8f614:	52800000 	mov	w0, #0x0                   	// #0
   8f618:	17ffff85 	b	8f42c <CSerialDevice::Read(void*, unsigned long)+0x22c>
   8f61c:	52800000 	mov	w0, #0x0                   	// #0
   8f620:	17ffff85 	b	8f434 <CSerialDevice::Read(void*, unsigned long)+0x234>
   8f624:	d503201f 	nop
   8f628:	d503201f 	nop
   8f62c:	d503201f 	nop

000000000008f630 <CSerialDevice::GetOptions() const>:
   8f630:	b9516c00 	ldr	w0, [x0, #4460]
   8f634:	d65f03c0 	ret
   8f638:	d503201f 	nop
   8f63c:	d503201f 	nop

000000000008f640 <CSerialDevice::SetOptions(unsigned int)>:
   8f640:	b9116c01 	str	w1, [x0, #4460]
   8f644:	d65f03c0 	ret
   8f648:	d503201f 	nop
   8f64c:	d503201f 	nop

000000000008f650 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
   8f650:	f81f0ffe 	str	x30, [sp, #-16]!
   8f654:	f9400c03 	ldr	x3, [x0, #24]
   8f658:	b4000183 	cbz	x3, 8f688 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x38>
   8f65c:	f948b804 	ldr	x4, [x0, #4464]
   8f660:	b50001e4 	cbnz	x4, 8f69c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x4c>
   8f664:	b4000261 	cbz	x1, 8f6b0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x60>
   8f668:	39c00025 	ldrsb	w5, [x1]
   8f66c:	340002c5 	cbz	w5, 8f6c4 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x74>
   8f670:	b4000342 	cbz	x2, 8f6d8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x88>
   8f674:	f908b801 	str	x1, [x0, #4464]
   8f678:	f908bc01 	str	x1, [x0, #4472]
   8f67c:	f908c002 	str	x2, [x0, #4480]
   8f680:	f84107fe 	ldr	x30, [sp], #16
   8f684:	d65f03c0 	ret
   8f688:	b0000061 	adrp	x1, 9c000 <vtable for CSerialDevice>
   8f68c:	91010021 	add	x1, x1, #0x40
   8f690:	9104a020 	add	x0, x1, #0x128
   8f694:	52803e22 	mov	w2, #0x1f1                 	// #497
   8f698:	97ffe736 	bl	89370 <assertion_failed>
   8f69c:	b0000060 	adrp	x0, 9c000 <vtable for CSerialDevice>
   8f6a0:	91010001 	add	x1, x0, #0x40
   8f6a4:	91050020 	add	x0, x1, #0x140
   8f6a8:	52803e42 	mov	w2, #0x1f2                 	// #498
   8f6ac:	97ffe731 	bl	89370 <assertion_failed>
   8f6b0:	b0000062 	adrp	x2, 9c000 <vtable for CSerialDevice>
   8f6b4:	91010041 	add	x1, x2, #0x40
   8f6b8:	91054020 	add	x0, x1, #0x150
   8f6bc:	52803e82 	mov	w2, #0x1f4                 	// #500
   8f6c0:	97ffe72c 	bl	89370 <assertion_failed>
   8f6c4:	b0000066 	adrp	x6, 9c000 <vtable for CSerialDevice>
   8f6c8:	910100c1 	add	x1, x6, #0x40
   8f6cc:	91058020 	add	x0, x1, #0x160
   8f6d0:	52803ea2 	mov	w2, #0x1f5                 	// #501
   8f6d4:	97ffe727 	bl	89370 <assertion_failed>
   8f6d8:	b0000067 	adrp	x7, 9c000 <vtable for CSerialDevice>
   8f6dc:	910100e1 	add	x1, x7, #0x40
   8f6e0:	9105c020 	add	x0, x1, #0x170
   8f6e4:	52803ec2 	mov	w2, #0x1f6                 	// #502
   8f6e8:	97ffe722 	bl	89370 <assertion_failed>
   8f6ec:	d503201f 	nop

000000000008f6f0 <CSerialDevice::AvailableForWrite()>:
   8f6f0:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   8f6f4:	aa0003f3 	mov	x19, x0
   8f6f8:	3940c000 	ldrb	w0, [x0, #48]
   8f6fc:	34000360 	cbz	w0, 8f768 <CSerialDevice::AvailableForWrite()+0x78>
   8f700:	f9400e62 	ldr	x2, [x19, #24]
   8f704:	b40003c2 	cbz	x2, 8f77c <CSerialDevice::AvailableForWrite()+0x8c>
   8f708:	b9518a60 	ldr	w0, [x19, #4488]
   8f70c:	35000280 	cbnz	w0, 8f75c <CSerialDevice::AvailableForWrite()+0x6c>
   8f710:	b9516a64 	ldr	w4, [x19, #4456]
   8f714:	b9516665 	ldr	w5, [x19, #4452]
   8f718:	b9516a66 	ldr	w6, [x19, #4456]
   8f71c:	b9516667 	ldr	w7, [x19, #4452]
   8f720:	6b05009f 	cmp	w4, w5
   8f724:	540000e8 	b.hi	8f740 <CSerialDevice::AvailableForWrite()+0x50>  // b.pmore
   8f728:	111ffcc9 	add	w9, w6, #0x7ff
   8f72c:	4b070133 	sub	w19, w9, w7
   8f730:	350000e0 	cbnz	w0, 8f74c <CSerialDevice::AvailableForWrite()+0x5c>
   8f734:	2a1303e0 	mov	w0, w19
   8f738:	a8c17bf3 	ldp	x19, x30, [sp], #16
   8f73c:	d65f03c0 	ret
   8f740:	510004c8 	sub	w8, w6, #0x1
   8f744:	4b070113 	sub	w19, w8, w7
   8f748:	34ffff60 	cbz	w0, 8f734 <CSerialDevice::AvailableForWrite()+0x44>
   8f74c:	94001765 	bl	954e0 <LeaveCritical>
   8f750:	2a1303e0 	mov	w0, w19
   8f754:	a8c17bf3 	ldp	x19, x30, [sp], #16
   8f758:	d65f03c0 	ret
   8f75c:	94001735 	bl	95430 <EnterCritical>
   8f760:	b9518a60 	ldr	w0, [x19, #4488]
   8f764:	17ffffeb 	b	8f710 <CSerialDevice::AvailableForWrite()+0x20>
   8f768:	b0000061 	adrp	x1, 9c000 <vtable for CSerialDevice>
   8f76c:	91010021 	add	x1, x1, #0x40
   8f770:	91042020 	add	x0, x1, #0x108
   8f774:	52804002 	mov	w2, #0x200                 	// #512
   8f778:	97ffe6fe 	bl	89370 <assertion_failed>
   8f77c:	b0000063 	adrp	x3, 9c000 <vtable for CSerialDevice>
   8f780:	91010061 	add	x1, x3, #0x40
   8f784:	9104a020 	add	x0, x1, #0x128
   8f788:	52804022 	mov	w2, #0x201                 	// #513
   8f78c:	97ffe6f9 	bl	89370 <assertion_failed>

000000000008f790 <CSerialDevice::AvailableForRead()>:
   8f790:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   8f794:	aa0003f3 	mov	x19, x0
   8f798:	3940c000 	ldrb	w0, [x0, #48]
   8f79c:	34000360 	cbz	w0, 8f808 <CSerialDevice::AvailableForRead()+0x78>
   8f7a0:	f9400e62 	ldr	x2, [x19, #24]
   8f7a4:	b40003c2 	cbz	x2, 8f81c <CSerialDevice::AvailableForRead()+0x8c>
   8f7a8:	b9518a60 	ldr	w0, [x19, #4488]
   8f7ac:	35000280 	cbnz	w0, 8f7fc <CSerialDevice::AvailableForRead()+0x6c>
   8f7b0:	b9495a64 	ldr	w4, [x19, #2392]
   8f7b4:	b9495e65 	ldr	w5, [x19, #2396]
   8f7b8:	b9495a66 	ldr	w6, [x19, #2392]
   8f7bc:	6b05009f 	cmp	w4, w5
   8f7c0:	54000102 	b.cs	8f7e0 <CSerialDevice::AvailableForRead()+0x50>  // b.hs, b.nlast
   8f7c4:	b9495e68 	ldr	w8, [x19, #2396]
   8f7c8:	112000c9 	add	w9, w6, #0x800
   8f7cc:	4b080133 	sub	w19, w9, w8
   8f7d0:	350000e0 	cbnz	w0, 8f7ec <CSerialDevice::AvailableForRead()+0x5c>
   8f7d4:	2a1303e0 	mov	w0, w19
   8f7d8:	a8c17bf3 	ldp	x19, x30, [sp], #16
   8f7dc:	d65f03c0 	ret
   8f7e0:	b9495e67 	ldr	w7, [x19, #2396]
   8f7e4:	4b0700d3 	sub	w19, w6, w7
   8f7e8:	34ffff60 	cbz	w0, 8f7d4 <CSerialDevice::AvailableForRead()+0x44>
   8f7ec:	9400173d 	bl	954e0 <LeaveCritical>
   8f7f0:	2a1303e0 	mov	w0, w19
   8f7f4:	a8c17bf3 	ldp	x19, x30, [sp], #16
   8f7f8:	d65f03c0 	ret
   8f7fc:	9400170d 	bl	95430 <EnterCritical>
   8f800:	b9518a60 	ldr	w0, [x19, #4488]
   8f804:	17ffffeb 	b	8f7b0 <CSerialDevice::AvailableForRead()+0x20>
   8f808:	b0000061 	adrp	x1, 9c000 <vtable for CSerialDevice>
   8f80c:	91010021 	add	x1, x1, #0x40
   8f810:	91042020 	add	x0, x1, #0x108
   8f814:	528042c2 	mov	w2, #0x216                 	// #534
   8f818:	97ffe6d6 	bl	89370 <assertion_failed>
   8f81c:	b0000063 	adrp	x3, 9c000 <vtable for CSerialDevice>
   8f820:	91010061 	add	x1, x3, #0x40
   8f824:	9104a020 	add	x0, x1, #0x128
   8f828:	528042e2 	mov	w2, #0x217                 	// #535
   8f82c:	97ffe6d1 	bl	89370 <assertion_failed>

000000000008f830 <CSerialDevice::Peek()>:
   8f830:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   8f834:	aa0003f3 	mov	x19, x0
   8f838:	f9000bfe 	str	x30, [sp, #16]
   8f83c:	3940c000 	ldrb	w0, [x0, #48]
   8f840:	340003e0 	cbz	w0, 8f8bc <CSerialDevice::Peek()+0x8c>
   8f844:	f9400e62 	ldr	x2, [x19, #24]
   8f848:	b4000442 	cbz	x2, 8f8d0 <CSerialDevice::Peek()+0xa0>
   8f84c:	b9518a60 	ldr	w0, [x19, #4488]
   8f850:	35000180 	cbnz	w0, 8f880 <CSerialDevice::Peek()+0x50>
   8f854:	b9495a64 	ldr	w4, [x19, #2392]
   8f858:	b9495e65 	ldr	w5, [x19, #2396]
   8f85c:	6b0400bf 	cmp	w5, w4
   8f860:	54000420 	b.eq	8f8e4 <CSerialDevice::Peek()+0xb4>  // b.none
   8f864:	b9495e66 	ldr	w6, [x19, #2396]
   8f868:	8b264267 	add	x7, x19, w6, uxtw
   8f86c:	394560f4 	ldrb	w20, [x7, #344]
   8f870:	2a1403e0 	mov	w0, w20
   8f874:	f9400bfe 	ldr	x30, [sp, #16]
   8f878:	a8c253f3 	ldp	x19, x20, [sp], #32
   8f87c:	d65f03c0 	ret
   8f880:	940016ec 	bl	95430 <EnterCritical>
   8f884:	b9495a68 	ldr	w8, [x19, #2392]
   8f888:	b9495e69 	ldr	w9, [x19, #2396]
   8f88c:	6b09011f 	cmp	w8, w9
   8f890:	540002e0 	b.eq	8f8ec <CSerialDevice::Peek()+0xbc>  // b.none
   8f894:	b9495e6a 	ldr	w10, [x19, #2396]
   8f898:	8b2a426b 	add	x11, x19, w10, uxtw
   8f89c:	b9518a6c 	ldr	w12, [x19, #4488]
   8f8a0:	39456174 	ldrb	w20, [x11, #344]
   8f8a4:	34fffe6c 	cbz	w12, 8f870 <CSerialDevice::Peek()+0x40>
   8f8a8:	9400170e 	bl	954e0 <LeaveCritical>
   8f8ac:	2a1403e0 	mov	w0, w20
   8f8b0:	f9400bfe 	ldr	x30, [sp, #16]
   8f8b4:	a8c253f3 	ldp	x19, x20, [sp], #32
   8f8b8:	d65f03c0 	ret
   8f8bc:	b0000061 	adrp	x1, 9c000 <vtable for CSerialDevice>
   8f8c0:	91010021 	add	x1, x1, #0x40
   8f8c4:	91042020 	add	x0, x1, #0x108
   8f8c8:	52804582 	mov	w2, #0x22c                 	// #556
   8f8cc:	97ffe6a9 	bl	89370 <assertion_failed>
   8f8d0:	b0000063 	adrp	x3, 9c000 <vtable for CSerialDevice>
   8f8d4:	91010061 	add	x1, x3, #0x40
   8f8d8:	9104a020 	add	x0, x1, #0x128
   8f8dc:	528045a2 	mov	w2, #0x22d                 	// #557
   8f8e0:	97ffe6a4 	bl	89370 <assertion_failed>
   8f8e4:	12800014 	mov	w20, #0xffffffff            	// #-1
   8f8e8:	17ffffe2 	b	8f870 <CSerialDevice::Peek()+0x40>
   8f8ec:	b9518a6c 	ldr	w12, [x19, #4488]
   8f8f0:	12800014 	mov	w20, #0xffffffff            	// #-1
   8f8f4:	35fffdac 	cbnz	w12, 8f8a8 <CSerialDevice::Peek()+0x78>
   8f8f8:	17ffffde 	b	8f870 <CSerialDevice::Peek()+0x40>
   8f8fc:	d503201f 	nop

000000000008f900 <CSerialDevice::Flush()>:
   8f900:	f9401401 	ldr	x1, [x0, #40]
   8f904:	91006022 	add	x2, x1, #0x18
   8f908:	b9400040 	ldr	w0, [x2]
   8f90c:	371fffe0 	tbnz	w0, #3, 8f908 <CSerialDevice::Flush()+0x8>
   8f910:	d65f03c0 	ret
   8f914:	d503201f 	nop
   8f918:	d503201f 	nop
   8f91c:	d503201f 	nop

000000000008f920 <CSerialDevice::Write(unsigned char)>:
   8f920:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   8f924:	a9017bf5 	stp	x21, x30, [sp, #16]
   8f928:	12001c35 	and	w21, w1, #0xff
   8f92c:	f9400c02 	ldr	x2, [x0, #24]
   8f930:	b4000462 	cbz	x2, 8f9bc <CSerialDevice::Write(unsigned char)+0x9c>
   8f934:	b9518804 	ldr	w4, [x0, #4488]
   8f938:	aa0003f3 	mov	x19, x0
   8f93c:	350002c4 	cbnz	w4, 8f994 <CSerialDevice::Write(unsigned char)+0x74>
   8f940:	b9516405 	ldr	w5, [x0, #4452]
   8f944:	b9516806 	ldr	w6, [x0, #4456]
   8f948:	110004a7 	add	w7, w5, #0x1
   8f94c:	120028e8 	and	w8, w7, #0x7ff
   8f950:	6b06011f 	cmp	w8, w6
   8f954:	54000500 	b.eq	8f9f4 <CSerialDevice::Write(unsigned char)+0xd4>  // b.none
   8f958:	b951666d 	ldr	w13, [x19, #4452]
   8f95c:	52800034 	mov	w20, #0x1                   	// #1
   8f960:	8b2d426e 	add	x14, x19, w13, uxtw
   8f964:	0b1401af 	add	w15, w13, w20
   8f968:	b911666f 	str	w15, [x19, #4452]
   8f96c:	392591d5 	strb	w21, [x14, #2404]
   8f970:	b9516670 	ldr	w16, [x19, #4452]
   8f974:	12002a11 	and	w17, w16, #0x7ff
   8f978:	b9116671 	str	w17, [x19, #4452]
   8f97c:	34000044 	cbz	w4, 8f984 <CSerialDevice::Write(unsigned char)+0x64>
   8f980:	940016d8 	bl	954e0 <LeaveCritical>
   8f984:	2a1403e0 	mov	w0, w20
   8f988:	a9417bf5 	ldp	x21, x30, [sp, #16]
   8f98c:	a8c253f3 	ldp	x19, x20, [sp], #32
   8f990:	d65f03c0 	ret
   8f994:	2a0403e0 	mov	w0, w4
   8f998:	940016a6 	bl	95430 <EnterCritical>
   8f99c:	b9516669 	ldr	w9, [x19, #4452]
   8f9a0:	b9516a6a 	ldr	w10, [x19, #4456]
   8f9a4:	1100052b 	add	w11, w9, #0x1
   8f9a8:	1200296c 	and	w12, w11, #0x7ff
   8f9ac:	6b0a019f 	cmp	w12, w10
   8f9b0:	540001c0 	b.eq	8f9e8 <CSerialDevice::Write(unsigned char)+0xc8>  // b.none
   8f9b4:	b9518a64 	ldr	w4, [x19, #4488]
   8f9b8:	17ffffe8 	b	8f958 <CSerialDevice::Write(unsigned char)+0x38>
   8f9bc:	f9401401 	ldr	x1, [x0, #40]
   8f9c0:	91006023 	add	x3, x1, #0x18
   8f9c4:	d503201f 	nop
   8f9c8:	b9400060 	ldr	w0, [x3]
   8f9cc:	372fffe0 	tbnz	w0, #5, 8f9c8 <CSerialDevice::Write(unsigned char)+0xa8>
   8f9d0:	52800034 	mov	w20, #0x1                   	// #1
   8f9d4:	b9000035 	str	w21, [x1]
   8f9d8:	2a1403e0 	mov	w0, w20
   8f9dc:	a9417bf5 	ldp	x21, x30, [sp, #16]
   8f9e0:	a8c253f3 	ldp	x19, x20, [sp], #32
   8f9e4:	d65f03c0 	ret
   8f9e8:	52800014 	mov	w20, #0x0                   	// #0
   8f9ec:	b9518a64 	ldr	w4, [x19, #4488]
   8f9f0:	17ffffe3 	b	8f97c <CSerialDevice::Write(unsigned char)+0x5c>
   8f9f4:	52800014 	mov	w20, #0x0                   	// #0
   8f9f8:	a9417bf5 	ldp	x21, x30, [sp, #16]
   8f9fc:	2a1403e0 	mov	w0, w20
   8fa00:	a8c253f3 	ldp	x19, x20, [sp], #32
   8fa04:	d65f03c0 	ret
   8fa08:	d503201f 	nop
   8fa0c:	d503201f 	nop

000000000008fa10 <CSerialDevice::InterruptHandler()>:
   8fa10:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   8fa14:	aa0003f3 	mov	x19, x0
   8fa18:	b9518800 	ldr	w0, [x0, #4488]
   8fa1c:	f9000bfe 	str	x30, [sp, #16]
   8fa20:	35000c00 	cbnz	w0, 8fba0 <CSerialDevice::InterruptHandler()+0x190>
   8fa24:	f9401660 	ldr	x0, [x19, #40]
   8fa28:	52800014 	mov	w20, #0x0                   	// #0
   8fa2c:	12800049 	mov	w9, #0xfffffffd            	// #-3
   8fa30:	12800026 	mov	w6, #0xfffffffe            	// #-2
   8fa34:	12800007 	mov	w7, #0xffffffff            	// #-1
   8fa38:	52800028 	mov	w8, #0x1                   	// #1
   8fa3c:	b9404001 	ldr	w1, [x0, #64]
   8fa40:	b9004401 	str	w1, [x0, #68]
   8fa44:	f940167e 	ldr	x30, [x19, #40]
   8fa48:	910063c5 	add	x5, x30, #0x18
   8fa4c:	b94000a2 	ldr	w2, [x5]
   8fa50:	372003a2 	tbnz	w2, #4, 8fac4 <CSerialDevice::InterruptHandler()+0xb4>
   8fa54:	b94003c1 	ldr	w1, [x30]
   8fa58:	36500701 	tbz	w1, #10, 8fb38 <CSerialDevice::InterruptHandler()+0x128>
   8fa5c:	b9496263 	ldr	w3, [x19, #2400]
   8fa60:	35000043 	cbnz	w3, 8fa68 <CSerialDevice::InterruptHandler()+0x58>
   8fa64:	b9096267 	str	w7, [x19, #2400]
   8fa68:	f948ba6a 	ldr	x10, [x19, #4464]
   8fa6c:	b40000ca 	cbz	x10, 8fa84 <CSerialDevice::InterruptHandler()+0x74>
   8fa70:	f948be6b 	ldr	x11, [x19, #4472]
   8fa74:	39c00164 	ldrsb	w4, [x11]
   8fa78:	6b21809f 	cmp	w4, w1, sxtb
   8fa7c:	540007a0 	b.eq	8fb70 <CSerialDevice::InterruptHandler()+0x160>  // b.none
   8fa80:	f908be6a 	str	x10, [x19, #4472]
   8fa84:	b9495a6e 	ldr	w14, [x19, #2392]
   8fa88:	b9495e6f 	ldr	w15, [x19, #2396]
   8fa8c:	110005d0 	add	w16, w14, #0x1
   8fa90:	12002a11 	and	w17, w16, #0x7ff
   8fa94:	6b0f023f 	cmp	w17, w15
   8fa98:	540005a0 	b.eq	8fb4c <CSerialDevice::InterruptHandler()+0x13c>  // b.none
   8fa9c:	b9495a60 	ldr	w0, [x19, #2392]
   8faa0:	8b204262 	add	x2, x19, w0, uxtw
   8faa4:	11000403 	add	w3, w0, #0x1
   8faa8:	b9095a63 	str	w3, [x19, #2392]
   8faac:	39056041 	strb	w1, [x2, #344]
   8fab0:	b9495a61 	ldr	w1, [x19, #2392]
   8fab4:	1200282a 	and	w10, w1, #0x7ff
   8fab8:	b9095a6a 	str	w10, [x19, #2392]
   8fabc:	b94000a2 	ldr	w2, [x5]
   8fac0:	3627fca2 	tbz	w2, #4, 8fa54 <CSerialDevice::InterruptHandler()+0x44>
   8fac4:	b94000a3 	ldr	w3, [x5]
   8fac8:	362801c3 	tbz	w3, #5, 8fb00 <CSerialDevice::InterruptHandler()+0xf0>
   8facc:	14000014 	b	8fb1c <CSerialDevice::InterruptHandler()+0x10c>
   8fad0:	b9516a6d 	ldr	w13, [x19, #4456]
   8fad4:	8b2d426e 	add	x14, x19, w13, uxtw
   8fad8:	110005af 	add	w15, w13, #0x1
   8fadc:	b9116a6f 	str	w15, [x19, #4456]
   8fae0:	396591d0 	ldrb	w16, [x14, #2404]
   8fae4:	b90003d0 	str	w16, [x30]
   8fae8:	b9516a71 	ldr	w17, [x19, #4456]
   8faec:	f940167e 	ldr	x30, [x19, #40]
   8faf0:	12002a32 	and	w18, w17, #0x7ff
   8faf4:	b9116a72 	str	w18, [x19, #4456]
   8faf8:	b9401bc9 	ldr	w9, [x30, #24]
   8fafc:	37280109 	tbnz	w9, #5, 8fb1c <CSerialDevice::InterruptHandler()+0x10c>
   8fb00:	b9516664 	ldr	w4, [x19, #4452]
   8fb04:	b9516a6a 	ldr	w10, [x19, #4456]
   8fb08:	6b0a009f 	cmp	w4, w10
   8fb0c:	54fffe21 	b.ne	8fad0 <CSerialDevice::InterruptHandler()+0xc0>  // b.any
   8fb10:	b9403bcb 	ldr	w11, [x30, #56]
   8fb14:	121a796c 	and	w12, w11, #0xffffffdf
   8fb18:	b9003bcc 	str	w12, [x30, #56]
   8fb1c:	b9518a66 	ldr	w6, [x19, #4488]
   8fb20:	350003a6 	cbnz	w6, 8fb94 <CSerialDevice::InterruptHandler()+0x184>
   8fb24:	34000334 	cbz	w20, 8fb88 <CSerialDevice::InterruptHandler()+0x178>
   8fb28:	f9400bfe 	ldr	x30, [sp, #16]
   8fb2c:	f948c267 	ldr	x7, [x19, #4480]
   8fb30:	a8c253f3 	ldp	x19, x20, [sp], #32
   8fb34:	d61f00e0 	br	x7
   8fb38:	36580121 	tbz	w1, #11, 8fb5c <CSerialDevice::InterruptHandler()+0x14c>
   8fb3c:	b9496262 	ldr	w2, [x19, #2400]
   8fb40:	35fff942 	cbnz	w2, 8fa68 <CSerialDevice::InterruptHandler()+0x58>
   8fb44:	b9096266 	str	w6, [x19, #2400]
   8fb48:	17ffffc8 	b	8fa68 <CSerialDevice::InterruptHandler()+0x58>
   8fb4c:	b9496272 	ldr	w18, [x19, #2400]
   8fb50:	35fff7f2 	cbnz	w18, 8fa4c <CSerialDevice::InterruptHandler()+0x3c>
   8fb54:	b9096266 	str	w6, [x19, #2400]
   8fb58:	17ffffbd 	b	8fa4c <CSerialDevice::InterruptHandler()+0x3c>
   8fb5c:	3647f861 	tbz	w1, #8, 8fa68 <CSerialDevice::InterruptHandler()+0x58>
   8fb60:	b9496260 	ldr	w0, [x19, #2400]
   8fb64:	35fff820 	cbnz	w0, 8fa68 <CSerialDevice::InterruptHandler()+0x58>
   8fb68:	b9096269 	str	w9, [x19, #2400]
   8fb6c:	17ffffbf 	b	8fa68 <CSerialDevice::InterruptHandler()+0x58>
   8fb70:	9100056c 	add	x12, x11, #0x1
   8fb74:	f908be6c 	str	x12, [x19, #4472]
   8fb78:	39c0056d 	ldrsb	w13, [x11, #1]
   8fb7c:	710001bf 	cmp	w13, #0x0
   8fb80:	1a881294 	csel	w20, w20, w8, ne  // ne = any
   8fb84:	17ffffc0 	b	8fa84 <CSerialDevice::InterruptHandler()+0x74>
   8fb88:	f9400bfe 	ldr	x30, [sp, #16]
   8fb8c:	a8c253f3 	ldp	x19, x20, [sp], #32
   8fb90:	d65f03c0 	ret
   8fb94:	94001653 	bl	954e0 <LeaveCritical>
   8fb98:	34ffff94 	cbz	w20, 8fb88 <CSerialDevice::InterruptHandler()+0x178>
   8fb9c:	17ffffe3 	b	8fb28 <CSerialDevice::InterruptHandler()+0x118>
   8fba0:	94001624 	bl	95430 <EnterCritical>
   8fba4:	17ffffa0 	b	8fa24 <CSerialDevice::InterruptHandler()+0x14>
   8fba8:	d503201f 	nop
   8fbac:	d503201f 	nop

000000000008fbb0 <CSerialDevice::InterruptStub(void*)>:
   8fbb0:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   8fbb4:	a9015bf5 	stp	x21, x22, [sp, #16]
   8fbb8:	f90017fe 	str	x30, [sp, #40]
   8fbbc:	d5033fbf 	dmb	sy
   8fbc0:	d0016eb6 	adrp	x22, 2e65000 <temp_gold+0xf421a0>
   8fbc4:	910a42c0 	add	x0, x22, #0x290
   8fbc8:	b9401414 	ldr	w20, [x0, #20]
   8fbcc:	34000214 	cbz	w20, 8fc0c <CSerialDevice::InterruptStub(void*)+0x5c>
   8fbd0:	91006016 	add	x22, x0, #0x18
   8fbd4:	52800013 	mov	w19, #0x0                   	// #0
   8fbd8:	f90013f7 	str	x23, [sp, #32]
   8fbdc:	52800037 	mov	w23, #0x1                   	// #1
   8fbe0:	1ad322f5 	lsl	w21, w23, w19
   8fbe4:	6a1402bf 	tst	w21, w20
   8fbe8:	54000080 	b.eq	8fbf8 <CSerialDevice::InterruptStub(void*)+0x48>  // b.none
   8fbec:	f8735ac0 	ldr	x0, [x22, w19, uxtw #3]
   8fbf0:	b4000160 	cbz	x0, 8fc1c <CSerialDevice::InterruptStub(void*)+0x6c>
   8fbf4:	97ffff87 	bl	8fa10 <CSerialDevice::InterruptHandler()>
   8fbf8:	11000673 	add	w19, w19, #0x1
   8fbfc:	6a350294 	bics	w20, w20, w21
   8fc00:	7a451a62 	ccmp	w19, #0x5, #0x2, ne  // ne = any
   8fc04:	54fffee9 	b.ls	8fbe0 <CSerialDevice::InterruptStub(void*)+0x30>  // b.plast
   8fc08:	f94013f7 	ldr	x23, [sp, #32]
   8fc0c:	a9415bf5 	ldp	x21, x22, [sp, #16]
   8fc10:	f94017fe 	ldr	x30, [sp, #40]
   8fc14:	a8c353f3 	ldp	x19, x20, [sp], #48
   8fc18:	d65f03c0 	ret
   8fc1c:	b0000061 	adrp	x1, 9c000 <vtable for CSerialDevice>
   8fc20:	91010021 	add	x1, x1, #0x40
   8fc24:	91060020 	add	x0, x1, #0x180
   8fc28:	52805a22 	mov	w2, #0x2d1                 	// #721
   8fc2c:	97ffe5d1 	bl	89370 <assertion_failed>

000000000008fc30 <CString::CString()>:
   8fc30:	b0000061 	adrp	x1, 9c000 <vtable for CSerialDevice>
   8fc34:	91078022 	add	x2, x1, #0x1e0
   8fc38:	b900101f 	str	wzr, [x0, #16]
   8fc3c:	a9007c02 	stp	x2, xzr, [x0]
   8fc40:	d65f03c0 	ret
   8fc44:	d503201f 	nop
   8fc48:	d503201f 	nop
   8fc4c:	d503201f 	nop

000000000008fc50 <CString::CString(char const*)>:
   8fc50:	a9be7bf3 	stp	x19, x30, [sp, #-32]!
   8fc54:	b0000062 	adrp	x2, 9c000 <vtable for CSerialDevice>
   8fc58:	91078043 	add	x3, x2, #0x1e0
   8fc5c:	aa0003f3 	mov	x19, x0
   8fc60:	aa0103e0 	mov	x0, x1
   8fc64:	f9000263 	str	x3, [x19]
   8fc68:	f9000fe1 	str	x1, [sp, #24]
   8fc6c:	94000f6b 	bl	93a18 <strlen>
   8fc70:	11000401 	add	w1, w0, #0x1
   8fc74:	2a0103e0 	mov	w0, w1
   8fc78:	b9001261 	str	w1, [x19, #16]
   8fc7c:	94001375 	bl	94a50 <operator new[](unsigned long)>
   8fc80:	f9000660 	str	x0, [x19, #8]
   8fc84:	f9400fe1 	ldr	x1, [sp, #24]
   8fc88:	a8c27bf3 	ldp	x19, x30, [sp], #32
   8fc8c:	14001052 	b	93dd4 <strcpy>

000000000008fc90 <CString::CString(CString const&)>:
   8fc90:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   8fc94:	aa0003f4 	mov	x20, x0
   8fc98:	b0000073 	adrp	x19, 9c000 <vtable for CSerialDevice>
   8fc9c:	9107c273 	add	x19, x19, #0x1f0
   8fca0:	a9017bf5 	stp	x21, x30, [sp, #16]
   8fca4:	aa0103f5 	mov	x21, x1
   8fca8:	b0000062 	adrp	x2, 9c000 <vtable for CSerialDevice>
   8fcac:	91078041 	add	x1, x2, #0x1e0
   8fcb0:	f94006a0 	ldr	x0, [x21, #8]
   8fcb4:	f9000281 	str	x1, [x20]
   8fcb8:	f100001f 	cmp	x0, #0x0
   8fcbc:	9a800260 	csel	x0, x19, x0, eq  // eq = none
   8fcc0:	94000f56 	bl	93a18 <strlen>
   8fcc4:	11000403 	add	w3, w0, #0x1
   8fcc8:	2a0303e0 	mov	w0, w3
   8fccc:	b9001283 	str	w3, [x20, #16]
   8fcd0:	94001360 	bl	94a50 <operator new[](unsigned long)>
   8fcd4:	f9000680 	str	x0, [x20, #8]
   8fcd8:	f94006a4 	ldr	x4, [x21, #8]
   8fcdc:	a9417bf5 	ldp	x21, x30, [sp, #16]
   8fce0:	f100009f 	cmp	x4, #0x0
   8fce4:	9a840261 	csel	x1, x19, x4, eq  // eq = none
   8fce8:	a8c253f3 	ldp	x19, x20, [sp], #32
   8fcec:	1400103a 	b	93dd4 <strcpy>

000000000008fcf0 <CString::CString(CString&&)>:
   8fcf0:	b9401023 	ldr	w3, [x1, #16]
   8fcf4:	b0000062 	adrp	x2, 9c000 <vtable for CSerialDevice>
   8fcf8:	91078045 	add	x5, x2, #0x1e0
   8fcfc:	f9400424 	ldr	x4, [x1, #8]
   8fd00:	b9001003 	str	w3, [x0, #16]
   8fd04:	a9001005 	stp	x5, x4, [x0]
   8fd08:	f900043f 	str	xzr, [x1, #8]
   8fd0c:	b900103f 	str	wzr, [x1, #16]
   8fd10:	d65f03c0 	ret
   8fd14:	d503201f 	nop
   8fd18:	d503201f 	nop
   8fd1c:	d503201f 	nop

000000000008fd20 <CString::~CString()>:
   8fd20:	b0000061 	adrp	x1, 9c000 <vtable for CSerialDevice>
   8fd24:	91078023 	add	x3, x1, #0x1e0
   8fd28:	f9400402 	ldr	x2, [x0, #8]
   8fd2c:	f9000003 	str	x3, [x0]
   8fd30:	b4000062 	cbz	x2, 8fd3c <CString::~CString()+0x1c>
   8fd34:	aa0203e0 	mov	x0, x2
   8fd38:	14001356 	b	94a90 <operator delete[](void*)>
   8fd3c:	d65f03c0 	ret

000000000008fd40 <CString::~CString()>:
   8fd40:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   8fd44:	b0000061 	adrp	x1, 9c000 <vtable for CSerialDevice>
   8fd48:	91078022 	add	x2, x1, #0x1e0
   8fd4c:	aa0003f3 	mov	x19, x0
   8fd50:	f9400400 	ldr	x0, [x0, #8]
   8fd54:	f9000262 	str	x2, [x19]
   8fd58:	b4000040 	cbz	x0, 8fd60 <CString::~CString()+0x20>
   8fd5c:	9400134d 	bl	94a90 <operator delete[](void*)>
   8fd60:	aa1303e0 	mov	x0, x19
   8fd64:	d2800401 	mov	x1, #0x20                  	// #32
   8fd68:	a8c17bf3 	ldp	x19, x30, [sp], #16
   8fd6c:	14001355 	b	94ac0 <operator delete(void*, unsigned long)>

000000000008fd70 <CString::operator char const*() const>:
   8fd70:	f9400401 	ldr	x1, [x0, #8]
   8fd74:	b0000060 	adrp	x0, 9c000 <vtable for CSerialDevice>
   8fd78:	9107c002 	add	x2, x0, #0x1f0
   8fd7c:	f100003f 	cmp	x1, #0x0
   8fd80:	9a810040 	csel	x0, x2, x1, eq  // eq = none
   8fd84:	d65f03c0 	ret
   8fd88:	d503201f 	nop
   8fd8c:	d503201f 	nop

000000000008fd90 <CString::operator=(char const*)>:
   8fd90:	a9be7bf3 	stp	x19, x30, [sp, #-32]!
   8fd94:	aa0003f3 	mov	x19, x0
   8fd98:	f9400400 	ldr	x0, [x0, #8]
   8fd9c:	b4000080 	cbz	x0, 8fdac <CString::operator=(char const*)+0x1c>
   8fda0:	f9000fe1 	str	x1, [sp, #24]
   8fda4:	9400133b 	bl	94a90 <operator delete[](void*)>
   8fda8:	f9400fe1 	ldr	x1, [sp, #24]
   8fdac:	aa0103e0 	mov	x0, x1
   8fdb0:	f9000fe1 	str	x1, [sp, #24]
   8fdb4:	94000f19 	bl	93a18 <strlen>
   8fdb8:	11000402 	add	w2, w0, #0x1
   8fdbc:	2a0203e0 	mov	w0, w2
   8fdc0:	b9001262 	str	w2, [x19, #16]
   8fdc4:	94001323 	bl	94a50 <operator new[](unsigned long)>
   8fdc8:	f9000660 	str	x0, [x19, #8]
   8fdcc:	f9400fe1 	ldr	x1, [sp, #24]
   8fdd0:	94001001 	bl	93dd4 <strcpy>
   8fdd4:	f9400660 	ldr	x0, [x19, #8]
   8fdd8:	a8c27bf3 	ldp	x19, x30, [sp], #32
   8fddc:	d65f03c0 	ret

000000000008fde0 <CString::operator=(CString const&)>:
   8fde0:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   8fde4:	aa0003f3 	mov	x19, x0
   8fde8:	a9017bf5 	stp	x21, x30, [sp, #16]
   8fdec:	aa0103f5 	mov	x21, x1
   8fdf0:	f9400400 	ldr	x0, [x0, #8]
   8fdf4:	b4000040 	cbz	x0, 8fdfc <CString::operator=(CString const&)+0x1c>
   8fdf8:	94001326 	bl	94a90 <operator delete[](void*)>
   8fdfc:	f94006a0 	ldr	x0, [x21, #8]
   8fe00:	b0000074 	adrp	x20, 9c000 <vtable for CSerialDevice>
   8fe04:	9107c294 	add	x20, x20, #0x1f0
   8fe08:	f100001f 	cmp	x0, #0x0
   8fe0c:	9a800280 	csel	x0, x20, x0, eq  // eq = none
   8fe10:	94000f02 	bl	93a18 <strlen>
   8fe14:	11000401 	add	w1, w0, #0x1
   8fe18:	2a0103e0 	mov	w0, w1
   8fe1c:	b9001261 	str	w1, [x19, #16]
   8fe20:	9400130c 	bl	94a50 <operator new[](unsigned long)>
   8fe24:	f9000660 	str	x0, [x19, #8]
   8fe28:	f94006a2 	ldr	x2, [x21, #8]
   8fe2c:	f100005f 	cmp	x2, #0x0
   8fe30:	9a820281 	csel	x1, x20, x2, eq  // eq = none
   8fe34:	94000fe8 	bl	93dd4 <strcpy>
   8fe38:	aa1303e0 	mov	x0, x19
   8fe3c:	a9417bf5 	ldp	x21, x30, [sp, #16]
   8fe40:	a8c253f3 	ldp	x19, x20, [sp], #32
   8fe44:	d65f03c0 	ret
   8fe48:	d503201f 	nop
   8fe4c:	d503201f 	nop

000000000008fe50 <CString::operator=(CString&&)>:
   8fe50:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   8fe54:	aa0003f4 	mov	x20, x0
   8fe58:	aa0103f3 	mov	x19, x1
   8fe5c:	f9400400 	ldr	x0, [x0, #8]
   8fe60:	f9000bfe 	str	x30, [sp, #16]
   8fe64:	b4000040 	cbz	x0, 8fe6c <CString::operator=(CString&&)+0x1c>
   8fe68:	9400130a 	bl	94a90 <operator delete[](void*)>
   8fe6c:	b9401261 	ldr	w1, [x19, #16]
   8fe70:	aa1403e0 	mov	x0, x20
   8fe74:	f9400662 	ldr	x2, [x19, #8]
   8fe78:	f9400bfe 	ldr	x30, [sp, #16]
   8fe7c:	b9001281 	str	w1, [x20, #16]
   8fe80:	f9000682 	str	x2, [x20, #8]
   8fe84:	f900067f 	str	xzr, [x19, #8]
   8fe88:	b900127f 	str	wzr, [x19, #16]
   8fe8c:	a8c253f3 	ldp	x19, x20, [sp], #32
   8fe90:	d65f03c0 	ret
   8fe94:	d503201f 	nop
   8fe98:	d503201f 	nop
   8fe9c:	d503201f 	nop

000000000008fea0 <CString::GetLength() const>:
   8fea0:	f9400400 	ldr	x0, [x0, #8]
   8fea4:	b4000040 	cbz	x0, 8feac <CString::GetLength() const+0xc>
   8fea8:	14000edc 	b	93a18 <strlen>
   8feac:	d2800000 	mov	x0, #0x0                   	// #0
   8feb0:	d65f03c0 	ret
   8feb4:	d503201f 	nop
   8feb8:	d503201f 	nop
   8febc:	d503201f 	nop

000000000008fec0 <CString::Append(char const*)>:
   8fec0:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   8fec4:	52800022 	mov	w2, #0x1                   	// #1
   8fec8:	aa0003f3 	mov	x19, x0
   8fecc:	a9017bf5 	stp	x21, x30, [sp, #16]
   8fed0:	aa0103f5 	mov	x21, x1
   8fed4:	f9400400 	ldr	x0, [x0, #8]
   8fed8:	b9001262 	str	w2, [x19, #16]
   8fedc:	b40000a0 	cbz	x0, 8fef0 <CString::Append(char const*)+0x30>
   8fee0:	94000ece 	bl	93a18 <strlen>
   8fee4:	b9401261 	ldr	w1, [x19, #16]
   8fee8:	0b000020 	add	w0, w1, w0
   8feec:	b9001260 	str	w0, [x19, #16]
   8fef0:	aa1503e0 	mov	x0, x21
   8fef4:	94000ec9 	bl	93a18 <strlen>
   8fef8:	b9401263 	ldr	w3, [x19, #16]
   8fefc:	0b000064 	add	w4, w3, w0
   8ff00:	2a0403e0 	mov	w0, w4
   8ff04:	b9001264 	str	w4, [x19, #16]
   8ff08:	940012d2 	bl	94a50 <operator new[](unsigned long)>
   8ff0c:	f9400661 	ldr	x1, [x19, #8]
   8ff10:	aa0003f4 	mov	x20, x0
   8ff14:	b4000181 	cbz	x1, 8ff44 <CString::Append(char const*)+0x84>
   8ff18:	94000faf 	bl	93dd4 <strcpy>
   8ff1c:	f9400660 	ldr	x0, [x19, #8]
   8ff20:	b4000040 	cbz	x0, 8ff28 <CString::Append(char const*)+0x68>
   8ff24:	940012db 	bl	94a90 <operator delete[](void*)>
   8ff28:	aa1503e1 	mov	x1, x21
   8ff2c:	aa1403e0 	mov	x0, x20
   8ff30:	94001002 	bl	93f38 <strcat>
   8ff34:	a9417bf5 	ldp	x21, x30, [sp, #16]
   8ff38:	f9000674 	str	x20, [x19, #8]
   8ff3c:	a8c253f3 	ldp	x19, x20, [sp], #32
   8ff40:	d65f03c0 	ret
   8ff44:	aa1503e1 	mov	x1, x21
   8ff48:	3900001f 	strb	wzr, [x0]
   8ff4c:	aa1403e0 	mov	x0, x20
   8ff50:	94000ffa 	bl	93f38 <strcat>
   8ff54:	a9417bf5 	ldp	x21, x30, [sp, #16]
   8ff58:	f9000674 	str	x20, [x19, #8]
   8ff5c:	a8c253f3 	ldp	x19, x20, [sp], #32
   8ff60:	d65f03c0 	ret
   8ff64:	d503201f 	nop
   8ff68:	d503201f 	nop
   8ff6c:	d503201f 	nop

000000000008ff70 <CString::Compare(char const*) const>:
   8ff70:	f9400400 	ldr	x0, [x0, #8]
   8ff74:	14000eb3 	b	93a40 <strcmp>
   8ff78:	d503201f 	nop
   8ff7c:	d503201f 	nop

000000000008ff80 <CString::Find(char) const>:
   8ff80:	f9400402 	ldr	x2, [x0, #8]
   8ff84:	13001c21 	sxtb	w1, w1
   8ff88:	39c00040 	ldrsb	w0, [x2]
   8ff8c:	34000160 	cbz	w0, 8ffb8 <CString::Find(char) const+0x38>
   8ff90:	6b00003f 	cmp	w1, w0
   8ff94:	54000160 	b.eq	8ffc0 <CString::Find(char) const+0x40>  // b.none
   8ff98:	52800024 	mov	w4, #0x1                   	// #1
   8ff9c:	4b020085 	sub	w5, w4, w2
   8ffa0:	14000003 	b	8ffac <CString::Find(char) const+0x2c>
   8ffa4:	6b01007f 	cmp	w3, w1
   8ffa8:	540000a0 	b.eq	8ffbc <CString::Find(char) const+0x3c>  // b.none
   8ffac:	0b0200a0 	add	w0, w5, w2
   8ffb0:	38c01c43 	ldrsb	w3, [x2, #1]!
   8ffb4:	35ffff83 	cbnz	w3, 8ffa4 <CString::Find(char) const+0x24>
   8ffb8:	12800000 	mov	w0, #0xffffffff            	// #-1
   8ffbc:	d65f03c0 	ret
   8ffc0:	52800000 	mov	w0, #0x0                   	// #0
   8ffc4:	d65f03c0 	ret
   8ffc8:	d503201f 	nop
   8ffcc:	d503201f 	nop

000000000008ffd0 <CString::Replace(char const*, char const*)>:
   8ffd0:	a9b953f3 	stp	x19, x20, [sp, #-112]!
   8ffd4:	a90263f7 	stp	x23, x24, [sp, #32]
   8ffd8:	52800017 	mov	w23, #0x0                   	// #0
   8ffdc:	f90023fe 	str	x30, [sp, #64]
   8ffe0:	39c00023 	ldrsb	w3, [x1]
   8ffe4:	350000c3 	cbnz	w3, 8fffc <CString::Replace(char const*, char const*)+0x2c>
   8ffe8:	2a1703e0 	mov	w0, w23
   8ffec:	a94263f7 	ldp	x23, x24, [sp, #32]
   8fff0:	f94023fe 	ldr	x30, [sp, #64]
   8fff4:	a8c753f3 	ldp	x19, x20, [sp], #112
   8fff8:	d65f03c0 	ret
   8fffc:	a9015bf5 	stp	x21, x22, [sp, #16]
   90000:	aa0003f5 	mov	x21, x0
   90004:	aa0103f6 	mov	x22, x1
   90008:	910143e0 	add	x0, sp, #0x50
   9000c:	aa0203f8 	mov	x24, x2
   90010:	f94006a1 	ldr	x1, [x21, #8]
   90014:	a9036bf9 	stp	x25, x26, [sp, #48]
   90018:	97ffff0e 	bl	8fc50 <CString::CString(char const*)>
   9001c:	f94006a0 	ldr	x0, [x21, #8]
   90020:	b4000040 	cbz	x0, 90028 <CString::Replace(char const*, char const*)+0x58>
   90024:	9400129b 	bl	94a90 <operator delete[](void*)>
   90028:	52800801 	mov	w1, #0x40                  	// #64
   9002c:	d2800800 	mov	x0, #0x40                  	// #64
   90030:	52800017 	mov	w23, #0x0                   	// #0
   90034:	b90012a1 	str	w1, [x21, #16]
   90038:	94001286 	bl	94a50 <operator new[](unsigned long)>
   9003c:	f9402ff3 	ldr	x19, [sp, #88]
   90040:	f90006a0 	str	x0, [x21, #8]
   90044:	f9000ea0 	str	x0, [x21, #24]
   90048:	39c002c1 	ldrsb	w1, [x22]
   9004c:	aa1303e0 	mov	x0, x19
   90050:	94000fc6 	bl	93f68 <strchr>
   90054:	aa0003f4 	mov	x20, x0
   90058:	b4000360 	cbz	x0, 900c4 <CString::Replace(char const*, char const*)+0xf4>
   9005c:	eb00027f 	cmp	x19, x0
   90060:	54000563 	b.cc	9010c <CString::Replace(char const*, char const*)+0x13c>  // b.lo, b.ul, b.last
   90064:	39c006de 	ldrsb	w30, [x22, #1]
   90068:	910006c0 	add	x0, x22, #0x1
   9006c:	91000683 	add	x3, x20, #0x1
   90070:	3400017e 	cbz	w30, 9009c <CString::Replace(char const*, char const*)+0xcc>
   90074:	39c00681 	ldrsb	w1, [x20, #1]
   90078:	6b1e003f 	cmp	w1, w30
   9007c:	540000a0 	b.eq	90090 <CString::Replace(char const*, char const*)+0xc0>  // b.none
   90080:	14000046 	b	90198 <CString::Replace(char const*, char const*)+0x1c8>
   90084:	39c00062 	ldrsb	w2, [x3]
   90088:	6b14005f 	cmp	w2, w20
   9008c:	54000861 	b.ne	90198 <CString::Replace(char const*, char const*)+0x1c8>  // b.any
   90090:	38c01c14 	ldrsb	w20, [x0, #1]!
   90094:	91000463 	add	x3, x3, #0x1
   90098:	35ffff74 	cbnz	w20, 90084 <CString::Replace(char const*, char const*)+0xb4>
   9009c:	aa1803e1 	mov	x1, x24
   900a0:	aa1503e0 	mov	x0, x21
   900a4:	aa0303f3 	mov	x19, x3
   900a8:	110006f7 	add	w23, w23, #0x1
   900ac:	94000799 	bl	91f10 <CString::PutString(char const*)>
   900b0:	39c002c1 	ldrsb	w1, [x22]
   900b4:	aa1303e0 	mov	x0, x19
   900b8:	94000fac 	bl	93f68 <strchr>
   900bc:	aa0003f4 	mov	x20, x0
   900c0:	b5fffce0 	cbnz	x0, 9005c <CString::Replace(char const*, char const*)+0x8c>
   900c4:	aa1503e0 	mov	x0, x21
   900c8:	aa1303e1 	mov	x1, x19
   900cc:	94000791 	bl	91f10 <CString::PutString(char const*)>
   900d0:	f9400ea4 	ldr	x4, [x21, #24]
   900d4:	90000060 	adrp	x0, 9c000 <vtable for CSerialDevice>
   900d8:	91078002 	add	x2, x0, #0x1e0
   900dc:	3900009f 	strb	wzr, [x4]
   900e0:	f9002be2 	str	x2, [sp, #80]
   900e4:	f9402fe0 	ldr	x0, [sp, #88]
   900e8:	b40006a0 	cbz	x0, 901bc <CString::Replace(char const*, char const*)+0x1ec>
   900ec:	94001269 	bl	94a90 <operator delete[](void*)>
   900f0:	2a1703e0 	mov	w0, w23
   900f4:	a9415bf5 	ldp	x21, x22, [sp, #16]
   900f8:	a94263f7 	ldp	x23, x24, [sp, #32]
   900fc:	a9436bf9 	ldp	x25, x26, [sp, #48]
   90100:	f94023fe 	ldr	x30, [sp, #64]
   90104:	a8c753f3 	ldp	x19, x20, [sp], #112
   90108:	d65f03c0 	ret
   9010c:	cb130005 	sub	x5, x0, x19
   90110:	f24004a6 	ands	x6, x5, #0x3
   90114:	54000620 	b.eq	901d8 <CString::Replace(char const*, char const*)+0x208>  // b.none
   90118:	f10004df 	cmp	x6, #0x1
   9011c:	54000260 	b.eq	90168 <CString::Replace(char const*, char const*)+0x198>  // b.none
   90120:	f10008df 	cmp	x6, #0x2
   90124:	54000120 	b.eq	90148 <CString::Replace(char const*, char const*)+0x178>  // b.none
   90128:	d2800021 	mov	x1, #0x1                   	// #1
   9012c:	aa1503e0 	mov	x0, x21
   90130:	38c01679 	ldrsb	w25, [x19], #1
   90134:	940008cf 	bl	92470 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   90138:	f9400ea7 	ldr	x7, [x21, #24]
   9013c:	910004e8 	add	x8, x7, #0x1
   90140:	f9000ea8 	str	x8, [x21, #24]
   90144:	390000f9 	strb	w25, [x7]
   90148:	d2800021 	mov	x1, #0x1                   	// #1
   9014c:	aa1503e0 	mov	x0, x21
   90150:	38c0167a 	ldrsb	w26, [x19], #1
   90154:	940008c7 	bl	92470 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   90158:	f9400ea9 	ldr	x9, [x21, #24]
   9015c:	9100052a 	add	x10, x9, #0x1
   90160:	f9000eaa 	str	x10, [x21, #24]
   90164:	3900013a 	strb	w26, [x9]
   90168:	38c01679 	ldrsb	w25, [x19], #1
   9016c:	d2800021 	mov	x1, #0x1                   	// #1
   90170:	aa1503e0 	mov	x0, x21
   90174:	940008bf 	bl	92470 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   90178:	f9400eab 	ldr	x11, [x21, #24]
   9017c:	eb13029f 	cmp	x20, x19
   90180:	9100056c 	add	x12, x11, #0x1
   90184:	f9000eac 	str	x12, [x21, #24]
   90188:	39000179 	strb	w25, [x11]
   9018c:	54000261 	b.ne	901d8 <CString::Replace(char const*, char const*)+0x208>  // b.any
   90190:	aa1403f3 	mov	x19, x20
   90194:	17ffffb4 	b	90064 <CString::Replace(char const*, char const*)+0x94>
   90198:	d2800021 	mov	x1, #0x1                   	// #1
   9019c:	aa1503e0 	mov	x0, x21
   901a0:	38c01679 	ldrsb	w25, [x19], #1
   901a4:	940008b3 	bl	92470 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   901a8:	f9400ea4 	ldr	x4, [x21, #24]
   901ac:	91000485 	add	x5, x4, #0x1
   901b0:	f9000ea5 	str	x5, [x21, #24]
   901b4:	39000099 	strb	w25, [x4]
   901b8:	17ffffa4 	b	90048 <CString::Replace(char const*, char const*)+0x78>
   901bc:	2a1703e0 	mov	w0, w23
   901c0:	a9415bf5 	ldp	x21, x22, [sp, #16]
   901c4:	a94263f7 	ldp	x23, x24, [sp, #32]
   901c8:	a9436bf9 	ldp	x25, x26, [sp, #48]
   901cc:	f94023fe 	ldr	x30, [sp, #64]
   901d0:	a8c753f3 	ldp	x19, x20, [sp], #112
   901d4:	d65f03c0 	ret
   901d8:	aa1303f9 	mov	x25, x19
   901dc:	d2800021 	mov	x1, #0x1                   	// #1
   901e0:	aa1503e0 	mov	x0, x21
   901e4:	38c0173a 	ldrsb	w26, [x25], #1
   901e8:	91001273 	add	x19, x19, #0x4
   901ec:	940008a1 	bl	92470 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   901f0:	f9400ead 	ldr	x13, [x21, #24]
   901f4:	d2800021 	mov	x1, #0x1                   	// #1
   901f8:	aa1503e0 	mov	x0, x21
   901fc:	8b0101ae 	add	x14, x13, x1
   90200:	f9000eae 	str	x14, [x21, #24]
   90204:	390001ba 	strb	w26, [x13]
   90208:	39c00339 	ldrsb	w25, [x25]
   9020c:	94000899 	bl	92470 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   90210:	f9400eaf 	ldr	x15, [x21, #24]
   90214:	d2800021 	mov	x1, #0x1                   	// #1
   90218:	aa1503e0 	mov	x0, x21
   9021c:	8b0101f0 	add	x16, x15, x1
   90220:	f9000eb0 	str	x16, [x21, #24]
   90224:	390001f9 	strb	w25, [x15]
   90228:	38dfe27a 	ldursb	w26, [x19, #-2]
   9022c:	94000891 	bl	92470 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   90230:	f9400eb1 	ldr	x17, [x21, #24]
   90234:	d2800021 	mov	x1, #0x1                   	// #1
   90238:	aa1503e0 	mov	x0, x21
   9023c:	8b010232 	add	x18, x17, x1
   90240:	f9000eb2 	str	x18, [x21, #24]
   90244:	3900023a 	strb	w26, [x17]
   90248:	38dff279 	ldursb	w25, [x19, #-1]
   9024c:	17ffffca 	b	90174 <CString::Replace(char const*, char const*)+0x1a4>

0000000000090250 <CString::Format(char const*, ...)>:
   90250:	d10403ff 	sub	sp, sp, #0x100
   90254:	128005e9 	mov	w9, #0xffffffd0            	// #-48
   90258:	910403e8 	add	x8, sp, #0x100
   9025c:	910403eb 	add	x11, sp, #0x100
   90260:	a90e17e4 	stp	x4, x5, [sp, #224]
   90264:	910343ea 	add	x10, sp, #0xd0
   90268:	a9032fe8 	stp	x8, x11, [sp, #48]
   9026c:	a94317e4 	ldp	x4, x5, [sp, #48]
   90270:	a90d0fe2 	stp	x2, x3, [sp, #208]
   90274:	12800fe3 	mov	w3, #0xffffff80            	// #-128
   90278:	910043e2 	add	x2, sp, #0x10
   9027c:	a90117e4 	stp	x4, x5, [sp, #16]
   90280:	f90023ea 	str	x10, [sp, #64]
   90284:	b9004be9 	str	w9, [sp, #72]
   90288:	b9004fe3 	str	w3, [sp, #76]
   9028c:	a90f1fe6 	stp	x6, x7, [sp, #240]
   90290:	a9441be5 	ldp	x5, x6, [sp, #64]
   90294:	f90003fe 	str	x30, [sp]
   90298:	3d8017e0 	str	q0, [sp, #80]
   9029c:	a9021be5 	stp	x5, x6, [sp, #32]
   902a0:	3d801be1 	str	q1, [sp, #96]
   902a4:	3d801fe2 	str	q2, [sp, #112]
   902a8:	3d8023e3 	str	q3, [sp, #128]
   902ac:	3d8027e4 	str	q4, [sp, #144]
   902b0:	3d802be5 	str	q5, [sp, #160]
   902b4:	3d802fe6 	str	q6, [sp, #176]
   902b8:	3d8033e7 	str	q7, [sp, #192]
   902bc:	94000005 	bl	902d0 <CString::FormatV(char const*, std::__va_list)>
   902c0:	f94003fe 	ldr	x30, [sp]
   902c4:	910403ff 	add	sp, sp, #0x100
   902c8:	d65f03c0 	ret
   902cc:	d503201f 	nop

00000000000902d0 <CString::FormatV(char const*, std::__va_list)>:
   902d0:	a9b453f3 	stp	x19, x20, [sp, #-192]!
   902d4:	a9015bf5 	stp	x21, x22, [sp, #16]
   902d8:	b9401855 	ldr	w21, [x2, #24]
   902dc:	a90263f7 	stp	x23, x24, [sp, #32]
   902e0:	aa0203f7 	mov	x23, x2
   902e4:	a9036bf9 	stp	x25, x26, [sp, #48]
   902e8:	aa0103fa 	mov	x26, x1
   902ec:	a9400454 	ldp	x20, x1, [x2]
   902f0:	a90473fb 	stp	x27, x28, [sp, #64]
   902f4:	aa0003fb 	mov	x27, x0
   902f8:	b9401c42 	ldr	w2, [x2, #28]
   902fc:	f90037e1 	str	x1, [sp, #104]
   90300:	f9400400 	ldr	x0, [x0, #8]
   90304:	f9002bfe 	str	x30, [sp, #80]
   90308:	b90083e2 	str	w2, [sp, #128]
   9030c:	b4000040 	cbz	x0, 90314 <CString::FormatV(char const*, std::__va_list)+0x44>
   90310:	940011e0 	bl	94a90 <operator delete[](void*)>
   90314:	52800803 	mov	w3, #0x40                  	// #64
   90318:	d2800800 	mov	x0, #0x40                  	// #64
   9031c:	b202e7f6 	mov	x22, #0xcccccccccccccccc    	// #-3689348814741910324
   90320:	b9001363 	str	w3, [x27, #16]
   90324:	f29999b6 	movk	x22, #0xcccd
   90328:	940011ca 	bl	94a50 <operator new[](unsigned long)>
   9032c:	90000078 	adrp	x24, 9c000 <vtable for CSerialDevice>
   90330:	9107c304 	add	x4, x24, #0x1f0
   90334:	f9000760 	str	x0, [x27, #8]
   90338:	f9000f60 	str	x0, [x27, #24]
   9033c:	91004080 	add	x0, x4, #0x10
   90340:	f9003be4 	str	x4, [sp, #112]
   90344:	f9003fe0 	str	x0, [sp, #120]
   90348:	39c00353 	ldrsb	w19, [x26]
   9034c:	34000e53 	cbz	w19, 90514 <CString::FormatV(char const*, std::__va_list)+0x244>
   90350:	7100967f 	cmp	w19, #0x25
   90354:	9100075c 	add	x28, x26, #0x1
   90358:	540023c1 	b.ne	907d0 <CString::FormatV(char const*, std::__va_list)+0x500>  // b.any
   9035c:	39c00749 	ldrsb	w9, [x26, #1]
   90360:	7100953f 	cmp	w9, #0x25
   90364:	54002480 	b.eq	907f4 <CString::FormatV(char const*, std::__va_list)+0x524>  // b.none
   90368:	71008d3f 	cmp	w9, #0x23
   9036c:	52800008 	mov	w8, #0x0                   	// #0
   90370:	54000081 	b.ne	90380 <CString::FormatV(char const*, std::__va_list)+0xb0>  // b.any
   90374:	39c00b49 	ldrsb	w9, [x26, #2]
   90378:	91000b5c 	add	x28, x26, #0x2
   9037c:	52800028 	mov	w8, #0x1                   	// #1
   90380:	7100b53f 	cmp	w9, #0x2d
   90384:	9100079a 	add	x26, x28, #0x1
   90388:	52800018 	mov	w24, #0x0                   	// #0
   9038c:	540000c1 	b.ne	903a4 <CString::FormatV(char const*, std::__va_list)+0xd4>  // b.any
   90390:	91000b87 	add	x7, x28, #0x2
   90394:	39c00789 	ldrsb	w9, [x28, #1]
   90398:	52800038 	mov	w24, #0x1                   	// #1
   9039c:	aa1a03fc 	mov	x28, x26
   903a0:	aa0703fa 	mov	x26, x7
   903a4:	7100c13f 	cmp	w9, #0x30
   903a8:	52800019 	mov	w25, #0x0                   	// #0
   903ac:	540000a1 	b.ne	903c0 <CString::FormatV(char const*, std::__va_list)+0xf0>  // b.any
   903b0:	39c00789 	ldrsb	w9, [x28, #1]
   903b4:	52800039 	mov	w25, #0x1                   	// #1
   903b8:	aa1a03fc 	mov	x28, x26
   903bc:	9100075a 	add	x26, x26, #0x1
   903c0:	5100c12d 	sub	w13, w9, #0x30
   903c4:	12001daa 	and	w10, w13, #0xff
   903c8:	7100255f 	cmp	w10, #0x9
   903cc:	54004f08 	b.hi	90dac <CString::FormatV(char const*, std::__va_list)+0xadc>  // b.pmore
   903d0:	d2800013 	mov	x19, #0x0                   	// #0
   903d4:	14000002 	b	903dc <CString::FormatV(char const*, std::__va_list)+0x10c>
   903d8:	aa0503fc 	mov	x28, x5
   903dc:	39c00789 	ldrsb	w9, [x28, #1]
   903e0:	93407dab 	sxtw	x11, w13
   903e4:	8b130a6c 	add	x12, x19, x19, lsl #2
   903e8:	91000785 	add	x5, x28, #0x1
   903ec:	8b0c0573 	add	x19, x11, x12, lsl #1
   903f0:	5100c12d 	sub	w13, w9, #0x30
   903f4:	12001dae 	and	w14, w13, #0xff
   903f8:	710025df 	cmp	w14, #0x9
   903fc:	54fffee9 	b.ls	903d8 <CString::FormatV(char const*, std::__va_list)+0x108>  // b.plast
   90400:	91000b9a 	add	x26, x28, #0x2
   90404:	7100b93f 	cmp	w9, #0x2e
   90408:	540034a0 	b.eq	90a9c <CString::FormatV(char const*, std::__va_list)+0x7cc>  // b.none
   9040c:	39c000ac 	ldrsb	w12, [x5]
   90410:	528000c1 	mov	w1, #0x6                   	// #6
   90414:	7101b19f 	cmp	w12, #0x6c
   90418:	52800007 	mov	w7, #0x0                   	// #0
   9041c:	52800006 	mov	w6, #0x0                   	// #0
   90420:	54002000 	b.eq	90820 <CString::FormatV(char const*, std::__va_list)+0x550>  // b.none
   90424:	7101a59f 	cmp	w12, #0x69
   90428:	540021c0 	b.eq	90860 <CString::FormatV(char const*, std::__va_list)+0x590>  // b.none
   9042c:	54000b8d 	b.le	9059c <CString::FormatV(char const*, std::__va_list)+0x2cc>
   90430:	7101cd9f 	cmp	w12, #0x73
   90434:	540047e0 	b.eq	90d30 <CString::FormatV(char const*, std::__va_list)+0xa60>  // b.none
   90438:	5400196c 	b.gt	90764 <CString::FormatV(char const*, std::__va_list)+0x494>
   9043c:	7101bd9f 	cmp	w12, #0x6f
   90440:	540007c1 	b.ne	90538 <CString::FormatV(char const*, std::__va_list)+0x268>  // b.any
   90444:	d280011c 	mov	x28, #0x8                   	// #8
   90448:	350065e8 	cbnz	w8, 91104 <CString::FormatV(char const*, std::__va_list)+0xe34>
   9044c:	d503201f 	nop
   90450:	34000987 	cbz	w7, 90580 <CString::FormatV(char const*, std::__va_list)+0x2b0>
   90454:	37f845f5 	tbnz	w21, #31, 90d10 <CString::FormatV(char const*, std::__va_list)+0xa40>
   90458:	91003e8a 	add	x10, x20, #0xf
   9045c:	aa1403eb 	mov	x11, x20
   90460:	927df154 	and	x20, x10, #0xfffffffffffffff8
   90464:	f9400168 	ldr	x8, [x11]
   90468:	eb1c011f 	cmp	x8, x28
   9046c:	54009883 	b.cc	9177c <CString::FormatV(char const*, std::__va_list)+0x14ac>  // b.lo, b.ul, b.last
   90470:	d2800021 	mov	x1, #0x1                   	// #1
   90474:	d503201f 	nop
   90478:	9b1c7c21 	mul	x1, x1, x28
   9047c:	9ac10910 	udiv	x16, x8, x1
   90480:	eb1c021f 	cmp	x16, x28
   90484:	aa1003f1 	mov	x17, x16
   90488:	54ffff82 	b.cs	90478 <CString::FormatV(char const*, std::__va_list)+0x1a8>  // b.hs, b.nlast
   9048c:	7101619f 	cmp	w12, #0x58
   90490:	5280040f 	mov	w15, #0x20                  	// #32
   90494:	1a8f03ee 	csel	w14, wzr, w15, eq  // eq = none
   90498:	12001dcd 	and	w13, w14, #0xff
   9049c:	910243e7 	add	x7, sp, #0x90
   904a0:	1100dda6 	add	w6, w13, #0x37
   904a4:	14000004 	b	904b4 <CString::FormatV(char const*, std::__va_list)+0x1e4>
   904a8:	9ac30911 	udiv	x17, x8, x3
   904ac:	aa0303e1 	mov	x1, x3
   904b0:	aa1103f0 	mov	x16, x17
   904b4:	12001e2c 	and	w12, w17, #0xff
   904b8:	f100263f 	cmp	x17, #0x9
   904bc:	9b01a208 	msub	x8, x16, x1, x8
   904c0:	1100c182 	add	w2, w12, #0x30
   904c4:	0b060180 	add	w0, w12, w6
   904c8:	9adc0823 	udiv	x3, x1, x28
   904cc:	13001c49 	sxtb	w9, w2
   904d0:	13001c04 	sxtb	w4, w0
   904d4:	1a898085 	csel	w5, w4, w9, hi  // hi = pmore
   904d8:	eb1c003f 	cmp	x1, x28
   904dc:	380014e5 	strb	w5, [x7], #1
   904e0:	54fffe42 	b.cs	904a8 <CString::FormatV(char const*, std::__va_list)+0x1d8>  // b.hs, b.nlast
   904e4:	910243e0 	add	x0, sp, #0x90
   904e8:	390000ff 	strb	wzr, [x7]
   904ec:	94000d4b 	bl	93a18 <strlen>
   904f0:	aa0003fc 	mov	x28, x0
   904f4:	350034b8 	cbnz	w24, 90b88 <CString::FormatV(char const*, std::__va_list)+0x8b8>
   904f8:	eb13001f 	cmp	x0, x19
   904fc:	540045e3 	b.cc	90db8 <CString::FormatV(char const*, std::__va_list)+0xae8>  // b.lo, b.ul, b.last
   90500:	910243e1 	add	x1, sp, #0x90
   90504:	aa1b03e0 	mov	x0, x27
   90508:	94000682 	bl	91f10 <CString::PutString(char const*)>
   9050c:	39c00353 	ldrsb	w19, [x26]
   90510:	35fff213 	cbnz	w19, 90350 <CString::FormatV(char const*, std::__va_list)+0x80>
   90514:	f9400f74 	ldr	x20, [x27, #24]
   90518:	3900029f 	strb	wzr, [x20]
   9051c:	a9415bf5 	ldp	x21, x22, [sp, #16]
   90520:	a94263f7 	ldp	x23, x24, [sp, #32]
   90524:	a9436bf9 	ldp	x25, x26, [sp, #48]
   90528:	a94473fb 	ldp	x27, x28, [sp, #64]
   9052c:	f9402bfe 	ldr	x30, [sp, #80]
   90530:	a8cc53f3 	ldp	x19, x20, [sp], #192
   90534:	d65f03c0 	ret
   90538:	7101c19f 	cmp	w12, #0x70
   9053c:	540011e1 	b.ne	90778 <CString::FormatV(char const*, std::__va_list)+0x4a8>  // b.any
   90540:	f90033e5 	str	x5, [sp, #96]
   90544:	d280021c 	mov	x28, #0x10                  	// #16
   90548:	34fff848 	cbz	w8, 90450 <CString::FormatV(char const*, std::__va_list)+0x180>
   9054c:	f9403bef 	ldr	x15, [sp, #112]
   90550:	7101619f 	cmp	w12, #0x58
   90554:	aa1b03e0 	mov	x0, x27
   90558:	29109fe6 	stp	w6, w7, [sp, #132]
   9055c:	f9403fed 	ldr	x13, [sp, #120]
   90560:	910021ee 	add	x14, x15, #0x8
   90564:	9a8d11c1 	csel	x1, x14, x13, ne  // ne = any
   90568:	9400066a 	bl	91f10 <CString::PutString(char const*)>
   9056c:	f94033e0 	ldr	x0, [sp, #96]
   90570:	29509fe6 	ldp	w6, w7, [sp, #132]
   90574:	39c0000c 	ldrsb	w12, [x0]
   90578:	35fff6e7 	cbnz	w7, 90454 <CString::FormatV(char const*, std::__va_list)+0x184>
   9057c:	d503201f 	nop
   90580:	34002b46 	cbz	w6, 90ae8 <CString::FormatV(char const*, std::__va_list)+0x818>
   90584:	37f88db5 	tbnz	w21, #31, 91738 <CString::FormatV(char const*, std::__va_list)+0x1468>
   90588:	aa1403eb 	mov	x11, x20
   9058c:	91003e8a 	add	x10, x20, #0xf
   90590:	927df154 	and	x20, x10, #0xfffffffffffffff8
   90594:	f9400170 	ldr	x16, [x11]
   90598:	14000159 	b	90afc <CString::FormatV(char const*, std::__va_list)+0x82c>
   9059c:	71018d9f 	cmp	w12, #0x63
   905a0:	54003e60 	b.eq	90d6c <CString::FormatV(char const*, std::__va_list)+0xa9c>  // b.none
   905a4:	5400110d 	b.le	907c4 <CString::FormatV(char const*, std::__va_list)+0x4f4>
   905a8:	7101919f 	cmp	w12, #0x64
   905ac:	540015a0 	b.eq	90860 <CString::FormatV(char const*, std::__va_list)+0x590>  // b.none
   905b0:	7101999f 	cmp	w12, #0x66
   905b4:	54000e21 	b.ne	90778 <CString::FormatV(char const*, std::__va_list)+0x4a8>  // b.any
   905b8:	b94083eb 	ldr	w11, [sp, #128]
   905bc:	37f84c2b 	tbnz	w11, #31, 90f40 <CString::FormatV(char const*, std::__va_list)+0xc70>
   905c0:	91003e8e 	add	x14, x20, #0xf
   905c4:	aa1403fc 	mov	x28, x20
   905c8:	927df1d4 	and	x20, x14, #0xfffffffffffffff8
   905cc:	fd400380 	ldr	d0, [x28]
   905d0:	910243e0 	add	x0, sp, #0x90
   905d4:	940006b7 	bl	920b0 <CString::ftoa(char*, double, unsigned int)>
   905d8:	910243e0 	add	x0, sp, #0x90
   905dc:	94000d0f 	bl	93a18 <strlen>
   905e0:	aa0003f9 	mov	x25, x0
   905e4:	35004cd8 	cbnz	w24, 90f7c <CString::FormatV(char const*, std::__va_list)+0xcac>
   905e8:	eb13001f 	cmp	x0, x19
   905ec:	54fff8a2 	b.cs	90500 <CString::FormatV(char const*, std::__va_list)+0x230>  // b.hs, b.nlast
   905f0:	cb000273 	sub	x19, x19, x0
   905f4:	aa1b03e0 	mov	x0, x27
   905f8:	aa1303e1 	mov	x1, x19
   905fc:	9400079d 	bl	92470 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   90600:	f2400a6d 	ands	x13, x19, #0x7
   90604:	d1000660 	sub	x0, x19, #0x1
   90608:	52800405 	mov	w5, #0x20                  	// #32
   9060c:	54000640 	b.eq	906d4 <CString::FormatV(char const*, std::__va_list)+0x404>  // b.none
   90610:	f10005bf 	cmp	x13, #0x1
   90614:	54000520 	b.eq	906b8 <CString::FormatV(char const*, std::__va_list)+0x3e8>  // b.none
   90618:	f10009bf 	cmp	x13, #0x2
   9061c:	54000440 	b.eq	906a4 <CString::FormatV(char const*, std::__va_list)+0x3d4>  // b.none
   90620:	f1000dbf 	cmp	x13, #0x3
   90624:	54000360 	b.eq	90690 <CString::FormatV(char const*, std::__va_list)+0x3c0>  // b.none
   90628:	f10011bf 	cmp	x13, #0x4
   9062c:	54000280 	b.eq	9067c <CString::FormatV(char const*, std::__va_list)+0x3ac>  // b.none
   90630:	f10015bf 	cmp	x13, #0x5
   90634:	540001a0 	b.eq	90668 <CString::FormatV(char const*, std::__va_list)+0x398>  // b.none
   90638:	f10019bf 	cmp	x13, #0x6
   9063c:	540000c0 	b.eq	90654 <CString::FormatV(char const*, std::__va_list)+0x384>  // b.none
   90640:	f9400f66 	ldr	x6, [x27, #24]
   90644:	d1000400 	sub	x0, x0, #0x1
   90648:	910004c1 	add	x1, x6, #0x1
   9064c:	f9000f61 	str	x1, [x27, #24]
   90650:	390000c5 	strb	w5, [x6]
   90654:	f9400f78 	ldr	x24, [x27, #24]
   90658:	d1000400 	sub	x0, x0, #0x1
   9065c:	91000707 	add	x7, x24, #0x1
   90660:	f9000f67 	str	x7, [x27, #24]
   90664:	39000305 	strb	w5, [x24]
   90668:	f9400f6c 	ldr	x12, [x27, #24]
   9066c:	d1000400 	sub	x0, x0, #0x1
   90670:	91000588 	add	x8, x12, #0x1
   90674:	f9000f68 	str	x8, [x27, #24]
   90678:	39000185 	strb	w5, [x12]
   9067c:	f9400f69 	ldr	x9, [x27, #24]
   90680:	d1000400 	sub	x0, x0, #0x1
   90684:	91000524 	add	x4, x9, #0x1
   90688:	f9000f64 	str	x4, [x27, #24]
   9068c:	39000125 	strb	w5, [x9]
   90690:	f9400f6f 	ldr	x15, [x27, #24]
   90694:	d1000400 	sub	x0, x0, #0x1
   90698:	910005f0 	add	x16, x15, #0x1
   9069c:	f9000f70 	str	x16, [x27, #24]
   906a0:	390001e5 	strb	w5, [x15]
   906a4:	f9400f71 	ldr	x17, [x27, #24]
   906a8:	d1000400 	sub	x0, x0, #0x1
   906ac:	91000632 	add	x18, x17, #0x1
   906b0:	f9000f72 	str	x18, [x27, #24]
   906b4:	39000225 	strb	w5, [x17]
   906b8:	f9400f6b 	ldr	x11, [x27, #24]
   906bc:	d1000400 	sub	x0, x0, #0x1
   906c0:	b100041f 	cmn	x0, #0x1
   906c4:	9100057e 	add	x30, x11, #0x1
   906c8:	f9000f7e 	str	x30, [x27, #24]
   906cc:	39000165 	strb	w5, [x11]
   906d0:	54fff180 	b.eq	90500 <CString::FormatV(char const*, std::__va_list)+0x230>  // b.none
   906d4:	f9400f6a 	ldr	x10, [x27, #24]
   906d8:	d1002000 	sub	x0, x0, #0x8
   906dc:	b100041f 	cmn	x0, #0x1
   906e0:	91000542 	add	x2, x10, #0x1
   906e4:	f9000f62 	str	x2, [x27, #24]
   906e8:	39000145 	strb	w5, [x10]
   906ec:	f9400f7c 	ldr	x28, [x27, #24]
   906f0:	91000783 	add	x3, x28, #0x1
   906f4:	f9000f63 	str	x3, [x27, #24]
   906f8:	39000385 	strb	w5, [x28]
   906fc:	f9400f6e 	ldr	x14, [x27, #24]
   90700:	910005d9 	add	x25, x14, #0x1
   90704:	f9000f79 	str	x25, [x27, #24]
   90708:	390001c5 	strb	w5, [x14]
   9070c:	f9400f73 	ldr	x19, [x27, #24]
   90710:	9100066d 	add	x13, x19, #0x1
   90714:	f9000f6d 	str	x13, [x27, #24]
   90718:	39000265 	strb	w5, [x19]
   9071c:	f9400f66 	ldr	x6, [x27, #24]
   90720:	910004c1 	add	x1, x6, #0x1
   90724:	f9000f61 	str	x1, [x27, #24]
   90728:	390000c5 	strb	w5, [x6]
   9072c:	f9400f78 	ldr	x24, [x27, #24]
   90730:	91000707 	add	x7, x24, #0x1
   90734:	f9000f67 	str	x7, [x27, #24]
   90738:	39000305 	strb	w5, [x24]
   9073c:	f9400f6c 	ldr	x12, [x27, #24]
   90740:	91000588 	add	x8, x12, #0x1
   90744:	f9000f68 	str	x8, [x27, #24]
   90748:	39000185 	strb	w5, [x12]
   9074c:	f9400f69 	ldr	x9, [x27, #24]
   90750:	91000524 	add	x4, x9, #0x1
   90754:	f9000f64 	str	x4, [x27, #24]
   90758:	39000125 	strb	w5, [x9]
   9075c:	54fffbc1 	b.ne	906d4 <CString::FormatV(char const*, std::__va_list)+0x404>  // b.any
   90760:	17ffff68 	b	90500 <CString::FormatV(char const*, std::__va_list)+0x230>
   90764:	7101d59f 	cmp	w12, #0x75
   90768:	d280015c 	mov	x28, #0xa                   	// #10
   9076c:	54ffe720 	b.eq	90450 <CString::FormatV(char const*, std::__va_list)+0x180>  // b.none
   90770:	7101e19f 	cmp	w12, #0x78
   90774:	54ffee60 	b.eq	90540 <CString::FormatV(char const*, std::__va_list)+0x270>  // b.none
   90778:	d2800021 	mov	x1, #0x1                   	// #1
   9077c:	aa1b03e0 	mov	x0, x27
   90780:	f90033e5 	str	x5, [sp, #96]
   90784:	9400073b 	bl	92470 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   90788:	f9400f73 	ldr	x19, [x27, #24]
   9078c:	d2800021 	mov	x1, #0x1                   	// #1
   90790:	528004a8 	mov	w8, #0x25                  	// #37
   90794:	aa1b03e0 	mov	x0, x27
   90798:	f94033f9 	ldr	x25, [sp, #96]
   9079c:	8b010278 	add	x24, x19, x1
   907a0:	f9000f78 	str	x24, [x27, #24]
   907a4:	39000268 	strb	w8, [x19]
   907a8:	39c0033c 	ldrsb	w28, [x25]
   907ac:	94000731 	bl	92470 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   907b0:	f9400f67 	ldr	x7, [x27, #24]
   907b4:	910004e0 	add	x0, x7, #0x1
   907b8:	f9000f60 	str	x0, [x27, #24]
   907bc:	390000fc 	strb	w28, [x7]
   907c0:	17fffee2 	b	90348 <CString::FormatV(char const*, std::__va_list)+0x78>
   907c4:	7101619f 	cmp	w12, #0x58
   907c8:	54ffebc0 	b.eq	90540 <CString::FormatV(char const*, std::__va_list)+0x270>  // b.none
   907cc:	17ffffeb 	b	90778 <CString::FormatV(char const*, std::__va_list)+0x4a8>
   907d0:	d2800021 	mov	x1, #0x1                   	// #1
   907d4:	aa1b03e0 	mov	x0, x27
   907d8:	94000726 	bl	92470 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   907dc:	f9400f65 	ldr	x5, [x27, #24]
   907e0:	aa1c03fa 	mov	x26, x28
   907e4:	910004a6 	add	x6, x5, #0x1
   907e8:	f9000f66 	str	x6, [x27, #24]
   907ec:	390000b3 	strb	w19, [x5]
   907f0:	17fffed6 	b	90348 <CString::FormatV(char const*, std::__va_list)+0x78>
   907f4:	d2800021 	mov	x1, #0x1                   	// #1
   907f8:	aa1b03e0 	mov	x0, x27
   907fc:	b90063e9 	str	w9, [sp, #96]
   90800:	9400071c 	bl	92470 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   90804:	f9400f6b 	ldr	x11, [x27, #24]
   90808:	91000b5a 	add	x26, x26, #0x2
   9080c:	b94063f2 	ldr	w18, [sp, #96]
   90810:	9100056a 	add	x10, x11, #0x1
   90814:	f9000f6a 	str	x10, [x27, #24]
   90818:	39000172 	strb	w18, [x11]
   9081c:	17fffecb 	b	90348 <CString::FormatV(char const*, std::__va_list)+0x78>
   90820:	39c004ac 	ldrsb	w12, [x5, #1]
   90824:	91000744 	add	x4, x26, #0x1
   90828:	52800026 	mov	w6, #0x1                   	// #1
   9082c:	7101b19f 	cmp	w12, #0x6c
   90830:	540000e1 	b.ne	9084c <CString::FormatV(char const*, std::__va_list)+0x57c>  // b.any
   90834:	39c008ac 	ldrsb	w12, [x5, #2]
   90838:	91000b43 	add	x3, x26, #0x2
   9083c:	2a0603e7 	mov	w7, w6
   90840:	aa0403fa 	mov	x26, x4
   90844:	52800006 	mov	w6, #0x0                   	// #0
   90848:	aa0303e4 	mov	x4, x3
   9084c:	7101a59f 	cmp	w12, #0x69
   90850:	aa1a03e5 	mov	x5, x26
   90854:	aa0403fa 	mov	x26, x4
   90858:	54ffdea1 	b.ne	9042c <CString::FormatV(char const*, std::__va_list)+0x15c>  // b.any
   9085c:	d503201f 	nop
   90860:	34003627 	cbz	w7, 90f24 <CString::FormatV(char const*, std::__va_list)+0xc54>
   90864:	37f85a15 	tbnz	w21, #31, 913a4 <CString::FormatV(char const*, std::__va_list)+0x10d4>
   90868:	91003e86 	add	x6, x20, #0xf
   9086c:	aa1403e5 	mov	x5, x20
   90870:	927df0d4 	and	x20, x6, #0xfffffffffffffff8
   90874:	f94000a7 	ldr	x7, [x5]
   90878:	5280001c 	mov	w28, #0x0                   	// #0
   9087c:	b6f80067 	tbz	x7, #63, 90888 <CString::FormatV(char const*, std::__va_list)+0x5b8>
   90880:	cb0703e7 	neg	x7, x7
   90884:	5280003c 	mov	w28, #0x1                   	// #1
   90888:	f10024ff 	cmp	x7, #0x9
   9088c:	aa0703eb 	mov	x11, x7
   90890:	5400a4ed 	b.le	91d2c <CString::FormatV(char const*, std::__va_list)+0x1a5c>
   90894:	d280002c 	mov	x12, #0x1                   	// #1
   90898:	8b0c0988 	add	x8, x12, x12, lsl #2
   9089c:	d37ff90c 	lsl	x12, x8, #1
   908a0:	9acc08e3 	udiv	x3, x7, x12
   908a4:	f100247f 	cmp	x3, #0x9
   908a8:	54ffff88 	b.hi	90898 <CString::FormatV(char const*, std::__va_list)+0x5c8>  // b.pmore
   908ac:	910243ed 	add	x13, sp, #0x90
   908b0:	14000003 	b	908bc <CString::FormatV(char const*, std::__va_list)+0x5ec>
   908b4:	9ac20963 	udiv	x3, x11, x2
   908b8:	aa0203ec 	mov	x12, x2
   908bc:	12001c6e 	and	w14, w3, #0xff
   908c0:	f100247f 	cmp	x3, #0x9
   908c4:	1100c1cf 	add	w15, w14, #0x30
   908c8:	11015dd0 	add	w16, w14, #0x57
   908cc:	13001df1 	sxtb	w17, w15
   908d0:	13001e12 	sxtb	w18, w16
   908d4:	1a91825e 	csel	w30, w18, w17, hi  // hi = pmore
   908d8:	9acc0969 	udiv	x9, x11, x12
   908dc:	f100259f 	cmp	x12, #0x9
   908e0:	380015be 	strb	w30, [x13], #1
   908e4:	9bd67d8a 	umulh	x10, x12, x22
   908e8:	d343fd42 	lsr	x2, x10, #3
   908ec:	9b0cad2b 	msub	x11, x9, x12, x11
   908f0:	54fffe28 	b.hi	908b4 <CString::FormatV(char const*, std::__va_list)+0x5e4>  // b.pmore
   908f4:	910243e0 	add	x0, sp, #0x90
   908f8:	390001bf 	strb	wzr, [x13]
   908fc:	94000c47 	bl	93a18 <strlen>
   90900:	aa0003e6 	mov	x6, x0
   90904:	350047bc 	cbnz	w28, 911f8 <CString::FormatV(char const*, std::__va_list)+0xf28>
   90908:	340077b8 	cbz	w24, 917fc <CString::FormatV(char const*, std::__va_list)+0x152c>
   9090c:	910243e1 	add	x1, sp, #0x90
   90910:	aa1b03e0 	mov	x0, x27
   90914:	f90033e6 	str	x6, [sp, #96]
   90918:	9400057e 	bl	91f10 <CString::PutString(char const*)>
   9091c:	f94033e1 	ldr	x1, [sp, #96]
   90920:	eb13003f 	cmp	x1, x19
   90924:	54ffd122 	b.cs	90348 <CString::FormatV(char const*, std::__va_list)+0x78>  // b.hs, b.nlast
   90928:	cb010278 	sub	x24, x19, x1
   9092c:	aa1b03e0 	mov	x0, x27
   90930:	aa1803e1 	mov	x1, x24
   90934:	940006cf 	bl	92470 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   90938:	f2400b07 	ands	x7, x24, #0x7
   9093c:	d1000703 	sub	x3, x24, #0x1
   90940:	5280040b 	mov	w11, #0x20                  	// #32
   90944:	54000640 	b.eq	90a0c <CString::FormatV(char const*, std::__va_list)+0x73c>  // b.none
   90948:	f10004ff 	cmp	x7, #0x1
   9094c:	54000520 	b.eq	909f0 <CString::FormatV(char const*, std::__va_list)+0x720>  // b.none
   90950:	f10008ff 	cmp	x7, #0x2
   90954:	54000440 	b.eq	909dc <CString::FormatV(char const*, std::__va_list)+0x70c>  // b.none
   90958:	f1000cff 	cmp	x7, #0x3
   9095c:	54000360 	b.eq	909c8 <CString::FormatV(char const*, std::__va_list)+0x6f8>  // b.none
   90960:	f10010ff 	cmp	x7, #0x4
   90964:	54000280 	b.eq	909b4 <CString::FormatV(char const*, std::__va_list)+0x6e4>  // b.none
   90968:	f10014ff 	cmp	x7, #0x5
   9096c:	540001a0 	b.eq	909a0 <CString::FormatV(char const*, std::__va_list)+0x6d0>  // b.none
   90970:	f10018ff 	cmp	x7, #0x6
   90974:	540000c0 	b.eq	9098c <CString::FormatV(char const*, std::__va_list)+0x6bc>  // b.none
   90978:	f9400f6c 	ldr	x12, [x27, #24]
   9097c:	d1000463 	sub	x3, x3, #0x1
   90980:	91000588 	add	x8, x12, #0x1
   90984:	f9000f68 	str	x8, [x27, #24]
   90988:	3900018b 	strb	w11, [x12]
   9098c:	f9400f69 	ldr	x9, [x27, #24]
   90990:	d1000463 	sub	x3, x3, #0x1
   90994:	91000524 	add	x4, x9, #0x1
   90998:	f9000f64 	str	x4, [x27, #24]
   9099c:	3900012b 	strb	w11, [x9]
   909a0:	f9400f6f 	ldr	x15, [x27, #24]
   909a4:	d1000463 	sub	x3, x3, #0x1
   909a8:	910005f0 	add	x16, x15, #0x1
   909ac:	f9000f70 	str	x16, [x27, #24]
   909b0:	390001eb 	strb	w11, [x15]
   909b4:	f9400f71 	ldr	x17, [x27, #24]
   909b8:	d1000463 	sub	x3, x3, #0x1
   909bc:	91000632 	add	x18, x17, #0x1
   909c0:	f9000f72 	str	x18, [x27, #24]
   909c4:	3900022b 	strb	w11, [x17]
   909c8:	f9400f7e 	ldr	x30, [x27, #24]
   909cc:	d1000463 	sub	x3, x3, #0x1
   909d0:	910007ca 	add	x10, x30, #0x1
   909d4:	f9000f6a 	str	x10, [x27, #24]
   909d8:	390003cb 	strb	w11, [x30]
   909dc:	f9400f79 	ldr	x25, [x27, #24]
   909e0:	d1000463 	sub	x3, x3, #0x1
   909e4:	91000722 	add	x2, x25, #0x1
   909e8:	f9000f62 	str	x2, [x27, #24]
   909ec:	3900032b 	strb	w11, [x25]
   909f0:	f9400f7c 	ldr	x28, [x27, #24]
   909f4:	d1000463 	sub	x3, x3, #0x1
   909f8:	b100047f 	cmn	x3, #0x1
   909fc:	9100078e 	add	x14, x28, #0x1
   90a00:	f9000f6e 	str	x14, [x27, #24]
   90a04:	3900038b 	strb	w11, [x28]
   90a08:	54ffca00 	b.eq	90348 <CString::FormatV(char const*, std::__va_list)+0x78>  // b.none
   90a0c:	f9400f73 	ldr	x19, [x27, #24]
   90a10:	d1002063 	sub	x3, x3, #0x8
   90a14:	b100047f 	cmn	x3, #0x1
   90a18:	9100066d 	add	x13, x19, #0x1
   90a1c:	f9000f6d 	str	x13, [x27, #24]
   90a20:	3900026b 	strb	w11, [x19]
   90a24:	f9400f65 	ldr	x5, [x27, #24]
   90a28:	910004a0 	add	x0, x5, #0x1
   90a2c:	f9000f60 	str	x0, [x27, #24]
   90a30:	390000ab 	strb	w11, [x5]
   90a34:	f9400f66 	ldr	x6, [x27, #24]
   90a38:	910004c1 	add	x1, x6, #0x1
   90a3c:	f9000f61 	str	x1, [x27, #24]
   90a40:	390000cb 	strb	w11, [x6]
   90a44:	f9400f78 	ldr	x24, [x27, #24]
   90a48:	91000707 	add	x7, x24, #0x1
   90a4c:	f9000f67 	str	x7, [x27, #24]
   90a50:	3900030b 	strb	w11, [x24]
   90a54:	f9400f6c 	ldr	x12, [x27, #24]
   90a58:	91000588 	add	x8, x12, #0x1
   90a5c:	f9000f68 	str	x8, [x27, #24]
   90a60:	3900018b 	strb	w11, [x12]
   90a64:	f9400f69 	ldr	x9, [x27, #24]
   90a68:	91000524 	add	x4, x9, #0x1
   90a6c:	f9000f64 	str	x4, [x27, #24]
   90a70:	3900012b 	strb	w11, [x9]
   90a74:	f9400f6f 	ldr	x15, [x27, #24]
   90a78:	910005f0 	add	x16, x15, #0x1
   90a7c:	f9000f70 	str	x16, [x27, #24]
   90a80:	390001eb 	strb	w11, [x15]
   90a84:	f9400f71 	ldr	x17, [x27, #24]
   90a88:	91000632 	add	x18, x17, #0x1
   90a8c:	f9000f72 	str	x18, [x27, #24]
   90a90:	3900022b 	strb	w11, [x17]
   90a94:	54fffbc1 	b.ne	90a0c <CString::FormatV(char const*, std::__va_list)+0x73c>  // b.any
   90a98:	17fffe2c 	b	90348 <CString::FormatV(char const*, std::__va_list)+0x78>
   90a9c:	39c004ac 	ldrsb	w12, [x5, #1]
   90aa0:	52800001 	mov	w1, #0x0                   	// #0
   90aa4:	5100c18f 	sub	w15, w12, #0x30
   90aa8:	12001df0 	and	w16, w15, #0xff
   90aac:	7100261f 	cmp	w16, #0x9
   90ab0:	54000069 	b.ls	90abc <CString::FormatV(char const*, std::__va_list)+0x7ec>  // b.plast
   90ab4:	1400040f 	b	91af0 <CString::FormatV(char const*, std::__va_list)+0x1820>
   90ab8:	aa0503fa 	mov	x26, x5
   90abc:	0b010831 	add	w17, w1, w1, lsl #2
   90ac0:	91000745 	add	x5, x26, #0x1
   90ac4:	0b110592 	add	w18, w12, w17, lsl #1
   90ac8:	39c0074c 	ldrsb	w12, [x26, #1]
   90acc:	5100c241 	sub	w1, w18, #0x30
   90ad0:	5100c19e 	sub	w30, w12, #0x30
   90ad4:	12001fc2 	and	w2, w30, #0xff
   90ad8:	7100245f 	cmp	w2, #0x9
   90adc:	54fffee9 	b.ls	90ab8 <CString::FormatV(char const*, std::__va_list)+0x7e8>  // b.plast
   90ae0:	91000b5a 	add	x26, x26, #0x2
   90ae4:	17fffe4c 	b	90414 <CString::FormatV(char const*, std::__va_list)+0x144>
   90ae8:	37f863b5 	tbnz	w21, #31, 9175c <CString::FormatV(char const*, std::__va_list)+0x148c>
   90aec:	91002e85 	add	x5, x20, #0xb
   90af0:	aa1403e9 	mov	x9, x20
   90af4:	927df0b4 	and	x20, x5, #0xfffffffffffffff8
   90af8:	b9400130 	ldr	w16, [x9]
   90afc:	eb1c021f 	cmp	x16, x28
   90b00:	54006463 	b.cc	9178c <CString::FormatV(char const*, std::__va_list)+0x14bc>  // b.lo, b.ul, b.last
   90b04:	d280002f 	mov	x15, #0x1                   	// #1
   90b08:	9b1c7def 	mul	x15, x15, x28
   90b0c:	9acf0a11 	udiv	x17, x16, x15
   90b10:	eb1c023f 	cmp	x17, x28
   90b14:	aa1103e5 	mov	x5, x17
   90b18:	54ffff82 	b.cs	90b08 <CString::FormatV(char const*, std::__va_list)+0x838>  // b.hs, b.nlast
   90b1c:	7101619f 	cmp	w12, #0x58
   90b20:	5280040e 	mov	w14, #0x20                  	// #32
   90b24:	1a8e03ed 	csel	w13, wzr, w14, eq  // eq = none
   90b28:	12001da6 	and	w6, w13, #0xff
   90b2c:	910243e7 	add	x7, sp, #0x90
   90b30:	1100dccc 	add	w12, w6, #0x37
   90b34:	14000004 	b	90b44 <CString::FormatV(char const*, std::__va_list)+0x874>
   90b38:	9ac30a05 	udiv	x5, x16, x3
   90b3c:	aa0303ef 	mov	x15, x3
   90b40:	aa0503f1 	mov	x17, x5
   90b44:	12001ca0 	and	w0, w5, #0xff
   90b48:	f10024bf 	cmp	x5, #0x9
   90b4c:	9b0fc230 	msub	x16, x17, x15, x16
   90b50:	1100c002 	add	w2, w0, #0x30
   90b54:	0b0c0008 	add	w8, w0, w12
   90b58:	9adc09e3 	udiv	x3, x15, x28
   90b5c:	13001c41 	sxtb	w1, w2
   90b60:	13001d09 	sxtb	w9, w8
   90b64:	1a818124 	csel	w4, w9, w1, hi  // hi = pmore
   90b68:	eb1c01ff 	cmp	x15, x28
   90b6c:	380014e4 	strb	w4, [x7], #1
   90b70:	54fffe42 	b.cs	90b38 <CString::FormatV(char const*, std::__va_list)+0x868>  // b.hs, b.nlast
   90b74:	910243e0 	add	x0, sp, #0x90
   90b78:	390000ff 	strb	wzr, [x7]
   90b7c:	94000ba7 	bl	93a18 <strlen>
   90b80:	aa0003fc 	mov	x28, x0
   90b84:	34ffcbb8 	cbz	w24, 904f8 <CString::FormatV(char const*, std::__va_list)+0x228>
   90b88:	910243e1 	add	x1, sp, #0x90
   90b8c:	aa1b03e0 	mov	x0, x27
   90b90:	940004e0 	bl	91f10 <CString::PutString(char const*)>
   90b94:	eb13039f 	cmp	x28, x19
   90b98:	54ffbd82 	b.cs	90348 <CString::FormatV(char const*, std::__va_list)+0x78>  // b.hs, b.nlast
   90b9c:	cb1c027c 	sub	x28, x19, x28
   90ba0:	aa1b03e0 	mov	x0, x27
   90ba4:	aa1c03e1 	mov	x1, x28
   90ba8:	94000632 	bl	92470 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   90bac:	f2400b8c 	ands	x12, x28, #0x7
   90bb0:	d1000780 	sub	x0, x28, #0x1
   90bb4:	52800408 	mov	w8, #0x20                  	// #32
   90bb8:	54000640 	b.eq	90c80 <CString::FormatV(char const*, std::__va_list)+0x9b0>  // b.none
   90bbc:	f100059f 	cmp	x12, #0x1
   90bc0:	54000520 	b.eq	90c64 <CString::FormatV(char const*, std::__va_list)+0x994>  // b.none
   90bc4:	f100099f 	cmp	x12, #0x2
   90bc8:	54000440 	b.eq	90c50 <CString::FormatV(char const*, std::__va_list)+0x980>  // b.none
   90bcc:	f1000d9f 	cmp	x12, #0x3
   90bd0:	54000360 	b.eq	90c3c <CString::FormatV(char const*, std::__va_list)+0x96c>  // b.none
   90bd4:	f100119f 	cmp	x12, #0x4
   90bd8:	54000280 	b.eq	90c28 <CString::FormatV(char const*, std::__va_list)+0x958>  // b.none
   90bdc:	f100159f 	cmp	x12, #0x5
   90be0:	540001a0 	b.eq	90c14 <CString::FormatV(char const*, std::__va_list)+0x944>  // b.none
   90be4:	f100199f 	cmp	x12, #0x6
   90be8:	540000c0 	b.eq	90c00 <CString::FormatV(char const*, std::__va_list)+0x930>  // b.none
   90bec:	f9400f62 	ldr	x2, [x27, #24]
   90bf0:	d1000400 	sub	x0, x0, #0x1
   90bf4:	91000443 	add	x3, x2, #0x1
   90bf8:	f9000f63 	str	x3, [x27, #24]
   90bfc:	39000048 	strb	w8, [x2]
   90c00:	f9400f69 	ldr	x9, [x27, #24]
   90c04:	d1000400 	sub	x0, x0, #0x1
   90c08:	91000524 	add	x4, x9, #0x1
   90c0c:	f9000f64 	str	x4, [x27, #24]
   90c10:	39000128 	strb	w8, [x9]
   90c14:	f9400f65 	ldr	x5, [x27, #24]
   90c18:	d1000400 	sub	x0, x0, #0x1
   90c1c:	910004b1 	add	x17, x5, #0x1
   90c20:	f9000f71 	str	x17, [x27, #24]
   90c24:	390000a8 	strb	w8, [x5]
   90c28:	f9400f61 	ldr	x1, [x27, #24]
   90c2c:	d1000400 	sub	x0, x0, #0x1
   90c30:	91000430 	add	x16, x1, #0x1
   90c34:	f9000f70 	str	x16, [x27, #24]
   90c38:	39000028 	strb	w8, [x1]
   90c3c:	f9400f73 	ldr	x19, [x27, #24]
   90c40:	d1000400 	sub	x0, x0, #0x1
   90c44:	91000678 	add	x24, x19, #0x1
   90c48:	f9000f78 	str	x24, [x27, #24]
   90c4c:	39000268 	strb	w8, [x19]
   90c50:	f9400f79 	ldr	x25, [x27, #24]
   90c54:	d1000400 	sub	x0, x0, #0x1
   90c58:	91000727 	add	x7, x25, #0x1
   90c5c:	f9000f67 	str	x7, [x27, #24]
   90c60:	39000328 	strb	w8, [x25]
   90c64:	f9400f72 	ldr	x18, [x27, #24]
   90c68:	d1000400 	sub	x0, x0, #0x1
   90c6c:	b100041f 	cmn	x0, #0x1
   90c70:	9100064b 	add	x11, x18, #0x1
   90c74:	f9000f6b 	str	x11, [x27, #24]
   90c78:	39000248 	strb	w8, [x18]
   90c7c:	54ffb660 	b.eq	90348 <CString::FormatV(char const*, std::__va_list)+0x78>  // b.none
   90c80:	f9400f7e 	ldr	x30, [x27, #24]
   90c84:	d1002000 	sub	x0, x0, #0x8
   90c88:	b100041f 	cmn	x0, #0x1
   90c8c:	910007ca 	add	x10, x30, #0x1
   90c90:	f9000f6a 	str	x10, [x27, #24]
   90c94:	390003c8 	strb	w8, [x30]
   90c98:	f9400f6f 	ldr	x15, [x27, #24]
   90c9c:	910005ee 	add	x14, x15, #0x1
   90ca0:	f9000f6e 	str	x14, [x27, #24]
   90ca4:	390001e8 	strb	w8, [x15]
   90ca8:	f9400f6d 	ldr	x13, [x27, #24]
   90cac:	910005a6 	add	x6, x13, #0x1
   90cb0:	f9000f66 	str	x6, [x27, #24]
   90cb4:	390001a8 	strb	w8, [x13]
   90cb8:	f9400f7c 	ldr	x28, [x27, #24]
   90cbc:	9100078c 	add	x12, x28, #0x1
   90cc0:	f9000f6c 	str	x12, [x27, #24]
   90cc4:	39000388 	strb	w8, [x28]
   90cc8:	f9400f62 	ldr	x2, [x27, #24]
   90ccc:	91000443 	add	x3, x2, #0x1
   90cd0:	f9000f63 	str	x3, [x27, #24]
   90cd4:	39000048 	strb	w8, [x2]
   90cd8:	f9400f69 	ldr	x9, [x27, #24]
   90cdc:	91000524 	add	x4, x9, #0x1
   90ce0:	f9000f64 	str	x4, [x27, #24]
   90ce4:	39000128 	strb	w8, [x9]
   90ce8:	f9400f65 	ldr	x5, [x27, #24]
   90cec:	910004b1 	add	x17, x5, #0x1
   90cf0:	f9000f71 	str	x17, [x27, #24]
   90cf4:	390000a8 	strb	w8, [x5]
   90cf8:	f9400f61 	ldr	x1, [x27, #24]
   90cfc:	91000430 	add	x16, x1, #0x1
   90d00:	f9000f70 	str	x16, [x27, #24]
   90d04:	39000028 	strb	w8, [x1]
   90d08:	54fffbc1 	b.ne	90c80 <CString::FormatV(char const*, std::__va_list)+0x9b0>  // b.any
   90d0c:	17fffd8f 	b	90348 <CString::FormatV(char const*, std::__va_list)+0x78>
   90d10:	110022b0 	add	w16, w21, #0x8
   90d14:	7100021f 	cmp	w16, #0x0
   90d18:	5400216d 	b.le	91144 <CString::FormatV(char const*, std::__va_list)+0xe74>
   90d1c:	91003e9e 	add	x30, x20, #0xf
   90d20:	aa1403eb 	mov	x11, x20
   90d24:	2a1003f5 	mov	w21, w16
   90d28:	927df3d4 	and	x20, x30, #0xfffffffffffffff8
   90d2c:	17fffdce 	b	90464 <CString::FormatV(char const*, std::__va_list)+0x194>
   90d30:	37f834b5 	tbnz	w21, #31, 913c4 <CString::FormatV(char const*, std::__va_list)+0x10f4>
   90d34:	91003e87 	add	x7, x20, #0xf
   90d38:	aa1403e0 	mov	x0, x20
   90d3c:	927df0f4 	and	x20, x7, #0xfffffffffffffff8
   90d40:	f940001c 	ldr	x28, [x0]
   90d44:	aa1c03e0 	mov	x0, x28
   90d48:	94000b34 	bl	93a18 <strlen>
   90d4c:	aa0003f9 	mov	x25, x0
   90d50:	35003538 	cbnz	w24, 913f4 <CString::FormatV(char const*, std::__va_list)+0x1124>
   90d54:	eb13001f 	cmp	x0, x19
   90d58:	54006f03 	b.cc	91b38 <CString::FormatV(char const*, std::__va_list)+0x1868>  // b.lo, b.ul, b.last
   90d5c:	aa1c03e1 	mov	x1, x28
   90d60:	aa1b03e0 	mov	x0, x27
   90d64:	9400046b 	bl	91f10 <CString::PutString(char const*)>
   90d68:	17fffd78 	b	90348 <CString::FormatV(char const*, std::__va_list)+0x78>
   90d6c:	37f84095 	tbnz	w21, #31, 9157c <CString::FormatV(char const*, std::__va_list)+0x12ac>
   90d70:	91002e90 	add	x16, x20, #0xb
   90d74:	aa1403ee 	mov	x14, x20
   90d78:	927df214 	and	x20, x16, #0xfffffffffffffff8
   90d7c:	39c001dc 	ldrsb	w28, [x14]
   90d80:	35004118 	cbnz	w24, 915a0 <CString::FormatV(char const*, std::__va_list)+0x12d0>
   90d84:	f100067f 	cmp	x19, #0x1
   90d88:	54005fa8 	b.hi	9197c <CString::FormatV(char const*, std::__va_list)+0x16ac>  // b.pmore
   90d8c:	d2800021 	mov	x1, #0x1                   	// #1
   90d90:	aa1b03e0 	mov	x0, x27
   90d94:	940005b7 	bl	92470 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   90d98:	f9400f78 	ldr	x24, [x27, #24]
   90d9c:	91000707 	add	x7, x24, #0x1
   90da0:	f9000f67 	str	x7, [x27, #24]
   90da4:	3900031c 	strb	w28, [x24]
   90da8:	17fffd68 	b	90348 <CString::FormatV(char const*, std::__va_list)+0x78>
   90dac:	aa1c03e5 	mov	x5, x28
   90db0:	d2800013 	mov	x19, #0x0                   	// #0
   90db4:	17fffd94 	b	90404 <CString::FormatV(char const*, std::__va_list)+0x134>
   90db8:	cb000273 	sub	x19, x19, x0
   90dbc:	7100033f 	cmp	w25, #0x0
   90dc0:	aa1b03e0 	mov	x0, x27
   90dc4:	aa1303e1 	mov	x1, x19
   90dc8:	52800618 	mov	w24, #0x30                  	// #48
   90dcc:	52800419 	mov	w25, #0x20                  	// #32
   90dd0:	1a99131c 	csel	w28, w24, w25, ne  // ne = any
   90dd4:	940005a7 	bl	92470 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   90dd8:	f2400a67 	ands	x7, x19, #0x7
   90ddc:	d1000660 	sub	x0, x19, #0x1
   90de0:	540005a0 	b.eq	90e94 <CString::FormatV(char const*, std::__va_list)+0xbc4>  // b.none
   90de4:	f10004ff 	cmp	x7, #0x1
   90de8:	54000480 	b.eq	90e78 <CString::FormatV(char const*, std::__va_list)+0xba8>  // b.none
   90dec:	f10008ff 	cmp	x7, #0x2
   90df0:	540003a0 	b.eq	90e64 <CString::FormatV(char const*, std::__va_list)+0xb94>  // b.none
   90df4:	f1000cff 	cmp	x7, #0x3
   90df8:	540002c0 	b.eq	90e50 <CString::FormatV(char const*, std::__va_list)+0xb80>  // b.none
   90dfc:	f10010ff 	cmp	x7, #0x4
   90e00:	540001e0 	b.eq	90e3c <CString::FormatV(char const*, std::__va_list)+0xb6c>  // b.none
   90e04:	f10014ff 	cmp	x7, #0x5
   90e08:	54000100 	b.eq	90e28 <CString::FormatV(char const*, std::__va_list)+0xb58>  // b.none
   90e0c:	f10018ff 	cmp	x7, #0x6
   90e10:	54006881 	b.ne	91b20 <CString::FormatV(char const*, std::__va_list)+0x1850>  // b.any
   90e14:	f9400f7e 	ldr	x30, [x27, #24]
   90e18:	d1000400 	sub	x0, x0, #0x1
   90e1c:	910007ca 	add	x10, x30, #0x1
   90e20:	f9000f6a 	str	x10, [x27, #24]
   90e24:	390003dc 	strb	w28, [x30]
   90e28:	f9400f6f 	ldr	x15, [x27, #24]
   90e2c:	d1000400 	sub	x0, x0, #0x1
   90e30:	910005ee 	add	x14, x15, #0x1
   90e34:	f9000f6e 	str	x14, [x27, #24]
   90e38:	390001fc 	strb	w28, [x15]
   90e3c:	f9400f6d 	ldr	x13, [x27, #24]
   90e40:	d1000400 	sub	x0, x0, #0x1
   90e44:	910005a6 	add	x6, x13, #0x1
   90e48:	f9000f66 	str	x6, [x27, #24]
   90e4c:	390001bc 	strb	w28, [x13]
   90e50:	f9400f6c 	ldr	x12, [x27, #24]
   90e54:	d1000400 	sub	x0, x0, #0x1
   90e58:	91000588 	add	x8, x12, #0x1
   90e5c:	f9000f68 	str	x8, [x27, #24]
   90e60:	3900019c 	strb	w28, [x12]
   90e64:	f9400f63 	ldr	x3, [x27, #24]
   90e68:	d1000400 	sub	x0, x0, #0x1
   90e6c:	91000462 	add	x2, x3, #0x1
   90e70:	f9000f62 	str	x2, [x27, #24]
   90e74:	3900007c 	strb	w28, [x3]
   90e78:	f9400f69 	ldr	x9, [x27, #24]
   90e7c:	d1000400 	sub	x0, x0, #0x1
   90e80:	b100041f 	cmn	x0, #0x1
   90e84:	91000524 	add	x4, x9, #0x1
   90e88:	f9000f64 	str	x4, [x27, #24]
   90e8c:	3900013c 	strb	w28, [x9]
   90e90:	54ffb380 	b.eq	90500 <CString::FormatV(char const*, std::__va_list)+0x230>  // b.none
   90e94:	f9400f65 	ldr	x5, [x27, #24]
   90e98:	d1002000 	sub	x0, x0, #0x8
   90e9c:	b100041f 	cmn	x0, #0x1
   90ea0:	910004b1 	add	x17, x5, #0x1
   90ea4:	f9000f71 	str	x17, [x27, #24]
   90ea8:	390000bc 	strb	w28, [x5]
   90eac:	f9400f61 	ldr	x1, [x27, #24]
   90eb0:	91000430 	add	x16, x1, #0x1
   90eb4:	f9000f70 	str	x16, [x27, #24]
   90eb8:	3900003c 	strb	w28, [x1]
   90ebc:	f9400f73 	ldr	x19, [x27, #24]
   90ec0:	91000678 	add	x24, x19, #0x1
   90ec4:	f9000f78 	str	x24, [x27, #24]
   90ec8:	3900027c 	strb	w28, [x19]
   90ecc:	f9400f79 	ldr	x25, [x27, #24]
   90ed0:	91000727 	add	x7, x25, #0x1
   90ed4:	f9000f67 	str	x7, [x27, #24]
   90ed8:	3900033c 	strb	w28, [x25]
   90edc:	f9400f72 	ldr	x18, [x27, #24]
   90ee0:	9100064b 	add	x11, x18, #0x1
   90ee4:	f9000f6b 	str	x11, [x27, #24]
   90ee8:	3900025c 	strb	w28, [x18]
   90eec:	f9400f7e 	ldr	x30, [x27, #24]
   90ef0:	910007ca 	add	x10, x30, #0x1
   90ef4:	f9000f6a 	str	x10, [x27, #24]
   90ef8:	390003dc 	strb	w28, [x30]
   90efc:	f9400f6f 	ldr	x15, [x27, #24]
   90f00:	910005ee 	add	x14, x15, #0x1
   90f04:	f9000f6e 	str	x14, [x27, #24]
   90f08:	390001fc 	strb	w28, [x15]
   90f0c:	f9400f6d 	ldr	x13, [x27, #24]
   90f10:	910005a6 	add	x6, x13, #0x1
   90f14:	f9000f66 	str	x6, [x27, #24]
   90f18:	390001bc 	strb	w28, [x13]
   90f1c:	54fffbc1 	b.ne	90e94 <CString::FormatV(char const*, std::__va_list)+0xbc4>  // b.any
   90f20:	17fffd78 	b	90500 <CString::FormatV(char const*, std::__va_list)+0x230>
   90f24:	34001186 	cbz	w6, 91154 <CString::FormatV(char const*, std::__va_list)+0xe84>
   90f28:	37f86c35 	tbnz	w21, #31, 91cac <CString::FormatV(char const*, std::__va_list)+0x19dc>
   90f2c:	aa1403e5 	mov	x5, x20
   90f30:	91003e86 	add	x6, x20, #0xf
   90f34:	927df0d4 	and	x20, x6, #0xfffffffffffffff8
   90f38:	f94000a7 	ldr	x7, [x5]
   90f3c:	1400008b 	b	91168 <CString::FormatV(char const*, std::__va_list)+0xe98>
   90f40:	b94083fe 	ldr	w30, [sp, #128]
   90f44:	110043ca 	add	w10, w30, #0x10
   90f48:	7100015f 	cmp	w10, #0x0
   90f4c:	540044ed 	b.le	917e8 <CString::FormatV(char const*, std::__va_list)+0x1518>
   90f50:	aa1403fc 	mov	x28, x20
   90f54:	91003e83 	add	x3, x20, #0xf
   90f58:	b90083ea 	str	w10, [sp, #128]
   90f5c:	910243e0 	add	x0, sp, #0x90
   90f60:	927df074 	and	x20, x3, #0xfffffffffffffff8
   90f64:	fd400380 	ldr	d0, [x28]
   90f68:	94000452 	bl	920b0 <CString::ftoa(char*, double, unsigned int)>
   90f6c:	910243e0 	add	x0, sp, #0x90
   90f70:	94000aaa 	bl	93a18 <strlen>
   90f74:	aa0003f9 	mov	x25, x0
   90f78:	34ffb398 	cbz	w24, 905e8 <CString::FormatV(char const*, std::__va_list)+0x318>
   90f7c:	910243e1 	add	x1, sp, #0x90
   90f80:	aa1b03e0 	mov	x0, x27
   90f84:	940003e3 	bl	91f10 <CString::PutString(char const*)>
   90f88:	eb13033f 	cmp	x25, x19
   90f8c:	54ff9de2 	b.cs	90348 <CString::FormatV(char const*, std::__va_list)+0x78>  // b.hs, b.nlast
   90f90:	cb19027c 	sub	x28, x19, x25
   90f94:	aa1b03e0 	mov	x0, x27
   90f98:	aa1c03e1 	mov	x1, x28
   90f9c:	94000535 	bl	92470 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   90fa0:	f2400b85 	ands	x5, x28, #0x7
   90fa4:	d1000780 	sub	x0, x28, #0x1
   90fa8:	5280040f 	mov	w15, #0x20                  	// #32
   90fac:	54000640 	b.eq	91074 <CString::FormatV(char const*, std::__va_list)+0xda4>  // b.none
   90fb0:	f10004bf 	cmp	x5, #0x1
   90fb4:	54000520 	b.eq	91058 <CString::FormatV(char const*, std::__va_list)+0xd88>  // b.none
   90fb8:	f10008bf 	cmp	x5, #0x2
   90fbc:	54000440 	b.eq	91044 <CString::FormatV(char const*, std::__va_list)+0xd74>  // b.none
   90fc0:	f1000cbf 	cmp	x5, #0x3
   90fc4:	54000360 	b.eq	91030 <CString::FormatV(char const*, std::__va_list)+0xd60>  // b.none
   90fc8:	f10010bf 	cmp	x5, #0x4
   90fcc:	54000280 	b.eq	9101c <CString::FormatV(char const*, std::__va_list)+0xd4c>  // b.none
   90fd0:	f10014bf 	cmp	x5, #0x5
   90fd4:	540001a0 	b.eq	91008 <CString::FormatV(char const*, std::__va_list)+0xd38>  // b.none
   90fd8:	f10018bf 	cmp	x5, #0x6
   90fdc:	540000c0 	b.eq	90ff4 <CString::FormatV(char const*, std::__va_list)+0xd24>  // b.none
   90fe0:	f9400f70 	ldr	x16, [x27, #24]
   90fe4:	d1000400 	sub	x0, x0, #0x1
   90fe8:	91000611 	add	x17, x16, #0x1
   90fec:	f9000f71 	str	x17, [x27, #24]
   90ff0:	3900020f 	strb	w15, [x16]
   90ff4:	f9400f72 	ldr	x18, [x27, #24]
   90ff8:	d1000400 	sub	x0, x0, #0x1
   90ffc:	9100064b 	add	x11, x18, #0x1
   91000:	f9000f6b 	str	x11, [x27, #24]
   91004:	3900024f 	strb	w15, [x18]
   91008:	f9400f7e 	ldr	x30, [x27, #24]
   9100c:	d1000400 	sub	x0, x0, #0x1
   91010:	910007ca 	add	x10, x30, #0x1
   91014:	f9000f6a 	str	x10, [x27, #24]
   91018:	390003cf 	strb	w15, [x30]
   9101c:	f9400f62 	ldr	x2, [x27, #24]
   91020:	d1000400 	sub	x0, x0, #0x1
   91024:	91000443 	add	x3, x2, #0x1
   91028:	f9000f63 	str	x3, [x27, #24]
   9102c:	3900004f 	strb	w15, [x2]
   91030:	f9400f6e 	ldr	x14, [x27, #24]
   91034:	d1000400 	sub	x0, x0, #0x1
   91038:	910005d9 	add	x25, x14, #0x1
   9103c:	f9000f79 	str	x25, [x27, #24]
   91040:	390001cf 	strb	w15, [x14]
   91044:	f9400f73 	ldr	x19, [x27, #24]
   91048:	d1000400 	sub	x0, x0, #0x1
   9104c:	9100066d 	add	x13, x19, #0x1
   91050:	f9000f6d 	str	x13, [x27, #24]
   91054:	3900026f 	strb	w15, [x19]
   91058:	f9400f66 	ldr	x6, [x27, #24]
   9105c:	d1000400 	sub	x0, x0, #0x1
   91060:	b100041f 	cmn	x0, #0x1
   91064:	910004c1 	add	x1, x6, #0x1
   91068:	f9000f61 	str	x1, [x27, #24]
   9106c:	390000cf 	strb	w15, [x6]
   91070:	54ff96c0 	b.eq	90348 <CString::FormatV(char const*, std::__va_list)+0x78>  // b.none
   91074:	f9400f78 	ldr	x24, [x27, #24]
   91078:	d1002000 	sub	x0, x0, #0x8
   9107c:	b100041f 	cmn	x0, #0x1
   91080:	91000707 	add	x7, x24, #0x1
   91084:	f9000f67 	str	x7, [x27, #24]
   91088:	3900030f 	strb	w15, [x24]
   9108c:	f9400f6c 	ldr	x12, [x27, #24]
   91090:	91000588 	add	x8, x12, #0x1
   91094:	f9000f68 	str	x8, [x27, #24]
   91098:	3900018f 	strb	w15, [x12]
   9109c:	f9400f69 	ldr	x9, [x27, #24]
   910a0:	91000524 	add	x4, x9, #0x1
   910a4:	f9000f64 	str	x4, [x27, #24]
   910a8:	3900012f 	strb	w15, [x9]
   910ac:	f9400f7c 	ldr	x28, [x27, #24]
   910b0:	91000785 	add	x5, x28, #0x1
   910b4:	f9000f65 	str	x5, [x27, #24]
   910b8:	3900038f 	strb	w15, [x28]
   910bc:	f9400f70 	ldr	x16, [x27, #24]
   910c0:	91000611 	add	x17, x16, #0x1
   910c4:	f9000f71 	str	x17, [x27, #24]
   910c8:	3900020f 	strb	w15, [x16]
   910cc:	f9400f72 	ldr	x18, [x27, #24]
   910d0:	9100064b 	add	x11, x18, #0x1
   910d4:	f9000f6b 	str	x11, [x27, #24]
   910d8:	3900024f 	strb	w15, [x18]
   910dc:	f9400f7e 	ldr	x30, [x27, #24]
   910e0:	910007ca 	add	x10, x30, #0x1
   910e4:	f9000f6a 	str	x10, [x27, #24]
   910e8:	390003cf 	strb	w15, [x30]
   910ec:	f9400f62 	ldr	x2, [x27, #24]
   910f0:	91000443 	add	x3, x2, #0x1
   910f4:	f9000f63 	str	x3, [x27, #24]
   910f8:	3900004f 	strb	w15, [x2]
   910fc:	54fffbc1 	b.ne	91074 <CString::FormatV(char const*, std::__va_list)+0xda4>  // b.any
   91100:	17fffc92 	b	90348 <CString::FormatV(char const*, std::__va_list)+0x78>
   91104:	d2800021 	mov	x1, #0x1                   	// #1
   91108:	aa1b03e0 	mov	x0, x27
   9110c:	b90063e6 	str	w6, [sp, #96]
   91110:	b90087e7 	str	w7, [sp, #132]
   91114:	f90047e5 	str	x5, [sp, #136]
   91118:	940004d6 	bl	92470 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   9111c:	f9400f6c 	ldr	x12, [x27, #24]
   91120:	5280060b 	mov	w11, #0x30                  	// #48
   91124:	f94047ed 	ldr	x13, [sp, #136]
   91128:	b94063e6 	ldr	w6, [sp, #96]
   9112c:	91000588 	add	x8, x12, #0x1
   91130:	b94087e7 	ldr	w7, [sp, #132]
   91134:	f9000f68 	str	x8, [x27, #24]
   91138:	3900018b 	strb	w11, [x12]
   9113c:	39c001ac 	ldrsb	w12, [x13]
   91140:	17fffcc4 	b	90450 <CString::FormatV(char const*, std::__va_list)+0x180>
   91144:	f94037f2 	ldr	x18, [sp, #104]
   91148:	8b35c24b 	add	x11, x18, w21, sxtw
   9114c:	2a1003f5 	mov	w21, w16
   91150:	17fffcc5 	b	90464 <CString::FormatV(char const*, std::__va_list)+0x194>
   91154:	37f85bf5 	tbnz	w21, #31, 91cd0 <CString::FormatV(char const*, std::__va_list)+0x1a00>
   91158:	91002e83 	add	x3, x20, #0xb
   9115c:	aa1403ea 	mov	x10, x20
   91160:	927df074 	and	x20, x3, #0xfffffffffffffff8
   91164:	b9800147 	ldrsw	x7, [x10]
   91168:	5280001c 	mov	w28, #0x0                   	// #0
   9116c:	b6f80067 	tbz	x7, #63, 91178 <CString::FormatV(char const*, std::__va_list)+0xea8>
   91170:	cb0703e7 	neg	x7, x7
   91174:	5280003c 	mov	w28, #0x1                   	// #1
   91178:	f10024ff 	cmp	x7, #0x9
   9117c:	aa0703eb 	mov	x11, x7
   91180:	54005dcd 	b.le	91d38 <CString::FormatV(char const*, std::__va_list)+0x1a68>
   91184:	d280002c 	mov	x12, #0x1                   	// #1
   91188:	8b0c0988 	add	x8, x12, x12, lsl #2
   9118c:	d37ff90c 	lsl	x12, x8, #1
   91190:	9acc08e3 	udiv	x3, x7, x12
   91194:	f100247f 	cmp	x3, #0x9
   91198:	54ffff88 	b.hi	91188 <CString::FormatV(char const*, std::__va_list)+0xeb8>  // b.pmore
   9119c:	910243ed 	add	x13, sp, #0x90
   911a0:	14000003 	b	911ac <CString::FormatV(char const*, std::__va_list)+0xedc>
   911a4:	9ac20963 	udiv	x3, x11, x2
   911a8:	aa0203ec 	mov	x12, x2
   911ac:	12001c6e 	and	w14, w3, #0xff
   911b0:	f100247f 	cmp	x3, #0x9
   911b4:	1100c1cf 	add	w15, w14, #0x30
   911b8:	11015dd0 	add	w16, w14, #0x57
   911bc:	13001df1 	sxtb	w17, w15
   911c0:	13001e12 	sxtb	w18, w16
   911c4:	1a91825e 	csel	w30, w18, w17, hi  // hi = pmore
   911c8:	9acc0969 	udiv	x9, x11, x12
   911cc:	f100259f 	cmp	x12, #0x9
   911d0:	380015be 	strb	w30, [x13], #1
   911d4:	9bd67d8a 	umulh	x10, x12, x22
   911d8:	d343fd42 	lsr	x2, x10, #3
   911dc:	9b0cad2b 	msub	x11, x9, x12, x11
   911e0:	54fffe28 	b.hi	911a4 <CString::FormatV(char const*, std::__va_list)+0xed4>  // b.pmore
   911e4:	910243e0 	add	x0, sp, #0x90
   911e8:	390001bf 	strb	wzr, [x13]
   911ec:	94000a0b 	bl	93a18 <strlen>
   911f0:	aa0003e6 	mov	x6, x0
   911f4:	34ffb8bc 	cbz	w28, 90908 <CString::FormatV(char const*, std::__va_list)+0x638>
   911f8:	91000406 	add	x6, x0, #0x1
   911fc:	35002d18 	cbnz	w24, 9179c <CString::FormatV(char const*, std::__va_list)+0x14cc>
   91200:	35005819 	cbnz	w25, 91d00 <CString::FormatV(char const*, std::__va_list)+0x1a30>
   91204:	eb1300df 	cmp	x6, x19
   91208:	54000bc2 	b.cs	91380 <CString::FormatV(char const*, std::__va_list)+0x10b0>  // b.hs, b.nlast
   9120c:	cb060278 	sub	x24, x19, x6
   91210:	aa1b03e0 	mov	x0, x27
   91214:	aa1803e1 	mov	x1, x24
   91218:	94000496 	bl	92470 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   9121c:	f2400b04 	ands	x4, x24, #0x7
   91220:	d1000700 	sub	x0, x24, #0x1
   91224:	5280040e 	mov	w14, #0x20                  	// #32
   91228:	54000640 	b.eq	912f0 <CString::FormatV(char const*, std::__va_list)+0x1020>  // b.none
   9122c:	f100049f 	cmp	x4, #0x1
   91230:	54000520 	b.eq	912d4 <CString::FormatV(char const*, std::__va_list)+0x1004>  // b.none
   91234:	f100089f 	cmp	x4, #0x2
   91238:	54000440 	b.eq	912c0 <CString::FormatV(char const*, std::__va_list)+0xff0>  // b.none
   9123c:	f1000c9f 	cmp	x4, #0x3
   91240:	54000360 	b.eq	912ac <CString::FormatV(char const*, std::__va_list)+0xfdc>  // b.none
   91244:	f100109f 	cmp	x4, #0x4
   91248:	54000280 	b.eq	91298 <CString::FormatV(char const*, std::__va_list)+0xfc8>  // b.none
   9124c:	f100149f 	cmp	x4, #0x5
   91250:	540001a0 	b.eq	91284 <CString::FormatV(char const*, std::__va_list)+0xfb4>  // b.none
   91254:	f100189f 	cmp	x4, #0x6
   91258:	540000c0 	b.eq	91270 <CString::FormatV(char const*, std::__va_list)+0xfa0>  // b.none
   9125c:	f9400f6f 	ldr	x15, [x27, #24]
   91260:	d1000400 	sub	x0, x0, #0x1
   91264:	910005f0 	add	x16, x15, #0x1
   91268:	f9000f70 	str	x16, [x27, #24]
   9126c:	390001ee 	strb	w14, [x15]
   91270:	f9400f71 	ldr	x17, [x27, #24]
   91274:	d1000400 	sub	x0, x0, #0x1
   91278:	91000632 	add	x18, x17, #0x1
   9127c:	f9000f72 	str	x18, [x27, #24]
   91280:	3900022e 	strb	w14, [x17]
   91284:	f9400f7e 	ldr	x30, [x27, #24]
   91288:	d1000400 	sub	x0, x0, #0x1
   9128c:	910007ca 	add	x10, x30, #0x1
   91290:	f9000f6a 	str	x10, [x27, #24]
   91294:	390003ce 	strb	w14, [x30]
   91298:	f9400f62 	ldr	x2, [x27, #24]
   9129c:	d1000400 	sub	x0, x0, #0x1
   912a0:	91000443 	add	x3, x2, #0x1
   912a4:	f9000f63 	str	x3, [x27, #24]
   912a8:	3900004e 	strb	w14, [x2]
   912ac:	f9400f79 	ldr	x25, [x27, #24]
   912b0:	d1000400 	sub	x0, x0, #0x1
   912b4:	91000733 	add	x19, x25, #0x1
   912b8:	f9000f73 	str	x19, [x27, #24]
   912bc:	3900032e 	strb	w14, [x25]
   912c0:	f9400f6d 	ldr	x13, [x27, #24]
   912c4:	d1000400 	sub	x0, x0, #0x1
   912c8:	910005a5 	add	x5, x13, #0x1
   912cc:	f9000f65 	str	x5, [x27, #24]
   912d0:	390001ae 	strb	w14, [x13]
   912d4:	f9400f61 	ldr	x1, [x27, #24]
   912d8:	d1000400 	sub	x0, x0, #0x1
   912dc:	b100041f 	cmn	x0, #0x1
   912e0:	91000426 	add	x6, x1, #0x1
   912e4:	f9000f66 	str	x6, [x27, #24]
   912e8:	3900002e 	strb	w14, [x1]
   912ec:	54000480 	b.eq	9137c <CString::FormatV(char const*, std::__va_list)+0x10ac>  // b.none
   912f0:	f9400f67 	ldr	x7, [x27, #24]
   912f4:	d1002000 	sub	x0, x0, #0x8
   912f8:	b100041f 	cmn	x0, #0x1
   912fc:	910004eb 	add	x11, x7, #0x1
   91300:	f9000f6b 	str	x11, [x27, #24]
   91304:	390000ee 	strb	w14, [x7]
   91308:	f9400f6c 	ldr	x12, [x27, #24]
   9130c:	91000588 	add	x8, x12, #0x1
   91310:	f9000f68 	str	x8, [x27, #24]
   91314:	3900018e 	strb	w14, [x12]
   91318:	f9400f69 	ldr	x9, [x27, #24]
   9131c:	91000538 	add	x24, x9, #0x1
   91320:	f9000f78 	str	x24, [x27, #24]
   91324:	3900012e 	strb	w14, [x9]
   91328:	f9400f64 	ldr	x4, [x27, #24]
   9132c:	9100048f 	add	x15, x4, #0x1
   91330:	f9000f6f 	str	x15, [x27, #24]
   91334:	3900008e 	strb	w14, [x4]
   91338:	f9400f70 	ldr	x16, [x27, #24]
   9133c:	91000611 	add	x17, x16, #0x1
   91340:	f9000f71 	str	x17, [x27, #24]
   91344:	3900020e 	strb	w14, [x16]
   91348:	f9400f72 	ldr	x18, [x27, #24]
   9134c:	9100065e 	add	x30, x18, #0x1
   91350:	f9000f7e 	str	x30, [x27, #24]
   91354:	3900024e 	strb	w14, [x18]
   91358:	f9400f6a 	ldr	x10, [x27, #24]
   9135c:	91000542 	add	x2, x10, #0x1
   91360:	f9000f62 	str	x2, [x27, #24]
   91364:	3900014e 	strb	w14, [x10]
   91368:	f9400f79 	ldr	x25, [x27, #24]
   9136c:	91000723 	add	x3, x25, #0x1
   91370:	f9000f63 	str	x3, [x27, #24]
   91374:	3900032e 	strb	w14, [x25]
   91378:	54fffbc1 	b.ne	912f0 <CString::FormatV(char const*, std::__va_list)+0x1020>  // b.any
   9137c:	34ff8c3c 	cbz	w28, 90500 <CString::FormatV(char const*, std::__va_list)+0x230>
   91380:	d2800021 	mov	x1, #0x1                   	// #1
   91384:	aa1b03e0 	mov	x0, x27
   91388:	9400043a 	bl	92470 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   9138c:	f9400f6e 	ldr	x14, [x27, #24]
   91390:	528005bc 	mov	w28, #0x2d                  	// #45
   91394:	910005d3 	add	x19, x14, #0x1
   91398:	f9000f73 	str	x19, [x27, #24]
   9139c:	390001dc 	strb	w28, [x14]
   913a0:	17fffc58 	b	90500 <CString::FormatV(char const*, std::__va_list)+0x230>
   913a4:	110022a4 	add	w4, w21, #0x8
   913a8:	7100009f 	cmp	w4, #0x0
   913ac:	54004a2d 	b.le	91cf0 <CString::FormatV(char const*, std::__va_list)+0x1a20>
   913b0:	91003e81 	add	x1, x20, #0xf
   913b4:	aa1403e5 	mov	x5, x20
   913b8:	2a0403f5 	mov	w21, w4
   913bc:	927df034 	and	x20, x1, #0xfffffffffffffff8
   913c0:	17fffd2d 	b	90874 <CString::FormatV(char const*, std::__va_list)+0x5a4>
   913c4:	110022b9 	add	w25, w21, #0x8
   913c8:	7100033f 	cmp	w25, #0x0
   913cc:	5400206d 	b.le	917d8 <CString::FormatV(char const*, std::__va_list)+0x1508>
   913d0:	aa1403e0 	mov	x0, x20
   913d4:	91003e86 	add	x6, x20, #0xf
   913d8:	f940001c 	ldr	x28, [x0]
   913dc:	927df0d4 	and	x20, x6, #0xfffffffffffffff8
   913e0:	2a1903f5 	mov	w21, w25
   913e4:	aa1c03e0 	mov	x0, x28
   913e8:	9400098c 	bl	93a18 <strlen>
   913ec:	aa0003f9 	mov	x25, x0
   913f0:	34ffcb38 	cbz	w24, 90d54 <CString::FormatV(char const*, std::__va_list)+0xa84>
   913f4:	aa1c03e1 	mov	x1, x28
   913f8:	aa1b03e0 	mov	x0, x27
   913fc:	940002c5 	bl	91f10 <CString::PutString(char const*)>
   91400:	eb13033f 	cmp	x25, x19
   91404:	54ff7a22 	b.cs	90348 <CString::FormatV(char const*, std::__va_list)+0x78>  // b.hs, b.nlast
   91408:	cb19027c 	sub	x28, x19, x25
   9140c:	aa1b03e0 	mov	x0, x27
   91410:	aa1c03e1 	mov	x1, x28
   91414:	d1000793 	sub	x19, x28, #0x1
   91418:	94000416 	bl	92470 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   9141c:	f2400b8a 	ands	x10, x28, #0x7
   91420:	52800408 	mov	w8, #0x20                  	// #32
   91424:	54000640 	b.eq	914ec <CString::FormatV(char const*, std::__va_list)+0x121c>  // b.none
   91428:	f100055f 	cmp	x10, #0x1
   9142c:	54000520 	b.eq	914d0 <CString::FormatV(char const*, std::__va_list)+0x1200>  // b.none
   91430:	f100095f 	cmp	x10, #0x2
   91434:	54000440 	b.eq	914bc <CString::FormatV(char const*, std::__va_list)+0x11ec>  // b.none
   91438:	f1000d5f 	cmp	x10, #0x3
   9143c:	54000360 	b.eq	914a8 <CString::FormatV(char const*, std::__va_list)+0x11d8>  // b.none
   91440:	f100115f 	cmp	x10, #0x4
   91444:	54000280 	b.eq	91494 <CString::FormatV(char const*, std::__va_list)+0x11c4>  // b.none
   91448:	f100155f 	cmp	x10, #0x5
   9144c:	540001a0 	b.eq	91480 <CString::FormatV(char const*, std::__va_list)+0x11b0>  // b.none
   91450:	f100195f 	cmp	x10, #0x6
   91454:	540000c0 	b.eq	9146c <CString::FormatV(char const*, std::__va_list)+0x119c>  // b.none
   91458:	f9400f63 	ldr	x3, [x27, #24]
   9145c:	d1000673 	sub	x19, x19, #0x1
   91460:	91000462 	add	x2, x3, #0x1
   91464:	f9000f62 	str	x2, [x27, #24]
   91468:	39000068 	strb	w8, [x3]
   9146c:	f9400f64 	ldr	x4, [x27, #24]
   91470:	d1000673 	sub	x19, x19, #0x1
   91474:	91000485 	add	x5, x4, #0x1
   91478:	f9000f65 	str	x5, [x27, #24]
   9147c:	39000088 	strb	w8, [x4]
   91480:	f9400f61 	ldr	x1, [x27, #24]
   91484:	d1000673 	sub	x19, x19, #0x1
   91488:	91000420 	add	x0, x1, #0x1
   9148c:	f9000f60 	str	x0, [x27, #24]
   91490:	39000028 	strb	w8, [x1]
   91494:	f9400f66 	ldr	x6, [x27, #24]
   91498:	d1000673 	sub	x19, x19, #0x1
   9149c:	910004c7 	add	x7, x6, #0x1
   914a0:	f9000f67 	str	x7, [x27, #24]
   914a4:	390000c8 	strb	w8, [x6]
   914a8:	f9400f79 	ldr	x25, [x27, #24]
   914ac:	d1000673 	sub	x19, x19, #0x1
   914b0:	91000738 	add	x24, x25, #0x1
   914b4:	f9000f78 	str	x24, [x27, #24]
   914b8:	39000328 	strb	w8, [x25]
   914bc:	f9400f69 	ldr	x9, [x27, #24]
   914c0:	d1000673 	sub	x19, x19, #0x1
   914c4:	9100052b 	add	x11, x9, #0x1
   914c8:	f9000f6b 	str	x11, [x27, #24]
   914cc:	39000128 	strb	w8, [x9]
   914d0:	f9400f6c 	ldr	x12, [x27, #24]
   914d4:	d1000673 	sub	x19, x19, #0x1
   914d8:	b100067f 	cmn	x19, #0x1
   914dc:	9100058d 	add	x13, x12, #0x1
   914e0:	f9000f6d 	str	x13, [x27, #24]
   914e4:	39000188 	strb	w8, [x12]
   914e8:	54ff7300 	b.eq	90348 <CString::FormatV(char const*, std::__va_list)+0x78>  // b.none
   914ec:	f9400f6e 	ldr	x14, [x27, #24]
   914f0:	d1002273 	sub	x19, x19, #0x8
   914f4:	b100067f 	cmn	x19, #0x1
   914f8:	910005cf 	add	x15, x14, #0x1
   914fc:	f9000f6f 	str	x15, [x27, #24]
   91500:	390001c8 	strb	w8, [x14]
   91504:	f9400f70 	ldr	x16, [x27, #24]
   91508:	91000611 	add	x17, x16, #0x1
   9150c:	f9000f71 	str	x17, [x27, #24]
   91510:	39000208 	strb	w8, [x16]
   91514:	f9400f72 	ldr	x18, [x27, #24]
   91518:	9100065e 	add	x30, x18, #0x1
   9151c:	f9000f7e 	str	x30, [x27, #24]
   91520:	39000248 	strb	w8, [x18]
   91524:	f9400f7c 	ldr	x28, [x27, #24]
   91528:	9100078a 	add	x10, x28, #0x1
   9152c:	f9000f6a 	str	x10, [x27, #24]
   91530:	39000388 	strb	w8, [x28]
   91534:	f9400f63 	ldr	x3, [x27, #24]
   91538:	91000462 	add	x2, x3, #0x1
   9153c:	f9000f62 	str	x2, [x27, #24]
   91540:	39000068 	strb	w8, [x3]
   91544:	f9400f64 	ldr	x4, [x27, #24]
   91548:	91000485 	add	x5, x4, #0x1
   9154c:	f9000f65 	str	x5, [x27, #24]
   91550:	39000088 	strb	w8, [x4]
   91554:	f9400f61 	ldr	x1, [x27, #24]
   91558:	91000420 	add	x0, x1, #0x1
   9155c:	f9000f60 	str	x0, [x27, #24]
   91560:	39000028 	strb	w8, [x1]
   91564:	f9400f66 	ldr	x6, [x27, #24]
   91568:	910004c7 	add	x7, x6, #0x1
   9156c:	f9000f67 	str	x7, [x27, #24]
   91570:	390000c8 	strb	w8, [x6]
   91574:	54fffbc1 	b.ne	914ec <CString::FormatV(char const*, std::__va_list)+0x121c>  // b.any
   91578:	17fffb74 	b	90348 <CString::FormatV(char const*, std::__va_list)+0x78>
   9157c:	110022b9 	add	w25, w21, #0x8
   91580:	7100033f 	cmp	w25, #0x0
   91584:	5400122d 	b.le	917c8 <CString::FormatV(char const*, std::__va_list)+0x14f8>
   91588:	aa1403ee 	mov	x14, x20
   9158c:	91002e8f 	add	x15, x20, #0xb
   91590:	2a1903f5 	mov	w21, w25
   91594:	927df1f4 	and	x20, x15, #0xfffffffffffffff8
   91598:	39c001dc 	ldrsb	w28, [x14]
   9159c:	34ffbf58 	cbz	w24, 90d84 <CString::FormatV(char const*, std::__va_list)+0xab4>
   915a0:	d2800021 	mov	x1, #0x1                   	// #1
   915a4:	aa1b03e0 	mov	x0, x27
   915a8:	940003b2 	bl	92470 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   915ac:	f9400f6b 	ldr	x11, [x27, #24]
   915b0:	f100067f 	cmp	x19, #0x1
   915b4:	9100056c 	add	x12, x11, #0x1
   915b8:	f9000f6c 	str	x12, [x27, #24]
   915bc:	3900017c 	strb	w28, [x11]
   915c0:	54ff6c49 	b.ls	90348 <CString::FormatV(char const*, std::__va_list)+0x78>  // b.plast
   915c4:	aa1b03e0 	mov	x0, x27
   915c8:	d1000661 	sub	x1, x19, #0x1
   915cc:	940003a9 	bl	92470 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   915d0:	d1000a60 	sub	x0, x19, #0x2
   915d4:	5280041c 	mov	w28, #0x20                  	// #32
   915d8:	91000408 	add	x8, x0, #0x1
   915dc:	f240090d 	ands	x13, x8, #0x7
   915e0:	54000640 	b.eq	916a8 <CString::FormatV(char const*, std::__va_list)+0x13d8>  // b.none
   915e4:	f10005bf 	cmp	x13, #0x1
   915e8:	54000520 	b.eq	9168c <CString::FormatV(char const*, std::__va_list)+0x13bc>  // b.none
   915ec:	f10009bf 	cmp	x13, #0x2
   915f0:	54000440 	b.eq	91678 <CString::FormatV(char const*, std::__va_list)+0x13a8>  // b.none
   915f4:	f1000dbf 	cmp	x13, #0x3
   915f8:	54000360 	b.eq	91664 <CString::FormatV(char const*, std::__va_list)+0x1394>  // b.none
   915fc:	f10011bf 	cmp	x13, #0x4
   91600:	54000280 	b.eq	91650 <CString::FormatV(char const*, std::__va_list)+0x1380>  // b.none
   91604:	f10015bf 	cmp	x13, #0x5
   91608:	540001a0 	b.eq	9163c <CString::FormatV(char const*, std::__va_list)+0x136c>  // b.none
   9160c:	f10019bf 	cmp	x13, #0x6
   91610:	540000c0 	b.eq	91628 <CString::FormatV(char const*, std::__va_list)+0x1358>  // b.none
   91614:	f9400f79 	ldr	x25, [x27, #24]
   91618:	d1000e60 	sub	x0, x19, #0x3
   9161c:	91000729 	add	x9, x25, #0x1
   91620:	f9000f69 	str	x9, [x27, #24]
   91624:	3900033c 	strb	w28, [x25]
   91628:	f9400f6e 	ldr	x14, [x27, #24]
   9162c:	d1000400 	sub	x0, x0, #0x1
   91630:	910005cf 	add	x15, x14, #0x1
   91634:	f9000f6f 	str	x15, [x27, #24]
   91638:	390001dc 	strb	w28, [x14]
   9163c:	f9400f70 	ldr	x16, [x27, #24]
   91640:	d1000400 	sub	x0, x0, #0x1
   91644:	91000611 	add	x17, x16, #0x1
   91648:	f9000f71 	str	x17, [x27, #24]
   9164c:	3900021c 	strb	w28, [x16]
   91650:	f9400f72 	ldr	x18, [x27, #24]
   91654:	d1000400 	sub	x0, x0, #0x1
   91658:	91000653 	add	x19, x18, #0x1
   9165c:	f9000f73 	str	x19, [x27, #24]
   91660:	3900025c 	strb	w28, [x18]
   91664:	f9400f7e 	ldr	x30, [x27, #24]
   91668:	d1000400 	sub	x0, x0, #0x1
   9166c:	910007ca 	add	x10, x30, #0x1
   91670:	f9000f6a 	str	x10, [x27, #24]
   91674:	390003dc 	strb	w28, [x30]
   91678:	f9400f62 	ldr	x2, [x27, #24]
   9167c:	d1000400 	sub	x0, x0, #0x1
   91680:	91000443 	add	x3, x2, #0x1
   91684:	f9000f63 	str	x3, [x27, #24]
   91688:	3900005c 	strb	w28, [x2]
   9168c:	f9400f64 	ldr	x4, [x27, #24]
   91690:	d1000400 	sub	x0, x0, #0x1
   91694:	b100041f 	cmn	x0, #0x1
   91698:	91000485 	add	x5, x4, #0x1
   9169c:	f9000f65 	str	x5, [x27, #24]
   916a0:	3900009c 	strb	w28, [x4]
   916a4:	54ff6520 	b.eq	90348 <CString::FormatV(char const*, std::__va_list)+0x78>  // b.none
   916a8:	f9400f61 	ldr	x1, [x27, #24]
   916ac:	d1002000 	sub	x0, x0, #0x8
   916b0:	b100041f 	cmn	x0, #0x1
   916b4:	91000426 	add	x6, x1, #0x1
   916b8:	f9000f66 	str	x6, [x27, #24]
   916bc:	3900003c 	strb	w28, [x1]
   916c0:	f9400f78 	ldr	x24, [x27, #24]
   916c4:	91000707 	add	x7, x24, #0x1
   916c8:	f9000f67 	str	x7, [x27, #24]
   916cc:	3900031c 	strb	w28, [x24]
   916d0:	f9400f6b 	ldr	x11, [x27, #24]
   916d4:	9100056c 	add	x12, x11, #0x1
   916d8:	f9000f6c 	str	x12, [x27, #24]
   916dc:	3900017c 	strb	w28, [x11]
   916e0:	f9400f68 	ldr	x8, [x27, #24]
   916e4:	9100050d 	add	x13, x8, #0x1
   916e8:	f9000f6d 	str	x13, [x27, #24]
   916ec:	3900011c 	strb	w28, [x8]
   916f0:	f9400f79 	ldr	x25, [x27, #24]
   916f4:	91000729 	add	x9, x25, #0x1
   916f8:	f9000f69 	str	x9, [x27, #24]
   916fc:	3900033c 	strb	w28, [x25]
   91700:	f9400f6e 	ldr	x14, [x27, #24]
   91704:	910005cf 	add	x15, x14, #0x1
   91708:	f9000f6f 	str	x15, [x27, #24]
   9170c:	390001dc 	strb	w28, [x14]
   91710:	f9400f70 	ldr	x16, [x27, #24]
   91714:	91000611 	add	x17, x16, #0x1
   91718:	f9000f71 	str	x17, [x27, #24]
   9171c:	3900021c 	strb	w28, [x16]
   91720:	f9400f72 	ldr	x18, [x27, #24]
   91724:	91000653 	add	x19, x18, #0x1
   91728:	f9000f73 	str	x19, [x27, #24]
   9172c:	3900025c 	strb	w28, [x18]
   91730:	54fffbc1 	b.ne	916a8 <CString::FormatV(char const*, std::__va_list)+0x13d8>  // b.any
   91734:	17fffb05 	b	90348 <CString::FormatV(char const*, std::__va_list)+0x78>
   91738:	110022b1 	add	w17, w21, #0x8
   9173c:	7100023f 	cmp	w17, #0x0
   91740:	54001e6d 	b.le	91b0c <CString::FormatV(char const*, std::__va_list)+0x183c>
   91744:	aa1403eb 	mov	x11, x20
   91748:	91003e9e 	add	x30, x20, #0xf
   9174c:	2a1103f5 	mov	w21, w17
   91750:	927df3d4 	and	x20, x30, #0xfffffffffffffff8
   91754:	f9400170 	ldr	x16, [x11]
   91758:	17fffce9 	b	90afc <CString::FormatV(char const*, std::__va_list)+0x82c>
   9175c:	110022a8 	add	w8, w21, #0x8
   91760:	7100011f 	cmp	w8, #0x0
   91764:	54001ccd 	b.le	91afc <CString::FormatV(char const*, std::__va_list)+0x182c>
   91768:	91002e84 	add	x4, x20, #0xb
   9176c:	aa1403e9 	mov	x9, x20
   91770:	2a0803f5 	mov	w21, w8
   91774:	927df094 	and	x20, x4, #0xfffffffffffffff8
   91778:	17fffce0 	b	90af8 <CString::FormatV(char const*, std::__va_list)+0x828>
   9177c:	aa0803f1 	mov	x17, x8
   91780:	d2800021 	mov	x1, #0x1                   	// #1
   91784:	aa0803f0 	mov	x16, x8
   91788:	17fffb41 	b	9048c <CString::FormatV(char const*, std::__va_list)+0x1bc>
   9178c:	aa1003e5 	mov	x5, x16
   91790:	d280002f 	mov	x15, #0x1                   	// #1
   91794:	aa1003f1 	mov	x17, x16
   91798:	17fffce1 	b	90b1c <CString::FormatV(char const*, std::__va_list)+0x84c>
   9179c:	aa1b03e0 	mov	x0, x27
   917a0:	d2800021 	mov	x1, #0x1                   	// #1
   917a4:	f90033e6 	str	x6, [sp, #96]
   917a8:	94000332 	bl	92470 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   917ac:	f9400f65 	ldr	x5, [x27, #24]
   917b0:	528005ad 	mov	w13, #0x2d                  	// #45
   917b4:	f94033e6 	ldr	x6, [sp, #96]
   917b8:	910004a0 	add	x0, x5, #0x1
   917bc:	f9000f60 	str	x0, [x27, #24]
   917c0:	390000ad 	strb	w13, [x5]
   917c4:	17fffc52 	b	9090c <CString::FormatV(char const*, std::__va_list)+0x63c>
   917c8:	f94037e9 	ldr	x9, [sp, #104]
   917cc:	8b35c12e 	add	x14, x9, w21, sxtw
   917d0:	2a1903f5 	mov	w21, w25
   917d4:	17fffd6a 	b	90d7c <CString::FormatV(char const*, std::__va_list)+0xaac>
   917d8:	f94037e1 	ldr	x1, [sp, #104]
   917dc:	8b35c020 	add	x0, x1, w21, sxtw
   917e0:	2a1903f5 	mov	w21, w25
   917e4:	17fffd57 	b	90d40 <CString::FormatV(char const*, std::__va_list)+0xa70>
   917e8:	b94083f9 	ldr	w25, [sp, #128]
   917ec:	b90083ea 	str	w10, [sp, #128]
   917f0:	f9400ae2 	ldr	x2, [x23, #16]
   917f4:	8b39c05c 	add	x28, x2, w25, sxtw
   917f8:	17fffb75 	b	905cc <CString::FormatV(char const*, std::__va_list)+0x2fc>
   917fc:	34002b79 	cbz	w25, 91d68 <CString::FormatV(char const*, std::__va_list)+0x1a98>
   91800:	eb06027f 	cmp	x19, x6
   91804:	54ff67e9 	b.ls	90500 <CString::FormatV(char const*, std::__va_list)+0x230>  // b.plast
   91808:	cb060273 	sub	x19, x19, x6
   9180c:	aa1b03e0 	mov	x0, x27
   91810:	aa1303e1 	mov	x1, x19
   91814:	94000317 	bl	92470 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   91818:	f2400a6d 	ands	x13, x19, #0x7
   9181c:	d1000660 	sub	x0, x19, #0x1
   91820:	52800604 	mov	w4, #0x30                  	// #48
   91824:	54000640 	b.eq	918ec <CString::FormatV(char const*, std::__va_list)+0x161c>  // b.none
   91828:	f10005bf 	cmp	x13, #0x1
   9182c:	54000520 	b.eq	918d0 <CString::FormatV(char const*, std::__va_list)+0x1600>  // b.none
   91830:	f10009bf 	cmp	x13, #0x2
   91834:	54000440 	b.eq	918bc <CString::FormatV(char const*, std::__va_list)+0x15ec>  // b.none
   91838:	f1000dbf 	cmp	x13, #0x3
   9183c:	54000360 	b.eq	918a8 <CString::FormatV(char const*, std::__va_list)+0x15d8>  // b.none
   91840:	f10011bf 	cmp	x13, #0x4
   91844:	54000280 	b.eq	91894 <CString::FormatV(char const*, std::__va_list)+0x15c4>  // b.none
   91848:	f10015bf 	cmp	x13, #0x5
   9184c:	540001a0 	b.eq	91880 <CString::FormatV(char const*, std::__va_list)+0x15b0>  // b.none
   91850:	f10019bf 	cmp	x13, #0x6
   91854:	540000c0 	b.eq	9186c <CString::FormatV(char const*, std::__va_list)+0x159c>  // b.none
   91858:	f9400f65 	ldr	x5, [x27, #24]
   9185c:	d1000400 	sub	x0, x0, #0x1
   91860:	910004a1 	add	x1, x5, #0x1
   91864:	f9000f61 	str	x1, [x27, #24]
   91868:	390000a4 	strb	w4, [x5]
   9186c:	f9400f66 	ldr	x6, [x27, #24]
   91870:	d1000400 	sub	x0, x0, #0x1
   91874:	910004c7 	add	x7, x6, #0x1
   91878:	f9000f67 	str	x7, [x27, #24]
   9187c:	390000c4 	strb	w4, [x6]
   91880:	f9400f6b 	ldr	x11, [x27, #24]
   91884:	d1000400 	sub	x0, x0, #0x1
   91888:	9100056c 	add	x12, x11, #0x1
   9188c:	f9000f6c 	str	x12, [x27, #24]
   91890:	39000164 	strb	w4, [x11]
   91894:	f9400f68 	ldr	x8, [x27, #24]
   91898:	d1000400 	sub	x0, x0, #0x1
   9189c:	91000509 	add	x9, x8, #0x1
   918a0:	f9000f69 	str	x9, [x27, #24]
   918a4:	39000104 	strb	w4, [x8]
   918a8:	f9400f6e 	ldr	x14, [x27, #24]
   918ac:	d1000400 	sub	x0, x0, #0x1
   918b0:	910005cf 	add	x15, x14, #0x1
   918b4:	f9000f6f 	str	x15, [x27, #24]
   918b8:	390001c4 	strb	w4, [x14]
   918bc:	f9400f70 	ldr	x16, [x27, #24]
   918c0:	d1000400 	sub	x0, x0, #0x1
   918c4:	91000611 	add	x17, x16, #0x1
   918c8:	f9000f71 	str	x17, [x27, #24]
   918cc:	39000204 	strb	w4, [x16]
   918d0:	f9400f72 	ldr	x18, [x27, #24]
   918d4:	d1000400 	sub	x0, x0, #0x1
   918d8:	b100041f 	cmn	x0, #0x1
   918dc:	9100065e 	add	x30, x18, #0x1
   918e0:	f9000f7e 	str	x30, [x27, #24]
   918e4:	39000244 	strb	w4, [x18]
   918e8:	54ff60c0 	b.eq	90500 <CString::FormatV(char const*, std::__va_list)+0x230>  // b.none
   918ec:	f9400f6a 	ldr	x10, [x27, #24]
   918f0:	d1002000 	sub	x0, x0, #0x8
   918f4:	b100041f 	cmn	x0, #0x1
   918f8:	91000542 	add	x2, x10, #0x1
   918fc:	f9000f62 	str	x2, [x27, #24]
   91900:	39000144 	strb	w4, [x10]
   91904:	f9400f78 	ldr	x24, [x27, #24]
   91908:	91000703 	add	x3, x24, #0x1
   9190c:	f9000f63 	str	x3, [x27, #24]
   91910:	39000304 	strb	w4, [x24]
   91914:	f9400f79 	ldr	x25, [x27, #24]
   91918:	9100073c 	add	x28, x25, #0x1
   9191c:	f9000f7c 	str	x28, [x27, #24]
   91920:	39000324 	strb	w4, [x25]
   91924:	f9400f73 	ldr	x19, [x27, #24]
   91928:	9100066d 	add	x13, x19, #0x1
   9192c:	f9000f6d 	str	x13, [x27, #24]
   91930:	39000264 	strb	w4, [x19]
   91934:	f9400f65 	ldr	x5, [x27, #24]
   91938:	910004a1 	add	x1, x5, #0x1
   9193c:	f9000f61 	str	x1, [x27, #24]
   91940:	390000a4 	strb	w4, [x5]
   91944:	f9400f66 	ldr	x6, [x27, #24]
   91948:	910004c7 	add	x7, x6, #0x1
   9194c:	f9000f67 	str	x7, [x27, #24]
   91950:	390000c4 	strb	w4, [x6]
   91954:	f9400f6b 	ldr	x11, [x27, #24]
   91958:	9100056c 	add	x12, x11, #0x1
   9195c:	f9000f6c 	str	x12, [x27, #24]
   91960:	39000164 	strb	w4, [x11]
   91964:	f9400f68 	ldr	x8, [x27, #24]
   91968:	91000509 	add	x9, x8, #0x1
   9196c:	f9000f69 	str	x9, [x27, #24]
   91970:	39000104 	strb	w4, [x8]
   91974:	54fffbc1 	b.ne	918ec <CString::FormatV(char const*, std::__va_list)+0x161c>  // b.any
   91978:	17fffae2 	b	90500 <CString::FormatV(char const*, std::__va_list)+0x230>
   9197c:	aa1b03e0 	mov	x0, x27
   91980:	d1000661 	sub	x1, x19, #0x1
   91984:	940002bb 	bl	92470 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   91988:	d1000a60 	sub	x0, x19, #0x2
   9198c:	52800418 	mov	w24, #0x20                  	// #32
   91990:	91000411 	add	x17, x0, #0x1
   91994:	f2400a32 	ands	x18, x17, #0x7
   91998:	54000640 	b.eq	91a60 <CString::FormatV(char const*, std::__va_list)+0x1790>  // b.none
   9199c:	f100065f 	cmp	x18, #0x1
   919a0:	54000520 	b.eq	91a44 <CString::FormatV(char const*, std::__va_list)+0x1774>  // b.none
   919a4:	f1000a5f 	cmp	x18, #0x2
   919a8:	54000440 	b.eq	91a30 <CString::FormatV(char const*, std::__va_list)+0x1760>  // b.none
   919ac:	f1000e5f 	cmp	x18, #0x3
   919b0:	54000360 	b.eq	91a1c <CString::FormatV(char const*, std::__va_list)+0x174c>  // b.none
   919b4:	f100125f 	cmp	x18, #0x4
   919b8:	54000280 	b.eq	91a08 <CString::FormatV(char const*, std::__va_list)+0x1738>  // b.none
   919bc:	f100165f 	cmp	x18, #0x5
   919c0:	540001a0 	b.eq	919f4 <CString::FormatV(char const*, std::__va_list)+0x1724>  // b.none
   919c4:	f1001a5f 	cmp	x18, #0x6
   919c8:	540000c0 	b.eq	919e0 <CString::FormatV(char const*, std::__va_list)+0x1710>  // b.none
   919cc:	d1000e60 	sub	x0, x19, #0x3
   919d0:	f9400f73 	ldr	x19, [x27, #24]
   919d4:	9100067e 	add	x30, x19, #0x1
   919d8:	f9000f7e 	str	x30, [x27, #24]
   919dc:	39000278 	strb	w24, [x19]
   919e0:	f9400f6a 	ldr	x10, [x27, #24]
   919e4:	d1000400 	sub	x0, x0, #0x1
   919e8:	91000543 	add	x3, x10, #0x1
   919ec:	f9000f63 	str	x3, [x27, #24]
   919f0:	39000158 	strb	w24, [x10]
   919f4:	f9400f62 	ldr	x2, [x27, #24]
   919f8:	d1000400 	sub	x0, x0, #0x1
   919fc:	91000444 	add	x4, x2, #0x1
   91a00:	f9000f64 	str	x4, [x27, #24]
   91a04:	39000058 	strb	w24, [x2]
   91a08:	f9400f65 	ldr	x5, [x27, #24]
   91a0c:	d1000400 	sub	x0, x0, #0x1
   91a10:	910004a1 	add	x1, x5, #0x1
   91a14:	f9000f61 	str	x1, [x27, #24]
   91a18:	390000b8 	strb	w24, [x5]
   91a1c:	f9400f66 	ldr	x6, [x27, #24]
   91a20:	d1000400 	sub	x0, x0, #0x1
   91a24:	910004c7 	add	x7, x6, #0x1
   91a28:	f9000f67 	str	x7, [x27, #24]
   91a2c:	390000d8 	strb	w24, [x6]
   91a30:	f9400f6b 	ldr	x11, [x27, #24]
   91a34:	d1000400 	sub	x0, x0, #0x1
   91a38:	9100056c 	add	x12, x11, #0x1
   91a3c:	f9000f6c 	str	x12, [x27, #24]
   91a40:	39000178 	strb	w24, [x11]
   91a44:	f9400f68 	ldr	x8, [x27, #24]
   91a48:	d1000400 	sub	x0, x0, #0x1
   91a4c:	b100041f 	cmn	x0, #0x1
   91a50:	9100050d 	add	x13, x8, #0x1
   91a54:	f9000f6d 	str	x13, [x27, #24]
   91a58:	39000118 	strb	w24, [x8]
   91a5c:	54ff9980 	b.eq	90d8c <CString::FormatV(char const*, std::__va_list)+0xabc>  // b.none
   91a60:	f9400f79 	ldr	x25, [x27, #24]
   91a64:	d1002000 	sub	x0, x0, #0x8
   91a68:	b100041f 	cmn	x0, #0x1
   91a6c:	91000729 	add	x9, x25, #0x1
   91a70:	f9000f69 	str	x9, [x27, #24]
   91a74:	39000338 	strb	w24, [x25]
   91a78:	f9400f6e 	ldr	x14, [x27, #24]
   91a7c:	910005cf 	add	x15, x14, #0x1
   91a80:	f9000f6f 	str	x15, [x27, #24]
   91a84:	390001d8 	strb	w24, [x14]
   91a88:	f9400f70 	ldr	x16, [x27, #24]
   91a8c:	91000611 	add	x17, x16, #0x1
   91a90:	f9000f71 	str	x17, [x27, #24]
   91a94:	39000218 	strb	w24, [x16]
   91a98:	f9400f72 	ldr	x18, [x27, #24]
   91a9c:	91000653 	add	x19, x18, #0x1
   91aa0:	f9000f73 	str	x19, [x27, #24]
   91aa4:	39000258 	strb	w24, [x18]
   91aa8:	f9400f7e 	ldr	x30, [x27, #24]
   91aac:	910007ca 	add	x10, x30, #0x1
   91ab0:	f9000f6a 	str	x10, [x27, #24]
   91ab4:	390003d8 	strb	w24, [x30]
   91ab8:	f9400f62 	ldr	x2, [x27, #24]
   91abc:	91000443 	add	x3, x2, #0x1
   91ac0:	f9000f63 	str	x3, [x27, #24]
   91ac4:	39000058 	strb	w24, [x2]
   91ac8:	f9400f64 	ldr	x4, [x27, #24]
   91acc:	91000485 	add	x5, x4, #0x1
   91ad0:	f9000f65 	str	x5, [x27, #24]
   91ad4:	39000098 	strb	w24, [x4]
   91ad8:	f9400f61 	ldr	x1, [x27, #24]
   91adc:	91000426 	add	x6, x1, #0x1
   91ae0:	f9000f66 	str	x6, [x27, #24]
   91ae4:	39000038 	strb	w24, [x1]
   91ae8:	54fffbc1 	b.ne	91a60 <CString::FormatV(char const*, std::__va_list)+0x1790>  // b.any
   91aec:	17fffca8 	b	90d8c <CString::FormatV(char const*, std::__va_list)+0xabc>
   91af0:	aa1a03e5 	mov	x5, x26
   91af4:	9100075a 	add	x26, x26, #0x1
   91af8:	17fffa47 	b	90414 <CString::FormatV(char const*, std::__va_list)+0x144>
   91afc:	f94037e1 	ldr	x1, [sp, #104]
   91b00:	8b35c029 	add	x9, x1, w21, sxtw
   91b04:	2a0803f5 	mov	w21, w8
   91b08:	17fffbfc 	b	90af8 <CString::FormatV(char const*, std::__va_list)+0x828>
   91b0c:	f94037f2 	ldr	x18, [sp, #104]
   91b10:	8b35c24b 	add	x11, x18, w21, sxtw
   91b14:	2a1103f5 	mov	w21, w17
   91b18:	f9400170 	ldr	x16, [x11]
   91b1c:	17fffbf8 	b	90afc <CString::FormatV(char const*, std::__va_list)+0x82c>
   91b20:	f9400f72 	ldr	x18, [x27, #24]
   91b24:	d1000400 	sub	x0, x0, #0x1
   91b28:	9100064b 	add	x11, x18, #0x1
   91b2c:	f9000f6b 	str	x11, [x27, #24]
   91b30:	3900025c 	strb	w28, [x18]
   91b34:	17fffcb8 	b	90e14 <CString::FormatV(char const*, std::__va_list)+0xb44>
   91b38:	cb000278 	sub	x24, x19, x0
   91b3c:	aa1b03e0 	mov	x0, x27
   91b40:	aa1803e1 	mov	x1, x24
   91b44:	d1000713 	sub	x19, x24, #0x1
   91b48:	9400024a 	bl	92470 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   91b4c:	f2400b09 	ands	x9, x24, #0x7
   91b50:	5280040a 	mov	w10, #0x20                  	// #32
   91b54:	54000640 	b.eq	91c1c <CString::FormatV(char const*, std::__va_list)+0x194c>  // b.none
   91b58:	f100053f 	cmp	x9, #0x1
   91b5c:	54000520 	b.eq	91c00 <CString::FormatV(char const*, std::__va_list)+0x1930>  // b.none
   91b60:	f100093f 	cmp	x9, #0x2
   91b64:	54000440 	b.eq	91bec <CString::FormatV(char const*, std::__va_list)+0x191c>  // b.none
   91b68:	f1000d3f 	cmp	x9, #0x3
   91b6c:	54000360 	b.eq	91bd8 <CString::FormatV(char const*, std::__va_list)+0x1908>  // b.none
   91b70:	f100113f 	cmp	x9, #0x4
   91b74:	54000280 	b.eq	91bc4 <CString::FormatV(char const*, std::__va_list)+0x18f4>  // b.none
   91b78:	f100153f 	cmp	x9, #0x5
   91b7c:	540001a0 	b.eq	91bb0 <CString::FormatV(char const*, std::__va_list)+0x18e0>  // b.none
   91b80:	f100193f 	cmp	x9, #0x6
   91b84:	540000c0 	b.eq	91b9c <CString::FormatV(char const*, std::__va_list)+0x18cc>  // b.none
   91b88:	f9400f6b 	ldr	x11, [x27, #24]
   91b8c:	d1000673 	sub	x19, x19, #0x1
   91b90:	9100056c 	add	x12, x11, #0x1
   91b94:	f9000f6c 	str	x12, [x27, #24]
   91b98:	3900016a 	strb	w10, [x11]
   91b9c:	f9400f6d 	ldr	x13, [x27, #24]
   91ba0:	d1000673 	sub	x19, x19, #0x1
   91ba4:	910005ae 	add	x14, x13, #0x1
   91ba8:	f9000f6e 	str	x14, [x27, #24]
   91bac:	390001aa 	strb	w10, [x13]
   91bb0:	f9400f6f 	ldr	x15, [x27, #24]
   91bb4:	d1000673 	sub	x19, x19, #0x1
   91bb8:	910005f0 	add	x16, x15, #0x1
   91bbc:	f9000f70 	str	x16, [x27, #24]
   91bc0:	390001ea 	strb	w10, [x15]
   91bc4:	f9400f71 	ldr	x17, [x27, #24]
   91bc8:	d1000673 	sub	x19, x19, #0x1
   91bcc:	91000632 	add	x18, x17, #0x1
   91bd0:	f9000f72 	str	x18, [x27, #24]
   91bd4:	3900022a 	strb	w10, [x17]
   91bd8:	f9400f7e 	ldr	x30, [x27, #24]
   91bdc:	d1000673 	sub	x19, x19, #0x1
   91be0:	910007c2 	add	x2, x30, #0x1
   91be4:	f9000f62 	str	x2, [x27, #24]
   91be8:	390003ca 	strb	w10, [x30]
   91bec:	f9400f68 	ldr	x8, [x27, #24]
   91bf0:	d1000673 	sub	x19, x19, #0x1
   91bf4:	91000503 	add	x3, x8, #0x1
   91bf8:	f9000f63 	str	x3, [x27, #24]
   91bfc:	3900010a 	strb	w10, [x8]
   91c00:	f9400f64 	ldr	x4, [x27, #24]
   91c04:	d1000673 	sub	x19, x19, #0x1
   91c08:	b100067f 	cmn	x19, #0x1
   91c0c:	91000485 	add	x5, x4, #0x1
   91c10:	f9000f65 	str	x5, [x27, #24]
   91c14:	3900008a 	strb	w10, [x4]
   91c18:	54ff8a20 	b.eq	90d5c <CString::FormatV(char const*, std::__va_list)+0xa8c>  // b.none
   91c1c:	f9400f61 	ldr	x1, [x27, #24]
   91c20:	d1002273 	sub	x19, x19, #0x8
   91c24:	b100067f 	cmn	x19, #0x1
   91c28:	91000420 	add	x0, x1, #0x1
   91c2c:	f9000f60 	str	x0, [x27, #24]
   91c30:	3900002a 	strb	w10, [x1]
   91c34:	f9400f66 	ldr	x6, [x27, #24]
   91c38:	910004c7 	add	x7, x6, #0x1
   91c3c:	f9000f67 	str	x7, [x27, #24]
   91c40:	390000ca 	strb	w10, [x6]
   91c44:	f9400f79 	ldr	x25, [x27, #24]
   91c48:	91000738 	add	x24, x25, #0x1
   91c4c:	f9000f78 	str	x24, [x27, #24]
   91c50:	3900032a 	strb	w10, [x25]
   91c54:	f9400f69 	ldr	x9, [x27, #24]
   91c58:	9100052b 	add	x11, x9, #0x1
   91c5c:	f9000f6b 	str	x11, [x27, #24]
   91c60:	3900012a 	strb	w10, [x9]
   91c64:	f9400f6c 	ldr	x12, [x27, #24]
   91c68:	9100058d 	add	x13, x12, #0x1
   91c6c:	f9000f6d 	str	x13, [x27, #24]
   91c70:	3900018a 	strb	w10, [x12]
   91c74:	f9400f6e 	ldr	x14, [x27, #24]
   91c78:	910005cf 	add	x15, x14, #0x1
   91c7c:	f9000f6f 	str	x15, [x27, #24]
   91c80:	390001ca 	strb	w10, [x14]
   91c84:	f9400f70 	ldr	x16, [x27, #24]
   91c88:	91000611 	add	x17, x16, #0x1
   91c8c:	f9000f71 	str	x17, [x27, #24]
   91c90:	3900020a 	strb	w10, [x16]
   91c94:	f9400f72 	ldr	x18, [x27, #24]
   91c98:	9100065e 	add	x30, x18, #0x1
   91c9c:	f9000f7e 	str	x30, [x27, #24]
   91ca0:	3900024a 	strb	w10, [x18]
   91ca4:	54fffbc1 	b.ne	91c1c <CString::FormatV(char const*, std::__va_list)+0x194c>  // b.any
   91ca8:	17fffc2d 	b	90d5c <CString::FormatV(char const*, std::__va_list)+0xa8c>
   91cac:	110022a4 	add	w4, w21, #0x8
   91cb0:	7100009f 	cmp	w4, #0x0
   91cb4:	5400050d 	b.le	91d54 <CString::FormatV(char const*, std::__va_list)+0x1a84>
   91cb8:	aa1403e5 	mov	x5, x20
   91cbc:	91003e81 	add	x1, x20, #0xf
   91cc0:	2a0403f5 	mov	w21, w4
   91cc4:	927df034 	and	x20, x1, #0xfffffffffffffff8
   91cc8:	f94000a7 	ldr	x7, [x5]
   91ccc:	17fffd27 	b	91168 <CString::FormatV(char const*, std::__va_list)+0xe98>
   91cd0:	110022bc 	add	w28, w21, #0x8
   91cd4:	7100039f 	cmp	w28, #0x0
   91cd8:	5400036d 	b.le	91d44 <CString::FormatV(char const*, std::__va_list)+0x1a74>
   91cdc:	91002e82 	add	x2, x20, #0xb
   91ce0:	aa1403ea 	mov	x10, x20
   91ce4:	2a1c03f5 	mov	w21, w28
   91ce8:	927df054 	and	x20, x2, #0xfffffffffffffff8
   91cec:	17fffd1e 	b	91164 <CString::FormatV(char const*, std::__va_list)+0xe94>
   91cf0:	f94037e0 	ldr	x0, [sp, #104]
   91cf4:	8b35c005 	add	x5, x0, w21, sxtw
   91cf8:	2a0403f5 	mov	w21, w4
   91cfc:	17fffade 	b	90874 <CString::FormatV(char const*, std::__va_list)+0x5a4>
   91d00:	d2800021 	mov	x1, #0x1                   	// #1
   91d04:	aa1b03e0 	mov	x0, x27
   91d08:	f90033e6 	str	x6, [sp, #96]
   91d0c:	940001d9 	bl	92470 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   91d10:	f9400f79 	ldr	x25, [x27, #24]
   91d14:	528005b8 	mov	w24, #0x2d                  	// #45
   91d18:	f94033e6 	ldr	x6, [sp, #96]
   91d1c:	9100073c 	add	x28, x25, #0x1
   91d20:	f9000f7c 	str	x28, [x27, #24]
   91d24:	39000338 	strb	w24, [x25]
   91d28:	17fffeb6 	b	91800 <CString::FormatV(char const*, std::__va_list)+0x1530>
   91d2c:	aa0b03e3 	mov	x3, x11
   91d30:	d280002c 	mov	x12, #0x1                   	// #1
   91d34:	17fffade 	b	908ac <CString::FormatV(char const*, std::__va_list)+0x5dc>
   91d38:	aa0b03e3 	mov	x3, x11
   91d3c:	d280002c 	mov	x12, #0x1                   	// #1
   91d40:	17fffd17 	b	9119c <CString::FormatV(char const*, std::__va_list)+0xecc>
   91d44:	f94037fe 	ldr	x30, [sp, #104]
   91d48:	8b35c3ca 	add	x10, x30, w21, sxtw
   91d4c:	2a1c03f5 	mov	w21, w28
   91d50:	17fffd05 	b	91164 <CString::FormatV(char const*, std::__va_list)+0xe94>
   91d54:	f94037e0 	ldr	x0, [sp, #104]
   91d58:	8b35c005 	add	x5, x0, w21, sxtw
   91d5c:	2a0403f5 	mov	w21, w4
   91d60:	f94000a7 	ldr	x7, [x5]
   91d64:	17fffd01 	b	91168 <CString::FormatV(char const*, std::__va_list)+0xe98>
   91d68:	eb13001f 	cmp	x0, x19
   91d6c:	54ff3ca2 	b.cs	90500 <CString::FormatV(char const*, std::__va_list)+0x230>  // b.hs, b.nlast
   91d70:	17fffd27 	b	9120c <CString::FormatV(char const*, std::__va_list)+0xf3c>
   91d74:	d503201f 	nop
   91d78:	d503201f 	nop
   91d7c:	d503201f 	nop

0000000000091d80 <CString::PutChar(char, unsigned long)>:
   91d80:	b4000c42 	cbz	x2, 91f08 <CString::PutChar(char, unsigned long)+0x188>
   91d84:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   91d88:	aa0203f4 	mov	x20, x2
   91d8c:	aa0003f3 	mov	x19, x0
   91d90:	a9017bf5 	stp	x21, x30, [sp, #16]
   91d94:	13001c35 	sxtb	w21, w1
   91d98:	aa0203e1 	mov	x1, x2
   91d9c:	940001b5 	bl	92470 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   91da0:	f2400a81 	ands	x1, x20, #0x7
   91da4:	d1000680 	sub	x0, x20, #0x1
   91da8:	54000640 	b.eq	91e70 <CString::PutChar(char, unsigned long)+0xf0>  // b.none
   91dac:	f100043f 	cmp	x1, #0x1
   91db0:	54000520 	b.eq	91e54 <CString::PutChar(char, unsigned long)+0xd4>  // b.none
   91db4:	f100083f 	cmp	x1, #0x2
   91db8:	54000440 	b.eq	91e40 <CString::PutChar(char, unsigned long)+0xc0>  // b.none
   91dbc:	f1000c3f 	cmp	x1, #0x3
   91dc0:	54000360 	b.eq	91e2c <CString::PutChar(char, unsigned long)+0xac>  // b.none
   91dc4:	f100103f 	cmp	x1, #0x4
   91dc8:	54000280 	b.eq	91e18 <CString::PutChar(char, unsigned long)+0x98>  // b.none
   91dcc:	f100143f 	cmp	x1, #0x5
   91dd0:	540001a0 	b.eq	91e04 <CString::PutChar(char, unsigned long)+0x84>  // b.none
   91dd4:	f100183f 	cmp	x1, #0x6
   91dd8:	540000c0 	b.eq	91df0 <CString::PutChar(char, unsigned long)+0x70>  // b.none
   91ddc:	f9400e63 	ldr	x3, [x19, #24]
   91de0:	d1000400 	sub	x0, x0, #0x1
   91de4:	91000462 	add	x2, x3, #0x1
   91de8:	f9000e62 	str	x2, [x19, #24]
   91dec:	39000075 	strb	w21, [x3]
   91df0:	f9400e64 	ldr	x4, [x19, #24]
   91df4:	d1000400 	sub	x0, x0, #0x1
   91df8:	91000485 	add	x5, x4, #0x1
   91dfc:	f9000e65 	str	x5, [x19, #24]
   91e00:	39000095 	strb	w21, [x4]
   91e04:	f9400e66 	ldr	x6, [x19, #24]
   91e08:	d1000400 	sub	x0, x0, #0x1
   91e0c:	910004c7 	add	x7, x6, #0x1
   91e10:	f9000e67 	str	x7, [x19, #24]
   91e14:	390000d5 	strb	w21, [x6]
   91e18:	f9400e68 	ldr	x8, [x19, #24]
   91e1c:	d1000400 	sub	x0, x0, #0x1
   91e20:	91000509 	add	x9, x8, #0x1
   91e24:	f9000e69 	str	x9, [x19, #24]
   91e28:	39000115 	strb	w21, [x8]
   91e2c:	f9400e6a 	ldr	x10, [x19, #24]
   91e30:	d1000400 	sub	x0, x0, #0x1
   91e34:	9100054b 	add	x11, x10, #0x1
   91e38:	f9000e6b 	str	x11, [x19, #24]
   91e3c:	39000155 	strb	w21, [x10]
   91e40:	f9400e6c 	ldr	x12, [x19, #24]
   91e44:	d1000400 	sub	x0, x0, #0x1
   91e48:	9100058d 	add	x13, x12, #0x1
   91e4c:	f9000e6d 	str	x13, [x19, #24]
   91e50:	39000195 	strb	w21, [x12]
   91e54:	f9400e6e 	ldr	x14, [x19, #24]
   91e58:	d1000400 	sub	x0, x0, #0x1
   91e5c:	b100041f 	cmn	x0, #0x1
   91e60:	910005cf 	add	x15, x14, #0x1
   91e64:	f9000e6f 	str	x15, [x19, #24]
   91e68:	390001d5 	strb	w21, [x14]
   91e6c:	54000480 	b.eq	91efc <CString::PutChar(char, unsigned long)+0x17c>  // b.none
   91e70:	f9400e70 	ldr	x16, [x19, #24]
   91e74:	d1002000 	sub	x0, x0, #0x8
   91e78:	b100041f 	cmn	x0, #0x1
   91e7c:	91000611 	add	x17, x16, #0x1
   91e80:	f9000e71 	str	x17, [x19, #24]
   91e84:	39000215 	strb	w21, [x16]
   91e88:	f9400e72 	ldr	x18, [x19, #24]
   91e8c:	9100065e 	add	x30, x18, #0x1
   91e90:	f9000e7e 	str	x30, [x19, #24]
   91e94:	39000255 	strb	w21, [x18]
   91e98:	f9400e74 	ldr	x20, [x19, #24]
   91e9c:	91000681 	add	x1, x20, #0x1
   91ea0:	f9000e61 	str	x1, [x19, #24]
   91ea4:	39000295 	strb	w21, [x20]
   91ea8:	f9400e63 	ldr	x3, [x19, #24]
   91eac:	91000462 	add	x2, x3, #0x1
   91eb0:	f9000e62 	str	x2, [x19, #24]
   91eb4:	39000075 	strb	w21, [x3]
   91eb8:	f9400e64 	ldr	x4, [x19, #24]
   91ebc:	91000485 	add	x5, x4, #0x1
   91ec0:	f9000e65 	str	x5, [x19, #24]
   91ec4:	39000095 	strb	w21, [x4]
   91ec8:	f9400e66 	ldr	x6, [x19, #24]
   91ecc:	910004c7 	add	x7, x6, #0x1
   91ed0:	f9000e67 	str	x7, [x19, #24]
   91ed4:	390000d5 	strb	w21, [x6]
   91ed8:	f9400e68 	ldr	x8, [x19, #24]
   91edc:	91000509 	add	x9, x8, #0x1
   91ee0:	f9000e69 	str	x9, [x19, #24]
   91ee4:	39000115 	strb	w21, [x8]
   91ee8:	f9400e6a 	ldr	x10, [x19, #24]
   91eec:	9100054b 	add	x11, x10, #0x1
   91ef0:	f9000e6b 	str	x11, [x19, #24]
   91ef4:	39000155 	strb	w21, [x10]
   91ef8:	54fffbc1 	b.ne	91e70 <CString::PutChar(char, unsigned long)+0xf0>  // b.any
   91efc:	a9417bf5 	ldp	x21, x30, [sp, #16]
   91f00:	a8c253f3 	ldp	x19, x20, [sp], #32
   91f04:	d65f03c0 	ret
   91f08:	d65f03c0 	ret
   91f0c:	d503201f 	nop

0000000000091f10 <CString::PutString(char const*)>:
   91f10:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   91f14:	aa0003f3 	mov	x19, x0
   91f18:	aa0103e0 	mov	x0, x1
   91f1c:	a9017bf5 	stp	x21, x30, [sp, #16]
   91f20:	aa0103f5 	mov	x21, x1
   91f24:	940006bd 	bl	93a18 <strlen>
   91f28:	aa0003f4 	mov	x20, x0
   91f2c:	b4000080 	cbz	x0, 91f3c <CString::PutString(char const*)+0x2c>
   91f30:	aa0003e1 	mov	x1, x0
   91f34:	aa1303e0 	mov	x0, x19
   91f38:	9400014e 	bl	92470 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   91f3c:	aa1503e1 	mov	x1, x21
   91f40:	f9400e60 	ldr	x0, [x19, #24]
   91f44:	940007a4 	bl	93dd4 <strcpy>
   91f48:	f9400e60 	ldr	x0, [x19, #24]
   91f4c:	a9417bf5 	ldp	x21, x30, [sp, #16]
   91f50:	8b140001 	add	x1, x0, x20
   91f54:	f9000e61 	str	x1, [x19, #24]
   91f58:	a8c253f3 	ldp	x19, x20, [sp], #32
   91f5c:	d65f03c0 	ret

0000000000091f60 <CString::ReserveSpace(unsigned long)>:
   91f60:	b4000041 	cbz	x1, 91f68 <CString::ReserveSpace(unsigned long)+0x8>
   91f64:	14000143 	b	92470 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   91f68:	d65f03c0 	ret
   91f6c:	d503201f 	nop

0000000000091f70 <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
   91f70:	2a0203e2 	mov	w2, w2
   91f74:	12001c63 	and	w3, w3, #0xff
   91f78:	eb01005f 	cmp	x2, x1
   91f7c:	d2800024 	mov	x4, #0x1                   	// #1
   91f80:	540003e8 	b.hi	91ffc <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x8c>  // b.pmore
   91f84:	d503201f 	nop
   91f88:	9b027c84 	mul	x4, x4, x2
   91f8c:	9ac40832 	udiv	x18, x1, x4
   91f90:	eb12005f 	cmp	x2, x18
   91f94:	aa1203f1 	mov	x17, x18
   91f98:	54ffff89 	b.ls	91f88 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x18>  // b.plast
   91f9c:	7100007f 	cmp	w3, #0x0
   91fa0:	52800408 	mov	w8, #0x20                  	// #32
   91fa4:	1a8813e7 	csel	w7, wzr, w8, ne  // ne = any
   91fa8:	12001ce9 	and	w9, w7, #0xff
   91fac:	aa0003ea 	mov	x10, x0
   91fb0:	1100dd2b 	add	w11, w9, #0x37
   91fb4:	14000004 	b	91fc4 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x54>
   91fb8:	9ac60831 	udiv	x17, x1, x6
   91fbc:	aa0603e4 	mov	x4, x6
   91fc0:	aa1103f2 	mov	x18, x17
   91fc4:	12001e2c 	and	w12, w17, #0xff
   91fc8:	f100263f 	cmp	x17, #0x9
   91fcc:	9b048641 	msub	x1, x18, x4, x1
   91fd0:	1100c185 	add	w5, w12, #0x30
   91fd4:	0b0b018d 	add	w13, w12, w11
   91fd8:	9ac20886 	udiv	x6, x4, x2
   91fdc:	13001cae 	sxtb	w14, w5
   91fe0:	13001daf 	sxtb	w15, w13
   91fe4:	1a8e81f0 	csel	w16, w15, w14, hi  // hi = pmore
   91fe8:	eb04005f 	cmp	x2, x4
   91fec:	38001550 	strb	w16, [x10], #1
   91ff0:	54fffe49 	b.ls	91fb8 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x48>  // b.plast
   91ff4:	3900015f 	strb	wzr, [x10]
   91ff8:	d65f03c0 	ret
   91ffc:	aa0103f1 	mov	x17, x1
   92000:	aa0103f2 	mov	x18, x1
   92004:	17ffffe6 	b	91f9c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x2c>
   92008:	d503201f 	nop
   9200c:	d503201f 	nop

0000000000092010 <CString::lltoa(char*, unsigned long long, unsigned int, bool)>:
   92010:	2a0203e2 	mov	w2, w2
   92014:	12001c63 	and	w3, w3, #0xff
   92018:	eb01005f 	cmp	x2, x1
   9201c:	d2800024 	mov	x4, #0x1                   	// #1
   92020:	540003e8 	b.hi	9209c <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x8c>  // b.pmore
   92024:	d503201f 	nop
   92028:	9b027c84 	mul	x4, x4, x2
   9202c:	9ac40832 	udiv	x18, x1, x4
   92030:	eb12005f 	cmp	x2, x18
   92034:	aa1203f1 	mov	x17, x18
   92038:	54ffff89 	b.ls	92028 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x18>  // b.plast
   9203c:	7100007f 	cmp	w3, #0x0
   92040:	52800408 	mov	w8, #0x20                  	// #32
   92044:	1a8813e7 	csel	w7, wzr, w8, ne  // ne = any
   92048:	12001ce9 	and	w9, w7, #0xff
   9204c:	aa0003ea 	mov	x10, x0
   92050:	1100dd2b 	add	w11, w9, #0x37
   92054:	14000004 	b	92064 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x54>
   92058:	9ac60831 	udiv	x17, x1, x6
   9205c:	aa0603e4 	mov	x4, x6
   92060:	aa1103f2 	mov	x18, x17
   92064:	12001e2c 	and	w12, w17, #0xff
   92068:	f100263f 	cmp	x17, #0x9
   9206c:	9b048641 	msub	x1, x18, x4, x1
   92070:	1100c185 	add	w5, w12, #0x30
   92074:	0b0b018d 	add	w13, w12, w11
   92078:	9ac20886 	udiv	x6, x4, x2
   9207c:	13001cae 	sxtb	w14, w5
   92080:	13001daf 	sxtb	w15, w13
   92084:	1a8e81f0 	csel	w16, w15, w14, hi  // hi = pmore
   92088:	eb04005f 	cmp	x2, x4
   9208c:	38001550 	strb	w16, [x10], #1
   92090:	54fffe49 	b.ls	92058 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x48>  // b.plast
   92094:	3900015f 	strb	wzr, [x10]
   92098:	d65f03c0 	ret
   9209c:	aa0103f1 	mov	x17, x1
   920a0:	aa0103f2 	mov	x18, x1
   920a4:	17ffffe6 	b	9203c <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x2c>
   920a8:	d503201f 	nop
   920ac:	d503201f 	nop

00000000000920b0 <CString::ftoa(char*, double, unsigned int)>:
   920b0:	a9b953f3 	stp	x19, x20, [sp, #-112]!
   920b4:	1e602018 	fcmpe	d0, #0.0
   920b8:	a9015bf5 	stp	x21, x22, [sp, #16]
   920bc:	aa0003f5 	mov	x21, x0
   920c0:	a90263f7 	stp	x23, x24, [sp, #32]
   920c4:	aa0003f7 	mov	x23, x0
   920c8:	2a0103f8 	mov	w24, w1
   920cc:	f9001bfe 	str	x30, [sp, #48]
   920d0:	54000085 	b.pl	920e0 <CString::ftoa(char*, double, unsigned int)+0x30>  // b.nfrst
   920d4:	1e614000 	fneg	d0, d0
   920d8:	528005a0 	mov	w0, #0x2d                  	// #45
   920dc:	380016a0 	strb	w0, [x21], #1
   920e0:	d2e87e01 	mov	x1, #0x43f0000000000000    	// #4895412794951729152
   920e4:	9e670021 	fmov	d1, x1
   920e8:	1e612010 	fcmpe	d0, d1
   920ec:	54001a0c 	b.gt	9242c <CString::ftoa(char*, double, unsigned int)+0x37c>
   920f0:	9e790013 	fcvtzu	x19, d0
   920f4:	d280002f 	mov	x15, #0x1                   	// #1
   920f8:	f100267f 	cmp	x19, #0x9
   920fc:	54001ae9 	b.ls	92458 <CString::ftoa(char*, double, unsigned int)+0x3a8>  // b.plast
   92100:	8b0f09e2 	add	x2, x15, x15, lsl #2
   92104:	d37ff84f 	lsl	x15, x2, #1
   92108:	9acf0a70 	udiv	x16, x19, x15
   9210c:	f100261f 	cmp	x16, #0x9
   92110:	54ffff88 	b.hi	92100 <CString::ftoa(char*, double, unsigned int)+0x50>  // b.pmore
   92114:	b202e7e7 	mov	x7, #0xcccccccccccccccc    	// #-3689348814741910324
   92118:	aa1503e5 	mov	x5, x21
   9211c:	aa1303e4 	mov	x4, x19
   92120:	f29999a7 	movk	x7, #0xcccd
   92124:	14000003 	b	92130 <CString::ftoa(char*, double, unsigned int)+0x80>
   92128:	9ace0890 	udiv	x16, x4, x14
   9212c:	aa0e03ef 	mov	x15, x14
   92130:	12001e03 	and	w3, w16, #0xff
   92134:	f100261f 	cmp	x16, #0x9
   92138:	1100c068 	add	w8, w3, #0x30
   9213c:	11015c69 	add	w9, w3, #0x57
   92140:	13001d0a 	sxtb	w10, w8
   92144:	13001d2b 	sxtb	w11, w9
   92148:	1a8a816c 	csel	w12, w11, w10, hi  // hi = pmore
   9214c:	9acf0886 	udiv	x6, x4, x15
   92150:	f10025ff 	cmp	x15, #0x9
   92154:	380014ac 	strb	w12, [x5], #1
   92158:	9bc77ded 	umulh	x13, x15, x7
   9215c:	d343fdae 	lsr	x14, x13, #3
   92160:	9b0f90c4 	msub	x4, x6, x15, x4
   92164:	54fffe28 	b.hi	92128 <CString::ftoa(char*, double, unsigned int)+0x78>  // b.pmore
   92168:	390000bf 	strb	wzr, [x5]
   9216c:	fd0027e0 	str	d0, [sp, #72]
   92170:	350000f8 	cbnz	w24, 9218c <CString::ftoa(char*, double, unsigned int)+0xdc>
   92174:	aa1703e0 	mov	x0, x23
   92178:	a9415bf5 	ldp	x21, x22, [sp, #16]
   9217c:	a94263f7 	ldp	x23, x24, [sp, #32]
   92180:	f9401bfe 	ldr	x30, [sp, #48]
   92184:	a8c753f3 	ldp	x19, x20, [sp], #112
   92188:	d65f03c0 	ret
   9218c:	aa1503e0 	mov	x0, x21
   92190:	52800274 	mov	w20, #0x13                  	// #19
   92194:	94000621 	bl	93a18 <strlen>
   92198:	528005d1 	mov	w17, #0x2e                  	// #46
   9219c:	71004f1f 	cmp	w24, #0x13
   921a0:	1a949314 	csel	w20, w24, w20, ls  // ls = plast
   921a4:	8b0002b6 	add	x22, x21, x0
   921a8:	7100071f 	cmp	w24, #0x1
   921ac:	fd4027e0 	ldr	d0, [sp, #72]
   921b0:	38206ab1 	strb	w17, [x21, x0]
   921b4:	910006d5 	add	x21, x22, #0x1
   921b8:	54001549 	b.ls	92460 <CString::ftoa(char*, double, unsigned int)+0x3b0>  // b.plast
   921bc:	5280006a 	mov	w10, #0x3                   	// #3
   921c0:	51000a92 	sub	w18, w20, #0x2
   921c4:	d2800c8b 	mov	x11, #0x64                  	// #100
   921c8:	6b14015f 	cmp	w10, w20
   921cc:	12000a5e 	and	w30, w18, #0x7
   921d0:	aa0b03ec 	mov	x12, x11
   921d4:	54000748 	b.hi	922bc <CString::ftoa(char*, double, unsigned int)+0x20c>  // b.pmore
   921d8:	340004be 	cbz	w30, 9226c <CString::ftoa(char*, double, unsigned int)+0x1bc>
   921dc:	710007df 	cmp	w30, #0x1
   921e0:	540003a0 	b.eq	92254 <CString::ftoa(char*, double, unsigned int)+0x1a4>  // b.none
   921e4:	71000bdf 	cmp	w30, #0x2
   921e8:	54000300 	b.eq	92248 <CString::ftoa(char*, double, unsigned int)+0x198>  // b.none
   921ec:	71000fdf 	cmp	w30, #0x3
   921f0:	54000260 	b.eq	9223c <CString::ftoa(char*, double, unsigned int)+0x18c>  // b.none
   921f4:	710013df 	cmp	w30, #0x4
   921f8:	540001c0 	b.eq	92230 <CString::ftoa(char*, double, unsigned int)+0x180>  // b.none
   921fc:	710017df 	cmp	w30, #0x5
   92200:	54000120 	b.eq	92224 <CString::ftoa(char*, double, unsigned int)+0x174>  // b.none
   92204:	71001bdf 	cmp	w30, #0x6
   92208:	d2807d18 	mov	x24, #0x3e8                 	// #1000
   9220c:	9a980160 	csel	x0, x11, x24, eq  // eq = none
   92210:	8b000805 	add	x5, x0, x0, lsl #2
   92214:	52800082 	mov	w2, #0x4                   	// #4
   92218:	1a820141 	csel	w1, w10, w2, eq  // eq = none
   9221c:	1100042a 	add	w10, w1, #0x1
   92220:	d37ff8ab 	lsl	x11, x5, #1
   92224:	8b0b0967 	add	x7, x11, x11, lsl #2
   92228:	1100054a 	add	w10, w10, #0x1
   9222c:	d37ff8eb 	lsl	x11, x7, #1
   92230:	8b0b0966 	add	x6, x11, x11, lsl #2
   92234:	1100054a 	add	w10, w10, #0x1
   92238:	d37ff8cb 	lsl	x11, x6, #1
   9223c:	8b0b0963 	add	x3, x11, x11, lsl #2
   92240:	1100054a 	add	w10, w10, #0x1
   92244:	d37ff86b 	lsl	x11, x3, #1
   92248:	8b0b0968 	add	x8, x11, x11, lsl #2
   9224c:	1100054a 	add	w10, w10, #0x1
   92250:	d37ff90b 	lsl	x11, x8, #1
   92254:	8b0b0969 	add	x9, x11, x11, lsl #2
   92258:	1100054a 	add	w10, w10, #0x1
   9225c:	6b14015f 	cmp	w10, w20
   92260:	d37ff92b 	lsl	x11, x9, #1
   92264:	aa0b03ec 	mov	x12, x11
   92268:	540002a8 	b.hi	922bc <CString::ftoa(char*, double, unsigned int)+0x20c>  // b.pmore
   9226c:	8b0b096d 	add	x13, x11, x11, lsl #2
   92270:	1100214a 	add	w10, w10, #0x8
   92274:	6b14015f 	cmp	w10, w20
   92278:	d37df1ae 	lsl	x14, x13, #3
   9227c:	8b0d05c4 	add	x4, x14, x13, lsl #1
   92280:	d37df08f 	lsl	x15, x4, #3
   92284:	8b0405f0 	add	x16, x15, x4, lsl #1
   92288:	d37df211 	lsl	x17, x16, #3
   9228c:	8b100632 	add	x18, x17, x16, lsl #1
   92290:	d37df25e 	lsl	x30, x18, #3
   92294:	8b1207d8 	add	x24, x30, x18, lsl #1
   92298:	d37df300 	lsl	x0, x24, #3
   9229c:	8b180405 	add	x5, x0, x24, lsl #1
   922a0:	d37df0a2 	lsl	x2, x5, #3
   922a4:	8b050441 	add	x1, x2, x5, lsl #1
   922a8:	d37df027 	lsl	x7, x1, #3
   922ac:	8b0104e6 	add	x6, x7, x1, lsl #1
   922b0:	d37ff8cb 	lsl	x11, x6, #1
   922b4:	aa0b03ec 	mov	x12, x11
   922b8:	54fffda9 	b.ls	9226c <CString::ftoa(char*, double, unsigned int)+0x1bc>  // b.plast
   922bc:	9e630183 	ucvtf	d3, x12
   922c0:	9e630262 	ucvtf	d2, x19
   922c4:	d2800032 	mov	x18, #0x1                   	// #1
   922c8:	1e623804 	fsub	d4, d0, d2
   922cc:	1e630885 	fmul	d5, d4, d3
   922d0:	9e7900a3 	fcvtzu	x3, d5
   922d4:	f100247f 	cmp	x3, #0x9
   922d8:	54000c89 	b.ls	92468 <CString::ftoa(char*, double, unsigned int)+0x3b8>  // b.plast
   922dc:	d503201f 	nop
   922e0:	8b120a48 	add	x8, x18, x18, lsl #2
   922e4:	d37ff912 	lsl	x18, x8, #1
   922e8:	9ad2087e 	udiv	x30, x3, x18
   922ec:	f10027df 	cmp	x30, #0x9
   922f0:	54ffff88 	b.hi	922e0 <CString::ftoa(char*, double, unsigned int)+0x230>  // b.pmore
   922f4:	b202e7e9 	mov	x9, #0xcccccccccccccccc    	// #-3689348814741910324
   922f8:	910163ea 	add	x10, sp, #0x58
   922fc:	f29999a9 	movk	x9, #0xcccd
   92300:	14000003 	b	9230c <CString::ftoa(char*, double, unsigned int)+0x25c>
   92304:	9ad1087e 	udiv	x30, x3, x17
   92308:	aa1103f2 	mov	x18, x17
   9230c:	12001fcc 	and	w12, w30, #0xff
   92310:	f10027df 	cmp	x30, #0x9
   92314:	1100c193 	add	w19, w12, #0x30
   92318:	11015d8d 	add	w13, w12, #0x57
   9231c:	13001e6e 	sxtb	w14, w19
   92320:	13001da4 	sxtb	w4, w13
   92324:	1a8e808f 	csel	w15, w4, w14, hi  // hi = pmore
   92328:	9ad2086b 	udiv	x11, x3, x18
   9232c:	f100265f 	cmp	x18, #0x9
   92330:	3800154f 	strb	w15, [x10], #1
   92334:	9bc97e50 	umulh	x16, x18, x9
   92338:	d343fe11 	lsr	x17, x16, #3
   9233c:	9b128d63 	msub	x3, x11, x18, x3
   92340:	54fffe28 	b.hi	92304 <CString::ftoa(char*, double, unsigned int)+0x254>  // b.pmore
   92344:	910163e0 	add	x0, sp, #0x58
   92348:	3900015f 	strb	wzr, [x10]
   9234c:	940005b3 	bl	93a18 <strlen>
   92350:	4b000294 	sub	w20, w20, w0
   92354:	51000698 	sub	w24, w20, #0x1
   92358:	34000594 	cbz	w20, 92408 <CString::ftoa(char*, double, unsigned int)+0x358>
   9235c:	2a1803e5 	mov	w5, w24
   92360:	aa1503e0 	mov	x0, x21
   92364:	910008a2 	add	x2, x5, #0x2
   92368:	52800601 	mov	w1, #0x30                  	// #48
   9236c:	8b0202d6 	add	x22, x22, x2
   92370:	cb1502c7 	sub	x7, x22, x21
   92374:	f24008e6 	ands	x6, x7, #0x7
   92378:	540002c0 	b.eq	923d0 <CString::ftoa(char*, double, unsigned int)+0x320>  // b.none
   9237c:	f10004df 	cmp	x6, #0x1
   92380:	54000220 	b.eq	923c4 <CString::ftoa(char*, double, unsigned int)+0x314>  // b.none
   92384:	f10008df 	cmp	x6, #0x2
   92388:	540001c0 	b.eq	923c0 <CString::ftoa(char*, double, unsigned int)+0x310>  // b.none
   9238c:	f1000cdf 	cmp	x6, #0x3
   92390:	54000160 	b.eq	923bc <CString::ftoa(char*, double, unsigned int)+0x30c>  // b.none
   92394:	f10010df 	cmp	x6, #0x4
   92398:	54000100 	b.eq	923b8 <CString::ftoa(char*, double, unsigned int)+0x308>  // b.none
   9239c:	f10014df 	cmp	x6, #0x5
   923a0:	540000a0 	b.eq	923b4 <CString::ftoa(char*, double, unsigned int)+0x304>  // b.none
   923a4:	f10018df 	cmp	x6, #0x6
   923a8:	54000040 	b.eq	923b0 <CString::ftoa(char*, double, unsigned int)+0x300>  // b.none
   923ac:	38001401 	strb	w1, [x0], #1
   923b0:	38001401 	strb	w1, [x0], #1
   923b4:	38001401 	strb	w1, [x0], #1
   923b8:	38001401 	strb	w1, [x0], #1
   923bc:	38001401 	strb	w1, [x0], #1
   923c0:	38001401 	strb	w1, [x0], #1
   923c4:	38001401 	strb	w1, [x0], #1
   923c8:	eb0002df 	cmp	x22, x0
   923cc:	540001a0 	b.eq	92400 <CString::ftoa(char*, double, unsigned int)+0x350>  // b.none
   923d0:	aa0003e8 	mov	x8, x0
   923d4:	91002000 	add	x0, x0, #0x8
   923d8:	38001501 	strb	w1, [x8], #1
   923dc:	39000101 	strb	w1, [x8]
   923e0:	381fa001 	sturb	w1, [x0, #-6]
   923e4:	381fb001 	sturb	w1, [x0, #-5]
   923e8:	381fc001 	sturb	w1, [x0, #-4]
   923ec:	381fd001 	sturb	w1, [x0, #-3]
   923f0:	381fe001 	sturb	w1, [x0, #-2]
   923f4:	eb0002df 	cmp	x22, x0
   923f8:	381ff001 	sturb	w1, [x0, #-1]
   923fc:	54fffea1 	b.ne	923d0 <CString::ftoa(char*, double, unsigned int)+0x320>  // b.any
   92400:	910004a9 	add	x9, x5, #0x1
   92404:	8b0902b5 	add	x21, x21, x9
   92408:	910163e1 	add	x1, sp, #0x58
   9240c:	aa1503e0 	mov	x0, x21
   92410:	94000671 	bl	93dd4 <strcpy>
   92414:	aa1703e0 	mov	x0, x23
   92418:	a9415bf5 	ldp	x21, x22, [sp, #16]
   9241c:	a94263f7 	ldp	x23, x24, [sp, #32]
   92420:	f9401bfe 	ldr	x30, [sp, #48]
   92424:	a8c753f3 	ldp	x19, x20, [sp], #112
   92428:	d65f03c0 	ret
   9242c:	d000004a 	adrp	x10, 9c000 <vtable for CSerialDevice>
   92430:	9107c14b 	add	x11, x10, #0x1f0
   92434:	aa1503e0 	mov	x0, x21
   92438:	91006161 	add	x1, x11, #0x18
   9243c:	94000666 	bl	93dd4 <strcpy>
   92440:	aa1703e0 	mov	x0, x23
   92444:	a9415bf5 	ldp	x21, x22, [sp, #16]
   92448:	a94263f7 	ldp	x23, x24, [sp, #32]
   9244c:	f9401bfe 	ldr	x30, [sp, #48]
   92450:	a8c753f3 	ldp	x19, x20, [sp], #112
   92454:	d65f03c0 	ret
   92458:	aa1303f0 	mov	x16, x19
   9245c:	17ffff2e 	b	92114 <CString::ftoa(char*, double, unsigned int)+0x64>
   92460:	1e649003 	fmov	d3, #1.000000000000000000e+01
   92464:	17ffff97 	b	922c0 <CString::ftoa(char*, double, unsigned int)+0x210>
   92468:	aa0303fe 	mov	x30, x3
   9246c:	17ffffa2 	b	922f4 <CString::ftoa(char*, double, unsigned int)+0x244>

0000000000092470 <CString::ReserveSpace(unsigned long) [clone .part.0]>:
   92470:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   92474:	f9400403 	ldr	x3, [x0, #8]
   92478:	f9400c14 	ldr	x20, [x0, #24]
   9247c:	b9401002 	ldr	w2, [x0, #16]
   92480:	f90013fe 	str	x30, [sp, #32]
   92484:	cb030294 	sub	x20, x20, x3
   92488:	8b010281 	add	x1, x20, x1
   9248c:	91000424 	add	x4, x1, #0x1
   92490:	eb02009f 	cmp	x4, x2
   92494:	54000088 	b.hi	924a4 <CString::ReserveSpace(unsigned long) [clone .part.0]+0x34>  // b.pmore
   92498:	f94013fe 	ldr	x30, [sp, #32]
   9249c:	a8c353f3 	ldp	x19, x20, [sp], #48
   924a0:	d65f03c0 	ret
   924a4:	a9015bf5 	stp	x21, x22, [sp, #16]
   924a8:	91010435 	add	x21, x1, #0x41
   924ac:	aa0003f3 	mov	x19, x0
   924b0:	aa1503e0 	mov	x0, x21
   924b4:	94000967 	bl	94a50 <operator new[](unsigned long)>
   924b8:	f9400e65 	ldr	x5, [x19, #24]
   924bc:	aa0003f6 	mov	x22, x0
   924c0:	390000bf 	strb	wzr, [x5]
   924c4:	f9400661 	ldr	x1, [x19, #8]
   924c8:	94000643 	bl	93dd4 <strcpy>
   924cc:	f9400660 	ldr	x0, [x19, #8]
   924d0:	b4000040 	cbz	x0, 924d8 <CString::ReserveSpace(unsigned long) [clone .part.0]+0x68>
   924d4:	9400096f 	bl	94a90 <operator delete[](void*)>
   924d8:	8b1402c0 	add	x0, x22, x20
   924dc:	f9000676 	str	x22, [x19, #8]
   924e0:	b9001275 	str	w21, [x19, #16]
   924e4:	f9000e60 	str	x0, [x19, #24]
   924e8:	a9415bf5 	ldp	x21, x22, [sp, #16]
   924ec:	f94013fe 	ldr	x30, [sp, #32]
   924f0:	a8c353f3 	ldp	x19, x20, [sp], #48
   924f4:	d65f03c0 	ret
	...

0000000000092500 <__aeabi_atexit>:
   92500:	d65f03c0 	ret
   92504:	d503201f 	nop
   92508:	d503201f 	nop
   9250c:	d503201f 	nop

0000000000092510 <__cxa_atexit>:
   92510:	d65f03c0 	ret
   92514:	d503201f 	nop
   92518:	d503201f 	nop
   9251c:	d503201f 	nop

0000000000092520 <__errno>:
   92520:	f0016e80 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   92524:	910b6001 	add	x1, x0, #0x2d8
   92528:	91002020 	add	x0, x1, #0x8
   9252c:	d65f03c0 	ret

0000000000092530 <set_qemu_exit_status>:
   92530:	f0016e81 	adrp	x1, 2e65000 <temp_gold+0xf421a0>
   92534:	b902e420 	str	w0, [x1, #740]
   92538:	d65f03c0 	ret
   9253c:	d503201f 	nop

0000000000092540 <halt>:
   92540:	d50342df 	msr	daifset, #0x2
   92544:	d50341df 	msr	daifset, #0x1
   92548:	d5033f9f 	dsb	sy
   9254c:	d503207f 	wfi
   92550:	17fffffe 	b	92548 <halt+0x8>
   92554:	d503201f 	nop
   92558:	d503201f 	nop
   9255c:	d503201f 	nop

0000000000092560 <reboot>:
   92560:	d2800482 	mov	x2, #0x24                  	// #36
   92564:	f2bfc202 	movk	x2, #0xfe10, lsl #16
   92568:	52800023 	mov	w3, #0x1                   	// #1
   9256c:	72ab4003 	movk	w3, #0x5a00, lsl #16
   92570:	d2800380 	mov	x0, #0x1c                  	// #28
   92574:	f2bfc200 	movk	x0, #0xfe10, lsl #16
   92578:	52800401 	mov	w1, #0x20                  	// #32
   9257c:	72ab4001 	movk	w1, #0x5a00, lsl #16
   92580:	b9000043 	str	w3, [x2]
   92584:	b9000001 	str	w1, [x0]
   92588:	14000000 	b	92588 <reboot+0x28>
   9258c:	d503201f 	nop

0000000000092590 <sysinit>:
   92590:	d10e03ff 	sub	sp, sp, #0x380
   92594:	a90053f3 	stp	x19, x20, [sp]
   92598:	a9017bf5 	stp	x21, x30, [sp, #16]
   9259c:	d50341ff 	msr	daifclr, #0x1
   925a0:	d50342ff 	msr	daifclr, #0x2
   925a4:	f0016e82 	adrp	x2, 2e65000 <temp_gold+0xf421a0>
   925a8:	91104041 	add	x1, x2, #0x410
   925ac:	90000060 	adrp	x0, 9e000 <font_data+0x1558>
   925b0:	91198000 	add	x0, x0, #0x660
   925b4:	cb000022 	sub	x2, x1, x0
   925b8:	52800001 	mov	w1, #0x0                   	// #0
   925bc:	94000410 	bl	935fc <memset>
   925c0:	9100a3e0 	add	x0, sp, #0x28
   925c4:	97ffe7b5 	bl	8c498 <CMachineInfo::CMachineInfo()>
   925c8:	52800022 	mov	w2, #0x1                   	// #1
   925cc:	910143e0 	add	x0, sp, #0x50
   925d0:	2a0203e1 	mov	w1, w2
   925d4:	94000aa7 	bl	95070 <CMemorySystem::CMemorySystem(bool, bool)>
   925d8:	9100a3e0 	add	x0, sp, #0x28
   925dc:	97ffea23 	bl	8ce68 <CMachineInfo::FetchDTB()>
   925e0:	90000074 	adrp	x20, 9e000 <font_data+0x1558>
   925e4:	91078283 	add	x3, x20, #0x1e0
   925e8:	90000064 	adrp	x4, 9e000 <font_data+0x1558>
   925ec:	9107e085 	add	x5, x4, #0x1f8
   925f0:	eb05007f 	cmp	x3, x5
   925f4:	54000762 	b.cs	926e0 <sysinit+0x150>  // b.hs, b.nlast
   925f8:	d10004a6 	sub	x6, x5, #0x1
   925fc:	aa0303f3 	mov	x19, x3
   92600:	cb0300c7 	sub	x7, x6, x3
   92604:	927df0e8 	and	x8, x7, #0xfffffffffffffff8
   92608:	91002109 	add	x9, x8, #0x8
   9260c:	8b030134 	add	x20, x9, x3
   92610:	cb03028a 	sub	x10, x20, x3
   92614:	d100214b 	sub	x11, x10, #0x8
   92618:	d343fd6c 	lsr	x12, x11, #3
   9261c:	9100058d 	add	x13, x12, #0x1
   92620:	f24009ae 	ands	x14, x13, #0x7
   92624:	54000360 	b.eq	92690 <sysinit+0x100>  // b.none
   92628:	f10005df 	cmp	x14, #0x1
   9262c:	540002a0 	b.eq	92680 <sysinit+0xf0>  // b.none
   92630:	f10009df 	cmp	x14, #0x2
   92634:	54000220 	b.eq	92678 <sysinit+0xe8>  // b.none
   92638:	f1000ddf 	cmp	x14, #0x3
   9263c:	540001a0 	b.eq	92670 <sysinit+0xe0>  // b.none
   92640:	f10011df 	cmp	x14, #0x4
   92644:	54000120 	b.eq	92668 <sysinit+0xd8>  // b.none
   92648:	f10015df 	cmp	x14, #0x5
   9264c:	540000a0 	b.eq	92660 <sysinit+0xd0>  // b.none
   92650:	f10019df 	cmp	x14, #0x6
   92654:	54000601 	b.ne	92714 <sysinit+0x184>  // b.any
   92658:	f8408670 	ldr	x16, [x19], #8
   9265c:	d63f0200 	blr	x16
   92660:	f8408671 	ldr	x17, [x19], #8
   92664:	d63f0220 	blr	x17
   92668:	f8408672 	ldr	x18, [x19], #8
   9266c:	d63f0240 	blr	x18
   92670:	f8408675 	ldr	x21, [x19], #8
   92674:	d63f02a0 	blr	x21
   92678:	f8408662 	ldr	x2, [x19], #8
   9267c:	d63f0040 	blr	x2
   92680:	f8408661 	ldr	x1, [x19], #8
   92684:	d63f0020 	blr	x1
   92688:	eb14027f 	cmp	x19, x20
   9268c:	540002a0 	b.eq	926e0 <sysinit+0x150>  // b.none
   92690:	aa1303f5 	mov	x21, x19
   92694:	91010273 	add	x19, x19, #0x40
   92698:	f84086a0 	ldr	x0, [x21], #8
   9269c:	d63f0000 	blr	x0
   926a0:	f85c8263 	ldur	x3, [x19, #-56]
   926a4:	d63f0060 	blr	x3
   926a8:	f94006a4 	ldr	x4, [x21, #8]
   926ac:	d63f0080 	blr	x4
   926b0:	f85d8265 	ldur	x5, [x19, #-40]
   926b4:	d63f00a0 	blr	x5
   926b8:	f85e0266 	ldur	x6, [x19, #-32]
   926bc:	d63f00c0 	blr	x6
   926c0:	f85e8267 	ldur	x7, [x19, #-24]
   926c4:	d63f00e0 	blr	x7
   926c8:	f85f0268 	ldur	x8, [x19, #-16]
   926cc:	d63f0100 	blr	x8
   926d0:	f85f8269 	ldur	x9, [x19, #-8]
   926d4:	d63f0120 	blr	x9
   926d8:	eb14027f 	cmp	x19, x20
   926dc:	54fffda1 	b.ne	92690 <sysinit+0x100>  // b.any
   926e0:	97ffb848 	bl	80800 <main>
   926e4:	7100041f 	cmp	w0, #0x1
   926e8:	54000040 	b.eq	926f0 <sysinit+0x160>  // b.none
   926ec:	97ffff95 	bl	92540 <halt>
   926f0:	94000870 	bl	948b0 <IsChainBootEnabled>
   926f4:	72001c1f 	tst	w0, #0xff
   926f8:	54000041 	b.ne	92700 <sysinit+0x170>  // b.any
   926fc:	97ffff99 	bl	92560 <reboot>
   92700:	910143e0 	add	x0, sp, #0x50
   92704:	94000adf 	bl	95280 <CMemorySystem::Destructor()>
   92708:	d50341df 	msr	daifset, #0x1
   9270c:	94000871 	bl	948d0 <DoChainBoot>
   92710:	97ffff94 	bl	92560 <reboot>
   92714:	f840866f 	ldr	x15, [x19], #8
   92718:	d63f01e0 	blr	x15
   9271c:	17ffffcf 	b	92658 <sysinit+0xc8>

0000000000092720 <CTimer::SimpleusDelay(unsigned int) [clone .part.6]>:
   92720:	11000400 	add	w0, w0, #0x1
   92724:	d5033fdf 	isb
   92728:	d53be023 	mrs	x3, cntpct_el0
   9272c:	d53be002 	mrs	x2, cntfrq_el0
   92730:	d2884801 	mov	x1, #0x4240                	// #16960
   92734:	f2a001e1 	movk	x1, #0xf, lsl #16
   92738:	aa0103e4 	mov	x4, x1
   9273c:	9b017c65 	mul	x5, x3, x1
   92740:	9ac208a6 	udiv	x6, x5, x2
   92744:	d503201f 	nop
   92748:	d5033fdf 	isb
   9274c:	d53be027 	mrs	x7, cntpct_el0
   92750:	d53be008 	mrs	x8, cntfrq_el0
   92754:	9b047ce9 	mul	x9, x7, x4
   92758:	9ac8092a 	udiv	x10, x9, x8
   9275c:	4b06014b 	sub	w11, w10, w6
   92760:	6b0b001f 	cmp	w0, w11
   92764:	54ffff28 	b.hi	92748 <CTimer::SimpleusDelay(unsigned int) [clone .part.6]+0x28>  // b.pmore
   92768:	d65f03c0 	ret
   9276c:	d503201f 	nop

0000000000092770 <CTimer::CTimer(CInterruptSystem*)>:
   92770:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   92774:	aa0003f3 	mov	x19, x0
   92778:	d2800022 	mov	x2, #0x1                   	// #1
   9277c:	91008000 	add	x0, x0, #0x20
   92780:	b9000e7f 	str	wzr, [x19, #12]
   92784:	b900127f 	str	wzr, [x19, #16]
   92788:	f9000261 	str	x1, [x19]
   9278c:	b900167f 	str	wzr, [x19, #20]
   92790:	f9000e62 	str	x2, [x19, #24]
   92794:	940017f3 	bl	98760 <CPtrList::CPtrList()>
   92798:	d2800023 	mov	x3, #0x1                   	// #1
   9279c:	52801904 	mov	w4, #0xc8                  	// #200
   927a0:	f9001e7f 	str	xzr, [x19, #56]
   927a4:	f2c1a803 	movk	x3, #0xd40, lsl #32
   927a8:	f2e00063 	movk	x3, #0x3, lsl #48
   927ac:	b900627f 	str	wzr, [x19, #96]
   927b0:	f0016e80 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   927b4:	b9003264 	str	w4, [x19, #48]
   927b8:	f9417401 	ldr	x1, [x0, #744]
   927bc:	f9001663 	str	x3, [x19, #40]
   927c0:	b5000081 	cbnz	x1, 927d0 <CTimer::CTimer(CInterruptSystem*)+0x60>
   927c4:	f9017413 	str	x19, [x0, #744]
   927c8:	a8c17bf3 	ldp	x19, x30, [sp], #16
   927cc:	d65f03c0 	ret
   927d0:	d0000045 	adrp	x5, 9c000 <vtable for CSerialDevice>
   927d4:	d0000046 	adrp	x6, 9c000 <vtable for CSerialDevice>
   927d8:	910940a1 	add	x1, x5, #0x250
   927dc:	910980c0 	add	x0, x6, #0x260
   927e0:	52800842 	mov	w2, #0x42                  	// #66
   927e4:	97ffdae3 	bl	89370 <assertion_failed>
   927e8:	d503201f 	nop
   927ec:	d503201f 	nop

00000000000927f0 <CTimer::~CTimer()>:
   927f0:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   927f4:	aa0003f4 	mov	x20, x0
   927f8:	a9015bf5 	stp	x21, x22, [sp, #16]
   927fc:	f9400000 	ldr	x0, [x0]
   92800:	f90013fe 	str	x30, [sp, #32]
   92804:	b4000620 	cbz	x0, 928c8 <CTimer::~CTimer()+0xd8>
   92808:	52800002 	mov	w2, #0x0                   	// #0
   9280c:	d51be222 	msr	cntp_ctl_el0, x2
   92810:	528003c1 	mov	w1, #0x1e                  	// #30
   92814:	91008294 	add	x20, x20, #0x20
   92818:	94000f82 	bl	96620 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   9281c:	aa1403e0 	mov	x0, x20
   92820:	5289a876 	mov	w22, #0x4d43                	// #19779
   92824:	72a96a96 	movk	w22, #0x4b54, lsl #16
   92828:	940017de 	bl	987a0 <CPtrList::GetFirst()>
   9282c:	aa0003f3 	mov	x19, x0
   92830:	b4000260 	cbz	x0, 9287c <CTimer::~CTimer()+0x8c>
   92834:	aa0003e1 	mov	x1, x0
   92838:	aa1403e0 	mov	x0, x20
   9283c:	940017f5 	bl	98810 <CPtrList::GetPtr(TPtrListElement*)>
   92840:	aa0003f5 	mov	x21, x0
   92844:	b40002a0 	cbz	x0, 92898 <CTimer::~CTimer()+0xa8>
   92848:	b9400006 	ldr	w6, [x0]
   9284c:	6b1600df 	cmp	w6, w22
   92850:	54000301 	b.ne	928b0 <CTimer::~CTimer()+0xc0>  // b.any
   92854:	aa1303e1 	mov	x1, x19
   92858:	aa1403e0 	mov	x0, x20
   9285c:	94001881 	bl	98a60 <CPtrList::Remove(TPtrListElement*)>
   92860:	aa1503e0 	mov	x0, x21
   92864:	d2800501 	mov	x1, #0x28                  	// #40
   92868:	94000896 	bl	94ac0 <operator delete(void*, unsigned long)>
   9286c:	aa1403e0 	mov	x0, x20
   92870:	940017cc 	bl	987a0 <CPtrList::GetFirst()>
   92874:	aa0003f3 	mov	x19, x0
   92878:	b5fffde0 	cbnz	x0, 92834 <CTimer::~CTimer()+0x44>
   9287c:	f0016e83 	adrp	x3, 2e65000 <temp_gold+0xf421a0>
   92880:	aa1403e0 	mov	x0, x20
   92884:	a9415bf5 	ldp	x21, x22, [sp, #16]
   92888:	f901747f 	str	xzr, [x3, #744]
   9288c:	f94013fe 	ldr	x30, [sp, #32]
   92890:	a8c353f3 	ldp	x19, x20, [sp], #48
   92894:	140017b7 	b	98770 <CPtrList::~CPtrList()>
   92898:	d0000044 	adrp	x4, 9c000 <vtable for CSerialDevice>
   9289c:	d0000045 	adrp	x5, 9c000 <vtable for CSerialDevice>
   928a0:	91094081 	add	x1, x4, #0x250
   928a4:	910a20a0 	add	x0, x5, #0x288
   928a8:	52800b22 	mov	w2, #0x59                  	// #89
   928ac:	97ffdab1 	bl	89370 <assertion_failed>
   928b0:	d0000047 	adrp	x7, 9c000 <vtable for CSerialDevice>
   928b4:	d0000048 	adrp	x8, 9c000 <vtable for CSerialDevice>
   928b8:	910940e1 	add	x1, x7, #0x250
   928bc:	910a6100 	add	x0, x8, #0x298
   928c0:	52800b42 	mov	w2, #0x5a                  	// #90
   928c4:	97ffdaab 	bl	89370 <assertion_failed>
   928c8:	d0000041 	adrp	x1, 9c000 <vtable for CSerialDevice>
   928cc:	d0000040 	adrp	x0, 9c000 <vtable for CSerialDevice>
   928d0:	91094021 	add	x1, x1, #0x250
   928d4:	9109c000 	add	x0, x0, #0x270
   928d8:	52800902 	mov	w2, #0x48                  	// #72
   928dc:	97ffdaa5 	bl	89370 <assertion_failed>

00000000000928e0 <CTimer::SetTimeZone(int)>:
   928e0:	11167c22 	add	w2, w1, #0x59f
   928e4:	712cf85f 	cmp	w2, #0xb3e
   928e8:	54000089 	b.ls	928f8 <CTimer::SetTimeZone(int)+0x18>  // b.plast
   928ec:	52800003 	mov	w3, #0x0                   	// #0
   928f0:	2a0303e0 	mov	w0, w3
   928f4:	d65f03c0 	ret
   928f8:	52800023 	mov	w3, #0x1                   	// #1
   928fc:	b9001c01 	str	w1, [x0, #28]
   92900:	2a0303e0 	mov	w0, w3
   92904:	d65f03c0 	ret
   92908:	d503201f 	nop
   9290c:	d503201f 	nop

0000000000092910 <CTimer::GetTimeZone() const>:
   92910:	b9401c00 	ldr	w0, [x0, #28]
   92914:	d65f03c0 	ret
   92918:	d503201f 	nop
   9291c:	d503201f 	nop

0000000000092920 <CTimer::SetTime(unsigned int, bool)>:
   92920:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   92924:	aa0003f3 	mov	x19, x0
   92928:	2a0103f4 	mov	w20, w1
   9292c:	72001c5f 	tst	w2, #0xff
   92930:	b9401c00 	ldr	w0, [x0, #28]
   92934:	f9000bfe 	str	x30, [sp, #16]
   92938:	531c6c01 	lsl	w1, w0, #4
   9293c:	4b000022 	sub	w2, w1, w0
   92940:	531e7444 	lsl	w4, w2, #2
   92944:	54000061 	b.ne	92950 <CTimer::SetTime(unsigned int, bool)+0x30>  // b.any
   92948:	37f80384 	tbnz	w4, #31, 929b8 <CTimer::SetTime(unsigned int, bool)+0x98>
   9294c:	0b040294 	add	w20, w20, w4
   92950:	f9401e65 	ldr	x5, [x19, #56]
   92954:	b4000125 	cbz	x5, 92978 <CTimer::SetTime(unsigned int, bool)+0x58>
   92958:	b9401666 	ldr	w6, [x19, #20]
   9295c:	4b040280 	sub	w0, w20, w4
   92960:	6b06009f 	cmp	w4, w6
   92964:	4b0400c7 	sub	w7, w6, w4
   92968:	1a9fd0e1 	csel	w1, w7, wzr, le
   9296c:	d63f00a0 	blr	x5
   92970:	72001c1f 	tst	w0, #0xff
   92974:	54000280 	b.eq	929c4 <CTimer::SetTime(unsigned int, bool)+0xa4>  // b.none
   92978:	b9401a60 	ldr	w0, [x19, #24]
   9297c:	350000c0 	cbnz	w0, 92994 <CTimer::SetTime(unsigned int, bool)+0x74>
   92980:	52800020 	mov	w0, #0x1                   	// #1
   92984:	b9001674 	str	w20, [x19, #20]
   92988:	f9400bfe 	ldr	x30, [sp, #16]
   9298c:	a8c253f3 	ldp	x19, x20, [sp], #32
   92990:	d65f03c0 	ret
   92994:	94000aa7 	bl	95430 <EnterCritical>
   92998:	b9401a68 	ldr	w8, [x19, #24]
   9299c:	b9001674 	str	w20, [x19, #20]
   929a0:	340001a8 	cbz	w8, 929d4 <CTimer::SetTime(unsigned int, bool)+0xb4>
   929a4:	94000acf 	bl	954e0 <LeaveCritical>
   929a8:	52800020 	mov	w0, #0x1                   	// #1
   929ac:	f9400bfe 	ldr	x30, [sp, #16]
   929b0:	a8c253f3 	ldp	x19, x20, [sp], #32
   929b4:	d65f03c0 	ret
   929b8:	4b0403e3 	neg	w3, w4
   929bc:	6b14007f 	cmp	w3, w20
   929c0:	54fffc6d 	b.le	9294c <CTimer::SetTime(unsigned int, bool)+0x2c>
   929c4:	52800000 	mov	w0, #0x0                   	// #0
   929c8:	f9400bfe 	ldr	x30, [sp, #16]
   929cc:	a8c253f3 	ldp	x19, x20, [sp], #32
   929d0:	d65f03c0 	ret
   929d4:	52800020 	mov	w0, #0x1                   	// #1
   929d8:	17ffffec 	b	92988 <CTimer::SetTime(unsigned int, bool)+0x68>
   929dc:	d503201f 	nop

00000000000929e0 <CTimer::GetClockTicks()>:
   929e0:	d5033fdf 	isb
   929e4:	d53be021 	mrs	x1, cntpct_el0
   929e8:	d53be002 	mrs	x2, cntfrq_el0
   929ec:	d2884800 	mov	x0, #0x4240                	// #16960
   929f0:	f2a001e0 	movk	x0, #0xf, lsl #16
   929f4:	9b007c23 	mul	x3, x1, x0
   929f8:	9ac20860 	udiv	x0, x3, x2
   929fc:	d65f03c0 	ret

0000000000092a00 <CTimer::GetTicks() const>:
   92a00:	b9400c00 	ldr	w0, [x0, #12]
   92a04:	d65f03c0 	ret
   92a08:	d503201f 	nop
   92a0c:	d503201f 	nop

0000000000092a10 <CTimer::GetUptime() const>:
   92a10:	b9401000 	ldr	w0, [x0, #16]
   92a14:	d65f03c0 	ret
   92a18:	d503201f 	nop
   92a1c:	d503201f 	nop

0000000000092a20 <CTimer::GetTime() const>:
   92a20:	b9401400 	ldr	w0, [x0, #20]
   92a24:	d65f03c0 	ret
   92a28:	d503201f 	nop
   92a2c:	d503201f 	nop

0000000000092a30 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
   92a30:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   92a34:	aa0003f3 	mov	x19, x0
   92a38:	aa0103f4 	mov	x20, x1
   92a3c:	b9401800 	ldr	w0, [x0, #24]
   92a40:	a9015bf5 	stp	x21, x22, [sp, #16]
   92a44:	aa0203f5 	mov	x21, x2
   92a48:	a9027bf7 	stp	x23, x30, [sp, #32]
   92a4c:	35000280 	cbnz	w0, 92a9c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x6c>
   92a50:	b9401677 	ldr	w23, [x19, #20]
   92a54:	b9400e76 	ldr	w22, [x19, #12]
   92a58:	b4000314 	cbz	x20, 92ab8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x88>
   92a5c:	b9000297 	str	w23, [x20]
   92a60:	b4000395 	cbz	x21, 92ad0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xa0>
   92a64:	5290a3e5 	mov	w5, #0x851f                	// #34079
   92a68:	72aa3d65 	movk	w5, #0x51eb, lsl #16
   92a6c:	a9427bf7 	ldp	x23, x30, [sp, #32]
   92a70:	52800c86 	mov	w6, #0x64                  	// #100
   92a74:	5284e207 	mov	w7, #0x2710                	// #10000
   92a78:	9ba57ec8 	umull	x8, w22, w5
   92a7c:	52800020 	mov	w0, #0x1                   	// #1
   92a80:	d365fd09 	lsr	x9, x8, #37
   92a84:	1b06d92a 	msub	w10, w9, w6, w22
   92a88:	1b077d4b 	mul	w11, w10, w7
   92a8c:	b90002ab 	str	w11, [x21]
   92a90:	a9415bf5 	ldp	x21, x22, [sp, #16]
   92a94:	a8c353f3 	ldp	x19, x20, [sp], #48
   92a98:	d65f03c0 	ret
   92a9c:	94000a65 	bl	95430 <EnterCritical>
   92aa0:	b9401677 	ldr	w23, [x19, #20]
   92aa4:	b9400e76 	ldr	w22, [x19, #12]
   92aa8:	b9401a60 	ldr	w0, [x19, #24]
   92aac:	34fffd60 	cbz	w0, 92a58 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x28>
   92ab0:	94000a8c 	bl	954e0 <LeaveCritical>
   92ab4:	b5fffd54 	cbnz	x20, 92a5c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x2c>
   92ab8:	d0000042 	adrp	x2, 9c000 <vtable for CSerialDevice>
   92abc:	d0000041 	adrp	x1, 9c000 <vtable for CSerialDevice>
   92ac0:	910b0040 	add	x0, x2, #0x2c0
   92ac4:	91094021 	add	x1, x1, #0x250
   92ac8:	52802182 	mov	w2, #0x10c                 	// #268
   92acc:	97ffda29 	bl	89370 <assertion_failed>
   92ad0:	d0000043 	adrp	x3, 9c000 <vtable for CSerialDevice>
   92ad4:	d0000044 	adrp	x4, 9c000 <vtable for CSerialDevice>
   92ad8:	91094061 	add	x1, x3, #0x250
   92adc:	910b4080 	add	x0, x4, #0x2d0
   92ae0:	528021e2 	mov	w2, #0x10f                 	// #271
   92ae4:	97ffda23 	bl	89370 <assertion_failed>
   92ae8:	d503201f 	nop
   92aec:	d503201f 	nop

0000000000092af0 <CTimer::GetUniversalTime() const>:
   92af0:	b9401c02 	ldr	w2, [x0, #28]
   92af4:	b9401401 	ldr	w1, [x0, #20]
   92af8:	531c6c40 	lsl	w0, w2, #4
   92afc:	4b020003 	sub	w3, w0, w2
   92b00:	531e7464 	lsl	w4, w3, #2
   92b04:	6b040025 	subs	w5, w1, w4
   92b08:	1a9fa0a0 	csel	w0, w5, wzr, ge  // ge = tcont
   92b0c:	d65f03c0 	ret

0000000000092b10 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
   92b10:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   92b14:	aa0003f3 	mov	x19, x0
   92b18:	b9401800 	ldr	w0, [x0, #24]
   92b1c:	a9015bf5 	stp	x21, x22, [sp, #16]
   92b20:	aa0103f5 	mov	x21, x1
   92b24:	aa0203f6 	mov	x22, x2
   92b28:	a9027bf7 	stp	x23, x30, [sp, #32]
   92b2c:	35000400 	cbnz	w0, 92bac <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x9c>
   92b30:	b9401674 	ldr	w20, [x19, #20]
   92b34:	b9400e77 	ldr	w23, [x19, #12]
   92b38:	b9401e63 	ldr	w3, [x19, #28]
   92b3c:	531c6c61 	lsl	w1, w3, #4
   92b40:	4b030022 	sub	w2, w1, w3
   92b44:	531e7444 	lsl	w4, w2, #2
   92b48:	6b04029f 	cmp	w20, w4
   92b4c:	5400026b 	b.lt	92b98 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x88>  // b.tstop
   92b50:	b40003d5 	cbz	x21, 92bc8 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xb8>
   92b54:	4b040287 	sub	w7, w20, w4
   92b58:	b90002a7 	str	w7, [x21]
   92b5c:	b4000436 	cbz	x22, 92be0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd0>
   92b60:	5290a3ea 	mov	w10, #0x851f                	// #34079
   92b64:	72aa3d6a 	movk	w10, #0x51eb, lsl #16
   92b68:	52800c8b 	mov	w11, #0x64                  	// #100
   92b6c:	5284e20c 	mov	w12, #0x2710                	// #10000
   92b70:	9baa7eed 	umull	x13, w23, w10
   92b74:	52800020 	mov	w0, #0x1                   	// #1
   92b78:	d365fdae 	lsr	x14, x13, #37
   92b7c:	1b0bddcf 	msub	w15, w14, w11, w23
   92b80:	a9427bf7 	ldp	x23, x30, [sp, #32]
   92b84:	1b0c7df0 	mul	w16, w15, w12
   92b88:	b90002d0 	str	w16, [x22]
   92b8c:	a9415bf5 	ldp	x21, x22, [sp, #16]
   92b90:	a8c353f3 	ldp	x19, x20, [sp], #48
   92b94:	d65f03c0 	ret
   92b98:	52800000 	mov	w0, #0x0                   	// #0
   92b9c:	a9415bf5 	ldp	x21, x22, [sp, #16]
   92ba0:	a9427bf7 	ldp	x23, x30, [sp, #32]
   92ba4:	a8c353f3 	ldp	x19, x20, [sp], #48
   92ba8:	d65f03c0 	ret
   92bac:	94000a21 	bl	95430 <EnterCritical>
   92bb0:	b9401674 	ldr	w20, [x19, #20]
   92bb4:	b9400e77 	ldr	w23, [x19, #12]
   92bb8:	b9401a60 	ldr	w0, [x19, #24]
   92bbc:	34fffbe0 	cbz	w0, 92b38 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x28>
   92bc0:	94000a48 	bl	954e0 <LeaveCritical>
   92bc4:	17ffffdd 	b	92b38 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x28>
   92bc8:	d0000045 	adrp	x5, 9c000 <vtable for CSerialDevice>
   92bcc:	d0000046 	adrp	x6, 9c000 <vtable for CSerialDevice>
   92bd0:	910940a1 	add	x1, x5, #0x250
   92bd4:	910b00c0 	add	x0, x6, #0x2c0
   92bd8:	52802622 	mov	w2, #0x131                 	// #305
   92bdc:	97ffd9e5 	bl	89370 <assertion_failed>
   92be0:	d0000048 	adrp	x8, 9c000 <vtable for CSerialDevice>
   92be4:	d0000049 	adrp	x9, 9c000 <vtable for CSerialDevice>
   92be8:	91094101 	add	x1, x8, #0x250
   92bec:	910b4120 	add	x0, x9, #0x2d0
   92bf0:	52802682 	mov	w2, #0x134                 	// #308
   92bf4:	97ffd9df 	bl	89370 <assertion_failed>
   92bf8:	d503201f 	nop
   92bfc:	d503201f 	nop

0000000000092c00 <CTimer::GetTimeString()>:
   92c00:	a9bb53f3 	stp	x19, x20, [sp, #-80]!
   92c04:	aa0003f3 	mov	x19, x0
   92c08:	b9401800 	ldr	w0, [x0, #24]
   92c0c:	a9015bf5 	stp	x21, x22, [sp, #16]
   92c10:	a9036bf9 	stp	x25, x26, [sp, #48]
   92c14:	f90023fe 	str	x30, [sp, #64]
   92c18:	35000e20 	cbnz	w0, 92ddc <CTimer::GetTimeString()+0x1dc>
   92c1c:	b9401675 	ldr	w21, [x19, #20]
   92c20:	b9400e7a 	ldr	w26, [x19, #12]
   92c24:	2a1a02a1 	orr	w1, w21, w26
   92c28:	34000ea1 	cbz	w1, 92dfc <CTimer::GetTimeString()+0x1fc>
   92c2c:	52911122 	mov	w2, #0x8889                	// #34953
   92c30:	72b11102 	movk	w2, #0x8888, lsl #16
   92c34:	a90263f7 	stp	x23, x24, [sp, #32]
   92c38:	529678b6 	mov	w22, #0xb3c5                	// #46021
   92c3c:	72b23456 	movk	w22, #0x91a2, lsl #16
   92c40:	9ba27ea3 	umull	x3, w21, w2
   92c44:	5288a0e5 	mov	w5, #0x4507                	// #17671
   92c48:	72b845c5 	movk	w5, #0xc22e, lsl #16
   92c4c:	9bb67ea6 	umull	x6, w21, w22
   92c50:	5290a3e9 	mov	w9, #0x851f                	// #34079
   92c54:	72aa3d69 	movk	w9, #0x51eb, lsl #16
   92c58:	9ba57ea7 	umull	x7, w21, w5
   92c5c:	5280f654 	mov	w20, #0x7b2                 	// #1970
   92c60:	52800c88 	mov	w8, #0x64                  	// #100
   92c64:	d365fc6a 	lsr	x10, x3, #37
   92c68:	52803204 	mov	w4, #0x190                 	// #400
   92c6c:	531c6d57 	lsl	w23, w10, #4
   92c70:	d36bfcd6 	lsr	x22, x6, #43
   92c74:	9ba27d4b 	umull	x11, w10, w2
   92c78:	4b0a02ec 	sub	w12, w23, w10
   92c7c:	d370fcf3 	lsr	x19, x7, #48
   92c80:	4b0c0ab7 	sub	w23, w21, w12, lsl #2
   92c84:	d365fd6d 	lsr	x13, x11, #37
   92c88:	531c6db9 	lsl	w25, w13, #4
   92c8c:	4b0d032e 	sub	w14, w25, w13
   92c90:	4b0e0959 	sub	w25, w10, w14, lsl #2
   92c94:	14000003 	b	92ca0 <CTimer::GetTimeString()+0xa0>
   92c98:	4b150273 	sub	w19, w19, w21
   92c9c:	11000694 	add	w20, w20, #0x1
   92ca0:	9ba97e8f 	umull	x15, w20, w9
   92ca4:	f240069f 	tst	x20, #0x3
   92ca8:	1a9f17e2 	cset	w2, eq  // eq = none
   92cac:	d360fdf0 	lsr	x16, x15, #32
   92cb0:	53057e11 	lsr	w17, w16, #5
   92cb4:	1b08d232 	msub	w18, w17, w8, w20
   92cb8:	350000b2 	cbnz	w18, 92ccc <CTimer::GetTimeString()+0xcc>
   92cbc:	53077e18 	lsr	w24, w16, #7
   92cc0:	1b04d31e 	msub	w30, w24, w4, w20
   92cc4:	710003df 	cmp	w30, #0x0
   92cc8:	1a9f17e2 	cset	w2, eq  // eq = none
   92ccc:	1105b455 	add	w21, w2, #0x16d
   92cd0:	6b15027f 	cmp	w19, w21
   92cd4:	54fffe22 	b.cs	92c98 <CTimer::GetTimeString()+0x98>  // b.hs, b.nlast
   92cd8:	d0000040 	adrp	x0, 9c000 <vtable for CSerialDevice>
   92cdc:	91086001 	add	x1, x0, #0x218
   92ce0:	52800015 	mov	w21, #0x0                   	// #0
   92ce4:	14000003 	b	92cf0 <CTimer::GetTimeString()+0xf0>
   92ce8:	4b050273 	sub	w19, w19, w5
   92cec:	110006b5 	add	w21, w21, #0x1
   92cf0:	7100005f 	cmp	w2, #0x0
   92cf4:	7a411aa0 	ccmp	w21, #0x1, #0x0, ne  // ne = any
   92cf8:	540003e0 	b.eq	92d74 <CTimer::GetTimeString()+0x174>  // b.none
   92cfc:	b8755825 	ldr	w5, [x1, w21, uxtw #2]
   92d00:	6b05027f 	cmp	w19, w5
   92d04:	54ffff22 	b.cs	92ce8 <CTimer::GetTimeString()+0xe8>  // b.hs, b.nlast
   92d08:	5290a3e3 	mov	w3, #0x851f                	// #34079
   92d0c:	72aa3d63 	movk	w3, #0x51eb, lsl #16
   92d10:	52800c89 	mov	w9, #0x64                  	// #100
   92d14:	d2800400 	mov	x0, #0x20                  	// #32
   92d18:	9ba37f48 	umull	x8, w26, w3
   92d1c:	d365fd06 	lsr	x6, x8, #37
   92d20:	1b09e8d8 	msub	w24, w6, w9, w26
   92d24:	94000743 	bl	94a30 <operator new(unsigned long)>
   92d28:	aa0003fa 	mov	x26, x0
   92d2c:	97fff3c1 	bl	8fc30 <CString::CString()>
   92d30:	711ede9f 	cmp	w20, #0x7b7
   92d34:	54000248 	b.hi	92d7c <CTimer::GetTimeString()+0x17c>  // b.pmore
   92d38:	d0000047 	adrp	x7, 9c000 <vtable for CSerialDevice>
   92d3c:	2a1803e5 	mov	w5, w24
   92d40:	2a1703e4 	mov	w4, w23
   92d44:	2a1903e3 	mov	w3, w25
   92d48:	2a1603e2 	mov	w2, w22
   92d4c:	aa1a03e0 	mov	x0, x26
   92d50:	910c20e1 	add	x1, x7, #0x308
   92d54:	97fff53f 	bl	90250 <CString::Format(char const*, ...)>
   92d58:	aa1a03e0 	mov	x0, x26
   92d5c:	a9415bf5 	ldp	x21, x22, [sp, #16]
   92d60:	a94263f7 	ldp	x23, x24, [sp, #32]
   92d64:	a9436bf9 	ldp	x25, x26, [sp, #48]
   92d68:	f94023fe 	ldr	x30, [sp, #64]
   92d6c:	a8c553f3 	ldp	x19, x20, [sp], #80
   92d70:	d65f03c0 	ret
   92d74:	528003a5 	mov	w5, #0x1d                  	// #29
   92d78:	17ffffe2 	b	92d00 <CTimer::GetTimeString()+0x100>
   92d7c:	52955564 	mov	w4, #0xaaab                	// #43691
   92d80:	72b55544 	movk	w4, #0xaaaa, lsl #16
   92d84:	2a1703e6 	mov	w6, w23
   92d88:	9000006a 	adrp	x10, 9e000 <font_data+0x1558>
   92d8c:	9116814b 	add	x11, x10, #0x5a0
   92d90:	9ba47ecd 	umull	x13, w22, w4
   92d94:	d000004c 	adrp	x12, 9c000 <vtable for CSerialDevice>
   92d98:	2a1803e7 	mov	w7, w24
   92d9c:	2a1903e5 	mov	w5, w25
   92da0:	f8755962 	ldr	x2, [x11, w21, uxtw #3]
   92da4:	11000663 	add	w3, w19, #0x1
   92da8:	aa1a03e0 	mov	x0, x26
   92dac:	d364fdb7 	lsr	x23, x13, #36
   92db0:	910ba181 	add	x1, x12, #0x2e8
   92db4:	0b1706ee 	add	w14, w23, w23, lsl #1
   92db8:	4b0e0ec4 	sub	w4, w22, w14, lsl #3
   92dbc:	97fff525 	bl	90250 <CString::Format(char const*, ...)>
   92dc0:	aa1a03e0 	mov	x0, x26
   92dc4:	a9415bf5 	ldp	x21, x22, [sp, #16]
   92dc8:	a94263f7 	ldp	x23, x24, [sp, #32]
   92dcc:	a9436bf9 	ldp	x25, x26, [sp, #48]
   92dd0:	f94023fe 	ldr	x30, [sp, #64]
   92dd4:	a8c553f3 	ldp	x19, x20, [sp], #80
   92dd8:	d65f03c0 	ret
   92ddc:	94000995 	bl	95430 <EnterCritical>
   92de0:	b9401675 	ldr	w21, [x19, #20]
   92de4:	b9400e7a 	ldr	w26, [x19, #12]
   92de8:	b9401a60 	ldr	w0, [x19, #24]
   92dec:	34fff1c0 	cbz	w0, 92c24 <CTimer::GetTimeString()+0x24>
   92df0:	940009bc 	bl	954e0 <LeaveCritical>
   92df4:	2a1a02a1 	orr	w1, w21, w26
   92df8:	35fff1a1 	cbnz	w1, 92c2c <CTimer::GetTimeString()+0x2c>
   92dfc:	d280001a 	mov	x26, #0x0                   	// #0
   92e00:	a9415bf5 	ldp	x21, x22, [sp, #16]
   92e04:	aa1a03e0 	mov	x0, x26
   92e08:	a9436bf9 	ldp	x25, x26, [sp, #48]
   92e0c:	f94023fe 	ldr	x30, [sp, #64]
   92e10:	a8c553f3 	ldp	x19, x20, [sp], #80
   92e14:	d65f03c0 	ret
   92e18:	d503201f 	nop
   92e1c:	d503201f 	nop

0000000000092e20 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)>:
   92e20:	a9bb53f3 	stp	x19, x20, [sp, #-80]!
   92e24:	2a0103f4 	mov	w20, w1
   92e28:	aa0203f3 	mov	x19, x2
   92e2c:	a90263f7 	stp	x23, x24, [sp, #32]
   92e30:	aa0003f8 	mov	x24, x0
   92e34:	d2800500 	mov	x0, #0x28                  	// #40
   92e38:	a9015bf5 	stp	x21, x22, [sp, #16]
   92e3c:	f9001bfe 	str	x30, [sp, #48]
   92e40:	a9040fe4 	stp	x4, x3, [sp, #64]
   92e44:	940006fb 	bl	94a30 <operator new(unsigned long)>
   92e48:	b9400f15 	ldr	w21, [x24, #12]
   92e4c:	a9440fe4 	ldp	x4, x3, [sp, #64]
   92e50:	0b1402b5 	add	w21, w21, w20
   92e54:	b40007b3 	cbz	x19, 92f48 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x128>
   92e58:	5289a862 	mov	w2, #0x4d43                	// #19779
   92e5c:	72a96a82 	movk	w2, #0x4b54, lsl #16
   92e60:	f9000413 	str	x19, [x0, #8]
   92e64:	aa0003f6 	mov	x22, x0
   92e68:	b9001015 	str	w21, [x0, #16]
   92e6c:	b9000002 	str	w2, [x0]
   92e70:	a9019003 	stp	x3, x4, [x0, #24]
   92e74:	b9402b00 	ldr	w0, [x24, #40]
   92e78:	35000500 	cbnz	w0, 92f18 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0xf8>
   92e7c:	91008314 	add	x20, x24, #0x20
   92e80:	aa1403e0 	mov	x0, x20
   92e84:	94001647 	bl	987a0 <CPtrList::GetFirst()>
   92e88:	aa0003f3 	mov	x19, x0
   92e8c:	b40006e0 	cbz	x0, 92f68 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x148>
   92e90:	aa1303e1 	mov	x1, x19
   92e94:	aa1403e0 	mov	x0, x20
   92e98:	5289a877 	mov	w23, #0x4d43                	// #19779
   92e9c:	72a96a97 	movk	w23, #0x4b54, lsl #16
   92ea0:	9400165c 	bl	98810 <CPtrList::GetPtr(TPtrListElement*)>
   92ea4:	b4000220 	cbz	x0, 92ee8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0xc8>
   92ea8:	b9400007 	ldr	w7, [x0]
   92eac:	6b1700ff 	cmp	w7, w23
   92eb0:	54000281 	b.ne	92f00 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0xe0>  // b.any
   92eb4:	b940100a 	ldr	w10, [x0, #16]
   92eb8:	aa1303e1 	mov	x1, x19
   92ebc:	aa1403e0 	mov	x0, x20
   92ec0:	4b15014b 	sub	w11, w10, w21
   92ec4:	7100017f 	cmp	w11, #0x0
   92ec8:	540002cc 	b.gt	92f20 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x100>
   92ecc:	94001639 	bl	987b0 <CPtrList::GetNext(TPtrListElement*)>
   92ed0:	b40004c0 	cbz	x0, 92f68 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x148>
   92ed4:	aa0003f3 	mov	x19, x0
   92ed8:	aa1403e0 	mov	x0, x20
   92edc:	aa1303e1 	mov	x1, x19
   92ee0:	9400164c 	bl	98810 <CPtrList::GetPtr(TPtrListElement*)>
   92ee4:	b5fffe20 	cbnz	x0, 92ea8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x88>
   92ee8:	d0000045 	adrp	x5, 9c000 <vtable for CSerialDevice>
   92eec:	d0000046 	adrp	x6, 9c000 <vtable for CSerialDevice>
   92ef0:	910940a1 	add	x1, x5, #0x250
   92ef4:	910c80c0 	add	x0, x6, #0x320
   92ef8:	52803362 	mov	w2, #0x19b                 	// #411
   92efc:	97ffd91d 	bl	89370 <assertion_failed>
   92f00:	d0000048 	adrp	x8, 9c000 <vtable for CSerialDevice>
   92f04:	d0000049 	adrp	x9, 9c000 <vtable for CSerialDevice>
   92f08:	91094101 	add	x1, x8, #0x250
   92f0c:	910cc120 	add	x0, x9, #0x330
   92f10:	52803382 	mov	w2, #0x19c                 	// #412
   92f14:	97ffd917 	bl	89370 <assertion_failed>
   92f18:	94000946 	bl	95430 <EnterCritical>
   92f1c:	17ffffd8 	b	92e7c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x5c>
   92f20:	aa1603e2 	mov	x2, x22
   92f24:	94001653 	bl	98870 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   92f28:	b9402b0c 	ldr	w12, [x24, #40]
   92f2c:	350001ac 	cbnz	w12, 92f60 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x140>
   92f30:	aa1603e0 	mov	x0, x22
   92f34:	a9415bf5 	ldp	x21, x22, [sp, #16]
   92f38:	a94263f7 	ldp	x23, x24, [sp, #32]
   92f3c:	f9401bfe 	ldr	x30, [sp, #48]
   92f40:	a8c553f3 	ldp	x19, x20, [sp], #80
   92f44:	d65f03c0 	ret
   92f48:	d0000041 	adrp	x1, 9c000 <vtable for CSerialDevice>
   92f4c:	d0000040 	adrp	x0, 9c000 <vtable for CSerialDevice>
   92f50:	91094021 	add	x1, x1, #0x250
   92f54:	911e8000 	add	x0, x0, #0x7a0
   92f58:	52803162 	mov	w2, #0x18b                 	// #395
   92f5c:	97ffd905 	bl	89370 <assertion_failed>
   92f60:	94000960 	bl	954e0 <LeaveCritical>
   92f64:	17fffff3 	b	92f30 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x110>
   92f68:	aa1303e1 	mov	x1, x19
   92f6c:	aa1403e0 	mov	x0, x20
   92f70:	aa1603e2 	mov	x2, x22
   92f74:	9400167f 	bl	98970 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   92f78:	17ffffec 	b	92f28 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x108>
   92f7c:	d503201f 	nop

0000000000092f80 <CTimer::CancelKernelTimer(unsigned long)>:
   92f80:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   92f84:	a9017bf5 	stp	x21, x30, [sp, #16]
   92f88:	b4000401 	cbz	x1, 93008 <CTimer::CancelKernelTimer(unsigned long)+0x88>
   92f8c:	aa0003f4 	mov	x20, x0
   92f90:	aa0103f3 	mov	x19, x1
   92f94:	b9402800 	ldr	w0, [x0, #40]
   92f98:	350002e0 	cbnz	w0, 92ff4 <CTimer::CancelKernelTimer(unsigned long)+0x74>
   92f9c:	91008295 	add	x21, x20, #0x20
   92fa0:	aa1303e1 	mov	x1, x19
   92fa4:	aa1503e0 	mov	x0, x21
   92fa8:	940016fa 	bl	98b90 <CPtrList::Find(void*)>
   92fac:	b40001a0 	cbz	x0, 92fe0 <CTimer::CancelKernelTimer(unsigned long)+0x60>
   92fb0:	b9400262 	ldr	w2, [x19]
   92fb4:	5289a863 	mov	w3, #0x4d43                	// #19779
   92fb8:	72a96a83 	movk	w3, #0x4b54, lsl #16
   92fbc:	6b03005f 	cmp	w2, w3
   92fc0:	54000301 	b.ne	93020 <CTimer::CancelKernelTimer(unsigned long)+0xa0>  // b.any
   92fc4:	aa0003e1 	mov	x1, x0
   92fc8:	aa1503e0 	mov	x0, x21
   92fcc:	940016a5 	bl	98a60 <CPtrList::Remove(TPtrListElement*)>
   92fd0:	aa1303e0 	mov	x0, x19
   92fd4:	d2800501 	mov	x1, #0x28                  	// #40
   92fd8:	b900027f 	str	wzr, [x19]
   92fdc:	940006b9 	bl	94ac0 <operator delete(void*, unsigned long)>
   92fe0:	b9402a86 	ldr	w6, [x20, #40]
   92fe4:	350000c6 	cbnz	w6, 92ffc <CTimer::CancelKernelTimer(unsigned long)+0x7c>
   92fe8:	a9417bf5 	ldp	x21, x30, [sp, #16]
   92fec:	a8c253f3 	ldp	x19, x20, [sp], #32
   92ff0:	d65f03c0 	ret
   92ff4:	9400090f 	bl	95430 <EnterCritical>
   92ff8:	17ffffe9 	b	92f9c <CTimer::CancelKernelTimer(unsigned long)+0x1c>
   92ffc:	a9417bf5 	ldp	x21, x30, [sp, #16]
   93000:	a8c253f3 	ldp	x19, x20, [sp], #32
   93004:	14000937 	b	954e0 <LeaveCritical>
   93008:	b0000041 	adrp	x1, 9c000 <vtable for CSerialDevice>
   9300c:	b0000040 	adrp	x0, 9c000 <vtable for CSerialDevice>
   93010:	91094021 	add	x1, x1, #0x250
   93014:	910a2000 	add	x0, x0, #0x288
   93018:	52803702 	mov	w2, #0x1b8                 	// #440
   9301c:	97ffd8d5 	bl	89370 <assertion_failed>
   93020:	b0000044 	adrp	x4, 9c000 <vtable for CSerialDevice>
   93024:	b0000045 	adrp	x5, 9c000 <vtable for CSerialDevice>
   93028:	91094081 	add	x1, x4, #0x250
   9302c:	910a60a0 	add	x0, x5, #0x298
   93030:	528037e2 	mov	w2, #0x1bf                 	// #447
   93034:	97ffd8cf 	bl	89370 <assertion_failed>
   93038:	d503201f 	nop
   9303c:	d503201f 	nop

0000000000093040 <CTimer::PollKernelTimers()>:
   93040:	a9bc53f3 	stp	x19, x20, [sp, #-64]!
   93044:	a9015bf5 	stp	x21, x22, [sp, #16]
   93048:	aa0003f5 	mov	x21, x0
   9304c:	b9402800 	ldr	w0, [x0, #40]
   93050:	f9001bfe 	str	x30, [sp, #48]
   93054:	350007c0 	cbnz	w0, 9314c <CTimer::PollKernelTimers()+0x10c>
   93058:	910082b6 	add	x22, x21, #0x20
   9305c:	aa1603e0 	mov	x0, x22
   93060:	940015d0 	bl	987a0 <CPtrList::GetFirst()>
   93064:	aa0003f4 	mov	x20, x0
   93068:	b4000500 	cbz	x0, 93108 <CTimer::PollKernelTimers()+0xc8>
   9306c:	a90263f7 	stp	x23, x24, [sp, #32]
   93070:	5289a877 	mov	w23, #0x4d43                	// #19779
   93074:	72a96a97 	movk	w23, #0x4b54, lsl #16
   93078:	aa1403e1 	mov	x1, x20
   9307c:	aa1603e0 	mov	x0, x22
   93080:	940015e4 	bl	98810 <CPtrList::GetPtr(TPtrListElement*)>
   93084:	aa0003f3 	mov	x19, x0
   93088:	b4000660 	cbz	x0, 93154 <CTimer::PollKernelTimers()+0x114>
   9308c:	b9400002 	ldr	w2, [x0]
   93090:	6b17005f 	cmp	w2, w23
   93094:	540006c1 	b.ne	9316c <CTimer::PollKernelTimers()+0x12c>  // b.any
   93098:	b9401005 	ldr	w5, [x0, #16]
   9309c:	b9400ea6 	ldr	w6, [x21, #12]
   930a0:	4b0600a7 	sub	w7, w5, w6
   930a4:	710000ff 	cmp	w7, #0x0
   930a8:	540002ec 	b.gt	93104 <CTimer::PollKernelTimers()+0xc4>
   930ac:	aa1403e1 	mov	x1, x20
   930b0:	aa1603e0 	mov	x0, x22
   930b4:	940015bf 	bl	987b0 <CPtrList::GetNext(TPtrListElement*)>
   930b8:	aa0003f8 	mov	x24, x0
   930bc:	aa1403e1 	mov	x1, x20
   930c0:	aa1603e0 	mov	x0, x22
   930c4:	94001667 	bl	98a60 <CPtrList::Remove(TPtrListElement*)>
   930c8:	b9402aa8 	ldr	w8, [x21, #40]
   930cc:	350002a8 	cbnz	w8, 93120 <CTimer::PollKernelTimers()+0xe0>
   930d0:	f9400669 	ldr	x9, [x19, #8]
   930d4:	b40002c9 	cbz	x9, 9312c <CTimer::PollKernelTimers()+0xec>
   930d8:	a9418a61 	ldp	x1, x2, [x19, #24]
   930dc:	aa1303e0 	mov	x0, x19
   930e0:	d63f0120 	blr	x9
   930e4:	aa1303e0 	mov	x0, x19
   930e8:	d2800501 	mov	x1, #0x28                  	// #40
   930ec:	b900027f 	str	wzr, [x19]
   930f0:	94000674 	bl	94ac0 <operator delete(void*, unsigned long)>
   930f4:	b9402aa0 	ldr	w0, [x21, #40]
   930f8:	35000260 	cbnz	w0, 93144 <CTimer::PollKernelTimers()+0x104>
   930fc:	aa1803f4 	mov	x20, x24
   93100:	b5fffbd8 	cbnz	x24, 93078 <CTimer::PollKernelTimers()+0x38>
   93104:	a94263f7 	ldp	x23, x24, [sp, #32]
   93108:	b9402aac 	ldr	w12, [x21, #40]
   9310c:	350003cc 	cbnz	w12, 93184 <CTimer::PollKernelTimers()+0x144>
   93110:	a9415bf5 	ldp	x21, x22, [sp, #16]
   93114:	f9401bfe 	ldr	x30, [sp, #48]
   93118:	a8c453f3 	ldp	x19, x20, [sp], #64
   9311c:	d65f03c0 	ret
   93120:	940008f0 	bl	954e0 <LeaveCritical>
   93124:	f9400669 	ldr	x9, [x19, #8]
   93128:	b5fffd89 	cbnz	x9, 930d8 <CTimer::PollKernelTimers()+0x98>
   9312c:	b000004a 	adrp	x10, 9c000 <vtable for CSerialDevice>
   93130:	b000004b 	adrp	x11, 9c000 <vtable for CSerialDevice>
   93134:	91094141 	add	x1, x10, #0x250
   93138:	911e8160 	add	x0, x11, #0x7a0
   9313c:	52803c62 	mov	w2, #0x1e3                 	// #483
   93140:	97ffd88c 	bl	89370 <assertion_failed>
   93144:	940008bb 	bl	95430 <EnterCritical>
   93148:	17ffffed 	b	930fc <CTimer::PollKernelTimers()+0xbc>
   9314c:	940008b9 	bl	95430 <EnterCritical>
   93150:	17ffffc2 	b	93058 <CTimer::PollKernelTimers()+0x18>
   93154:	b0000041 	adrp	x1, 9c000 <vtable for CSerialDevice>
   93158:	b0000040 	adrp	x0, 9c000 <vtable for CSerialDevice>
   9315c:	91094021 	add	x1, x1, #0x250
   93160:	910a2000 	add	x0, x0, #0x288
   93164:	52803a82 	mov	w2, #0x1d4                 	// #468
   93168:	97ffd882 	bl	89370 <assertion_failed>
   9316c:	b0000043 	adrp	x3, 9c000 <vtable for CSerialDevice>
   93170:	b0000044 	adrp	x4, 9c000 <vtable for CSerialDevice>
   93174:	91094061 	add	x1, x3, #0x250
   93178:	910a6080 	add	x0, x4, #0x298
   9317c:	52803aa2 	mov	w2, #0x1d5                 	// #469
   93180:	97ffd87c 	bl	89370 <assertion_failed>
   93184:	a9415bf5 	ldp	x21, x22, [sp, #16]
   93188:	f9401bfe 	ldr	x30, [sp, #48]
   9318c:	a8c453f3 	ldp	x19, x20, [sp], #64
   93190:	140008d4 	b	954e0 <LeaveCritical>
   93194:	d503201f 	nop
   93198:	d503201f 	nop
   9319c:	d503201f 	nop

00000000000931a0 <CTimer::InterruptHandler()>:
   931a0:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   931a4:	aa0003f4 	mov	x20, x0
   931a8:	a9017bf5 	stp	x21, x30, [sp, #16]
   931ac:	d53be241 	mrs	x1, cntp_cval_el0
   931b0:	b9400800 	ldr	w0, [x0, #8]
   931b4:	8b010002 	add	x2, x0, x1
   931b8:	d51be242 	msr	cntp_cval_el0, x2
   931bc:	b9401a80 	ldr	w0, [x20, #24]
   931c0:	35000360 	cbnz	w0, 9322c <CTimer::InterruptHandler()+0x8c>
   931c4:	b9400e85 	ldr	w5, [x20, #12]
   931c8:	5290a3e3 	mov	w3, #0x851f                	// #34079
   931cc:	72aa3d63 	movk	w3, #0x51eb, lsl #16
   931d0:	52800c84 	mov	w4, #0x64                  	// #100
   931d4:	110004a6 	add	w6, w5, #0x1
   931d8:	9ba37cc7 	umull	x7, w6, w3
   931dc:	b9000e86 	str	w6, [x20, #12]
   931e0:	d365fce8 	lsr	x8, x7, #37
   931e4:	1b049909 	msub	w9, w8, w4, w6
   931e8:	340003a9 	cbz	w9, 9325c <CTimer::InterruptHandler()+0xbc>
   931ec:	aa1403e0 	mov	x0, x20
   931f0:	d2800013 	mov	x19, #0x0                   	// #0
   931f4:	97ffff93 	bl	93040 <CTimer::PollKernelTimers()>
   931f8:	b9406281 	ldr	w1, [x20, #96]
   931fc:	91010295 	add	x21, x20, #0x40
   93200:	34000101 	cbz	w1, 93220 <CTimer::InterruptHandler()+0x80>
   93204:	d503201f 	nop
   93208:	f8737aa0 	ldr	x0, [x21, x19, lsl #3]
   9320c:	91000673 	add	x19, x19, #0x1
   93210:	d63f0000 	blr	x0
   93214:	b9406282 	ldr	w2, [x20, #96]
   93218:	6b13005f 	cmp	w2, w19
   9321c:	54ffff68 	b.hi	93208 <CTimer::InterruptHandler()+0x68>  // b.pmore
   93220:	a9417bf5 	ldp	x21, x30, [sp, #16]
   93224:	a8c253f3 	ldp	x19, x20, [sp], #32
   93228:	d65f03c0 	ret
   9322c:	94000881 	bl	95430 <EnterCritical>
   93230:	b9400e8c 	ldr	w12, [x20, #12]
   93234:	5290a3ea 	mov	w10, #0x851f                	// #34079
   93238:	72aa3d6a 	movk	w10, #0x51eb, lsl #16
   9323c:	52800c8b 	mov	w11, #0x64                  	// #100
   93240:	b9401a89 	ldr	w9, [x20, #24]
   93244:	1100058d 	add	w13, w12, #0x1
   93248:	9baa7dae 	umull	x14, w13, w10
   9324c:	b9000e8d 	str	w13, [x20, #12]
   93250:	d365fdcf 	lsr	x15, x14, #37
   93254:	1b0bb5f0 	msub	w16, w15, w11, w13
   93258:	350000f0 	cbnz	w16, 93274 <CTimer::InterruptHandler()+0xd4>
   9325c:	b9401291 	ldr	w17, [x20, #16]
   93260:	11000632 	add	w18, w17, #0x1
   93264:	b9001292 	str	w18, [x20, #16]
   93268:	b9401693 	ldr	w19, [x20, #20]
   9326c:	11000675 	add	w21, w19, #0x1
   93270:	b9001695 	str	w21, [x20, #20]
   93274:	34fffbc9 	cbz	w9, 931ec <CTimer::InterruptHandler()+0x4c>
   93278:	9400089a 	bl	954e0 <LeaveCritical>
   9327c:	17ffffdc 	b	931ec <CTimer::InterruptHandler()+0x4c>

0000000000093280 <CTimer::InterruptHandler(void*)>:
   93280:	b4000040 	cbz	x0, 93288 <CTimer::InterruptHandler(void*)+0x8>
   93284:	17ffffc7 	b	931a0 <CTimer::InterruptHandler()>
   93288:	b0000041 	adrp	x1, 9c000 <vtable for CSerialDevice>
   9328c:	90000040 	adrp	x0, 9b000 <vtable for CSoftSerialDevice+0x90>
   93290:	f81f0ffe 	str	x30, [sp, #-16]!
   93294:	91094021 	add	x1, x1, #0x250
   93298:	91004000 	add	x0, x0, #0x10
   9329c:	52804542 	mov	w2, #0x22a                 	// #554
   932a0:	97ffd834 	bl	89370 <assertion_failed>
   932a4:	d503201f 	nop
   932a8:	d503201f 	nop
   932ac:	d503201f 	nop

00000000000932b0 <CTimer::TuneMsDelay()>:
   932b0:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   932b4:	aa0003f4 	mov	x20, x0
   932b8:	52807d00 	mov	w0, #0x3e8                 	// #1000
   932bc:	5290a3f3 	mov	w19, #0x851f                	// #34079
   932c0:	72aa3d73 	movk	w19, #0x51eb, lsl #16
   932c4:	b9402e81 	ldr	w1, [x20, #44]
   932c8:	a9015bf5 	stp	x21, x22, [sp, #16]
   932cc:	5284e215 	mov	w21, #0x2710                	// #10000
   932d0:	b9400e96 	ldr	w22, [x20, #12]
   932d4:	1b007c20 	mul	w0, w1, w0
   932d8:	f90013fe 	str	x30, [sp, #32]
   932dc:	94001219 	bl	97b40 <DelayLoop>
   932e0:	b9400e85 	ldr	w5, [x20, #12]
   932e4:	5289ba62 	mov	w2, #0x4dd3                	// #19923
   932e8:	72a20c42 	movk	w2, #0x1062, lsl #16
   932ec:	b9402e83 	ldr	w3, [x20, #44]
   932f0:	4b1600a4 	sub	w4, w5, w22
   932f4:	1ac40ab5 	udiv	w21, w21, w4
   932f8:	1b037ea6 	mul	w6, w21, w3
   932fc:	9bb37eaa 	umull	x10, w21, w19
   93300:	9bb37cc7 	umull	x7, w6, w19
   93304:	d365fd53 	lsr	x19, x10, #37
   93308:	d365fce8 	lsr	x8, x7, #37
   9330c:	1107d109 	add	w9, w8, #0x1f4
   93310:	b9002e88 	str	w8, [x20, #44]
   93314:	9ba27d2b 	umull	x11, w9, w2
   93318:	d366fd6c 	lsr	x12, x11, #38
   9331c:	b900328c 	str	w12, [x20, #48]
   93320:	97ffe278 	bl	8bd00 <CLogger::Get()>
   93324:	52800c8d 	mov	w13, #0x64                  	// #100
   93328:	b000004e 	adrp	x14, 9c000 <vtable for CSerialDevice>
   9332c:	910861cf 	add	x15, x14, #0x218
   93330:	b0000050 	adrp	x16, 9c000 <vtable for CSerialDevice>
   93334:	f94013fe 	ldr	x30, [sp, #32]
   93338:	1b0dd665 	msub	w5, w19, w13, w21
   9333c:	2a1303e4 	mov	w4, w19
   93340:	9100c1e1 	add	x1, x15, #0x30
   93344:	910d6203 	add	x3, x16, #0x358
   93348:	52800062 	mov	w2, #0x3                   	// #3
   9334c:	a9415bf5 	ldp	x21, x22, [sp, #16]
   93350:	a8c353f3 	ldp	x19, x20, [sp], #48
   93354:	17ffe1a7 	b	8b9f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   93358:	d503201f 	nop
   9335c:	d503201f 	nop

0000000000093360 <CTimer::Initialize()>:
   93360:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   93364:	aa0003f3 	mov	x19, x0
   93368:	f9400000 	ldr	x0, [x0]
   9336c:	f9000bfe 	str	x30, [sp, #16]
   93370:	b40003c0 	cbz	x0, 933e8 <CTimer::Initialize()+0x88>
   93374:	aa1303e3 	mov	x3, x19
   93378:	528003c1 	mov	w1, #0x1e                  	// #30
   9337c:	90000002 	adrp	x2, 93000 <CTimer::CancelKernelTimer(unsigned long)+0x80>
   93380:	910a0042 	add	x2, x2, #0x280
   93384:	94000c7b 	bl	96570 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   93388:	d53be003 	mrs	x3, cntfrq_el0
   9338c:	d29eb864 	mov	x4, #0xf5c3                	// #62915
   93390:	f2ab8504 	movk	x4, #0x5c28, lsl #16
   93394:	f2d851e4 	movk	x4, #0xc28f, lsl #32
   93398:	f2e51ea4 	movk	x4, #0x28f5, lsl #48
   9339c:	d342fc65 	lsr	x5, x3, #2
   933a0:	9bc47ca6 	umulh	x6, x5, x4
   933a4:	d342fcc7 	lsr	x7, x6, #2
   933a8:	8b0704e8 	add	x8, x7, x7, lsl #1
   933ac:	8b080ce9 	add	x9, x7, x8, lsl #3
   933b0:	eb09087f 	cmp	x3, x9, lsl #2
   933b4:	54000261 	b.ne	93400 <CTimer::Initialize()+0xa0>  // b.any
   933b8:	b9000a67 	str	w7, [x19, #8]
   933bc:	d53be02c 	mrs	x12, cntpct_el0
   933c0:	8b27418d 	add	x13, x12, w7, uxtw
   933c4:	d51be24d 	msr	cntp_cval_el0, x13
   933c8:	52800034 	mov	w20, #0x1                   	// #1
   933cc:	d51be234 	msr	cntp_ctl_el0, x20
   933d0:	aa1303e0 	mov	x0, x19
   933d4:	97ffffb7 	bl	932b0 <CTimer::TuneMsDelay()>
   933d8:	2a1403e0 	mov	w0, w20
   933dc:	f9400bfe 	ldr	x30, [sp, #16]
   933e0:	a8c253f3 	ldp	x19, x20, [sp], #32
   933e4:	d65f03c0 	ret
   933e8:	b0000041 	adrp	x1, 9c000 <vtable for CSerialDevice>
   933ec:	b0000040 	adrp	x0, 9c000 <vtable for CSerialDevice>
   933f0:	91094021 	add	x1, x1, #0x250
   933f4:	9109c000 	add	x0, x0, #0x270
   933f8:	52800cc2 	mov	w2, #0x66                  	// #102
   933fc:	97ffd7dd 	bl	89370 <assertion_failed>
   93400:	b000004a 	adrp	x10, 9c000 <vtable for CSerialDevice>
   93404:	b000004b 	adrp	x11, 9c000 <vtable for CSerialDevice>
   93408:	91094141 	add	x1, x10, #0x250
   9340c:	910dc160 	add	x0, x11, #0x370
   93410:	52800fc2 	mov	w2, #0x7e                  	// #126
   93414:	97ffd7d7 	bl	89370 <assertion_failed>
   93418:	d503201f 	nop
   9341c:	d503201f 	nop

0000000000093420 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))>:
   93420:	f81f0ffe 	str	x30, [sp, #-16]!
   93424:	f9401c02 	ldr	x2, [x0, #56]
   93428:	b50000a2 	cbnz	x2, 9343c <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))+0x1c>
   9342c:	f9001c01 	str	x1, [x0, #56]
   93430:	b4000121 	cbz	x1, 93454 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))+0x34>
   93434:	f84107fe 	ldr	x30, [sp], #16
   93438:	d65f03c0 	ret
   9343c:	b0000041 	adrp	x1, 9c000 <vtable for CSerialDevice>
   93440:	b0000040 	adrp	x0, 9c000 <vtable for CSerialDevice>
   93444:	91094021 	add	x1, x1, #0x250
   93448:	910e2000 	add	x0, x0, #0x388
   9344c:	52804802 	mov	w2, #0x240                 	// #576
   93450:	97ffd7c8 	bl	89370 <assertion_failed>
   93454:	b0000043 	adrp	x3, 9c000 <vtable for CSerialDevice>
   93458:	b0000044 	adrp	x4, 9c000 <vtable for CSerialDevice>
   9345c:	91094061 	add	x1, x3, #0x250
   93460:	910ea080 	add	x0, x4, #0x3a8
   93464:	52804842 	mov	w2, #0x242                 	// #578
   93468:	97ffd7c2 	bl	89370 <assertion_failed>
   9346c:	d503201f 	nop

0000000000093470 <CTimer::RegisterPeriodicHandler(void (*)())>:
   93470:	f81f0ffe 	str	x30, [sp, #-16]!
   93474:	b40001a1 	cbz	x1, 934a8 <CTimer::RegisterPeriodicHandler(void (*)())+0x38>
   93478:	b9406002 	ldr	w2, [x0, #96]
   9347c:	71000c5f 	cmp	w2, #0x3
   93480:	54000208 	b.hi	934c0 <CTimer::RegisterPeriodicHandler(void (*)())+0x50>  // b.pmore
   93484:	b9406005 	ldr	w5, [x0, #96]
   93488:	8b254c06 	add	x6, x0, w5, uxtw #3
   9348c:	f90020c1 	str	x1, [x6, #64]
   93490:	d5033f9f 	dsb	sy
   93494:	b9406007 	ldr	w7, [x0, #96]
   93498:	f84107fe 	ldr	x30, [sp], #16
   9349c:	110004e8 	add	w8, w7, #0x1
   934a0:	b9006008 	str	w8, [x0, #96]
   934a4:	d65f03c0 	ret
   934a8:	b0000041 	adrp	x1, 9c000 <vtable for CSerialDevice>
   934ac:	b0000040 	adrp	x0, 9c000 <vtable for CSerialDevice>
   934b0:	91094021 	add	x1, x1, #0x250
   934b4:	911e8000 	add	x0, x0, #0x7a0
   934b8:	528048e2 	mov	w2, #0x247                 	// #583
   934bc:	97ffd7ad 	bl	89370 <assertion_failed>
   934c0:	b0000043 	adrp	x3, 9c000 <vtable for CSerialDevice>
   934c4:	b0000044 	adrp	x4, 9c000 <vtable for CSerialDevice>
   934c8:	91094061 	add	x1, x3, #0x250
   934cc:	910f2080 	add	x0, x4, #0x3c8
   934d0:	52804922 	mov	w2, #0x249                 	// #585
   934d4:	97ffd7a7 	bl	89370 <assertion_failed>
   934d8:	d503201f 	nop
   934dc:	d503201f 	nop

00000000000934e0 <CTimer::SimpleMsDelay(unsigned int)>:
   934e0:	340000a0 	cbz	w0, 934f4 <CTimer::SimpleMsDelay(unsigned int)+0x14>
   934e4:	52807d01 	mov	w1, #0x3e8                 	// #1000
   934e8:	1b017c00 	mul	w0, w0, w1
   934ec:	34000040 	cbz	w0, 934f4 <CTimer::SimpleMsDelay(unsigned int)+0x14>
   934f0:	17fffc8c 	b	92720 <CTimer::SimpleusDelay(unsigned int) [clone .part.6]>
   934f4:	d65f03c0 	ret
   934f8:	d503201f 	nop
   934fc:	d503201f 	nop

0000000000093500 <CTimer::SimpleusDelay(unsigned int)>:
   93500:	34000040 	cbz	w0, 93508 <CTimer::SimpleusDelay(unsigned int)+0x8>
   93504:	17fffc87 	b	92720 <CTimer::SimpleusDelay(unsigned int) [clone .part.6]>
   93508:	d65f03c0 	ret
   9350c:	d503201f 	nop

0000000000093510 <CTimer::IsLeapYear(unsigned int)>:
   93510:	5290a3e1 	mov	w1, #0x851f                	// #34079
   93514:	72aa3d61 	movk	w1, #0x51eb, lsl #16
   93518:	52800c83 	mov	w3, #0x64                  	// #100
   9351c:	9ba17c02 	umull	x2, w0, w1
   93520:	d360fc44 	lsr	x4, x2, #32
   93524:	53057c85 	lsr	w5, w4, #5
   93528:	1b0380a6 	msub	w6, w5, w3, w0
   9352c:	34000086 	cbz	w6, 9353c <CTimer::IsLeapYear(unsigned int)+0x2c>
   93530:	f240041f 	tst	x0, #0x3
   93534:	1a9f17e0 	cset	w0, eq  // eq = none
   93538:	d65f03c0 	ret
   9353c:	53077c87 	lsr	w7, w4, #7
   93540:	52803208 	mov	w8, #0x190                 	// #400
   93544:	1b0880e0 	msub	w0, w7, w8, w0
   93548:	7100001f 	cmp	w0, #0x0
   9354c:	1a9f17e0 	cset	w0, eq  // eq = none
   93550:	d65f03c0 	ret
   93554:	d503201f 	nop
   93558:	d503201f 	nop
   9355c:	d503201f 	nop

0000000000093560 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   93560:	7100041f 	cmp	w0, #0x1
   93564:	2a0003e2 	mov	w2, w0
   93568:	540000a0 	b.eq	9357c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x1c>  // b.none
   9356c:	b000004b 	adrp	x11, 9c000 <vtable for CSerialDevice>
   93570:	9108616c 	add	x12, x11, #0x218
   93574:	b8625980 	ldr	w0, [x12, w2, uxtw #2]
   93578:	d65f03c0 	ret
   9357c:	5290a3e0 	mov	w0, #0x851f                	// #34079
   93580:	72aa3d60 	movk	w0, #0x51eb, lsl #16
   93584:	f240043f 	tst	x1, #0x3
   93588:	52800c85 	mov	w5, #0x64                  	// #100
   9358c:	1a9f17ea 	cset	w10, eq  // eq = none
   93590:	9ba07c23 	umull	x3, w1, w0
   93594:	d360fc66 	lsr	x6, x3, #32
   93598:	53057cc7 	lsr	w7, w6, #5
   9359c:	1b0584e8 	msub	w8, w7, w5, w1
   935a0:	350000c8 	cbnz	w8, 935b8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x58>
   935a4:	53077cc4 	lsr	w4, w6, #7
   935a8:	52803209 	mov	w9, #0x190                 	// #400
   935ac:	1b098481 	msub	w1, w4, w9, w1
   935b0:	7100003f 	cmp	w1, #0x0
   935b4:	1a9f17ea 	cset	w10, eq  // eq = none
   935b8:	528003a0 	mov	w0, #0x1d                  	// #29
   935bc:	34fffd8a 	cbz	w10, 9356c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0xc>
   935c0:	d65f03c0 	ret
   935c4:	d503201f 	nop
   935c8:	d503201f 	nop
   935cc:	d503201f 	nop

00000000000935d0 <CTimer::Get()>:
   935d0:	d0016e80 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   935d4:	f9417400 	ldr	x0, [x0, #744]
   935d8:	b4000040 	cbz	x0, 935e0 <CTimer::Get()+0x10>
   935dc:	d65f03c0 	ret
   935e0:	b0000042 	adrp	x2, 9c000 <vtable for CSerialDevice>
   935e4:	b0000041 	adrp	x1, 9c000 <vtable for CSerialDevice>
   935e8:	f81f0ffe 	str	x30, [sp, #-16]!
   935ec:	91100040 	add	x0, x2, #0x400
   935f0:	91094021 	add	x1, x1, #0x250
   935f4:	52805142 	mov	w2, #0x28a                 	// #650
   935f8:	97ffd75e 	bl	89370 <assertion_failed>

00000000000935fc <memset>:
   935fc:	d10103ff 	sub	sp, sp, #0x40
   93600:	f9000fe0 	str	x0, [sp, #24]
   93604:	b90017e1 	str	w1, [sp, #20]
   93608:	f90007e2 	str	x2, [sp, #8]
   9360c:	f9400fe0 	ldr	x0, [sp, #24]
   93610:	f9001fe0 	str	x0, [sp, #56]
   93614:	f9401fe0 	ldr	x0, [sp, #56]
   93618:	92400400 	and	x0, x0, #0x3
   9361c:	f100001f 	cmp	x0, #0x0
   93620:	54000521 	b.ne	936c4 <memset+0xc8>  // b.any
   93624:	f94007e0 	ldr	x0, [sp, #8]
   93628:	f1003c1f 	cmp	x0, #0xf
   9362c:	540004c9 	b.ls	936c4 <memset+0xc8>  // b.plast
   93630:	b94017e0 	ldr	w0, [sp, #20]
   93634:	53185c01 	lsl	w1, w0, #8
   93638:	b94017e0 	ldr	w0, [sp, #20]
   9363c:	2a000020 	orr	w0, w1, w0
   93640:	b9002fe0 	str	w0, [sp, #44]
   93644:	b9402fe0 	ldr	w0, [sp, #44]
   93648:	53103c00 	lsl	w0, w0, #16
   9364c:	b9402fe1 	ldr	w1, [sp, #44]
   93650:	2a000020 	orr	w0, w1, w0
   93654:	b9002fe0 	str	w0, [sp, #44]
   93658:	f9401fe0 	ldr	x0, [sp, #56]
   9365c:	91001001 	add	x1, x0, #0x4
   93660:	f9001fe1 	str	x1, [sp, #56]
   93664:	b9402fe1 	ldr	w1, [sp, #44]
   93668:	b9000001 	str	w1, [x0]
   9366c:	f9401fe0 	ldr	x0, [sp, #56]
   93670:	91001001 	add	x1, x0, #0x4
   93674:	f9001fe1 	str	x1, [sp, #56]
   93678:	b9402fe1 	ldr	w1, [sp, #44]
   9367c:	b9000001 	str	w1, [x0]
   93680:	f9401fe0 	ldr	x0, [sp, #56]
   93684:	91001001 	add	x1, x0, #0x4
   93688:	f9001fe1 	str	x1, [sp, #56]
   9368c:	b9402fe1 	ldr	w1, [sp, #44]
   93690:	b9000001 	str	w1, [x0]
   93694:	f9401fe0 	ldr	x0, [sp, #56]
   93698:	91001001 	add	x1, x0, #0x4
   9369c:	f9001fe1 	str	x1, [sp, #56]
   936a0:	b9402fe1 	ldr	w1, [sp, #44]
   936a4:	b9000001 	str	w1, [x0]
   936a8:	f94007e0 	ldr	x0, [sp, #8]
   936ac:	d1004000 	sub	x0, x0, #0x10
   936b0:	f90007e0 	str	x0, [sp, #8]
   936b4:	f94007e0 	ldr	x0, [sp, #8]
   936b8:	f1003c1f 	cmp	x0, #0xf
   936bc:	54000049 	b.ls	936c4 <memset+0xc8>  // b.plast
   936c0:	17ffffe6 	b	93658 <memset+0x5c>
   936c4:	f9401fe0 	ldr	x0, [sp, #56]
   936c8:	f9001be0 	str	x0, [sp, #48]
   936cc:	f94007e0 	ldr	x0, [sp, #8]
   936d0:	d1000401 	sub	x1, x0, #0x1
   936d4:	f90007e1 	str	x1, [sp, #8]
   936d8:	f100001f 	cmp	x0, #0x0
   936dc:	1a9f07e0 	cset	w0, ne  // ne = any
   936e0:	12001c00 	and	w0, w0, #0xff
   936e4:	7100001f 	cmp	w0, #0x0
   936e8:	54000100 	b.eq	93708 <memset+0x10c>  // b.none
   936ec:	f9401be0 	ldr	x0, [sp, #48]
   936f0:	91000401 	add	x1, x0, #0x1
   936f4:	f9001be1 	str	x1, [sp, #48]
   936f8:	b94017e1 	ldr	w1, [sp, #20]
   936fc:	13001c21 	sxtb	w1, w1
   93700:	39000001 	strb	w1, [x0]
   93704:	17fffff2 	b	936cc <memset+0xd0>
   93708:	f9400fe0 	ldr	x0, [sp, #24]
   9370c:	910103ff 	add	sp, sp, #0x40
   93710:	d65f03c0 	ret

0000000000093714 <memmove>:
   93714:	eb01001f 	cmp	x0, x1
   93718:	54000089 	b.ls	93728 <memmove+0x14>  // b.plast
   9371c:	8b020023 	add	x3, x1, x2
   93720:	eb03001f 	cmp	x0, x3
   93724:	54000043 	b.cc	9372c <memmove+0x18>  // b.lo, b.ul, b.last
   93728:	1400032a 	b	943d0 <memcpy>
   9372c:	d100044b 	sub	x11, x2, #0x1
   93730:	b40007a2 	cbz	x2, 93824 <memmove+0x110>
   93734:	f2400842 	ands	x2, x2, #0x7
   93738:	54000420 	b.eq	937bc <memmove+0xa8>  // b.none
   9373c:	f100045f 	cmp	x2, #0x1
   93740:	54000340 	b.eq	937a8 <memmove+0x94>  // b.none
   93744:	f100085f 	cmp	x2, #0x2
   93748:	540002a0 	b.eq	9379c <memmove+0x88>  // b.none
   9374c:	f1000c5f 	cmp	x2, #0x3
   93750:	54000200 	b.eq	93790 <memmove+0x7c>  // b.none
   93754:	f100105f 	cmp	x2, #0x4
   93758:	54000160 	b.eq	93784 <memmove+0x70>  // b.none
   9375c:	f100145f 	cmp	x2, #0x5
   93760:	540000c0 	b.eq	93778 <memmove+0x64>  // b.none
   93764:	f100185f 	cmp	x2, #0x6
   93768:	54000601 	b.ne	93828 <memmove+0x114>  // b.any
   9376c:	38eb6825 	ldrsb	w5, [x1, x11]
   93770:	382b6805 	strb	w5, [x0, x11]
   93774:	d100056b 	sub	x11, x11, #0x1
   93778:	38eb6826 	ldrsb	w6, [x1, x11]
   9377c:	382b6806 	strb	w6, [x0, x11]
   93780:	d100056b 	sub	x11, x11, #0x1
   93784:	38eb6827 	ldrsb	w7, [x1, x11]
   93788:	382b6807 	strb	w7, [x0, x11]
   9378c:	d100056b 	sub	x11, x11, #0x1
   93790:	38eb6828 	ldrsb	w8, [x1, x11]
   93794:	382b6808 	strb	w8, [x0, x11]
   93798:	d100056b 	sub	x11, x11, #0x1
   9379c:	38eb6829 	ldrsb	w9, [x1, x11]
   937a0:	382b6809 	strb	w9, [x0, x11]
   937a4:	d100056b 	sub	x11, x11, #0x1
   937a8:	38eb682a 	ldrsb	w10, [x1, x11]
   937ac:	382b680a 	strb	w10, [x0, x11]
   937b0:	d100056b 	sub	x11, x11, #0x1
   937b4:	b100057f 	cmn	x11, #0x1
   937b8:	54000360 	b.eq	93824 <memmove+0x110>  // b.none
   937bc:	38eb682c 	ldrsb	w12, [x1, x11]
   937c0:	d100056d 	sub	x13, x11, #0x1
   937c4:	d100096f 	sub	x15, x11, #0x2
   937c8:	d1000d6e 	sub	x14, x11, #0x3
   937cc:	d1001170 	sub	x16, x11, #0x4
   937d0:	d1001571 	sub	x17, x11, #0x5
   937d4:	d1001972 	sub	x18, x11, #0x6
   937d8:	d1001d63 	sub	x3, x11, #0x7
   937dc:	382b680c 	strb	w12, [x0, x11]
   937e0:	d100216b 	sub	x11, x11, #0x8
   937e4:	38ed6822 	ldrsb	w2, [x1, x13]
   937e8:	b100057f 	cmn	x11, #0x1
   937ec:	382d6802 	strb	w2, [x0, x13]
   937f0:	38ef6824 	ldrsb	w4, [x1, x15]
   937f4:	382f6804 	strb	w4, [x0, x15]
   937f8:	38ee6825 	ldrsb	w5, [x1, x14]
   937fc:	382e6805 	strb	w5, [x0, x14]
   93800:	38f06826 	ldrsb	w6, [x1, x16]
   93804:	38306806 	strb	w6, [x0, x16]
   93808:	38f16827 	ldrsb	w7, [x1, x17]
   9380c:	38316807 	strb	w7, [x0, x17]
   93810:	38f26828 	ldrsb	w8, [x1, x18]
   93814:	38326808 	strb	w8, [x0, x18]
   93818:	38e36829 	ldrsb	w9, [x1, x3]
   9381c:	38236809 	strb	w9, [x0, x3]
   93820:	54fffce1 	b.ne	937bc <memmove+0xa8>  // b.any
   93824:	d65f03c0 	ret
   93828:	38eb6824 	ldrsb	w4, [x1, x11]
   9382c:	382b6804 	strb	w4, [x0, x11]
   93830:	d100056b 	sub	x11, x11, #0x1
   93834:	17ffffce 	b	9376c <memmove+0x58>

0000000000093838 <memcmp>:
   93838:	b4000ec2 	cbz	x2, 93a10 <memcmp+0x1d8>
   9383c:	39400004 	ldrb	w4, [x0]
   93840:	39400023 	ldrb	w3, [x1]
   93844:	6b03009f 	cmp	w4, w3
   93848:	54000e08 	b.hi	93a08 <memcmp+0x1d0>  // b.pmore
   9384c:	54000da3 	b.cc	93a00 <memcmp+0x1c8>  // b.lo, b.ul, b.last
   93850:	d2800023 	mov	x3, #0x1                   	// #1
   93854:	cb030045 	sub	x5, x2, x3
   93858:	f24008a6 	ands	x6, x5, #0x7
   9385c:	540006e0 	b.eq	93938 <memcmp+0x100>  // b.none
   93860:	39400407 	ldrb	w7, [x0, #1]
   93864:	39400428 	ldrb	w8, [x1, #1]
   93868:	6b0800ff 	cmp	w7, w8
   9386c:	54000ce8 	b.hi	93a08 <memcmp+0x1d0>  // b.pmore
   93870:	d2800043 	mov	x3, #0x2                   	// #2
   93874:	54000c63 	b.cc	93a00 <memcmp+0x1c8>  // b.lo, b.ul, b.last
   93878:	f10004df 	cmp	x6, #0x1
   9387c:	540005e0 	b.eq	93938 <memcmp+0x100>  // b.none
   93880:	eb0300df 	cmp	x6, x3
   93884:	540004e0 	b.eq	93920 <memcmp+0xe8>  // b.none
   93888:	f1000cdf 	cmp	x6, #0x3
   9388c:	540003e0 	b.eq	93908 <memcmp+0xd0>  // b.none
   93890:	f10010df 	cmp	x6, #0x4
   93894:	540002e0 	b.eq	938f0 <memcmp+0xb8>  // b.none
   93898:	f10014df 	cmp	x6, #0x5
   9389c:	540001e0 	b.eq	938d8 <memcmp+0xa0>  // b.none
   938a0:	f10018df 	cmp	x6, #0x6
   938a4:	540000e0 	b.eq	938c0 <memcmp+0x88>  // b.none
   938a8:	38636809 	ldrb	w9, [x0, x3]
   938ac:	3863682a 	ldrb	w10, [x1, x3]
   938b0:	6b0a013f 	cmp	w9, w10
   938b4:	54000aa8 	b.hi	93a08 <memcmp+0x1d0>  // b.pmore
   938b8:	91000463 	add	x3, x3, #0x1
   938bc:	54000a23 	b.cc	93a00 <memcmp+0x1c8>  // b.lo, b.ul, b.last
   938c0:	3863680b 	ldrb	w11, [x0, x3]
   938c4:	3863682c 	ldrb	w12, [x1, x3]
   938c8:	6b0c017f 	cmp	w11, w12
   938cc:	540009e8 	b.hi	93a08 <memcmp+0x1d0>  // b.pmore
   938d0:	91000463 	add	x3, x3, #0x1
   938d4:	54000963 	b.cc	93a00 <memcmp+0x1c8>  // b.lo, b.ul, b.last
   938d8:	3863680d 	ldrb	w13, [x0, x3]
   938dc:	3863682e 	ldrb	w14, [x1, x3]
   938e0:	6b0e01bf 	cmp	w13, w14
   938e4:	54000928 	b.hi	93a08 <memcmp+0x1d0>  // b.pmore
   938e8:	91000463 	add	x3, x3, #0x1
   938ec:	540008a3 	b.cc	93a00 <memcmp+0x1c8>  // b.lo, b.ul, b.last
   938f0:	3863680f 	ldrb	w15, [x0, x3]
   938f4:	38636830 	ldrb	w16, [x1, x3]
   938f8:	6b1001ff 	cmp	w15, w16
   938fc:	54000868 	b.hi	93a08 <memcmp+0x1d0>  // b.pmore
   93900:	91000463 	add	x3, x3, #0x1
   93904:	540007e3 	b.cc	93a00 <memcmp+0x1c8>  // b.lo, b.ul, b.last
   93908:	38636811 	ldrb	w17, [x0, x3]
   9390c:	38636832 	ldrb	w18, [x1, x3]
   93910:	6b12023f 	cmp	w17, w18
   93914:	540007a8 	b.hi	93a08 <memcmp+0x1d0>  // b.pmore
   93918:	91000463 	add	x3, x3, #0x1
   9391c:	54000723 	b.cc	93a00 <memcmp+0x1c8>  // b.lo, b.ul, b.last
   93920:	38636805 	ldrb	w5, [x0, x3]
   93924:	38636824 	ldrb	w4, [x1, x3]
   93928:	6b0400bf 	cmp	w5, w4
   9392c:	540006e8 	b.hi	93a08 <memcmp+0x1d0>  // b.pmore
   93930:	91000463 	add	x3, x3, #0x1
   93934:	54000663 	b.cc	93a00 <memcmp+0x1c8>  // b.lo, b.ul, b.last
   93938:	eb02007f 	cmp	x3, x2
   9393c:	540006a0 	b.eq	93a10 <memcmp+0x1d8>  // b.none
   93940:	38636806 	ldrb	w6, [x0, x3]
   93944:	38636827 	ldrb	w7, [x1, x3]
   93948:	6b0700df 	cmp	w6, w7
   9394c:	540005e8 	b.hi	93a08 <memcmp+0x1d0>  // b.pmore
   93950:	91000468 	add	x8, x3, #0x1
   93954:	54000563 	b.cc	93a00 <memcmp+0x1c8>  // b.lo, b.ul, b.last
   93958:	38686809 	ldrb	w9, [x0, x8]
   9395c:	3868682a 	ldrb	w10, [x1, x8]
   93960:	6b0a013f 	cmp	w9, w10
   93964:	54000528 	b.hi	93a08 <memcmp+0x1d0>  // b.pmore
   93968:	9100050b 	add	x11, x8, #0x1
   9396c:	540004a3 	b.cc	93a00 <memcmp+0x1c8>  // b.lo, b.ul, b.last
   93970:	386b680c 	ldrb	w12, [x0, x11]
   93974:	386b682d 	ldrb	w13, [x1, x11]
   93978:	6b0d019f 	cmp	w12, w13
   9397c:	54000468 	b.hi	93a08 <memcmp+0x1d0>  // b.pmore
   93980:	91000c6e 	add	x14, x3, #0x3
   93984:	540003e3 	b.cc	93a00 <memcmp+0x1c8>  // b.lo, b.ul, b.last
   93988:	386e680f 	ldrb	w15, [x0, x14]
   9398c:	386e6830 	ldrb	w16, [x1, x14]
   93990:	6b1001ff 	cmp	w15, w16
   93994:	540003a8 	b.hi	93a08 <memcmp+0x1d0>  // b.pmore
   93998:	91001063 	add	x3, x3, #0x4
   9399c:	54000323 	b.cc	93a00 <memcmp+0x1c8>  // b.lo, b.ul, b.last
   939a0:	38636811 	ldrb	w17, [x0, x3]
   939a4:	38636832 	ldrb	w18, [x1, x3]
   939a8:	6b12023f 	cmp	w17, w18
   939ac:	540002e8 	b.hi	93a08 <memcmp+0x1d0>  // b.pmore
   939b0:	91001104 	add	x4, x8, #0x4
   939b4:	54000263 	b.cc	93a00 <memcmp+0x1c8>  // b.lo, b.ul, b.last
   939b8:	38646805 	ldrb	w5, [x0, x4]
   939bc:	38646826 	ldrb	w6, [x1, x4]
   939c0:	6b0600bf 	cmp	w5, w6
   939c4:	54000228 	b.hi	93a08 <memcmp+0x1d0>  // b.pmore
   939c8:	91001507 	add	x7, x8, #0x5
   939cc:	540001a3 	b.cc	93a00 <memcmp+0x1c8>  // b.lo, b.ul, b.last
   939d0:	38676809 	ldrb	w9, [x0, x7]
   939d4:	3867682a 	ldrb	w10, [x1, x7]
   939d8:	6b0a013f 	cmp	w9, w10
   939dc:	54000168 	b.hi	93a08 <memcmp+0x1d0>  // b.pmore
   939e0:	9100190b 	add	x11, x8, #0x6
   939e4:	540000e3 	b.cc	93a00 <memcmp+0x1c8>  // b.lo, b.ul, b.last
   939e8:	386b680c 	ldrb	w12, [x0, x11]
   939ec:	386b682d 	ldrb	w13, [x1, x11]
   939f0:	6b0d019f 	cmp	w12, w13
   939f4:	540000a8 	b.hi	93a08 <memcmp+0x1d0>  // b.pmore
   939f8:	91001d03 	add	x3, x8, #0x7
   939fc:	54fff9e2 	b.cs	93938 <memcmp+0x100>  // b.hs, b.nlast
   93a00:	12800000 	mov	w0, #0xffffffff            	// #-1
   93a04:	d65f03c0 	ret
   93a08:	52800020 	mov	w0, #0x1                   	// #1
   93a0c:	d65f03c0 	ret
   93a10:	52800000 	mov	w0, #0x0                   	// #0
   93a14:	d65f03c0 	ret

0000000000093a18 <strlen>:
   93a18:	aa0003e2 	mov	x2, x0
   93a1c:	39c00000 	ldrsb	w0, [x0]
   93a20:	340000c0 	cbz	w0, 93a38 <strlen+0x20>
   93a24:	d2800000 	mov	x0, #0x0                   	// #0
   93a28:	91000400 	add	x0, x0, #0x1
   93a2c:	38e06841 	ldrsb	w1, [x2, x0]
   93a30:	35ffffc1 	cbnz	w1, 93a28 <strlen+0x10>
   93a34:	d65f03c0 	ret
   93a38:	d2800000 	mov	x0, #0x0                   	// #0
   93a3c:	d65f03c0 	ret

0000000000093a40 <strcmp>:
   93a40:	39c00003 	ldrsb	w3, [x0]
   93a44:	39c00024 	ldrsb	w4, [x1]
   93a48:	340001e3 	cbz	w3, 93a84 <strcmp+0x44>
   93a4c:	340001c4 	cbz	w4, 93a84 <strcmp+0x44>
   93a50:	6b03009f 	cmp	w4, w3
   93a54:	5400022b 	b.lt	93a98 <strcmp+0x58>  // b.tstop
   93a58:	5400024c 	b.gt	93aa0 <strcmp+0x60>
   93a5c:	d2800022 	mov	x2, #0x1                   	// #1
   93a60:	14000006 	b	93a78 <strcmp+0x38>
   93a64:	34000104 	cbz	w4, 93a84 <strcmp+0x44>
   93a68:	6b04007f 	cmp	w3, w4
   93a6c:	91000442 	add	x2, x2, #0x1
   93a70:	5400014c 	b.gt	93a98 <strcmp+0x58>
   93a74:	5400016b 	b.lt	93aa0 <strcmp+0x60>  // b.tstop
   93a78:	38e26803 	ldrsb	w3, [x0, x2]
   93a7c:	38e26824 	ldrsb	w4, [x1, x2]
   93a80:	35ffff23 	cbnz	w3, 93a64 <strcmp+0x24>
   93a84:	6b04007f 	cmp	w3, w4
   93a88:	52800021 	mov	w1, #0x1                   	// #1
   93a8c:	5a9fa3e0 	csetm	w0, lt  // lt = tstop
   93a90:	1a81d000 	csel	w0, w0, w1, le
   93a94:	d65f03c0 	ret
   93a98:	52800020 	mov	w0, #0x1                   	// #1
   93a9c:	d65f03c0 	ret
   93aa0:	12800000 	mov	w0, #0xffffffff            	// #-1
   93aa4:	d65f03c0 	ret

0000000000093aa8 <toupper(int)>:
   93aa8:	51018402 	sub	w2, w0, #0x61
   93aac:	51008001 	sub	w1, w0, #0x20
   93ab0:	7100685f 	cmp	w2, #0x1a
   93ab4:	1a803020 	csel	w0, w1, w0, cc  // cc = lo, ul, last
   93ab8:	d65f03c0 	ret

0000000000093abc <strcasecmp>:
   93abc:	d2800004 	mov	x4, #0x0                   	// #0
   93ac0:	14000008 	b	93ae0 <strcasecmp+0x24>
   93ac4:	7100691f 	cmp	w8, #0x1a
   93ac8:	510080a9 	sub	w9, w5, #0x20
   93acc:	1a85312a 	csel	w10, w9, w5, cc  // cc = lo, ul, last
   93ad0:	6b0a00ff 	cmp	w7, w10
   93ad4:	3400018a 	cbz	w10, 93b04 <strcasecmp+0x48>
   93ad8:	5400026c 	b.gt	93b24 <strcasecmp+0x68>
   93adc:	5400028b 	b.lt	93b2c <strcasecmp+0x70>  // b.tstop
   93ae0:	38e46803 	ldrsb	w3, [x0, x4]
   93ae4:	38e46825 	ldrsb	w5, [x1, x4]
   93ae8:	91000484 	add	x4, x4, #0x1
   93aec:	51018466 	sub	w6, w3, #0x61
   93af0:	51008062 	sub	w2, w3, #0x20
   93af4:	710068df 	cmp	w6, #0x1a
   93af8:	1a833047 	csel	w7, w2, w3, cc  // cc = lo, ul, last
   93afc:	510184a8 	sub	w8, w5, #0x61
   93b00:	35fffe27 	cbnz	w7, 93ac4 <strcasecmp+0x8>
   93b04:	510080a0 	sub	w0, w5, #0x20
   93b08:	7100691f 	cmp	w8, #0x1a
   93b0c:	1a853001 	csel	w1, w0, w5, cc  // cc = lo, ul, last
   93b10:	5280002b 	mov	w11, #0x1                   	// #1
   93b14:	6b07003f 	cmp	w1, w7
   93b18:	5a9fd3ec 	csetm	w12, gt
   93b1c:	1a8ba180 	csel	w0, w12, w11, ge  // ge = tcont
   93b20:	d65f03c0 	ret
   93b24:	52800020 	mov	w0, #0x1                   	// #1
   93b28:	d65f03c0 	ret
   93b2c:	12800000 	mov	w0, #0xffffffff            	// #-1
   93b30:	d65f03c0 	ret

0000000000093b34 <strncmp>:
   93b34:	b4000b42 	cbz	x2, 93c9c <strncmp+0x168>
   93b38:	39c0000c 	ldrsb	w12, [x0]
   93b3c:	39c00024 	ldrsb	w4, [x1]
   93b40:	34000a4c 	cbz	w12, 93c88 <strncmp+0x154>
   93b44:	34000a24 	cbz	w4, 93c88 <strncmp+0x154>
   93b48:	6b04019f 	cmp	w12, w4
   93b4c:	54000acc 	b.gt	93ca4 <strncmp+0x170>
   93b50:	5400096b 	b.lt	93c7c <strncmp+0x148>  // b.tstop
   93b54:	d1000443 	sub	x3, x2, #0x1
   93b58:	8b020022 	add	x2, x1, x2
   93b5c:	f2400465 	ands	x5, x3, #0x3
   93b60:	54000400 	b.eq	93be0 <strncmp+0xac>  // b.none
   93b64:	38c01c0c 	ldrsb	w12, [x0, #1]!
   93b68:	91000426 	add	x6, x1, #0x1
   93b6c:	340008cc 	cbz	w12, 93c84 <strncmp+0x150>
   93b70:	39c00424 	ldrsb	w4, [x1, #1]
   93b74:	340008a4 	cbz	w4, 93c88 <strncmp+0x154>
   93b78:	6b04019f 	cmp	w12, w4
   93b7c:	5400094c 	b.gt	93ca4 <strncmp+0x170>
   93b80:	aa0603e1 	mov	x1, x6
   93b84:	540007cb 	b.lt	93c7c <strncmp+0x148>  // b.tstop
   93b88:	f10004bf 	cmp	x5, #0x1
   93b8c:	540002a0 	b.eq	93be0 <strncmp+0xac>  // b.none
   93b90:	f10008bf 	cmp	x5, #0x2
   93b94:	54000140 	b.eq	93bbc <strncmp+0x88>  // b.none
   93b98:	38c01c0c 	ldrsb	w12, [x0, #1]!
   93b9c:	910004c7 	add	x7, x6, #0x1
   93ba0:	3400072c 	cbz	w12, 93c84 <strncmp+0x150>
   93ba4:	39c000e4 	ldrsb	w4, [x7]
   93ba8:	34000704 	cbz	w4, 93c88 <strncmp+0x154>
   93bac:	6b04019f 	cmp	w12, w4
   93bb0:	540007ac 	b.gt	93ca4 <strncmp+0x170>
   93bb4:	aa0703e1 	mov	x1, x7
   93bb8:	5400062b 	b.lt	93c7c <strncmp+0x148>  // b.tstop
   93bbc:	38c01c0c 	ldrsb	w12, [x0, #1]!
   93bc0:	91000428 	add	x8, x1, #0x1
   93bc4:	3400060c 	cbz	w12, 93c84 <strncmp+0x150>
   93bc8:	39c00424 	ldrsb	w4, [x1, #1]
   93bcc:	340005e4 	cbz	w4, 93c88 <strncmp+0x154>
   93bd0:	6b04019f 	cmp	w12, w4
   93bd4:	5400068c 	b.gt	93ca4 <strncmp+0x170>
   93bd8:	aa0803e1 	mov	x1, x8
   93bdc:	5400050b 	b.lt	93c7c <strncmp+0x148>  // b.tstop
   93be0:	91000429 	add	x9, x1, #0x1
   93be4:	9100040a 	add	x10, x0, #0x1
   93be8:	eb09005f 	cmp	x2, x9
   93bec:	54000580 	b.eq	93c9c <strncmp+0x168>  // b.none
   93bf0:	39c0040c 	ldrsb	w12, [x0, #1]
   93bf4:	3400048c 	cbz	w12, 93c84 <strncmp+0x150>
   93bf8:	39c00124 	ldrsb	w4, [x9]
   93bfc:	34000464 	cbz	w4, 93c88 <strncmp+0x154>
   93c00:	6b04019f 	cmp	w12, w4
   93c04:	5400050c 	b.gt	93ca4 <strncmp+0x170>
   93c08:	aa0903e1 	mov	x1, x9
   93c0c:	5400038b 	b.lt	93c7c <strncmp+0x148>  // b.tstop
   93c10:	39c0054c 	ldrsb	w12, [x10, #1]
   93c14:	9100052b 	add	x11, x9, #0x1
   93c18:	3400036c 	cbz	w12, 93c84 <strncmp+0x150>
   93c1c:	39c00524 	ldrsb	w4, [x9, #1]
   93c20:	34000344 	cbz	w4, 93c88 <strncmp+0x154>
   93c24:	6b04019f 	cmp	w12, w4
   93c28:	540003ec 	b.gt	93ca4 <strncmp+0x170>
   93c2c:	aa0b03e1 	mov	x1, x11
   93c30:	5400026b 	b.lt	93c7c <strncmp+0x148>  // b.tstop
   93c34:	39c00c0c 	ldrsb	w12, [x0, #3]
   93c38:	3400026c 	cbz	w12, 93c84 <strncmp+0x150>
   93c3c:	39c00564 	ldrsb	w4, [x11, #1]
   93c40:	34000244 	cbz	w4, 93c88 <strncmp+0x154>
   93c44:	6b04019f 	cmp	w12, w4
   93c48:	540002ec 	b.gt	93ca4 <strncmp+0x170>
   93c4c:	91000921 	add	x1, x9, #0x2
   93c50:	5400016b 	b.lt	93c7c <strncmp+0x148>  // b.tstop
   93c54:	39c00d4c 	ldrsb	w12, [x10, #3]
   93c58:	91000d40 	add	x0, x10, #0x3
   93c5c:	91000d2d 	add	x13, x9, #0x3
   93c60:	3400012c 	cbz	w12, 93c84 <strncmp+0x150>
   93c64:	39c00d24 	ldrsb	w4, [x9, #3]
   93c68:	34000104 	cbz	w4, 93c88 <strncmp+0x154>
   93c6c:	6b04019f 	cmp	w12, w4
   93c70:	540001ac 	b.gt	93ca4 <strncmp+0x170>
   93c74:	aa0d03e1 	mov	x1, x13
   93c78:	54fffb4a 	b.ge	93be0 <strncmp+0xac>  // b.tcont
   93c7c:	12800000 	mov	w0, #0xffffffff            	// #-1
   93c80:	d65f03c0 	ret
   93c84:	39c00424 	ldrsb	w4, [x1, #1]
   93c88:	6b04019f 	cmp	w12, w4
   93c8c:	52800021 	mov	w1, #0x1                   	// #1
   93c90:	5a9fa3e0 	csetm	w0, lt  // lt = tstop
   93c94:	1a81d000 	csel	w0, w0, w1, le
   93c98:	d65f03c0 	ret
   93c9c:	52800000 	mov	w0, #0x0                   	// #0
   93ca0:	d65f03c0 	ret
   93ca4:	52800020 	mov	w0, #0x1                   	// #1
   93ca8:	d65f03c0 	ret

0000000000093cac <strncasecmp>:
   93cac:	b40005c2 	cbz	x2, 93d64 <strncasecmp+0xb8>
   93cb0:	d2800009 	mov	x9, #0x0                   	// #0
   93cb4:	d1000447 	sub	x7, x2, #0x1
   93cb8:	370005a2 	tbnz	w2, #0, 93d6c <strncasecmp+0xc0>
   93cbc:	38e9680b 	ldrsb	w11, [x0, x9]
   93cc0:	38e96825 	ldrsb	w5, [x1, x9]
   93cc4:	5101856c 	sub	w12, w11, #0x61
   93cc8:	5100816d 	sub	w13, w11, #0x20
   93ccc:	7100699f 	cmp	w12, #0x1a
   93cd0:	1a8b31a8 	csel	w8, w13, w11, cc  // cc = lo, ul, last
   93cd4:	510184a6 	sub	w6, w5, #0x61
   93cd8:	35000108 	cbnz	w8, 93cf8 <strncasecmp+0x4c>
   93cdc:	710064df 	cmp	w6, #0x19
   93ce0:	54000769 	b.ls	93dcc <strncasecmp+0x120>  // b.plast
   93ce4:	6b05011f 	cmp	w8, w5
   93ce8:	52800021 	mov	w1, #0x1                   	// #1
   93cec:	5a9fa3e0 	csetm	w0, lt  // lt = tstop
   93cf0:	1a81d000 	csel	w0, w0, w1, le
   93cf4:	d65f03c0 	ret
   93cf8:	710068df 	cmp	w6, #0x1a
   93cfc:	510080af 	sub	w15, w5, #0x20
   93d00:	1a8531f0 	csel	w16, w15, w5, cc  // cc = lo, ul, last
   93d04:	9100052e 	add	x14, x9, #0x1
   93d08:	6b10011f 	cmp	w8, w16
   93d0c:	34fffe90 	cbz	w16, 93cdc <strncasecmp+0x30>
   93d10:	5400056c 	b.gt	93dbc <strncasecmp+0x110>
   93d14:	5400058b 	b.lt	93dc4 <strncasecmp+0x118>  // b.tstop
   93d18:	38ee6811 	ldrsb	w17, [x0, x14]
   93d1c:	d1000452 	sub	x18, x2, #0x1
   93d20:	38ee6825 	ldrsb	w5, [x1, x14]
   93d24:	51018627 	sub	w7, w17, #0x61
   93d28:	51008222 	sub	w2, w17, #0x20
   93d2c:	710068ff 	cmp	w7, #0x1a
   93d30:	1a913048 	csel	w8, w2, w17, cc  // cc = lo, ul, last
   93d34:	510184a6 	sub	w6, w5, #0x61
   93d38:	34fffd28 	cbz	w8, 93cdc <strncasecmp+0x30>
   93d3c:	710068df 	cmp	w6, #0x1a
   93d40:	510080a4 	sub	w4, w5, #0x20
   93d44:	1a853083 	csel	w3, w4, w5, cc  // cc = lo, ul, last
   93d48:	6b03011f 	cmp	w8, w3
   93d4c:	34fffc83 	cbz	w3, 93cdc <strncasecmp+0x30>
   93d50:	5400036c 	b.gt	93dbc <strncasecmp+0x110>
   93d54:	5400038b 	b.lt	93dc4 <strncasecmp+0x118>  // b.tstop
   93d58:	f1000642 	subs	x2, x18, #0x1
   93d5c:	910005c9 	add	x9, x14, #0x1
   93d60:	54fffae1 	b.ne	93cbc <strncasecmp+0x10>  // b.any
   93d64:	52800000 	mov	w0, #0x0                   	// #0
   93d68:	d65f03c0 	ret
   93d6c:	39c00002 	ldrsb	w2, [x0]
   93d70:	39c00025 	ldrsb	w5, [x1]
   93d74:	51018444 	sub	w4, w2, #0x61
   93d78:	51008043 	sub	w3, w2, #0x20
   93d7c:	7100689f 	cmp	w4, #0x1a
   93d80:	1a823068 	csel	w8, w3, w2, cc  // cc = lo, ul, last
   93d84:	510184a6 	sub	w6, w5, #0x61
   93d88:	34fffaa8 	cbz	w8, 93cdc <strncasecmp+0x30>
   93d8c:	710068df 	cmp	w6, #0x1a
   93d90:	510080a9 	sub	w9, w5, #0x20
   93d94:	1a85312a 	csel	w10, w9, w5, cc  // cc = lo, ul, last
   93d98:	34fffa2a 	cbz	w10, 93cdc <strncasecmp+0x30>
   93d9c:	6b0a011f 	cmp	w8, w10
   93da0:	540000ec 	b.gt	93dbc <strncasecmp+0x110>
   93da4:	5400010b 	b.lt	93dc4 <strncasecmp+0x118>  // b.tstop
   93da8:	aa0703e2 	mov	x2, x7
   93dac:	d2800029 	mov	x9, #0x1                   	// #1
   93db0:	b5fff867 	cbnz	x7, 93cbc <strncasecmp+0x10>
   93db4:	52800000 	mov	w0, #0x0                   	// #0
   93db8:	17ffffec 	b	93d68 <strncasecmp+0xbc>
   93dbc:	52800020 	mov	w0, #0x1                   	// #1
   93dc0:	d65f03c0 	ret
   93dc4:	12800000 	mov	w0, #0xffffffff            	// #-1
   93dc8:	d65f03c0 	ret
   93dcc:	510080a5 	sub	w5, w5, #0x20
   93dd0:	17ffffc5 	b	93ce4 <strncasecmp+0x38>

0000000000093dd4 <strcpy>:
   93dd4:	39c00022 	ldrsb	w2, [x1]
   93dd8:	aa0003e3 	mov	x3, x0
   93ddc:	34000082 	cbz	w2, 93dec <strcpy+0x18>
   93de0:	38001462 	strb	w2, [x3], #1
   93de4:	38c01c22 	ldrsb	w2, [x1, #1]!
   93de8:	35ffffc2 	cbnz	w2, 93de0 <strcpy+0xc>
   93dec:	3900007f 	strb	wzr, [x3]
   93df0:	d65f03c0 	ret

0000000000093df4 <strncpy>:
   93df4:	b40009a2 	cbz	x2, 93f28 <strncpy+0x134>
   93df8:	39c0002f 	ldrsb	w15, [x1]
   93dfc:	3400098f 	cbz	w15, 93f2c <strncpy+0x138>
   93e00:	d1000445 	sub	x5, x2, #0x1
   93e04:	aa0003e3 	mov	x3, x0
   93e08:	f24008a6 	ands	x6, x5, #0x7
   93e0c:	8b020002 	add	x2, x0, x2
   93e10:	54000440 	b.eq	93e98 <strncpy+0xa4>  // b.none
   93e14:	3800146f 	strb	w15, [x3], #1
   93e18:	38c01c2f 	ldrsb	w15, [x1, #1]!
   93e1c:	3400084f 	cbz	w15, 93f24 <strncpy+0x130>
   93e20:	f10004df 	cmp	x6, #0x1
   93e24:	540003a0 	b.eq	93e98 <strncpy+0xa4>  // b.none
   93e28:	f10008df 	cmp	x6, #0x2
   93e2c:	54000300 	b.eq	93e8c <strncpy+0x98>  // b.none
   93e30:	f1000cdf 	cmp	x6, #0x3
   93e34:	54000260 	b.eq	93e80 <strncpy+0x8c>  // b.none
   93e38:	f10010df 	cmp	x6, #0x4
   93e3c:	540001c0 	b.eq	93e74 <strncpy+0x80>  // b.none
   93e40:	f10014df 	cmp	x6, #0x5
   93e44:	54000120 	b.eq	93e68 <strncpy+0x74>  // b.none
   93e48:	f10018df 	cmp	x6, #0x6
   93e4c:	54000080 	b.eq	93e5c <strncpy+0x68>  // b.none
   93e50:	3800146f 	strb	w15, [x3], #1
   93e54:	38c01c2f 	ldrsb	w15, [x1, #1]!
   93e58:	3400066f 	cbz	w15, 93f24 <strncpy+0x130>
   93e5c:	3800146f 	strb	w15, [x3], #1
   93e60:	38c01c2f 	ldrsb	w15, [x1, #1]!
   93e64:	3400060f 	cbz	w15, 93f24 <strncpy+0x130>
   93e68:	3800146f 	strb	w15, [x3], #1
   93e6c:	38c01c2f 	ldrsb	w15, [x1, #1]!
   93e70:	340005af 	cbz	w15, 93f24 <strncpy+0x130>
   93e74:	3800146f 	strb	w15, [x3], #1
   93e78:	38c01c2f 	ldrsb	w15, [x1, #1]!
   93e7c:	3400054f 	cbz	w15, 93f24 <strncpy+0x130>
   93e80:	3800146f 	strb	w15, [x3], #1
   93e84:	38c01c2f 	ldrsb	w15, [x1, #1]!
   93e88:	340004ef 	cbz	w15, 93f24 <strncpy+0x130>
   93e8c:	3800146f 	strb	w15, [x3], #1
   93e90:	38c01c2f 	ldrsb	w15, [x1, #1]!
   93e94:	3400048f 	cbz	w15, 93f24 <strncpy+0x130>
   93e98:	91000463 	add	x3, x3, #0x1
   93e9c:	381ff06f 	sturb	w15, [x3, #-1]
   93ea0:	91000427 	add	x7, x1, #0x1
   93ea4:	eb03005f 	cmp	x2, x3
   93ea8:	aa0303e8 	mov	x8, x3
   93eac:	540003e0 	b.eq	93f28 <strncpy+0x134>  // b.none
   93eb0:	39c00424 	ldrsb	w4, [x1, #1]
   93eb4:	34000384 	cbz	w4, 93f24 <strncpy+0x130>
   93eb8:	38001464 	strb	w4, [x3], #1
   93ebc:	39c004e9 	ldrsb	w9, [x7, #1]
   93ec0:	34000329 	cbz	w9, 93f24 <strncpy+0x130>
   93ec4:	91000903 	add	x3, x8, #0x2
   93ec8:	381ff069 	sturb	w9, [x3, #-1]
   93ecc:	39c00c2a 	ldrsb	w10, [x1, #3]
   93ed0:	340002aa 	cbz	w10, 93f24 <strncpy+0x130>
   93ed4:	91000d03 	add	x3, x8, #0x3
   93ed8:	381ff06a 	sturb	w10, [x3, #-1]
   93edc:	39c0102b 	ldrsb	w11, [x1, #4]
   93ee0:	3400022b 	cbz	w11, 93f24 <strncpy+0x130>
   93ee4:	91001103 	add	x3, x8, #0x4
   93ee8:	381ff06b 	sturb	w11, [x3, #-1]
   93eec:	39c0142c 	ldrsb	w12, [x1, #5]
   93ef0:	340001ac 	cbz	w12, 93f24 <strncpy+0x130>
   93ef4:	91001503 	add	x3, x8, #0x5
   93ef8:	381ff06c 	sturb	w12, [x3, #-1]
   93efc:	39c0182d 	ldrsb	w13, [x1, #6]
   93f00:	3400012d 	cbz	w13, 93f24 <strncpy+0x130>
   93f04:	91001903 	add	x3, x8, #0x6
   93f08:	381ff06d 	sturb	w13, [x3, #-1]
   93f0c:	39c01c2e 	ldrsb	w14, [x1, #7]
   93f10:	340000ae 	cbz	w14, 93f24 <strncpy+0x130>
   93f14:	91001d03 	add	x3, x8, #0x7
   93f18:	381ff06e 	sturb	w14, [x3, #-1]
   93f1c:	38c08c2f 	ldrsb	w15, [x1, #8]!
   93f20:	35fffbcf 	cbnz	w15, 93e98 <strncpy+0xa4>
   93f24:	3900007f 	strb	wzr, [x3]
   93f28:	d65f03c0 	ret
   93f2c:	aa0003e3 	mov	x3, x0
   93f30:	3900007f 	strb	wzr, [x3]
   93f34:	17fffffd 	b	93f28 <strncpy+0x134>

0000000000093f38 <strcat>:
   93f38:	39c00003 	ldrsb	w3, [x0]
   93f3c:	aa0003e2 	mov	x2, x0
   93f40:	34000063 	cbz	w3, 93f4c <strcat+0x14>
   93f44:	38c01c44 	ldrsb	w4, [x2, #1]!
   93f48:	35ffffe4 	cbnz	w4, 93f44 <strcat+0xc>
   93f4c:	39c00025 	ldrsb	w5, [x1]
   93f50:	34000085 	cbz	w5, 93f60 <strcat+0x28>
   93f54:	38001445 	strb	w5, [x2], #1
   93f58:	38c01c25 	ldrsb	w5, [x1, #1]!
   93f5c:	35ffffc5 	cbnz	w5, 93f54 <strcat+0x1c>
   93f60:	3900005f 	strb	wzr, [x2]
   93f64:	d65f03c0 	ret

0000000000093f68 <strchr>:
   93f68:	39c00002 	ldrsb	w2, [x0]
   93f6c:	34000102 	cbz	w2, 93f8c <strchr+0x24>
   93f70:	6b02003f 	cmp	w1, w2
   93f74:	54000081 	b.ne	93f84 <strchr+0x1c>  // b.any
   93f78:	14000006 	b	93f90 <strchr+0x28>
   93f7c:	6b01007f 	cmp	w3, w1
   93f80:	54000080 	b.eq	93f90 <strchr+0x28>  // b.none
   93f84:	38c01c03 	ldrsb	w3, [x0, #1]!
   93f88:	35ffffa3 	cbnz	w3, 93f7c <strchr+0x14>
   93f8c:	d2800000 	mov	x0, #0x0                   	// #0
   93f90:	d65f03c0 	ret

0000000000093f94 <strstr>:
   93f94:	39c00002 	ldrsb	w2, [x0]
   93f98:	39c00025 	ldrsb	w5, [x1]
   93f9c:	350000c2 	cbnz	w2, 93fb4 <strstr+0x20>
   93fa0:	710000bf 	cmp	w5, #0x0
   93fa4:	9a9f0000 	csel	x0, x0, xzr, eq  // eq = none
   93fa8:	d65f03c0 	ret
   93fac:	38c01c08 	ldrsb	w8, [x0, #1]!
   93fb0:	340001c8 	cbz	w8, 93fe8 <strstr+0x54>
   93fb4:	34ffffa5 	cbz	w5, 93fa8 <strstr+0x14>
   93fb8:	39c00003 	ldrsb	w3, [x0]
   93fbc:	6b05007f 	cmp	w3, w5
   93fc0:	54ffff61 	b.ne	93fac <strstr+0x18>  // b.any
   93fc4:	d2800006 	mov	x6, #0x0                   	// #0
   93fc8:	14000004 	b	93fd8 <strstr+0x44>
   93fcc:	38e66804 	ldrsb	w4, [x0, x6]
   93fd0:	6b07009f 	cmp	w4, w7
   93fd4:	54fffec1 	b.ne	93fac <strstr+0x18>  // b.any
   93fd8:	910004c6 	add	x6, x6, #0x1
   93fdc:	38e66827 	ldrsb	w7, [x1, x6]
   93fe0:	35ffff67 	cbnz	w7, 93fcc <strstr+0x38>
   93fe4:	d65f03c0 	ret
   93fe8:	d2800000 	mov	x0, #0x0                   	// #0
   93fec:	d65f03c0 	ret

0000000000093ff0 <strtok_r>:
   93ff0:	aa0003e7 	mov	x7, x0
   93ff4:	b4000460 	cbz	x0, 94080 <strtok_r+0x90>
   93ff8:	39c000e4 	ldrsb	w4, [x7]
   93ffc:	340004c4 	cbz	w4, 94094 <strtok_r+0xa4>
   94000:	39c00026 	ldrsb	w6, [x1]
   94004:	34000126 	cbz	w6, 94028 <strtok_r+0x38>
   94008:	6b0400df 	cmp	w6, w4
   9400c:	540002e0 	b.eq	94068 <strtok_r+0x78>  // b.none
   94010:	aa0103e5 	mov	x5, x1
   94014:	14000003 	b	94020 <strtok_r+0x30>
   94018:	6b04007f 	cmp	w3, w4
   9401c:	54000260 	b.eq	94068 <strtok_r+0x78>  // b.none
   94020:	38c01ca3 	ldrsb	w3, [x5, #1]!
   94024:	35ffffa3 	cbnz	w3, 94018 <strtok_r+0x28>
   94028:	34000364 	cbz	w4, 94094 <strtok_r+0xa4>
   9402c:	aa0703e8 	mov	x8, x7
   94030:	34000126 	cbz	w6, 94054 <strtok_r+0x64>
   94034:	6b06009f 	cmp	w4, w6
   94038:	540001c0 	b.eq	94070 <strtok_r+0x80>  // b.none
   9403c:	aa0103e9 	mov	x9, x1
   94040:	14000003 	b	9404c <strtok_r+0x5c>
   94044:	6b04001f 	cmp	w0, w4
   94048:	54000140 	b.eq	94070 <strtok_r+0x80>  // b.none
   9404c:	38c01d20 	ldrsb	w0, [x9, #1]!
   94050:	35ffffa0 	cbnz	w0, 94044 <strtok_r+0x54>
   94054:	38c01d04 	ldrsb	w4, [x8, #1]!
   94058:	35fffec4 	cbnz	w4, 94030 <strtok_r+0x40>
   9405c:	aa0703e0 	mov	x0, x7
   94060:	f9000048 	str	x8, [x2]
   94064:	d65f03c0 	ret
   94068:	38c01ce4 	ldrsb	w4, [x7, #1]!
   9406c:	17ffffe6 	b	94004 <strtok_r+0x14>
   94070:	aa0703e0 	mov	x0, x7
   94074:	3800151f 	strb	wzr, [x8], #1
   94078:	f9000048 	str	x8, [x2]
   9407c:	17fffffa 	b	94064 <strtok_r+0x74>
   94080:	f9400047 	ldr	x7, [x2]
   94084:	d2800000 	mov	x0, #0x0                   	// #0
   94088:	b4fffee7 	cbz	x7, 94064 <strtok_r+0x74>
   9408c:	39c000e4 	ldrsb	w4, [x7]
   94090:	35fffb84 	cbnz	w4, 94000 <strtok_r+0x10>
   94094:	d2800000 	mov	x0, #0x0                   	// #0
   94098:	f900005f 	str	xzr, [x2]
   9409c:	d65f03c0 	ret

00000000000940a0 <strtoul>:
   940a0:	b4000041 	cbz	x1, 940a8 <strtoul+0x8>
   940a4:	f9000020 	str	x0, [x1]
   940a8:	51000843 	sub	w3, w2, #0x2
   940ac:	d2800008 	mov	x8, #0x0                   	// #0
   940b0:	7100887f 	cmp	w3, #0x22
   940b4:	7a408844 	ccmp	w2, #0x0, #0x4, hi  // hi = pmore
   940b8:	54000941 	b.ne	941e0 <strtoul+0x140>  // b.any
   940bc:	39c0000b 	ldrsb	w11, [x0]
   940c0:	51002564 	sub	w4, w11, #0x9
   940c4:	7100817f 	cmp	w11, #0x20
   940c8:	12001c85 	and	w5, w4, #0xff
   940cc:	54000060 	b.eq	940d8 <strtoul+0x38>  // b.none
   940d0:	710010bf 	cmp	w5, #0x4
   940d4:	54000068 	b.hi	940e0 <strtoul+0x40>  // b.pmore
   940d8:	91000400 	add	x0, x0, #0x1
   940dc:	17fffff8 	b	940bc <strtoul+0x1c>
   940e0:	7100ad7f 	cmp	w11, #0x2b
   940e4:	540002a0 	b.eq	94138 <strtoul+0x98>  // b.none
   940e8:	7100b57f 	cmp	w11, #0x2d
   940ec:	5280000a 	mov	w10, #0x0                   	// #0
   940f0:	540002a1 	b.ne	94144 <strtoul+0xa4>  // b.any
   940f4:	39c0040b 	ldrsb	w11, [x0, #1]
   940f8:	5280002a 	mov	w10, #0x1                   	// #1
   940fc:	91000400 	add	x0, x0, #0x1
   94100:	7100c17f 	cmp	w11, #0x30
   94104:	54000241 	b.ne	9414c <strtoul+0xac>  // b.any
   94108:	39c0040b 	ldrsb	w11, [x0, #1]
   9410c:	91000407 	add	x7, x0, #0x1
   94110:	121a7968 	and	w8, w11, #0xffffffdf
   94114:	7101611f 	cmp	w8, #0x58
   94118:	54000681 	b.ne	941e8 <strtoul+0x148>  // b.any
   9411c:	721b785f 	tst	w2, #0xffffffef
   94120:	d2800008 	mov	x8, #0x0                   	// #0
   94124:	540005e1 	b.ne	941e0 <strtoul+0x140>  // b.any
   94128:	39c0080b 	ldrsb	w11, [x0, #2]
   9412c:	52800202 	mov	w2, #0x10                  	// #16
   94130:	91000800 	add	x0, x0, #0x2
   94134:	14000009 	b	94158 <strtoul+0xb8>
   94138:	39c0040b 	ldrsb	w11, [x0, #1]
   9413c:	5280000a 	mov	w10, #0x0                   	// #0
   94140:	91000400 	add	x0, x0, #0x1
   94144:	7100c17f 	cmp	w11, #0x30
   94148:	54fffe00 	b.eq	94108 <strtoul+0x68>  // b.none
   9414c:	7100005f 	cmp	w2, #0x0
   94150:	52800146 	mov	w6, #0xa                   	// #10
   94154:	1a861042 	csel	w2, w2, w6, ne  // ne = any
   94158:	7100bd7f 	cmp	w11, #0x2f
   9415c:	2a0b03e6 	mov	w6, w11
   94160:	540005cd 	b.le	94218 <strtoul+0x178>
   94164:	52800025 	mov	w5, #0x1                   	// #1
   94168:	d2800007 	mov	x7, #0x0                   	// #0
   9416c:	93407c4c 	sxtw	x12, w2
   94170:	1400000a 	b	94198 <strtoul+0xf8>
   94174:	9b070d84 	madd	x4, x12, x7, x3
   94178:	52800005 	mov	w5, #0x0                   	// #0
   9417c:	eb07009f 	cmp	x4, x7
   94180:	aa0403e7 	mov	x7, x4
   94184:	540003c3 	b.cc	941fc <strtoul+0x15c>  // b.lo, b.ul, b.last
   94188:	38c01c06 	ldrsb	w6, [x0, #1]!
   9418c:	7100bcdf 	cmp	w6, #0x2f
   94190:	2a0603eb 	mov	w11, w6
   94194:	540003ed 	b.le	94210 <strtoul+0x170>
   94198:	5101856d 	sub	w13, w11, #0x61
   9419c:	510080ce 	sub	w14, w6, #0x20
   941a0:	710069bf 	cmp	w13, #0x1a
   941a4:	1a8631cf 	csel	w15, w14, w6, cc  // cc = lo, ul, last
   941a8:	51001df0 	sub	w16, w15, #0x7
   941ac:	710101ff 	cmp	w15, #0x40
   941b0:	1a8fc211 	csel	w17, w16, w15, gt
   941b4:	5100c232 	sub	w18, w17, #0x30
   941b8:	6b02025f 	cmp	w18, w2
   941bc:	93407e43 	sxtw	x3, w18
   941c0:	54fffdab 	b.lt	94174 <strtoul+0xd4>  // b.tstop
   941c4:	520000ab 	eor	w11, w5, #0x1
   941c8:	aa0703e4 	mov	x4, x7
   941cc:	0a0a016a 	and	w10, w11, w10
   941d0:	b4000041 	cbz	x1, 941d8 <strtoul+0x138>
   941d4:	f9000020 	str	x0, [x1]
   941d8:	7100015f 	cmp	w10, #0x0
   941dc:	da840488 	cneg	x8, x4, ne  // ne = any
   941e0:	aa0803e0 	mov	x0, x8
   941e4:	d65f03c0 	ret
   941e8:	7100005f 	cmp	w2, #0x0
   941ec:	52800109 	mov	w9, #0x8                   	// #8
   941f0:	1a891042 	csel	w2, w2, w9, ne  // ne = any
   941f4:	aa0703e0 	mov	x0, x7
   941f8:	17ffffd8 	b	94158 <strtoul+0xb8>
   941fc:	92800008 	mov	x8, #0xffffffffffffffff    	// #-1
   94200:	b4ffff01 	cbz	x1, 941e0 <strtoul+0x140>
   94204:	f9000020 	str	x0, [x1]
   94208:	aa0803e0 	mov	x0, x8
   9420c:	d65f03c0 	ret
   94210:	5280002b 	mov	w11, #0x1                   	// #1
   94214:	17ffffee 	b	941cc <strtoul+0x12c>
   94218:	d2800008 	mov	x8, #0x0                   	// #0
   9421c:	b4fffe21 	cbz	x1, 941e0 <strtoul+0x140>
   94220:	f9000020 	str	x0, [x1]
   94224:	17fffff9 	b	94208 <strtoul+0x168>

0000000000094228 <strtoull>:
   94228:	b4000041 	cbz	x1, 94230 <strtoull+0x8>
   9422c:	f9000020 	str	x0, [x1]
   94230:	51000843 	sub	w3, w2, #0x2
   94234:	d2800008 	mov	x8, #0x0                   	// #0
   94238:	7100887f 	cmp	w3, #0x22
   9423c:	7a408844 	ccmp	w2, #0x0, #0x4, hi  // hi = pmore
   94240:	54000941 	b.ne	94368 <strtoull+0x140>  // b.any
   94244:	39c0000b 	ldrsb	w11, [x0]
   94248:	51002564 	sub	w4, w11, #0x9
   9424c:	7100817f 	cmp	w11, #0x20
   94250:	12001c85 	and	w5, w4, #0xff
   94254:	54000060 	b.eq	94260 <strtoull+0x38>  // b.none
   94258:	710010bf 	cmp	w5, #0x4
   9425c:	54000068 	b.hi	94268 <strtoull+0x40>  // b.pmore
   94260:	91000400 	add	x0, x0, #0x1
   94264:	17fffff8 	b	94244 <strtoull+0x1c>
   94268:	7100ad7f 	cmp	w11, #0x2b
   9426c:	540002a0 	b.eq	942c0 <strtoull+0x98>  // b.none
   94270:	7100b57f 	cmp	w11, #0x2d
   94274:	5280000a 	mov	w10, #0x0                   	// #0
   94278:	540002a1 	b.ne	942cc <strtoull+0xa4>  // b.any
   9427c:	39c0040b 	ldrsb	w11, [x0, #1]
   94280:	5280002a 	mov	w10, #0x1                   	// #1
   94284:	91000400 	add	x0, x0, #0x1
   94288:	7100c17f 	cmp	w11, #0x30
   9428c:	54000241 	b.ne	942d4 <strtoull+0xac>  // b.any
   94290:	39c0040b 	ldrsb	w11, [x0, #1]
   94294:	91000407 	add	x7, x0, #0x1
   94298:	121a7968 	and	w8, w11, #0xffffffdf
   9429c:	7101611f 	cmp	w8, #0x58
   942a0:	54000681 	b.ne	94370 <strtoull+0x148>  // b.any
   942a4:	721b785f 	tst	w2, #0xffffffef
   942a8:	d2800008 	mov	x8, #0x0                   	// #0
   942ac:	540005e1 	b.ne	94368 <strtoull+0x140>  // b.any
   942b0:	39c0080b 	ldrsb	w11, [x0, #2]
   942b4:	52800202 	mov	w2, #0x10                  	// #16
   942b8:	91000800 	add	x0, x0, #0x2
   942bc:	14000009 	b	942e0 <strtoull+0xb8>
   942c0:	39c0040b 	ldrsb	w11, [x0, #1]
   942c4:	5280000a 	mov	w10, #0x0                   	// #0
   942c8:	91000400 	add	x0, x0, #0x1
   942cc:	7100c17f 	cmp	w11, #0x30
   942d0:	54fffe00 	b.eq	94290 <strtoull+0x68>  // b.none
   942d4:	7100005f 	cmp	w2, #0x0
   942d8:	52800146 	mov	w6, #0xa                   	// #10
   942dc:	1a861042 	csel	w2, w2, w6, ne  // ne = any
   942e0:	7100bd7f 	cmp	w11, #0x2f
   942e4:	2a0b03e6 	mov	w6, w11
   942e8:	540005cd 	b.le	943a0 <strtoull+0x178>
   942ec:	52800025 	mov	w5, #0x1                   	// #1
   942f0:	d2800007 	mov	x7, #0x0                   	// #0
   942f4:	93407c4c 	sxtw	x12, w2
   942f8:	1400000a 	b	94320 <strtoull+0xf8>
   942fc:	9b070d84 	madd	x4, x12, x7, x3
   94300:	52800005 	mov	w5, #0x0                   	// #0
   94304:	eb07009f 	cmp	x4, x7
   94308:	aa0403e7 	mov	x7, x4
   9430c:	540003c3 	b.cc	94384 <strtoull+0x15c>  // b.lo, b.ul, b.last
   94310:	38c01c06 	ldrsb	w6, [x0, #1]!
   94314:	7100bcdf 	cmp	w6, #0x2f
   94318:	2a0603eb 	mov	w11, w6
   9431c:	540003ed 	b.le	94398 <strtoull+0x170>
   94320:	5101856d 	sub	w13, w11, #0x61
   94324:	510080ce 	sub	w14, w6, #0x20
   94328:	710069bf 	cmp	w13, #0x1a
   9432c:	1a8631cf 	csel	w15, w14, w6, cc  // cc = lo, ul, last
   94330:	51001df0 	sub	w16, w15, #0x7
   94334:	710101ff 	cmp	w15, #0x40
   94338:	1a8fc211 	csel	w17, w16, w15, gt
   9433c:	5100c232 	sub	w18, w17, #0x30
   94340:	6b02025f 	cmp	w18, w2
   94344:	93407e43 	sxtw	x3, w18
   94348:	54fffdab 	b.lt	942fc <strtoull+0xd4>  // b.tstop
   9434c:	520000ab 	eor	w11, w5, #0x1
   94350:	aa0703e4 	mov	x4, x7
   94354:	0a0a016a 	and	w10, w11, w10
   94358:	b4000041 	cbz	x1, 94360 <strtoull+0x138>
   9435c:	f9000020 	str	x0, [x1]
   94360:	7100015f 	cmp	w10, #0x0
   94364:	da840488 	cneg	x8, x4, ne  // ne = any
   94368:	aa0803e0 	mov	x0, x8
   9436c:	d65f03c0 	ret
   94370:	7100005f 	cmp	w2, #0x0
   94374:	52800109 	mov	w9, #0x8                   	// #8
   94378:	1a891042 	csel	w2, w2, w9, ne  // ne = any
   9437c:	aa0703e0 	mov	x0, x7
   94380:	17ffffd8 	b	942e0 <strtoull+0xb8>
   94384:	92800008 	mov	x8, #0xffffffffffffffff    	// #-1
   94388:	b4ffff01 	cbz	x1, 94368 <strtoull+0x140>
   9438c:	f9000020 	str	x0, [x1]
   94390:	aa0803e0 	mov	x0, x8
   94394:	d65f03c0 	ret
   94398:	5280002b 	mov	w11, #0x1                   	// #1
   9439c:	17ffffee 	b	94354 <strtoull+0x12c>
   943a0:	d2800008 	mov	x8, #0x0                   	// #0
   943a4:	b4fffe21 	cbz	x1, 94368 <strtoull+0x140>
   943a8:	f9000020 	str	x0, [x1]
   943ac:	17fffff9 	b	94390 <strtoull+0x168>

00000000000943b0 <atoi>:
   943b0:	52800142 	mov	w2, #0xa                   	// #10
   943b4:	d2800001 	mov	x1, #0x0                   	// #0
   943b8:	f81f0ffe 	str	x30, [sp, #-16]!
   943bc:	97ffff39 	bl	940a0 <strtoul>
   943c0:	f84107fe 	ldr	x30, [sp], #16
   943c4:	d65f03c0 	ret

00000000000943c8 <char2int>:
   943c8:	13001c00 	sxtb	w0, w0
   943cc:	d65f03c0 	ret

00000000000943d0 <memcpy>:
   943d0:	aa0003e8 	mov	x8, x0
   943d4:	f101fc5f 	cmp	x2, #0x7f
   943d8:	540001c9 	b.ls	94410 <memcpy+0x40>  // b.plast
   943dc:	f240083f 	tst	x1, #0x7
   943e0:	54000181 	b.ne	94410 <memcpy+0x40>  // b.any
   943e4:	f240083f 	tst	x1, #0x7
   943e8:	54000141 	b.ne	94410 <memcpy+0x40>  // b.any
   943ec:	d2800803 	mov	x3, #0x40                  	// #64
   943f0:	a8c11424 	ldp	x4, x5, [x1], #16
   943f4:	a8c11c26 	ldp	x6, x7, [x1], #16
   943f8:	d1008042 	sub	x2, x2, #0x20
   943fc:	a8811404 	stp	x4, x5, [x0], #16
   94400:	a8811c06 	stp	x6, x7, [x0], #16
   94404:	f8a36821 	prfm	pldl1strm, [x1, x3]
   94408:	f1007c5f 	cmp	x2, #0x1f
   9440c:	54ffff28 	b.hi	943f0 <memcpy+0x20>  // b.pmore
   94410:	f100005f 	cmp	x2, #0x0
   94414:	540000a0 	b.eq	94428 <memcpy+0x58>  // b.none
   94418:	38401423 	ldrb	w3, [x1], #1
   9441c:	f1000442 	subs	x2, x2, #0x1
   94420:	38001403 	strb	w3, [x0], #1
   94424:	54ffffa1 	b.ne	94418 <memcpy+0x48>  // b.any
   94428:	aa0803e0 	mov	x0, x8
   9442c:	d65f03c0 	ret

0000000000094430 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>:
   94430:	72001c42 	ands	w2, w2, #0xff
   94434:	90000043 	adrp	x3, 9c000 <vtable for CSerialDevice>
   94438:	91120064 	add	x4, x3, #0x480
   9443c:	7a410822 	ccmp	w1, #0x1, #0x2, eq  // eq = none
   94440:	b9000c01 	str	w1, [x0, #12]
   94444:	39002002 	strb	w2, [x0, #8]
   94448:	f9000004 	str	x4, [x0]
   9444c:	b900141f 	str	wzr, [x0, #20]
   94450:	54000049 	b.ls	94458 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x28>  // b.plast
   94454:	d65f03c0 	ret
   94458:	a9bc53f3 	stp	x19, x20, [sp, #-64]!
   9445c:	aa0003f3 	mov	x19, x0
   94460:	a9017bf5 	stp	x21, x30, [sp, #16]
   94464:	b0016e94 	adrp	x20, 2e65000 <temp_gold+0xf421a0>
   94468:	910bc295 	add	x21, x20, #0x2f0
   9446c:	b9400aa0 	ldr	w0, [x21, #8]
   94470:	350001c0 	cbnz	w0, 944a8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x78>
   94474:	f9417a87 	ldr	x7, [x20, #752]
   94478:	b40001e7 	cbz	x7, 944b4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x84>
   9447c:	b9400e68 	ldr	w8, [x19, #12]
   94480:	531e7509 	lsl	w9, w8, #2
   94484:	b82948ff 	str	wzr, [x7, w9, uxtw]
   94488:	b9400aaa 	ldr	w10, [x21, #8]
   9448c:	3500044a 	cbnz	w10, 94514 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xe4>
   94490:	aa1303e0 	mov	x0, x19
   94494:	52800001 	mov	w1, #0x0                   	// #0
   94498:	9400003e 	bl	94590 <CVirtualGPIOPin::Write(unsigned int)>
   9449c:	a9417bf5 	ldp	x21, x30, [sp, #16]
   944a0:	a8c453f3 	ldp	x19, x20, [sp], #64
   944a4:	d65f03c0 	ret
   944a8:	940003e2 	bl	95430 <EnterCritical>
   944ac:	f9417a87 	ldr	x7, [x20, #752]
   944b0:	b5fffe67 	cbnz	x7, 9447c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x4c>
   944b4:	52800020 	mov	w0, #0x1                   	// #1
   944b8:	940003c2 	bl	953c0 <CMemorySystem::GetCoherentPage(unsigned int)>
   944bc:	f9017a80 	str	x0, [x20, #752]
   944c0:	52800001 	mov	w1, #0x0                   	// #0
   944c4:	9100a3e0 	add	x0, sp, #0x28
   944c8:	97ffd3ca 	bl	893f0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   944cc:	f9417a85 	ldr	x5, [x20, #752]
   944d0:	9100a3e0 	add	x0, sp, #0x28
   944d4:	9100c3e2 	add	x2, sp, #0x30
   944d8:	52900401 	mov	w1, #0x8020                	// #32800
   944dc:	72a00081 	movk	w1, #0x4, lsl #16
   944e0:	52800084 	mov	w4, #0x4                   	// #4
   944e4:	52800203 	mov	w3, #0x10                  	// #16
   944e8:	320204a6 	orr	w6, w5, #0xc0000000
   944ec:	b9003fe6 	str	w6, [sp, #60]
   944f0:	97ffd3c8 	bl	89410 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   944f4:	72001c1f 	tst	w0, #0xff
   944f8:	540001c0 	b.eq	94530 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x100>  // b.none
   944fc:	9100a3e0 	add	x0, sp, #0x28
   94500:	97ffd3c0 	bl	89400 <CBcmPropertyTags::~CBcmPropertyTags()>
   94504:	f9417a87 	ldr	x7, [x20, #752]
   94508:	b5fffba7 	cbnz	x7, 9447c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x4c>
   9450c:	b9400aaa 	ldr	w10, [x21, #8]
   94510:	34fffc0a 	cbz	w10, 94490 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x60>
   94514:	940003f3 	bl	954e0 <LeaveCritical>
   94518:	aa1303e0 	mov	x0, x19
   9451c:	52800001 	mov	w1, #0x0                   	// #0
   94520:	9400001c 	bl	94590 <CVirtualGPIOPin::Write(unsigned int)>
   94524:	a9417bf5 	ldp	x21, x30, [sp, #16]
   94528:	a8c453f3 	ldp	x19, x20, [sp], #64
   9452c:	d65f03c0 	ret
   94530:	9100c3e2 	add	x2, sp, #0x30
   94534:	52800201 	mov	w1, #0x10                  	// #16
   94538:	72a00081 	movk	w1, #0x4, lsl #16
   9453c:	52800004 	mov	w4, #0x0                   	// #0
   94540:	52800203 	mov	w3, #0x10                  	// #16
   94544:	9100a3e0 	add	x0, sp, #0x28
   94548:	97ffd3b2 	bl	89410 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   9454c:	72001c1f 	tst	w0, #0xff
   94550:	540000a0 	b.eq	94564 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x134>  // b.none
   94554:	b9403fe0 	ldr	w0, [sp, #60]
   94558:	92407401 	and	x1, x0, #0x3fffffff
   9455c:	f9017a81 	str	x1, [x20, #752]
   94560:	17ffffe7 	b	944fc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xcc>
   94564:	f9017a9f 	str	xzr, [x20, #752]
   94568:	17ffffe5 	b	944fc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xcc>
   9456c:	d503201f 	nop

0000000000094570 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   94570:	d65f03c0 	ret
   94574:	d503201f 	nop
   94578:	d503201f 	nop
   9457c:	d503201f 	nop

0000000000094580 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   94580:	d2800301 	mov	x1, #0x18                  	// #24
   94584:	1400014f 	b	94ac0 <operator delete(void*, unsigned long)>
   94588:	d503201f 	nop
   9458c:	d503201f 	nop

0000000000094590 <CVirtualGPIOPin::Write(unsigned int)>:
   94590:	a9bb53f3 	stp	x19, x20, [sp, #-80]!
   94594:	aa0003f3 	mov	x19, x0
   94598:	2a0103f4 	mov	w20, w1
   9459c:	39402001 	ldrb	w1, [x0, #8]
   945a0:	b9400c00 	ldr	w0, [x0, #12]
   945a4:	f90013fe 	str	x30, [sp, #32]
   945a8:	34000261 	cbz	w1, 945f4 <CVirtualGPIOPin::Write(unsigned int)+0x64>
   945ac:	350006c0 	cbnz	w0, 94684 <CVirtualGPIOPin::Write(unsigned int)+0xf4>
   945b0:	52800001 	mov	w1, #0x0                   	// #0
   945b4:	9100c3e0 	add	x0, sp, #0x30
   945b8:	97ffd38e 	bl	893f0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   945bc:	5280104f 	mov	w15, #0x82                  	// #130
   945c0:	9100c3e0 	add	x0, sp, #0x30
   945c4:	52900821 	mov	w1, #0x8041                	// #32833
   945c8:	72a00061 	movk	w1, #0x3, lsl #16
   945cc:	52800104 	mov	w4, #0x8                   	// #8
   945d0:	52800283 	mov	w3, #0x14                  	// #20
   945d4:	2908d3ef 	stp	w15, w20, [sp, #68]
   945d8:	9100e3e2 	add	x2, sp, #0x38
   945dc:	97ffd38d 	bl	89410 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   945e0:	9100c3e0 	add	x0, sp, #0x30
   945e4:	97ffd387 	bl	89400 <CBcmPropertyTags::~CBcmPropertyTags()>
   945e8:	f94013fe 	ldr	x30, [sp, #32]
   945ec:	a8c553f3 	ldp	x19, x20, [sp], #80
   945f0:	d65f03c0 	ret
   945f4:	7100041f 	cmp	w0, #0x1
   945f8:	54ffff88 	b.hi	945e8 <CVirtualGPIOPin::Write(unsigned int)+0x58>  // b.pmore
   945fc:	a9015bf5 	stp	x21, x22, [sp, #16]
   94600:	b0016e95 	adrp	x21, 2e65000 <temp_gold+0xf421a0>
   94604:	910bc2b6 	add	x22, x21, #0x2f0
   94608:	f9417aa2 	ldr	x2, [x21, #752]
   9460c:	f100005f 	cmp	x2, #0x0
   94610:	7a411a82 	ccmp	w20, #0x1, #0x2, ne  // ne = any
   94614:	540000a9 	b.ls	94628 <CVirtualGPIOPin::Write(unsigned int)+0x98>  // b.plast
   94618:	a9415bf5 	ldp	x21, x22, [sp, #16]
   9461c:	f94013fe 	ldr	x30, [sp, #32]
   94620:	a8c553f3 	ldp	x19, x20, [sp], #80
   94624:	d65f03c0 	ret
   94628:	b9400ac0 	ldr	w0, [x22, #8]
   9462c:	35000420 	cbnz	w0, 946b0 <CVirtualGPIOPin::Write(unsigned int)+0x120>
   94630:	79402a63 	ldrh	w3, [x19, #20]
   94634:	b9001274 	str	w20, [x19, #16]
   94638:	79402e68 	ldrh	w8, [x19, #22]
   9463c:	4b080064 	sub	w4, w3, w8
   94640:	13003c85 	sxth	w5, w4
   94644:	710000bf 	cmp	w5, #0x0
   94648:	540002ad 	b.le	9469c <CVirtualGPIOPin::Write(unsigned int)+0x10c>
   9464c:	35000134 	cbnz	w20, 94670 <CVirtualGPIOPin::Write(unsigned int)+0xe0>
   94650:	11000507 	add	w7, w8, #0x1
   94654:	12003ce8 	and	w8, w7, #0xffff
   94658:	79002e68 	strh	w8, [x19, #22]
   9465c:	b9400e6b 	ldr	w11, [x19, #12]
   94660:	2a034109 	orr	w9, w8, w3, lsl #16
   94664:	f9417aaa 	ldr	x10, [x21, #752]
   94668:	531e756c 	lsl	w12, w11, #2
   9466c:	b82c4949 	str	w9, [x10, w12, uxtw]
   94670:	b9400acd 	ldr	w13, [x22, #8]
   94674:	34fffd2d 	cbz	w13, 94618 <CVirtualGPIOPin::Write(unsigned int)+0x88>
   94678:	9400039a 	bl	954e0 <LeaveCritical>
   9467c:	a9415bf5 	ldp	x21, x22, [sp, #16]
   94680:	17ffffda 	b	945e8 <CVirtualGPIOPin::Write(unsigned int)+0x58>
   94684:	9000004e 	adrp	x14, 9c000 <vtable for CSerialDevice>
   94688:	911241c1 	add	x1, x14, #0x490
   9468c:	a9015bf5 	stp	x21, x22, [sp, #16]
   94690:	91006020 	add	x0, x1, #0x18
   94694:	52800b62 	mov	w2, #0x5b                  	// #91
   94698:	97ffd336 	bl	89370 <assertion_failed>
   9469c:	34fffeb4 	cbz	w20, 94670 <CVirtualGPIOPin::Write(unsigned int)+0xe0>
   946a0:	11000466 	add	w6, w3, #0x1
   946a4:	12003cc3 	and	w3, w6, #0xffff
   946a8:	79002a63 	strh	w3, [x19, #20]
   946ac:	17ffffec 	b	9465c <CVirtualGPIOPin::Write(unsigned int)+0xcc>
   946b0:	94000360 	bl	95430 <EnterCritical>
   946b4:	17ffffdf 	b	94630 <CVirtualGPIOPin::Write(unsigned int)+0xa0>
   946b8:	d503201f 	nop
   946bc:	d503201f 	nop

00000000000946c0 <CVirtualGPIOPin::Invert()>:
   946c0:	b9401001 	ldr	w1, [x0, #16]
   946c4:	52000021 	eor	w1, w1, #0x1
   946c8:	17ffffb2 	b	94590 <CVirtualGPIOPin::Write(unsigned int)>
   946cc:	d503201f 	nop

00000000000946d0 <__static_initialization_and_destruction_0(int, int)>:
   946d0:	529fffe2 	mov	w2, #0xffff                	// #65535
   946d4:	6b02003f 	cmp	w1, w2
   946d8:	7a410800 	ccmp	w0, #0x1, #0x0, eq  // eq = none
   946dc:	54000040 	b.eq	946e4 <__static_initialization_and_destruction_0(int, int)+0x14>  // b.none
   946e0:	d65f03c0 	ret
   946e4:	b0016e80 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   946e8:	b902f81f 	str	wzr, [x0, #760]
   946ec:	d65f03c0 	ret

00000000000946f0 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   946f0:	b0016e80 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   946f4:	b902f81f 	str	wzr, [x0, #760]
   946f8:	d65f03c0 	ret
   946fc:	00000000 	.inst	0x00000000 ; undefined

0000000000094700 <ChainBootStub(void const*, unsigned long)>:
   94700:	91000c21 	add	x1, x1, #0x3
   94704:	d342fc22 	lsr	x2, x1, #2
   94708:	b40009a2 	cbz	x2, 9483c <ChainBootStub(void const*, unsigned long)+0x13c>
   9470c:	91408043 	add	x3, x2, #0x20, lsl #12
   94710:	d1420000 	sub	x0, x0, #0x80, lsl #12
   94714:	d37ef46c 	lsl	x12, x3, #2
   94718:	d1001000 	sub	x0, x0, #0x4
   9471c:	d1420184 	sub	x4, x12, #0x80, lsl #12
   94720:	d2a00101 	mov	x1, #0x80000               	// #524288
   94724:	d1001084 	sub	x4, x4, #0x4
   94728:	d342fc85 	lsr	x5, x4, #2
   9472c:	910004a6 	add	x6, x5, #0x1
   94730:	f24008c7 	ands	x7, x6, #0x7
   94734:	540004e0 	b.eq	947d0 <ChainBootStub(void const*, unsigned long)+0xd0>  // b.none
   94738:	f10004ff 	cmp	x7, #0x1
   9473c:	540003e0 	b.eq	947b8 <ChainBootStub(void const*, unsigned long)+0xb8>  // b.none
   94740:	f10008ff 	cmp	x7, #0x2
   94744:	54000320 	b.eq	947a8 <ChainBootStub(void const*, unsigned long)+0xa8>  // b.none
   94748:	f1000cff 	cmp	x7, #0x3
   9474c:	54000260 	b.eq	94798 <ChainBootStub(void const*, unsigned long)+0x98>  // b.none
   94750:	f10010ff 	cmp	x7, #0x4
   94754:	540001a0 	b.eq	94788 <ChainBootStub(void const*, unsigned long)+0x88>  // b.none
   94758:	f10014ff 	cmp	x7, #0x5
   9475c:	540000e0 	b.eq	94778 <ChainBootStub(void const*, unsigned long)+0x78>  // b.none
   94760:	f10018ff 	cmp	x7, #0x6
   94764:	54000761 	b.ne	94850 <ChainBootStub(void const*, unsigned long)+0x150>  // b.any
   94768:	9100102a 	add	x10, x1, #0x4
   9476c:	b860694b 	ldr	w11, [x10, x0]
   94770:	b900002b 	str	w11, [x1]
   94774:	aa0a03e1 	mov	x1, x10
   94778:	9100102d 	add	x13, x1, #0x4
   9477c:	b86069ae 	ldr	w14, [x13, x0]
   94780:	b900002e 	str	w14, [x1]
   94784:	aa0d03e1 	mov	x1, x13
   94788:	9100102f 	add	x15, x1, #0x4
   9478c:	b86069f0 	ldr	w16, [x15, x0]
   94790:	b9000030 	str	w16, [x1]
   94794:	aa0f03e1 	mov	x1, x15
   94798:	91001031 	add	x17, x1, #0x4
   9479c:	b8606a32 	ldr	w18, [x17, x0]
   947a0:	b9000032 	str	w18, [x1]
   947a4:	aa1103e1 	mov	x1, x17
   947a8:	91001022 	add	x2, x1, #0x4
   947ac:	b8606843 	ldr	w3, [x2, x0]
   947b0:	b9000023 	str	w3, [x1]
   947b4:	aa0203e1 	mov	x1, x2
   947b8:	91001025 	add	x5, x1, #0x4
   947bc:	b86068a4 	ldr	w4, [x5, x0]
   947c0:	eb0c00bf 	cmp	x5, x12
   947c4:	b9000024 	str	w4, [x1]
   947c8:	aa0503e1 	mov	x1, x5
   947cc:	54000380 	b.eq	9483c <ChainBootStub(void const*, unsigned long)+0x13c>  // b.none
   947d0:	91001026 	add	x6, x1, #0x4
   947d4:	9100202d 	add	x13, x1, #0x8
   947d8:	b86068cb 	ldr	w11, [x6, x0]
   947dc:	9100302a 	add	x10, x1, #0xc
   947e0:	91004029 	add	x9, x1, #0x10
   947e4:	91005028 	add	x8, x1, #0x14
   947e8:	91006027 	add	x7, x1, #0x18
   947ec:	9100702e 	add	x14, x1, #0x1c
   947f0:	9100802f 	add	x15, x1, #0x20
   947f4:	eb0c01ff 	cmp	x15, x12
   947f8:	b900002b 	str	w11, [x1]
   947fc:	b86069b0 	ldr	w16, [x13, x0]
   94800:	b9000430 	str	w16, [x1, #4]
   94804:	b8606951 	ldr	w17, [x10, x0]
   94808:	b9000831 	str	w17, [x1, #8]
   9480c:	b8606932 	ldr	w18, [x9, x0]
   94810:	b9000c32 	str	w18, [x1, #12]
   94814:	b8606902 	ldr	w2, [x8, x0]
   94818:	b9001022 	str	w2, [x1, #16]
   9481c:	b86068e3 	ldr	w3, [x7, x0]
   94820:	b9001423 	str	w3, [x1, #20]
   94824:	b86069c5 	ldr	w5, [x14, x0]
   94828:	b9001825 	str	w5, [x1, #24]
   9482c:	b86069e4 	ldr	w4, [x15, x0]
   94830:	b9001c24 	str	w4, [x1, #28]
   94834:	aa0f03e1 	mov	x1, x15
   94838:	54fffcc1 	b.ne	947d0 <ChainBootStub(void const*, unsigned long)+0xd0>  // b.any
   9483c:	d508751f 	ic	iallu
   94840:	d5033f9f 	dsb	sy
   94844:	d5033fdf 	isb
   94848:	d2a00100 	mov	x0, #0x80000               	// #524288
   9484c:	d61f0000 	br	x0
   94850:	91001028 	add	x8, x1, #0x4
   94854:	b8606909 	ldr	w9, [x8, x0]
   94858:	b9000029 	str	w9, [x1]
   9485c:	aa0803e1 	mov	x1, x8
   94860:	17ffffc2 	b	94768 <ChainBootStub(void const*, unsigned long)+0x68>
   94864:	d503201f 	nop
   94868:	d503201f 	nop
   9486c:	d503201f 	nop

0000000000094870 <EnableChainBoot>:
   94870:	b0016e83 	adrp	x3, 2e65000 <temp_gold+0xf421a0>
   94874:	910c0065 	add	x5, x3, #0x300
   94878:	f81f0ffe 	str	x30, [sp, #-16]!
   9487c:	90000004 	adrp	x4, 94000 <strtok_r+0x10>
   94880:	d2808002 	mov	x2, #0x400                 	// #1024
   94884:	f9018060 	str	x0, [x3, #768]
   94888:	b27623e0 	mov	x0, #0x7fc00               	// #523264
   9488c:	f90004a1 	str	x1, [x5, #8]
   94890:	911c0081 	add	x1, x4, #0x700
   94894:	97fffecf 	bl	943d0 <memcpy>
   94898:	d508751f 	ic	iallu
   9489c:	d5033f9f 	dsb	sy
   948a0:	d5033fdf 	isb
   948a4:	f84107fe 	ldr	x30, [sp], #16
   948a8:	d65f03c0 	ret
   948ac:	d503201f 	nop

00000000000948b0 <IsChainBootEnabled>:
   948b0:	b0016e80 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   948b4:	f9418001 	ldr	x1, [x0, #768]
   948b8:	f100003f 	cmp	x1, #0x0
   948bc:	1a9f07e0 	cset	w0, ne  // ne = any
   948c0:	d65f03c0 	ret
   948c4:	d503201f 	nop
   948c8:	d503201f 	nop
   948cc:	d503201f 	nop

00000000000948d0 <DoChainBoot>:
   948d0:	d4000002 	hvc	#0x0
   948d4:	b0016e80 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   948d8:	910c0001 	add	x1, x0, #0x300
   948dc:	b27623e2 	mov	x2, #0x7fc00               	// #523264
   948e0:	f9418000 	ldr	x0, [x0, #768]
   948e4:	f9400421 	ldr	x1, [x1, #8]
   948e8:	d61f0040 	br	x2
   948ec:	00000000 	.inst	0x00000000 ; undefined

00000000000948f0 <operator new(unsigned long, int)>:
   948f0:	7100043f 	cmp	w1, #0x1
   948f4:	540000e0 	b.eq	94910 <operator new(unsigned long, int)+0x20>  // b.none
   948f8:	7100083f 	cmp	w1, #0x2
   948fc:	540001e0 	b.eq	94938 <operator new(unsigned long, int)+0x48>  // b.none
   94900:	d2800006 	mov	x6, #0x0                   	// #0
   94904:	34000101 	cbz	w1, 94924 <operator new(unsigned long, int)+0x34>
   94908:	aa0603e0 	mov	x0, x6
   9490c:	d65f03c0 	ret
   94910:	b0016e82 	adrp	x2, 2e65000 <temp_gold+0xf421a0>
   94914:	aa0003e1 	mov	x1, x0
   94918:	f9418c40 	ldr	x0, [x2, #792]
   9491c:	91064000 	add	x0, x0, #0x190
   94920:	140000a8 	b	94bc0 <CHeapAllocator::Allocate(unsigned long)>
   94924:	b0016e87 	adrp	x7, 2e65000 <temp_gold+0xf421a0>
   94928:	aa0003e1 	mov	x1, x0
   9492c:	f9418ce8 	ldr	x8, [x7, #792]
   94930:	91006100 	add	x0, x8, #0x18
   94934:	140000a3 	b	94bc0 <CHeapAllocator::Allocate(unsigned long)>
   94938:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   9493c:	b0016e94 	adrp	x20, 2e65000 <temp_gold+0xf421a0>
   94940:	aa0003f3 	mov	x19, x0
   94944:	aa0003e1 	mov	x1, x0
   94948:	f9418e84 	ldr	x4, [x20, #792]
   9494c:	f9000bfe 	str	x30, [sp, #16]
   94950:	91064080 	add	x0, x4, #0x190
   94954:	9400009b 	bl	94bc0 <CHeapAllocator::Allocate(unsigned long)>
   94958:	b4000080 	cbz	x0, 94968 <operator new(unsigned long, int)+0x78>
   9495c:	f9400bfe 	ldr	x30, [sp, #16]
   94960:	a8c253f3 	ldp	x19, x20, [sp], #32
   94964:	d65f03c0 	ret
   94968:	f9418e85 	ldr	x5, [x20, #792]
   9496c:	aa1303e1 	mov	x1, x19
   94970:	f9400bfe 	ldr	x30, [sp, #16]
   94974:	a8c253f3 	ldp	x19, x20, [sp], #32
   94978:	910060a0 	add	x0, x5, #0x18
   9497c:	14000091 	b	94bc0 <CHeapAllocator::Allocate(unsigned long)>

0000000000094980 <operator new[](unsigned long, int)>:
   94980:	7100043f 	cmp	w1, #0x1
   94984:	540000e0 	b.eq	949a0 <operator new[](unsigned long, int)+0x20>  // b.none
   94988:	7100083f 	cmp	w1, #0x2
   9498c:	540001e0 	b.eq	949c8 <operator new[](unsigned long, int)+0x48>  // b.none
   94990:	d2800006 	mov	x6, #0x0                   	// #0
   94994:	34000101 	cbz	w1, 949b4 <operator new[](unsigned long, int)+0x34>
   94998:	aa0603e0 	mov	x0, x6
   9499c:	d65f03c0 	ret
   949a0:	b0016e82 	adrp	x2, 2e65000 <temp_gold+0xf421a0>
   949a4:	aa0003e1 	mov	x1, x0
   949a8:	f9418c40 	ldr	x0, [x2, #792]
   949ac:	91064000 	add	x0, x0, #0x190
   949b0:	14000084 	b	94bc0 <CHeapAllocator::Allocate(unsigned long)>
   949b4:	b0016e87 	adrp	x7, 2e65000 <temp_gold+0xf421a0>
   949b8:	aa0003e1 	mov	x1, x0
   949bc:	f9418ce8 	ldr	x8, [x7, #792]
   949c0:	91006100 	add	x0, x8, #0x18
   949c4:	1400007f 	b	94bc0 <CHeapAllocator::Allocate(unsigned long)>
   949c8:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   949cc:	b0016e94 	adrp	x20, 2e65000 <temp_gold+0xf421a0>
   949d0:	aa0003f3 	mov	x19, x0
   949d4:	aa0003e1 	mov	x1, x0
   949d8:	f9418e84 	ldr	x4, [x20, #792]
   949dc:	f9000bfe 	str	x30, [sp, #16]
   949e0:	91064080 	add	x0, x4, #0x190
   949e4:	94000077 	bl	94bc0 <CHeapAllocator::Allocate(unsigned long)>
   949e8:	b4000080 	cbz	x0, 949f8 <operator new[](unsigned long, int)+0x78>
   949ec:	f9400bfe 	ldr	x30, [sp, #16]
   949f0:	a8c253f3 	ldp	x19, x20, [sp], #32
   949f4:	d65f03c0 	ret
   949f8:	f9418e85 	ldr	x5, [x20, #792]
   949fc:	aa1303e1 	mov	x1, x19
   94a00:	f9400bfe 	ldr	x30, [sp, #16]
   94a04:	a8c253f3 	ldp	x19, x20, [sp], #32
   94a08:	910060a0 	add	x0, x5, #0x18
   94a0c:	1400006d 	b	94bc0 <CHeapAllocator::Allocate(unsigned long)>

0000000000094a10 <operator new(unsigned long, void*)>:
   94a10:	aa0103e0 	mov	x0, x1
   94a14:	d65f03c0 	ret
   94a18:	d503201f 	nop
   94a1c:	d503201f 	nop

0000000000094a20 <operator new[](unsigned long, void*)>:
   94a20:	aa0103e0 	mov	x0, x1
   94a24:	d65f03c0 	ret
   94a28:	d503201f 	nop
   94a2c:	d503201f 	nop

0000000000094a30 <operator new(unsigned long)>:
   94a30:	b0016e82 	adrp	x2, 2e65000 <temp_gold+0xf421a0>
   94a34:	aa0003e1 	mov	x1, x0
   94a38:	f9418c40 	ldr	x0, [x2, #792]
   94a3c:	91006000 	add	x0, x0, #0x18
   94a40:	14000060 	b	94bc0 <CHeapAllocator::Allocate(unsigned long)>
   94a44:	d503201f 	nop
   94a48:	d503201f 	nop
   94a4c:	d503201f 	nop

0000000000094a50 <operator new[](unsigned long)>:
   94a50:	17fffff8 	b	94a30 <operator new(unsigned long)>
   94a54:	d503201f 	nop
   94a58:	d503201f 	nop
   94a5c:	d503201f 	nop

0000000000094a60 <operator delete(void*)>:
   94a60:	aa0003e1 	mov	x1, x0
   94a64:	b24077e0 	mov	x0, #0x3fffffff            	// #1073741823
   94a68:	b0016e82 	adrp	x2, 2e65000 <temp_gold+0xf421a0>
   94a6c:	eb00003f 	cmp	x1, x0
   94a70:	f9418c43 	ldr	x3, [x2, #792]
   94a74:	54000068 	b.hi	94a80 <operator delete(void*)+0x20>  // b.pmore
   94a78:	91006060 	add	x0, x3, #0x18
   94a7c:	140000e1 	b	94e00 <CHeapAllocator::Free(void*)>
   94a80:	91064060 	add	x0, x3, #0x190
   94a84:	140000df 	b	94e00 <CHeapAllocator::Free(void*)>
   94a88:	d503201f 	nop
   94a8c:	d503201f 	nop

0000000000094a90 <operator delete[](void*)>:
   94a90:	aa0003e1 	mov	x1, x0
   94a94:	b24077e0 	mov	x0, #0x3fffffff            	// #1073741823
   94a98:	b0016e82 	adrp	x2, 2e65000 <temp_gold+0xf421a0>
   94a9c:	eb00003f 	cmp	x1, x0
   94aa0:	f9418c43 	ldr	x3, [x2, #792]
   94aa4:	54000068 	b.hi	94ab0 <operator delete[](void*)+0x20>  // b.pmore
   94aa8:	91006060 	add	x0, x3, #0x18
   94aac:	140000d5 	b	94e00 <CHeapAllocator::Free(void*)>
   94ab0:	91064060 	add	x0, x3, #0x190
   94ab4:	140000d3 	b	94e00 <CHeapAllocator::Free(void*)>
   94ab8:	d503201f 	nop
   94abc:	d503201f 	nop

0000000000094ac0 <operator delete(void*, unsigned long)>:
   94ac0:	aa0003e1 	mov	x1, x0
   94ac4:	b24077e0 	mov	x0, #0x3fffffff            	// #1073741823
   94ac8:	b0016e82 	adrp	x2, 2e65000 <temp_gold+0xf421a0>
   94acc:	eb00003f 	cmp	x1, x0
   94ad0:	f9418c43 	ldr	x3, [x2, #792]
   94ad4:	54000068 	b.hi	94ae0 <operator delete(void*, unsigned long)+0x20>  // b.pmore
   94ad8:	91006060 	add	x0, x3, #0x18
   94adc:	140000c9 	b	94e00 <CHeapAllocator::Free(void*)>
   94ae0:	91064060 	add	x0, x3, #0x190
   94ae4:	140000c7 	b	94e00 <CHeapAllocator::Free(void*)>
   94ae8:	d503201f 	nop
   94aec:	d503201f 	nop

0000000000094af0 <operator delete[](void*, unsigned long)>:
   94af0:	aa0003e1 	mov	x1, x0
   94af4:	b24077e0 	mov	x0, #0x3fffffff            	// #1073741823
   94af8:	b0016e82 	adrp	x2, 2e65000 <temp_gold+0xf421a0>
   94afc:	eb00003f 	cmp	x1, x0
   94b00:	f9418c43 	ldr	x3, [x2, #792]
   94b04:	54000068 	b.hi	94b10 <operator delete[](void*, unsigned long)+0x20>  // b.pmore
   94b08:	91006060 	add	x0, x3, #0x18
   94b0c:	140000bd 	b	94e00 <CHeapAllocator::Free(void*)>
   94b10:	91064060 	add	x0, x3, #0x190
   94b14:	140000bb 	b	94e00 <CHeapAllocator::Free(void*)>
	...

0000000000094b20 <CHeapAllocator::CHeapAllocator(char const*)>:
   94b20:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   94b24:	52800023 	mov	w3, #0x1                   	// #1
   94b28:	aa0003f3 	mov	x19, x0
   94b2c:	d2802a02 	mov	x2, #0x150                 	// #336
   94b30:	91008000 	add	x0, x0, #0x20
   94b34:	a9007e61 	stp	x1, xzr, [x19]
   94b38:	52800001 	mov	w1, #0x0                   	// #0
   94b3c:	a9017e7f 	stp	xzr, xzr, [x19, #16]
   94b40:	b9017263 	str	w3, [x19, #368]
   94b44:	97fffaae 	bl	935fc <memset>
   94b48:	d0000041 	adrp	x1, 9e000 <font_data+0x1558>
   94b4c:	91180020 	add	x0, x1, #0x600
   94b50:	29409402 	ldp	w2, w5, [x0, #4]
   94b54:	29419c06 	ldp	w6, w7, [x0, #12]
   94b58:	2942a408 	ldp	w8, w9, [x0, #20]
   94b5c:	b9003262 	str	w2, [x19, #48]
   94b60:	b9460024 	ldr	w4, [x1, #1536]
   94b64:	b9004265 	str	w5, [x19, #64]
   94b68:	b9005266 	str	w6, [x19, #80]
   94b6c:	b9006267 	str	w7, [x19, #96]
   94b70:	b9007268 	str	w8, [x19, #112]
   94b74:	b9002264 	str	w4, [x19, #32]
   94b78:	b9008269 	str	w9, [x19, #128]
   94b7c:	a8c17bf3 	ldp	x19, x30, [sp], #16
   94b80:	d65f03c0 	ret
   94b84:	d503201f 	nop
   94b88:	d503201f 	nop
   94b8c:	d503201f 	nop

0000000000094b90 <CHeapAllocator::~CHeapAllocator()>:
   94b90:	d65f03c0 	ret
   94b94:	d503201f 	nop
   94b98:	d503201f 	nop
   94b9c:	d503201f 	nop

0000000000094ba0 <CHeapAllocator::Setup(unsigned long, unsigned long, unsigned long)>:
   94ba0:	8b020022 	add	x2, x1, x2
   94ba4:	f9000c03 	str	x3, [x0, #24]
   94ba8:	a9008801 	stp	x1, x2, [x0, #8]
   94bac:	d65f03c0 	ret

0000000000094bb0 <CHeapAllocator::GetFreeSpace() const>:
   94bb0:	a9408001 	ldp	x1, x0, [x0, #8]
   94bb4:	cb010000 	sub	x0, x0, x1
   94bb8:	d65f03c0 	ret
   94bbc:	d503201f 	nop

0000000000094bc0 <CHeapAllocator::Allocate(unsigned long)>:
   94bc0:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   94bc4:	aa0003f4 	mov	x20, x0
   94bc8:	f9400400 	ldr	x0, [x0, #8]
   94bcc:	f9000ffe 	str	x30, [sp, #24]
   94bd0:	b4000380 	cbz	x0, 94c40 <CHeapAllocator::Allocate(unsigned long)+0x80>
   94bd4:	b9417280 	ldr	w0, [x20, #368]
   94bd8:	aa0103f3 	mov	x19, x1
   94bdc:	f9000bf5 	str	x21, [sp, #16]
   94be0:	35000780 	cbnz	w0, 94cd0 <CHeapAllocator::Allocate(unsigned long)+0x110>
   94be4:	b9402281 	ldr	w1, [x20, #32]
   94be8:	91008282 	add	x2, x20, #0x20
   94bec:	34000141 	cbz	w1, 94c14 <CHeapAllocator::Allocate(unsigned long)+0x54>
   94bf0:	2a0103e4 	mov	w4, w1
   94bf4:	eb04027f 	cmp	x19, x4
   94bf8:	540000a8 	b.hi	94c0c <CHeapAllocator::Allocate(unsigned long)+0x4c>  // b.pmore
   94bfc:	14000021 	b	94c80 <CHeapAllocator::Allocate(unsigned long)+0xc0>
   94c00:	2a0303e4 	mov	w4, w3
   94c04:	eb13009f 	cmp	x4, x19
   94c08:	540003c2 	b.cs	94c80 <CHeapAllocator::Allocate(unsigned long)+0xc0>  // b.hs, b.nlast
   94c0c:	b8410c43 	ldr	w3, [x2, #16]!
   94c10:	35ffff83 	cbnz	w3, 94c00 <CHeapAllocator::Allocate(unsigned long)+0x40>
   94c14:	f9400695 	ldr	x21, [x20, #8]
   94c18:	9101fe69 	add	x9, x19, #0x7f
   94c1c:	927ae52a 	and	x10, x9, #0xffffffffffffffc0
   94c20:	f9400e8b 	ldr	x11, [x20, #24]
   94c24:	8b0a02ac 	add	x12, x21, x10
   94c28:	eb0c02bf 	cmp	x21, x12
   94c2c:	54000123 	b.cc	94c50 <CHeapAllocator::Allocate(unsigned long)+0x90>  // b.lo, b.ul, b.last
   94c30:	b9417292 	ldr	w18, [x20, #368]
   94c34:	b500052b 	cbnz	x11, 94cd8 <CHeapAllocator::Allocate(unsigned long)+0x118>
   94c38:	350006d2 	cbnz	w18, 94d10 <CHeapAllocator::Allocate(unsigned long)+0x150>
   94c3c:	f9400bf5 	ldr	x21, [sp, #16]
   94c40:	d2800000 	mov	x0, #0x0                   	// #0
   94c44:	f9400ffe 	ldr	x30, [sp, #24]
   94c48:	a8c253f3 	ldp	x19, x20, [sp], #32
   94c4c:	d65f03c0 	ret
   94c50:	f9400a8d 	ldr	x13, [x20, #16]
   94c54:	cb0b01ae 	sub	x14, x13, x11
   94c58:	eb0e019f 	cmp	x12, x14
   94c5c:	54fffea8 	b.hi	94c30 <CHeapAllocator::Allocate(unsigned long)+0x70>  // b.pmore
   94c60:	5289a86f 	mov	w15, #0x4d43                	// #19779
   94c64:	72a8498f 	movk	w15, #0x424c, lsl #16
   94c68:	f900068c 	str	x12, [x20, #8]
   94c6c:	29004eaf 	stp	w15, w19, [x21]
   94c70:	b9417290 	ldr	w16, [x20, #368]
   94c74:	340001f0 	cbz	w16, 94cb0 <CHeapAllocator::Allocate(unsigned long)+0xf0>
   94c78:	9400021a 	bl	954e0 <LeaveCritical>
   94c7c:	1400000d 	b	94cb0 <CHeapAllocator::Allocate(unsigned long)+0xf0>
   94c80:	f9400455 	ldr	x21, [x2, #8]
   94c84:	aa0403f3 	mov	x19, x4
   94c88:	b4fffc75 	cbz	x21, 94c14 <CHeapAllocator::Allocate(unsigned long)+0x54>
   94c8c:	b94002a6 	ldr	w6, [x21]
   94c90:	5289a865 	mov	w5, #0x4d43                	// #19779
   94c94:	72a84985 	movk	w5, #0x424c, lsl #16
   94c98:	6b0500df 	cmp	w6, w5
   94c9c:	54000501 	b.ne	94d3c <CHeapAllocator::Allocate(unsigned long)+0x17c>  // b.any
   94ca0:	f94006a8 	ldr	x8, [x21, #8]
   94ca4:	b9417290 	ldr	w16, [x20, #368]
   94ca8:	f9000448 	str	x8, [x2, #8]
   94cac:	35fffe70 	cbnz	w16, 94c78 <CHeapAllocator::Allocate(unsigned long)+0xb8>
   94cb0:	910102a0 	add	x0, x21, #0x40
   94cb4:	f90006bf 	str	xzr, [x21, #8]
   94cb8:	f240141f 	tst	x0, #0x3f
   94cbc:	54000361 	b.ne	94d28 <CHeapAllocator::Allocate(unsigned long)+0x168>  // b.any
   94cc0:	f9400bf5 	ldr	x21, [sp, #16]
   94cc4:	f9400ffe 	ldr	x30, [sp, #24]
   94cc8:	a8c253f3 	ldp	x19, x20, [sp], #32
   94ccc:	d65f03c0 	ret
   94cd0:	940001d8 	bl	95430 <EnterCritical>
   94cd4:	17ffffc4 	b	94be4 <CHeapAllocator::Allocate(unsigned long)+0x24>
   94cd8:	f9000e9f 	str	xzr, [x20, #24]
   94cdc:	35000232 	cbnz	w18, 94d20 <CHeapAllocator::Allocate(unsigned long)+0x160>
   94ce0:	97ffdc08 	bl	8bd00 <CLogger::Get()>
   94ce4:	90000041 	adrp	x1, 9c000 <vtable for CSerialDevice>
   94ce8:	9112e023 	add	x3, x1, #0x4b8
   94cec:	91012063 	add	x3, x3, #0x48
   94cf0:	52800002 	mov	w2, #0x0                   	// #0
   94cf4:	f9400281 	ldr	x1, [x20]
   94cf8:	97ffdb3e 	bl	8b9f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   94cfc:	d2800000 	mov	x0, #0x0                   	// #0
   94d00:	f9400bf5 	ldr	x21, [sp, #16]
   94d04:	f9400ffe 	ldr	x30, [sp, #24]
   94d08:	a8c253f3 	ldp	x19, x20, [sp], #32
   94d0c:	d65f03c0 	ret
   94d10:	940001f4 	bl	954e0 <LeaveCritical>
   94d14:	d2800000 	mov	x0, #0x0                   	// #0
   94d18:	f9400bf5 	ldr	x21, [sp, #16]
   94d1c:	17ffffea 	b	94cc4 <CHeapAllocator::Allocate(unsigned long)+0x104>
   94d20:	940001f0 	bl	954e0 <LeaveCritical>
   94d24:	17ffffef 	b	94ce0 <CHeapAllocator::Allocate(unsigned long)+0x120>
   94d28:	90000051 	adrp	x17, 9c000 <vtable for CSerialDevice>
   94d2c:	9112e221 	add	x1, x17, #0x4b8
   94d30:	91016020 	add	x0, x1, #0x58
   94d34:	528011c2 	mov	w2, #0x8e                  	// #142
   94d38:	97ffd18e 	bl	89370 <assertion_failed>
   94d3c:	90000047 	adrp	x7, 9c000 <vtable for CSerialDevice>
   94d40:	9112e0e1 	add	x1, x7, #0x4b8
   94d44:	91006020 	add	x0, x1, #0x18
   94d48:	52800bc2 	mov	w2, #0x5e                  	// #94
   94d4c:	97ffd189 	bl	89370 <assertion_failed>

0000000000094d50 <CHeapAllocator::ReAllocate(void*, unsigned long)>:
   94d50:	b4000421 	cbz	x1, 94dd4 <CHeapAllocator::ReAllocate(void*, unsigned long)+0x84>
   94d54:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   94d58:	a9017bf5 	stp	x21, x30, [sp, #16]
   94d5c:	b4000402 	cbz	x2, 94ddc <CHeapAllocator::ReAllocate(void*, unsigned long)+0x8c>
   94d60:	aa0103f3 	mov	x19, x1
   94d64:	5289a861 	mov	w1, #0x4d43                	// #19779
   94d68:	72a84981 	movk	w1, #0x424c, lsl #16
   94d6c:	b85c0263 	ldur	w3, [x19, #-64]
   94d70:	6b01007f 	cmp	w3, w1
   94d74:	540003a1 	b.ne	94de8 <CHeapAllocator::ReAllocate(void*, unsigned long)+0x98>  // b.any
   94d78:	b85c4264 	ldur	w4, [x19, #-60]
   94d7c:	aa1303f5 	mov	x21, x19
   94d80:	eb02009f 	cmp	x4, x2
   94d84:	540000a3 	b.cc	94d98 <CHeapAllocator::ReAllocate(void*, unsigned long)+0x48>  // b.lo, b.ul, b.last
   94d88:	aa1503e0 	mov	x0, x21
   94d8c:	a9417bf5 	ldp	x21, x30, [sp, #16]
   94d90:	a8c253f3 	ldp	x19, x20, [sp], #32
   94d94:	d65f03c0 	ret
   94d98:	aa0203e1 	mov	x1, x2
   94d9c:	aa0003f4 	mov	x20, x0
   94da0:	97ffff88 	bl	94bc0 <CHeapAllocator::Allocate(unsigned long)>
   94da4:	aa0003f5 	mov	x21, x0
   94da8:	b4ffff00 	cbz	x0, 94d88 <CHeapAllocator::ReAllocate(void*, unsigned long)+0x38>
   94dac:	b85c4262 	ldur	w2, [x19, #-60]
   94db0:	aa1303e1 	mov	x1, x19
   94db4:	97fffd87 	bl	943d0 <memcpy>
   94db8:	aa1303e1 	mov	x1, x19
   94dbc:	aa1403e0 	mov	x0, x20
   94dc0:	94000010 	bl	94e00 <CHeapAllocator::Free(void*)>
   94dc4:	aa1503e0 	mov	x0, x21
   94dc8:	a9417bf5 	ldp	x21, x30, [sp, #16]
   94dcc:	a8c253f3 	ldp	x19, x20, [sp], #32
   94dd0:	d65f03c0 	ret
   94dd4:	aa0203e1 	mov	x1, x2
   94dd8:	17ffff7a 	b	94bc0 <CHeapAllocator::Allocate(unsigned long)>
   94ddc:	94000009 	bl	94e00 <CHeapAllocator::Free(void*)>
   94de0:	d2800015 	mov	x21, #0x0                   	// #0
   94de4:	17ffffe9 	b	94d88 <CHeapAllocator::ReAllocate(void*, unsigned long)+0x38>
   94de8:	90000040 	adrp	x0, 9c000 <vtable for CSerialDevice>
   94dec:	9112e001 	add	x1, x0, #0x4b8
   94df0:	91006020 	add	x0, x1, #0x18
   94df4:	52801462 	mov	w2, #0xa3                  	// #163
   94df8:	97ffd15e 	bl	89370 <assertion_failed>
   94dfc:	d503201f 	nop

0000000000094e00 <CHeapAllocator::Free(void*)>:
   94e00:	b40004c1 	cbz	x1, 94e98 <CHeapAllocator::Free(void*)+0x98>
   94e04:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   94e08:	aa0103f4 	mov	x20, x1
   94e0c:	a9015bf5 	stp	x21, x22, [sp, #16]
   94e10:	d1010036 	sub	x22, x1, #0x40
   94e14:	aa0003f5 	mov	x21, x0
   94e18:	5289a860 	mov	w0, #0x4d43                	// #19779
   94e1c:	72a84980 	movk	w0, #0x424c, lsl #16
   94e20:	f90013fe 	str	x30, [sp, #32]
   94e24:	b85c0021 	ldur	w1, [x1, #-64]
   94e28:	6b00003f 	cmp	w1, w0
   94e2c:	540003c1 	b.ne	94ea4 <CHeapAllocator::Free(void*)+0xa4>  // b.any
   94e30:	b94022a4 	ldr	w4, [x21, #32]
   94e34:	910082b3 	add	x19, x21, #0x20
   94e38:	34000124 	cbz	w4, 94e5c <CHeapAllocator::Free(void*)+0x5c>
   94e3c:	b85c4283 	ldur	w3, [x20, #-60]
   94e40:	6b03009f 	cmp	w4, w3
   94e44:	54000081 	b.ne	94e54 <CHeapAllocator::Free(void*)+0x54>  // b.any
   94e48:	14000009 	b	94e6c <CHeapAllocator::Free(void*)+0x6c>
   94e4c:	6b05007f 	cmp	w3, w5
   94e50:	540000e0 	b.eq	94e6c <CHeapAllocator::Free(void*)+0x6c>  // b.none
   94e54:	b8410e65 	ldr	w5, [x19, #16]!
   94e58:	35ffffa5 	cbnz	w5, 94e4c <CHeapAllocator::Free(void*)+0x4c>
   94e5c:	a9415bf5 	ldp	x21, x22, [sp, #16]
   94e60:	f94013fe 	ldr	x30, [sp, #32]
   94e64:	a8c353f3 	ldp	x19, x20, [sp], #48
   94e68:	d65f03c0 	ret
   94e6c:	b94172a0 	ldr	w0, [x21, #368]
   94e70:	35000160 	cbnz	w0, 94e9c <CHeapAllocator::Free(void*)+0x9c>
   94e74:	f9400666 	ldr	x6, [x19, #8]
   94e78:	f81c8286 	stur	x6, [x20, #-56]
   94e7c:	b94172a7 	ldr	w7, [x21, #368]
   94e80:	f9000676 	str	x22, [x19, #8]
   94e84:	34fffec7 	cbz	w7, 94e5c <CHeapAllocator::Free(void*)+0x5c>
   94e88:	a9415bf5 	ldp	x21, x22, [sp, #16]
   94e8c:	f94013fe 	ldr	x30, [sp, #32]
   94e90:	a8c353f3 	ldp	x19, x20, [sp], #48
   94e94:	14000193 	b	954e0 <LeaveCritical>
   94e98:	d65f03c0 	ret
   94e9c:	94000165 	bl	95430 <EnterCritical>
   94ea0:	17fffff5 	b	94e74 <CHeapAllocator::Free(void*)+0x74>
   94ea4:	90000042 	adrp	x2, 9c000 <vtable for CSerialDevice>
   94ea8:	9112e041 	add	x1, x2, #0x4b8
   94eac:	91006020 	add	x0, x1, #0x18
   94eb0:	528017e2 	mov	w2, #0xbf                  	// #191
   94eb4:	97ffd12f 	bl	89370 <assertion_failed>
	...

0000000000094ec0 <CExceptionHandler::CExceptionHandler()>:
   94ec0:	b0016e81 	adrp	x1, 2e65000 <temp_gold+0xf421a0>
   94ec4:	f9418822 	ldr	x2, [x1, #784]
   94ec8:	b5000062 	cbnz	x2, 94ed4 <CExceptionHandler::CExceptionHandler()+0x14>
   94ecc:	f9018820 	str	x0, [x1, #784]
   94ed0:	d65f03c0 	ret
   94ed4:	90000043 	adrp	x3, 9c000 <vtable for CSerialDevice>
   94ed8:	90000040 	adrp	x0, 9c000 <vtable for CSerialDevice>
   94edc:	f81f0ffe 	str	x30, [sp, #-16]!
   94ee0:	91152061 	add	x1, x3, #0x548
   94ee4:	91098000 	add	x0, x0, #0x260
   94ee8:	52800562 	mov	w2, #0x2b                  	// #43
   94eec:	97ffd121 	bl	89370 <assertion_failed>

0000000000094ef0 <CExceptionHandler::~CExceptionHandler()>:
   94ef0:	b0016e80 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   94ef4:	f901881f 	str	xzr, [x0, #784]
   94ef8:	d65f03c0 	ret
   94efc:	d503201f 	nop

0000000000094f00 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   94f00:	d10183ff 	sub	sp, sp, #0x60
   94f04:	a90253f3 	stp	x19, x20, [sp, #32]
   94f08:	a9035bf5 	stp	x21, x22, [sp, #48]
   94f0c:	a90463f7 	stp	x23, x24, [sp, #64]
   94f10:	a9057bf9 	stp	x25, x30, [sp, #80]
   94f14:	b4000602 	cbz	x2, 94fd4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xd4>
   94f18:	aa0203f3 	mov	x19, x2
   94f1c:	2a0103f9 	mov	w25, w1
   94f20:	f9400442 	ldr	x2, [x2, #8]
   94f24:	f9401277 	ldr	x23, [x19, #32]
   94f28:	92400c43 	and	x3, x2, #0xf
   94f2c:	f100147f 	cmp	x3, #0x5
   94f30:	54000041 	b.ne	94f38 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x38>  // b.any
   94f34:	f9401677 	ldr	x23, [x19, #40]
   94f38:	d2800018 	mov	x24, #0x0                   	// #0
   94f3c:	f9400267 	ldr	x7, [x19]
   94f40:	531a7cf6 	lsr	w22, w7, #26
   94f44:	924060f4 	and	x20, x7, #0x1ffffff
   94f48:	d10082c4 	sub	x4, x22, #0x20
   94f4c:	d100d2c5 	sub	x5, x22, #0x34
   94f50:	f100149f 	cmp	x4, #0x5
   94f54:	fa4188a0 	ccmp	x5, #0x1, #0x0, hi  // hi = pmore
   94f58:	54000048 	b.hi	94f60 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x60>  // b.pmore
   94f5c:	f9401a78 	ldr	x24, [x19, #48]
   94f60:	90000055 	adrp	x21, 9c000 <vtable for CSerialDevice>
   94f64:	911502b5 	add	x21, x21, #0x540
   94f68:	aa1503e1 	mov	x1, x21
   94f6c:	aa1703e0 	mov	x0, x23
   94f70:	97ffd1e0 	bl	896f0 <debug_stacktrace(unsigned long const*, char const*)>
   94f74:	97ffdb63 	bl	8bd00 <CLogger::Get()>
   94f78:	f940066a 	ldr	x10, [x19, #8]
   94f7c:	90000048 	adrp	x8, 9c000 <vtable for CSerialDevice>
   94f80:	d0000046 	adrp	x6, 9e000 <font_data+0x1558>
   94f84:	911880c9 	add	x9, x6, #0x620
   94f88:	f90003f8 	str	x24, [sp]
   94f8c:	aa1503e1 	mov	x1, x21
   94f90:	f9400a6b 	ldr	x11, [x19, #16]
   94f94:	aa1403e7 	mov	x7, x20
   94f98:	aa1603e6 	mov	x6, x22
   94f9c:	9115c103 	add	x3, x8, #0x570
   94fa0:	52800002 	mov	w2, #0x0                   	// #0
   94fa4:	f90007f7 	str	x23, [sp, #8]
   94fa8:	f8795924 	ldr	x4, [x9, w25, uxtw #3]
   94fac:	f9000fea 	str	x10, [sp, #24]
   94fb0:	f9400e65 	ldr	x5, [x19, #24]
   94fb4:	f9000beb 	str	x11, [sp, #16]
   94fb8:	97ffda8e 	bl	8b9f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   94fbc:	a94253f3 	ldp	x19, x20, [sp, #32]
   94fc0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   94fc4:	a94463f7 	ldp	x23, x24, [sp, #64]
   94fc8:	a9457bf9 	ldp	x25, x30, [sp, #80]
   94fcc:	910183ff 	add	sp, sp, #0x60
   94fd0:	d65f03c0 	ret
   94fd4:	90000041 	adrp	x1, 9c000 <vtable for CSerialDevice>
   94fd8:	90000040 	adrp	x0, 9c000 <vtable for CSerialDevice>
   94fdc:	91152021 	add	x1, x1, #0x548
   94fe0:	91158000 	add	x0, x0, #0x560
   94fe4:	528006c2 	mov	w2, #0x36                  	// #54
   94fe8:	97ffd0e2 	bl	89370 <assertion_failed>
   94fec:	d503201f 	nop

0000000000094ff0 <CExceptionHandler::Get()>:
   94ff0:	b0016e80 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   94ff4:	f9418800 	ldr	x0, [x0, #784]
   94ff8:	b4000040 	cbz	x0, 95000 <CExceptionHandler::Get()+0x10>
   94ffc:	d65f03c0 	ret
   95000:	f0000022 	adrp	x2, 9c000 <vtable for CSerialDevice>
   95004:	f0000021 	adrp	x1, 9c000 <vtable for CSerialDevice>
   95008:	f81f0ffe 	str	x30, [sp, #-16]!
   9500c:	91100040 	add	x0, x2, #0x400
   95010:	91152021 	add	x1, x1, #0x548
   95014:	52800a82 	mov	w2, #0x54                  	// #84
   95018:	97ffd0d6 	bl	89370 <assertion_failed>
   9501c:	d503201f 	nop

0000000000095020 <ExceptionHandler>:
   95020:	f81e0ffe 	str	x30, [sp, #-32]!
   95024:	a90103e1 	stp	x1, x0, [sp, #16]
   95028:	940005e2 	bl	967b0 <CInterruptSystem::DisableFIQ()>
   9502c:	d50341ff 	msr	daifclr, #0x1
   95030:	90016e83 	adrp	x3, 2e65000 <temp_gold+0xf421a0>
   95034:	a94103e1 	ldp	x1, x0, [sp, #16]
   95038:	f9418864 	ldr	x4, [x3, #784]
   9503c:	b40000c4 	cbz	x4, 95054 <ExceptionHandler+0x34>
   95040:	aa0103e2 	mov	x2, x1
   95044:	2a0003e1 	mov	w1, w0
   95048:	aa0403e0 	mov	x0, x4
   9504c:	f84207fe 	ldr	x30, [sp], #32
   95050:	17ffffac 	b	94f00 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   95054:	f0000022 	adrp	x2, 9c000 <vtable for CSerialDevice>
   95058:	f0000025 	adrp	x5, 9c000 <vtable for CSerialDevice>
   9505c:	91152041 	add	x1, x2, #0x548
   95060:	911000a0 	add	x0, x5, #0x400
   95064:	52800a82 	mov	w2, #0x54                  	// #84
   95068:	97ffd0c2 	bl	89370 <assertion_failed>
   9506c:	00000000 	.inst	0x00000000 ; undefined

0000000000095070 <CMemorySystem::CMemorySystem(bool, bool)>:
   95070:	a9ba53f3 	stp	x19, x20, [sp, #-96]!
   95074:	aa0003f3 	mov	x19, x0
   95078:	f0000034 	adrp	x20, 9c000 <vtable for CSerialDevice>
   9507c:	91180294 	add	x20, x20, #0x600
   95080:	a9015bf5 	stp	x21, x22, [sp, #16]
   95084:	91006016 	add	x22, x0, #0x18
   95088:	910c2275 	add	x21, x19, #0x308
   9508c:	aa1603e0 	mov	x0, x22
   95090:	a90263f7 	stp	x23, x24, [sp, #32]
   95094:	12001c58 	and	w24, w2, #0xff
   95098:	91064277 	add	x23, x19, #0x190
   9509c:	f9001bfe 	str	x30, [sp, #48]
   950a0:	39000261 	strb	w1, [x19]
   950a4:	aa1403e1 	mov	x1, x20
   950a8:	a900fe7f 	stp	xzr, xzr, [x19, #8]
   950ac:	97fffe9d 	bl	94b20 <CHeapAllocator::CHeapAllocator(char const*)>
   950b0:	91002281 	add	x1, x20, #0x8
   950b4:	aa1703e0 	mov	x0, x23
   950b8:	97fffe9a 	bl	94b20 <CHeapAllocator::CHeapAllocator(char const*)>
   950bc:	aa1503e0 	mov	x0, x21
   950c0:	94000ed0 	bl	98c00 <CPageAllocator::CPageAllocator()>
   950c4:	90016e80 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   950c8:	f901967f 	str	xzr, [x19, #808]
   950cc:	f9418c01 	ldr	x1, [x0, #792]
   950d0:	b40000c1 	cbz	x1, 950e8 <CMemorySystem::CMemorySystem(bool, bool)+0x78>
   950d4:	a9415bf5 	ldp	x21, x22, [sp, #16]
   950d8:	a94263f7 	ldp	x23, x24, [sp, #32]
   950dc:	f9401bfe 	ldr	x30, [sp, #48]
   950e0:	a8c653f3 	ldp	x19, x20, [sp], #96
   950e4:	d65f03c0 	ret
   950e8:	52800021 	mov	w1, #0x1                   	// #1
   950ec:	f9018c13 	str	x19, [x0, #792]
   950f0:	910103e0 	add	x0, sp, #0x40
   950f4:	97ffd0bf 	bl	893f0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   950f8:	910103e0 	add	x0, sp, #0x40
   950fc:	528000a1 	mov	w1, #0x5                   	// #5
   95100:	72a00021 	movk	w1, #0x1, lsl #16
   95104:	52800004 	mov	w4, #0x0                   	// #0
   95108:	52800283 	mov	w3, #0x14                  	// #20
   9510c:	910123e2 	add	x2, sp, #0x48
   95110:	97ffd0c0 	bl	89410 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   95114:	72001c1f 	tst	w0, #0xff
   95118:	54000560 	b.eq	951c4 <CMemorySystem::CMemorySystem(bool, bool)+0x154>  // b.none
   9511c:	b94057e2 	ldr	w2, [sp, #84]
   95120:	35000722 	cbnz	w2, 95204 <CMemorySystem::CMemorySystem(bool, bool)+0x194>
   95124:	b9405be5 	ldr	w5, [sp, #88]
   95128:	b2689fe3 	mov	x3, #0xffffffffff000000    	// #-16777216
   9512c:	929fffe4 	mov	x4, #0xffffffffffff0000    	// #-65536
   95130:	f2bfce04 	movk	x4, #0xfe70, lsl #16
   95134:	8b0300b4 	add	x20, x5, x3
   95138:	8b0400a2 	add	x2, x5, x4
   9513c:	d2a00083 	mov	x3, #0x40000               	// #262144
   95140:	d2a01201 	mov	x1, #0x900000              	// #9437184
   95144:	f9000665 	str	x5, [x19, #8]
   95148:	aa1603e0 	mov	x0, x22
   9514c:	97fffe95 	bl	94ba0 <CHeapAllocator::Setup(unsigned long, unsigned long, unsigned long)>
   95150:	97ffdfbf 	bl	8d04c <CMachineInfo::Get()>
   95154:	97ffde04 	bl	8c964 <CMachineInfo::GetRAMSize() const>
   95158:	7110001f 	cmp	w0, #0x400
   9515c:	540001a9 	b.ls	95190 <CMemorySystem::CMemorySystem(bool, bool)+0x120>  // b.plast
   95160:	11300007 	add	w7, w0, #0xc00
   95164:	52b00008 	mov	w8, #0x80000000            	// #-2147483648
   95168:	530c2ce9 	lsl	w9, w7, #20
   9516c:	aa1703e0 	mov	x0, x23
   95170:	6b08013f 	cmp	w9, w8
   95174:	1a88912a 	csel	w10, w9, w8, ls  // ls = plast
   95178:	2a0a03eb 	mov	w11, w10
   9517c:	aa0b03e2 	mov	x2, x11
   95180:	d2800003 	mov	x3, #0x0                   	// #0
   95184:	d2a80001 	mov	x1, #0x40000000            	// #1073741824
   95188:	f9000a6b 	str	x11, [x19, #16]
   9518c:	97fffe85 	bl	94ba0 <CHeapAllocator::Setup(unsigned long, unsigned long, unsigned long)>
   95190:	aa1403e1 	mov	x1, x20
   95194:	aa1503e0 	mov	x0, x21
   95198:	d2a02002 	mov	x2, #0x1000000             	// #16777216
   9519c:	94000ea5 	bl	98c30 <CPageAllocator::Setup(unsigned long, unsigned long)>
   951a0:	3940026c 	ldrb	w12, [x19]
   951a4:	350001cc 	cbnz	w12, 951dc <CMemorySystem::CMemorySystem(bool, bool)+0x16c>
   951a8:	910103e0 	add	x0, sp, #0x40
   951ac:	97ffd095 	bl	89400 <CBcmPropertyTags::~CBcmPropertyTags()>
   951b0:	a9415bf5 	ldp	x21, x22, [sp, #16]
   951b4:	a94263f7 	ldp	x23, x24, [sp, #32]
   951b8:	f9401bfe 	ldr	x30, [sp, #48]
   951bc:	a8c653f3 	ldp	x19, x20, [sp], #96
   951c0:	d65f03c0 	ret
   951c4:	d2e38006 	mov	x6, #0x1c00000000000000    	// #2017612633061982208
   951c8:	d2a34e02 	mov	x2, #0x1a700000            	// #443547648
   951cc:	d2a36014 	mov	x20, #0x1b000000            	// #452984832
   951d0:	d2a38005 	mov	x5, #0x1c000000            	// #469762048
   951d4:	f80543e6 	stur	x6, [sp, #84]
   951d8:	17ffffd9 	b	9513c <CMemorySystem::CMemorySystem(bool, bool)+0xcc>
   951dc:	d2800200 	mov	x0, #0x10                  	// #16
   951e0:	97fffe14 	bl	94a30 <operator new(unsigned long)>
   951e4:	f9400661 	ldr	x1, [x19, #8]
   951e8:	aa0003f6 	mov	x22, x0
   951ec:	94000284 	bl	95bfc <CTranslationTable::CTranslationTable(unsigned long)>
   951f0:	aa1303e0 	mov	x0, x19
   951f4:	f9019676 	str	x22, [x19, #808]
   951f8:	2a1803e1 	mov	w1, w24
   951fc:	94000049 	bl	95320 <CMemorySystem::EnableMMU(bool)>
   95200:	17ffffea 	b	951a8 <CMemorySystem::CMemorySystem(bool, bool)+0x138>
   95204:	528006e2 	mov	w2, #0x37                  	// #55
   95208:	91006281 	add	x1, x20, #0x18
   9520c:	9100a280 	add	x0, x20, #0x28
   95210:	97ffd058 	bl	89370 <assertion_failed>
   95214:	d503201f 	nop
   95218:	d503201f 	nop
   9521c:	d503201f 	nop

0000000000095220 <CMemorySystem::~CMemorySystem()>:
   95220:	90016e81 	adrp	x1, 2e65000 <temp_gold+0xf421a0>
   95224:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   95228:	aa0003f3 	mov	x19, x0
   9522c:	f9418c20 	ldr	x0, [x1, #792]
   95230:	eb00027f 	cmp	x19, x0
   95234:	54000100 	b.eq	95254 <CMemorySystem::~CMemorySystem()+0x34>  // b.none
   95238:	910c2260 	add	x0, x19, #0x308
   9523c:	94000e79 	bl	98c20 <CPageAllocator::~CPageAllocator()>
   95240:	91064260 	add	x0, x19, #0x190
   95244:	97fffe53 	bl	94b90 <CHeapAllocator::~CHeapAllocator()>
   95248:	91006260 	add	x0, x19, #0x18
   9524c:	a8c17bf3 	ldp	x19, x30, [sp], #16
   95250:	17fffe50 	b	94b90 <CHeapAllocator::~CHeapAllocator()>
   95254:	f9018c3f 	str	xzr, [x1, #792]
   95258:	39400262 	ldrb	w2, [x19]
   9525c:	34fffee2 	cbz	w2, 95238 <CMemorySystem::~CMemorySystem()+0x18>
   95260:	9400005c 	bl	953d0 <CMemorySystem::Destructor() [clone .part.0]>
   95264:	910c2260 	add	x0, x19, #0x308
   95268:	94000e6e 	bl	98c20 <CPageAllocator::~CPageAllocator()>
   9526c:	91064260 	add	x0, x19, #0x190
   95270:	97fffe48 	bl	94b90 <CHeapAllocator::~CHeapAllocator()>
   95274:	91006260 	add	x0, x19, #0x18
   95278:	a8c17bf3 	ldp	x19, x30, [sp], #16
   9527c:	17fffe45 	b	94b90 <CHeapAllocator::~CHeapAllocator()>

0000000000095280 <CMemorySystem::Destructor()>:
   95280:	90016e82 	adrp	x2, 2e65000 <temp_gold+0xf421a0>
   95284:	f9418c41 	ldr	x1, [x2, #792]
   95288:	eb00003f 	cmp	x1, x0
   9528c:	54000040 	b.eq	95294 <CMemorySystem::Destructor()+0x14>  // b.none
   95290:	d65f03c0 	ret
   95294:	f9018c5f 	str	xzr, [x2, #792]
   95298:	39400020 	ldrb	w0, [x1]
   9529c:	34ffffa0 	cbz	w0, 95290 <CMemorySystem::Destructor()+0x10>
   952a0:	1400004c 	b	953d0 <CMemorySystem::Destructor() [clone .part.0]>
   952a4:	d503201f 	nop
   952a8:	d503201f 	nop
   952ac:	d503201f 	nop

00000000000952b0 <CMemorySystem::GetMemSize() const>:
   952b0:	90016e80 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   952b4:	f9418c01 	ldr	x1, [x0, #792]
   952b8:	b4000081 	cbz	x1, 952c8 <CMemorySystem::GetMemSize() const+0x18>
   952bc:	a9409424 	ldp	x4, x5, [x1, #8]
   952c0:	8b050080 	add	x0, x4, x5
   952c4:	d65f03c0 	ret
   952c8:	f0000022 	adrp	x2, 9c000 <vtable for CSerialDevice>
   952cc:	91180043 	add	x3, x2, #0x600
   952d0:	f81f0ffe 	str	x30, [sp, #-16]!
   952d4:	91006061 	add	x1, x3, #0x18
   952d8:	91012060 	add	x0, x3, #0x48
   952dc:	52801162 	mov	w2, #0x8b                  	// #139
   952e0:	97ffd024 	bl	89370 <assertion_failed>
   952e4:	d503201f 	nop
   952e8:	d503201f 	nop
   952ec:	d503201f 	nop

00000000000952f0 <CMemorySystem::Get()>:
   952f0:	90016e80 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   952f4:	f9418c00 	ldr	x0, [x0, #792]
   952f8:	b4000040 	cbz	x0, 95300 <CMemorySystem::Get()+0x10>
   952fc:	d65f03c0 	ret
   95300:	f0000021 	adrp	x1, 9c000 <vtable for CSerialDevice>
   95304:	91180022 	add	x2, x1, #0x600
   95308:	f81f0ffe 	str	x30, [sp, #-16]!
   9530c:	91006041 	add	x1, x2, #0x18
   95310:	91012040 	add	x0, x2, #0x48
   95314:	52801222 	mov	w2, #0x91                  	// #145
   95318:	97ffd016 	bl	89370 <assertion_failed>
   9531c:	d503201f 	nop

0000000000095320 <CMemorySystem::EnableMMU(bool)>:
   95320:	39400001 	ldrb	w1, [x0]
   95324:	f81f0ffe 	str	x30, [sp, #-16]!
   95328:	34000341 	cbz	w1, 95390 <CMemorySystem::EnableMMU(bool)+0x70>
   9532c:	d2809fe3 	mov	x3, #0x4ff                 	// #1279
   95330:	d518a203 	msr	mair_el1, x3
   95334:	f9419400 	ldr	x0, [x0, #808]
   95338:	b4000380 	cbz	x0, 953a8 <CMemorySystem::EnableMMU(bool)+0x88>
   9533c:	940002b6 	bl	95e14 <CTranslationTable::GetBaseAddress() const>
   95340:	d5182000 	msr	ttbr0_el1, x0
   95344:	d5382046 	mrs	x6, tcr_el1
   95348:	929ff7e7 	mov	x7, #0xffffffffffff0040    	// #-65472
   9534c:	f2bff7e7 	movk	x7, #0xffbf, lsl #16
   95350:	f2dfff07 	movk	x7, #0xfff8, lsl #32
   95354:	d28ea388 	mov	x8, #0x751c                	// #29980
   95358:	f2a01008 	movk	x8, #0x80, lsl #16
   9535c:	8a0700c9 	and	x9, x6, x7
   95360:	f2c00028 	movk	x8, #0x1, lsl #32
   95364:	aa08012a 	orr	x10, x9, x8
   95368:	d518204a 	msr	tcr_el1, x10
   9536c:	d538100b 	mrs	x11, sctlr_el1
   95370:	529fffac 	mov	w12, #0xfffd                	// #65533
   95374:	72bffeec 	movk	w12, #0xfff7, lsl #16
   95378:	528200ad 	mov	w13, #0x1005                	// #4101
   9537c:	0a0c016e 	and	w14, w11, w12
   95380:	2a0d01cf 	orr	w15, w14, w13
   95384:	d518100f 	msr	sctlr_el1, x15
   95388:	f84107fe 	ldr	x30, [sp], #16
   9538c:	d65f03c0 	ret
   95390:	f0000020 	adrp	x0, 9c000 <vtable for CSerialDevice>
   95394:	91180002 	add	x2, x0, #0x600
   95398:	91006041 	add	x1, x2, #0x18
   9539c:	91016040 	add	x0, x2, #0x58
   953a0:	528012e2 	mov	w2, #0x97                  	// #151
   953a4:	97ffcff3 	bl	89370 <assertion_failed>
   953a8:	f0000024 	adrp	x4, 9c000 <vtable for CSerialDevice>
   953ac:	91180085 	add	x5, x4, #0x600
   953b0:	910060a1 	add	x1, x5, #0x18
   953b4:	9101a0a0 	add	x0, x5, #0x68
   953b8:	528013c2 	mov	w2, #0x9e                  	// #158
   953bc:	97ffcfed 	bl	89370 <assertion_failed>

00000000000953c0 <CMemorySystem::GetCoherentPage(unsigned int)>:
   953c0:	53103c00 	lsl	w0, w0, #16
   953c4:	91540000 	add	x0, x0, #0x500, lsl #12
   953c8:	d65f03c0 	ret
   953cc:	d503201f 	nop

00000000000953d0 <CMemorySystem::Destructor() [clone .part.0]>:
   953d0:	f81f0ffe 	str	x30, [sp, #-16]!
   953d4:	d5381000 	mrs	x0, sctlr_el1
   953d8:	128000a1 	mov	w1, #0xfffffffa            	// #-6
   953dc:	0a010002 	and	w2, w0, w1
   953e0:	d5181002 	msr	sctlr_el1, x2
   953e4:	d5033f9f 	dsb	sy
   953e8:	d5033fdf 	isb
   953ec:	940000e1 	bl	95770 <CleanDataCache>
   953f0:	94000050 	bl	95530 <InvalidateDataCache>
   953f4:	d508871f 	tlbi	vmalle1
   953f8:	d5033f9f 	dsb	sy
   953fc:	d5033fdf 	isb
   95400:	f84107fe 	ldr	x30, [sp], #16
   95404:	d65f03c0 	ret
	...

0000000000095410 <CurrentExecutionLevel>:
   95410:	d53b4221 	mrs	x1, daif
   95414:	52800040 	mov	w0, #0x2                   	// #2
   95418:	f27a003f 	tst	x1, #0x40
   9541c:	d3471c22 	ubfx	x2, x1, #7, #1
   95420:	1a800040 	csel	w0, w2, w0, eq  // eq = none
   95424:	d65f03c0 	ret
   95428:	d503201f 	nop
   9542c:	d503201f 	nop

0000000000095430 <EnterCritical>:
   95430:	51000401 	sub	w1, w0, #0x1
   95434:	f81f0ffe 	str	x30, [sp, #-16]!
   95438:	7100043f 	cmp	w1, #0x1
   9543c:	540002c8 	b.hi	95494 <EnterCritical+0x64>  // b.pmore
   95440:	d53b4224 	mrs	x4, daif
   95444:	7100081f 	cmp	w0, #0x2
   95448:	54000321 	b.ne	954ac <EnterCritical+0x7c>  // b.any
   9544c:	d50343df 	msr	daifset, #0x3
   95450:	90016e86 	adrp	x6, 2e65000 <temp_gold+0xf421a0>
   95454:	910c80c7 	add	x7, x6, #0x320
   95458:	b94320c8 	ldr	w8, [x6, #800]
   9545c:	71004d1f 	cmp	w8, #0x13
   95460:	54000348 	b.hi	954c8 <EnterCritical+0x98>  // b.pmore
   95464:	b94320cb 	ldr	w11, [x6, #800]
   95468:	910020ec 	add	x12, x7, #0x8
   9546c:	7100041f 	cmp	w0, #0x1
   95470:	1100056d 	add	w13, w11, #0x1
   95474:	2a0b03ee 	mov	w14, w11
   95478:	b90320cd 	str	w13, [x6, #800]
   9547c:	b82e7984 	str	w4, [x12, x14, lsl #2]
   95480:	54000041 	b.ne	95488 <EnterCritical+0x58>  // b.any
   95484:	d50341ff 	msr	daifclr, #0x1
   95488:	d5033fbf 	dmb	sy
   9548c:	f84107fe 	ldr	x30, [sp], #16
   95490:	d65f03c0 	ret
   95494:	f0000022 	adrp	x2, 9c000 <vtable for CSerialDevice>
   95498:	f0000020 	adrp	x0, 9c000 <vtable for CSerialDevice>
   9549c:	911a2041 	add	x1, x2, #0x688
   954a0:	911a8000 	add	x0, x0, #0x6a0
   954a4:	52800c62 	mov	w2, #0x63                  	// #99
   954a8:	97ffcfb2 	bl	89370 <assertion_failed>
   954ac:	3637fd04 	tbz	w4, #6, 9544c <EnterCritical+0x1c>
   954b0:	f0000023 	adrp	x3, 9c000 <vtable for CSerialDevice>
   954b4:	f0000025 	adrp	x5, 9c000 <vtable for CSerialDevice>
   954b8:	911a2061 	add	x1, x3, #0x688
   954bc:	911b60a0 	add	x0, x5, #0x6d8
   954c0:	52800d22 	mov	w2, #0x69                  	// #105
   954c4:	97ffcfab 	bl	89370 <assertion_failed>
   954c8:	f0000029 	adrp	x9, 9c000 <vtable for CSerialDevice>
   954cc:	f000002a 	adrp	x10, 9c000 <vtable for CSerialDevice>
   954d0:	911a2121 	add	x1, x9, #0x688
   954d4:	911c2140 	add	x0, x10, #0x708
   954d8:	52800da2 	mov	w2, #0x6d                  	// #109
   954dc:	97ffcfa5 	bl	89370 <assertion_failed>

00000000000954e0 <LeaveCritical>:
   954e0:	d5033fbf 	dmb	sy
   954e4:	d50341df 	msr	daifset, #0x1
   954e8:	90016e80 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   954ec:	b9432001 	ldr	w1, [x0, #800]
   954f0:	34000121 	cbz	w1, 95514 <LeaveCritical+0x34>
   954f4:	b9432005 	ldr	w5, [x0, #800]
   954f8:	910c8004 	add	x4, x0, #0x320
   954fc:	91002086 	add	x6, x4, #0x8
   95500:	510004a7 	sub	w7, w5, #0x1
   95504:	b9032007 	str	w7, [x0, #800]
   95508:	b86778c9 	ldr	w9, [x6, x7, lsl #2]
   9550c:	d51b4229 	msr	daif, x9
   95510:	d65f03c0 	ret
   95514:	f0000022 	adrp	x2, 9c000 <vtable for CSerialDevice>
   95518:	f0000023 	adrp	x3, 9c000 <vtable for CSerialDevice>
   9551c:	f81f0ffe 	str	x30, [sp, #-16]!
   95520:	911a2041 	add	x1, x2, #0x688
   95524:	911cc060 	add	x0, x3, #0x730
   95528:	52800fc2 	mov	w2, #0x7e                  	// #126
   9552c:	97ffcf91 	bl	89370 <assertion_failed>

0000000000095530 <InvalidateDataCache>:
   95530:	d2800000 	mov	x0, #0x0                   	// #0
   95534:	d5087640 	dc	isw, x0
   95538:	32010001 	orr	w1, w0, #0x80000000
   9553c:	d5087641 	dc	isw, x1
   95540:	91010003 	add	x3, x0, #0x40
   95544:	d5087643 	dc	isw, x3
   95548:	32010062 	orr	w2, w3, #0x80000000
   9554c:	d5087642 	dc	isw, x2
   95550:	91010064 	add	x4, x3, #0x40
   95554:	d5087644 	dc	isw, x4
   95558:	32010085 	orr	w5, w4, #0x80000000
   9555c:	d5087645 	dc	isw, x5
   95560:	91030006 	add	x6, x0, #0xc0
   95564:	d5087646 	dc	isw, x6
   95568:	320100c7 	orr	w7, w6, #0x80000000
   9556c:	d5087647 	dc	isw, x7
   95570:	91040008 	add	x8, x0, #0x100
   95574:	d5087648 	dc	isw, x8
   95578:	32010109 	orr	w9, w8, #0x80000000
   9557c:	d5087649 	dc	isw, x9
   95580:	9105000a 	add	x10, x0, #0x140
   95584:	d508764a 	dc	isw, x10
   95588:	3201014b 	orr	w11, w10, #0x80000000
   9558c:	d508764b 	dc	isw, x11
   95590:	9106000c 	add	x12, x0, #0x180
   95594:	d508764c 	dc	isw, x12
   95598:	3201018d 	orr	w13, w12, #0x80000000
   9559c:	d508764d 	dc	isw, x13
   955a0:	9107000e 	add	x14, x0, #0x1c0
   955a4:	d508764e 	dc	isw, x14
   955a8:	320101cf 	orr	w15, w14, #0x80000000
   955ac:	d508764f 	dc	isw, x15
   955b0:	91080000 	add	x0, x0, #0x200
   955b4:	f140101f 	cmp	x0, #0x4, lsl #12
   955b8:	54fffbe1 	b.ne	95534 <InvalidateDataCache+0x4>  // b.any
   955bc:	52800050 	mov	w16, #0x2                   	// #2
   955c0:	72a20010 	movk	w16, #0x1000, lsl #16
   955c4:	52800051 	mov	w17, #0x2                   	// #2
   955c8:	72a40011 	movk	w17, #0x2000, lsl #16
   955cc:	52800052 	mov	w18, #0x2                   	// #2
   955d0:	72a60012 	movk	w18, #0x3000, lsl #16
   955d4:	5280004d 	mov	w13, #0x2                   	// #2
   955d8:	72a8000d 	movk	w13, #0x4000, lsl #16
   955dc:	5280004c 	mov	w12, #0x2                   	// #2
   955e0:	72aa000c 	movk	w12, #0x5000, lsl #16
   955e4:	5280004b 	mov	w11, #0x2                   	// #2
   955e8:	72ac000b 	movk	w11, #0x6000, lsl #16
   955ec:	5280004a 	mov	w10, #0x2                   	// #2
   955f0:	72ae000a 	movk	w10, #0x7000, lsl #16
   955f4:	52800049 	mov	w9, #0x2                   	// #2
   955f8:	72b00009 	movk	w9, #0x8000, lsl #16
   955fc:	52800048 	mov	w8, #0x2                   	// #2
   95600:	72b20008 	movk	w8, #0x9000, lsl #16
   95604:	52800047 	mov	w7, #0x2                   	// #2
   95608:	72b40007 	movk	w7, #0xa000, lsl #16
   9560c:	52800046 	mov	w6, #0x2                   	// #2
   95610:	72b60006 	movk	w6, #0xb000, lsl #16
   95614:	52800045 	mov	w5, #0x2                   	// #2
   95618:	72b80005 	movk	w5, #0xc000, lsl #16
   9561c:	52800044 	mov	w4, #0x2                   	// #2
   95620:	72ba0004 	movk	w4, #0xd000, lsl #16
   95624:	52800043 	mov	w3, #0x2                   	// #2
   95628:	72bc0003 	movk	w3, #0xe000, lsl #16
   9562c:	52800042 	mov	w2, #0x2                   	// #2
   95630:	72be0002 	movk	w2, #0xf000, lsl #16
   95634:	52800000 	mov	w0, #0x0                   	// #0
   95638:	321f0001 	orr	w1, w0, #0x2
   9563c:	d5087641 	dc	isw, x1
   95640:	2a10000e 	orr	w14, w0, w16
   95644:	d508764e 	dc	isw, x14
   95648:	2a11000f 	orr	w15, w0, w17
   9564c:	d508764f 	dc	isw, x15
   95650:	2a120001 	orr	w1, w0, w18
   95654:	d5087641 	dc	isw, x1
   95658:	2a0d000e 	orr	w14, w0, w13
   9565c:	d508764e 	dc	isw, x14
   95660:	2a0c000f 	orr	w15, w0, w12
   95664:	d508764f 	dc	isw, x15
   95668:	2a0b0001 	orr	w1, w0, w11
   9566c:	d5087641 	dc	isw, x1
   95670:	2a0a000e 	orr	w14, w0, w10
   95674:	d508764e 	dc	isw, x14
   95678:	2a09000f 	orr	w15, w0, w9
   9567c:	d508764f 	dc	isw, x15
   95680:	2a080001 	orr	w1, w0, w8
   95684:	d5087641 	dc	isw, x1
   95688:	2a07000e 	orr	w14, w0, w7
   9568c:	d508764e 	dc	isw, x14
   95690:	2a06000f 	orr	w15, w0, w6
   95694:	d508764f 	dc	isw, x15
   95698:	2a050001 	orr	w1, w0, w5
   9569c:	d5087641 	dc	isw, x1
   956a0:	2a04000e 	orr	w14, w0, w4
   956a4:	d508764e 	dc	isw, x14
   956a8:	2a03000f 	orr	w15, w0, w3
   956ac:	d508764f 	dc	isw, x15
   956b0:	2a020001 	orr	w1, w0, w2
   956b4:	d5087641 	dc	isw, x1
   956b8:	11010000 	add	w0, w0, #0x40
   956bc:	7140401f 	cmp	w0, #0x10, lsl #12
   956c0:	54fffbc1 	b.ne	95638 <InvalidateDataCache+0x108>  // b.any
   956c4:	d5033f9f 	dsb	sy
   956c8:	d65f03c0 	ret
   956cc:	d503201f 	nop

00000000000956d0 <InvalidateDataCacheL1Only>:
   956d0:	d2800000 	mov	x0, #0x0                   	// #0
   956d4:	d503201f 	nop
   956d8:	d5087640 	dc	isw, x0
   956dc:	32010001 	orr	w1, w0, #0x80000000
   956e0:	d5087641 	dc	isw, x1
   956e4:	91010003 	add	x3, x0, #0x40
   956e8:	d5087643 	dc	isw, x3
   956ec:	32010062 	orr	w2, w3, #0x80000000
   956f0:	d5087642 	dc	isw, x2
   956f4:	91010064 	add	x4, x3, #0x40
   956f8:	d5087644 	dc	isw, x4
   956fc:	32010085 	orr	w5, w4, #0x80000000
   95700:	d5087645 	dc	isw, x5
   95704:	91030006 	add	x6, x0, #0xc0
   95708:	d5087646 	dc	isw, x6
   9570c:	320100c7 	orr	w7, w6, #0x80000000
   95710:	d5087647 	dc	isw, x7
   95714:	91040008 	add	x8, x0, #0x100
   95718:	d5087648 	dc	isw, x8
   9571c:	32010109 	orr	w9, w8, #0x80000000
   95720:	d5087649 	dc	isw, x9
   95724:	9105000a 	add	x10, x0, #0x140
   95728:	d508764a 	dc	isw, x10
   9572c:	3201014b 	orr	w11, w10, #0x80000000
   95730:	d508764b 	dc	isw, x11
   95734:	9106000c 	add	x12, x0, #0x180
   95738:	d508764c 	dc	isw, x12
   9573c:	3201018d 	orr	w13, w12, #0x80000000
   95740:	d508764d 	dc	isw, x13
   95744:	9107000e 	add	x14, x0, #0x1c0
   95748:	d508764e 	dc	isw, x14
   9574c:	320101cf 	orr	w15, w14, #0x80000000
   95750:	d508764f 	dc	isw, x15
   95754:	91080000 	add	x0, x0, #0x200
   95758:	f140101f 	cmp	x0, #0x4, lsl #12
   9575c:	54fffbe1 	b.ne	956d8 <InvalidateDataCacheL1Only+0x8>  // b.any
   95760:	d5033f9f 	dsb	sy
   95764:	d65f03c0 	ret
   95768:	d503201f 	nop
   9576c:	d503201f 	nop

0000000000095770 <CleanDataCache>:
   95770:	d2800000 	mov	x0, #0x0                   	// #0
   95774:	d5087a40 	dc	csw, x0
   95778:	32010001 	orr	w1, w0, #0x80000000
   9577c:	d5087a41 	dc	csw, x1
   95780:	91010003 	add	x3, x0, #0x40
   95784:	d5087a43 	dc	csw, x3
   95788:	32010062 	orr	w2, w3, #0x80000000
   9578c:	d5087a42 	dc	csw, x2
   95790:	91010064 	add	x4, x3, #0x40
   95794:	d5087a44 	dc	csw, x4
   95798:	32010085 	orr	w5, w4, #0x80000000
   9579c:	d5087a45 	dc	csw, x5
   957a0:	91030006 	add	x6, x0, #0xc0
   957a4:	d5087a46 	dc	csw, x6
   957a8:	320100c7 	orr	w7, w6, #0x80000000
   957ac:	d5087a47 	dc	csw, x7
   957b0:	91040008 	add	x8, x0, #0x100
   957b4:	d5087a48 	dc	csw, x8
   957b8:	32010109 	orr	w9, w8, #0x80000000
   957bc:	d5087a49 	dc	csw, x9
   957c0:	9105000a 	add	x10, x0, #0x140
   957c4:	d5087a4a 	dc	csw, x10
   957c8:	3201014b 	orr	w11, w10, #0x80000000
   957cc:	d5087a4b 	dc	csw, x11
   957d0:	9106000c 	add	x12, x0, #0x180
   957d4:	d5087a4c 	dc	csw, x12
   957d8:	3201018d 	orr	w13, w12, #0x80000000
   957dc:	d5087a4d 	dc	csw, x13
   957e0:	9107000e 	add	x14, x0, #0x1c0
   957e4:	d5087a4e 	dc	csw, x14
   957e8:	320101cf 	orr	w15, w14, #0x80000000
   957ec:	d5087a4f 	dc	csw, x15
   957f0:	91080000 	add	x0, x0, #0x200
   957f4:	f140101f 	cmp	x0, #0x4, lsl #12
   957f8:	54fffbe1 	b.ne	95774 <CleanDataCache+0x4>  // b.any
   957fc:	52800050 	mov	w16, #0x2                   	// #2
   95800:	72a20010 	movk	w16, #0x1000, lsl #16
   95804:	52800051 	mov	w17, #0x2                   	// #2
   95808:	72a40011 	movk	w17, #0x2000, lsl #16
   9580c:	52800052 	mov	w18, #0x2                   	// #2
   95810:	72a60012 	movk	w18, #0x3000, lsl #16
   95814:	5280004d 	mov	w13, #0x2                   	// #2
   95818:	72a8000d 	movk	w13, #0x4000, lsl #16
   9581c:	5280004c 	mov	w12, #0x2                   	// #2
   95820:	72aa000c 	movk	w12, #0x5000, lsl #16
   95824:	5280004b 	mov	w11, #0x2                   	// #2
   95828:	72ac000b 	movk	w11, #0x6000, lsl #16
   9582c:	5280004a 	mov	w10, #0x2                   	// #2
   95830:	72ae000a 	movk	w10, #0x7000, lsl #16
   95834:	52800049 	mov	w9, #0x2                   	// #2
   95838:	72b00009 	movk	w9, #0x8000, lsl #16
   9583c:	52800048 	mov	w8, #0x2                   	// #2
   95840:	72b20008 	movk	w8, #0x9000, lsl #16
   95844:	52800047 	mov	w7, #0x2                   	// #2
   95848:	72b40007 	movk	w7, #0xa000, lsl #16
   9584c:	52800046 	mov	w6, #0x2                   	// #2
   95850:	72b60006 	movk	w6, #0xb000, lsl #16
   95854:	52800045 	mov	w5, #0x2                   	// #2
   95858:	72b80005 	movk	w5, #0xc000, lsl #16
   9585c:	52800044 	mov	w4, #0x2                   	// #2
   95860:	72ba0004 	movk	w4, #0xd000, lsl #16
   95864:	52800043 	mov	w3, #0x2                   	// #2
   95868:	72bc0003 	movk	w3, #0xe000, lsl #16
   9586c:	52800042 	mov	w2, #0x2                   	// #2
   95870:	72be0002 	movk	w2, #0xf000, lsl #16
   95874:	52800000 	mov	w0, #0x0                   	// #0
   95878:	321f0001 	orr	w1, w0, #0x2
   9587c:	d5087a41 	dc	csw, x1
   95880:	2a10000e 	orr	w14, w0, w16
   95884:	d5087a4e 	dc	csw, x14
   95888:	2a11000f 	orr	w15, w0, w17
   9588c:	d5087a4f 	dc	csw, x15
   95890:	2a120001 	orr	w1, w0, w18
   95894:	d5087a41 	dc	csw, x1
   95898:	2a0d000e 	orr	w14, w0, w13
   9589c:	d5087a4e 	dc	csw, x14
   958a0:	2a0c000f 	orr	w15, w0, w12
   958a4:	d5087a4f 	dc	csw, x15
   958a8:	2a0b0001 	orr	w1, w0, w11
   958ac:	d5087a41 	dc	csw, x1
   958b0:	2a0a000e 	orr	w14, w0, w10
   958b4:	d5087a4e 	dc	csw, x14
   958b8:	2a09000f 	orr	w15, w0, w9
   958bc:	d5087a4f 	dc	csw, x15
   958c0:	2a080001 	orr	w1, w0, w8
   958c4:	d5087a41 	dc	csw, x1
   958c8:	2a07000e 	orr	w14, w0, w7
   958cc:	d5087a4e 	dc	csw, x14
   958d0:	2a06000f 	orr	w15, w0, w6
   958d4:	d5087a4f 	dc	csw, x15
   958d8:	2a050001 	orr	w1, w0, w5
   958dc:	d5087a41 	dc	csw, x1
   958e0:	2a04000e 	orr	w14, w0, w4
   958e4:	d5087a4e 	dc	csw, x14
   958e8:	2a03000f 	orr	w15, w0, w3
   958ec:	d5087a4f 	dc	csw, x15
   958f0:	2a020001 	orr	w1, w0, w2
   958f4:	d5087a41 	dc	csw, x1
   958f8:	11010000 	add	w0, w0, #0x40
   958fc:	7140401f 	cmp	w0, #0x10, lsl #12
   95900:	54fffbc1 	b.ne	95878 <CleanDataCache+0x108>  // b.any
   95904:	d5033f9f 	dsb	sy
   95908:	d65f03c0 	ret
   9590c:	d503201f 	nop

0000000000095910 <InvalidateDataCacheRange>:
   95910:	d5087620 	dc	ivac, x0
   95914:	f101003f 	cmp	x1, #0x40
   95918:	540006a9 	b.ls	959ec <InvalidateDataCacheRange+0xdc>  // b.plast
   9591c:	d1010421 	sub	x1, x1, #0x41
   95920:	91010000 	add	x0, x0, #0x40
   95924:	927ae423 	and	x3, x1, #0xffffffffffffffc0
   95928:	d3462062 	ubfx	x2, x3, #6, #3
   9592c:	8b000064 	add	x4, x3, x0
   95930:	b4000562 	cbz	x2, 959dc <InvalidateDataCacheRange+0xcc>
   95934:	d5087620 	dc	ivac, x0
   95938:	f100045f 	cmp	x2, #0x1
   9593c:	91010000 	add	x0, x0, #0x40
   95940:	540004e0 	b.eq	959dc <InvalidateDataCacheRange+0xcc>  // b.none
   95944:	f100085f 	cmp	x2, #0x2
   95948:	54000220 	b.eq	9598c <InvalidateDataCacheRange+0x7c>  // b.none
   9594c:	f1000c5f 	cmp	x2, #0x3
   95950:	540001a0 	b.eq	95984 <InvalidateDataCacheRange+0x74>  // b.none
   95954:	f100105f 	cmp	x2, #0x4
   95958:	54000120 	b.eq	9597c <InvalidateDataCacheRange+0x6c>  // b.none
   9595c:	f100145f 	cmp	x2, #0x5
   95960:	540000a0 	b.eq	95974 <InvalidateDataCacheRange+0x64>  // b.none
   95964:	f100185f 	cmp	x2, #0x6
   95968:	54000461 	b.ne	959f4 <InvalidateDataCacheRange+0xe4>  // b.any
   9596c:	d5087620 	dc	ivac, x0
   95970:	91010000 	add	x0, x0, #0x40
   95974:	d5087620 	dc	ivac, x0
   95978:	91010000 	add	x0, x0, #0x40
   9597c:	d5087620 	dc	ivac, x0
   95980:	91010000 	add	x0, x0, #0x40
   95984:	d5087620 	dc	ivac, x0
   95988:	91010000 	add	x0, x0, #0x40
   9598c:	d5087620 	dc	ivac, x0
   95990:	91010000 	add	x0, x0, #0x40
   95994:	d5087620 	dc	ivac, x0
   95998:	eb04001f 	cmp	x0, x4
   9599c:	91010005 	add	x5, x0, #0x40
   959a0:	54000260 	b.eq	959ec <InvalidateDataCacheRange+0xdc>  // b.none
   959a4:	d5087625 	dc	ivac, x5
   959a8:	910100a6 	add	x6, x5, #0x40
   959ac:	d5087626 	dc	ivac, x6
   959b0:	91030007 	add	x7, x0, #0xc0
   959b4:	d5087627 	dc	ivac, x7
   959b8:	91040008 	add	x8, x0, #0x100
   959bc:	d5087628 	dc	ivac, x8
   959c0:	91050009 	add	x9, x0, #0x140
   959c4:	d5087629 	dc	ivac, x9
   959c8:	9106000a 	add	x10, x0, #0x180
   959cc:	d508762a 	dc	ivac, x10
   959d0:	9107000b 	add	x11, x0, #0x1c0
   959d4:	d508762b 	dc	ivac, x11
   959d8:	91080000 	add	x0, x0, #0x200
   959dc:	d5087620 	dc	ivac, x0
   959e0:	eb04001f 	cmp	x0, x4
   959e4:	91010005 	add	x5, x0, #0x40
   959e8:	54fffde1 	b.ne	959a4 <InvalidateDataCacheRange+0x94>  // b.any
   959ec:	d5033f9f 	dsb	sy
   959f0:	d65f03c0 	ret
   959f4:	d5087620 	dc	ivac, x0
   959f8:	91010000 	add	x0, x0, #0x40
   959fc:	17ffffdc 	b	9596c <InvalidateDataCacheRange+0x5c>

0000000000095a00 <CleanDataCacheRange>:
   95a00:	d50b7a20 	dc	cvac, x0
   95a04:	f101003f 	cmp	x1, #0x40
   95a08:	540006a9 	b.ls	95adc <CleanDataCacheRange+0xdc>  // b.plast
   95a0c:	d1010421 	sub	x1, x1, #0x41
   95a10:	91010000 	add	x0, x0, #0x40
   95a14:	927ae423 	and	x3, x1, #0xffffffffffffffc0
   95a18:	d3462062 	ubfx	x2, x3, #6, #3
   95a1c:	8b000064 	add	x4, x3, x0
   95a20:	b4000562 	cbz	x2, 95acc <CleanDataCacheRange+0xcc>
   95a24:	d50b7a20 	dc	cvac, x0
   95a28:	f100045f 	cmp	x2, #0x1
   95a2c:	91010000 	add	x0, x0, #0x40
   95a30:	540004e0 	b.eq	95acc <CleanDataCacheRange+0xcc>  // b.none
   95a34:	f100085f 	cmp	x2, #0x2
   95a38:	54000220 	b.eq	95a7c <CleanDataCacheRange+0x7c>  // b.none
   95a3c:	f1000c5f 	cmp	x2, #0x3
   95a40:	540001a0 	b.eq	95a74 <CleanDataCacheRange+0x74>  // b.none
   95a44:	f100105f 	cmp	x2, #0x4
   95a48:	54000120 	b.eq	95a6c <CleanDataCacheRange+0x6c>  // b.none
   95a4c:	f100145f 	cmp	x2, #0x5
   95a50:	540000a0 	b.eq	95a64 <CleanDataCacheRange+0x64>  // b.none
   95a54:	f100185f 	cmp	x2, #0x6
   95a58:	54000461 	b.ne	95ae4 <CleanDataCacheRange+0xe4>  // b.any
   95a5c:	d50b7a20 	dc	cvac, x0
   95a60:	91010000 	add	x0, x0, #0x40
   95a64:	d50b7a20 	dc	cvac, x0
   95a68:	91010000 	add	x0, x0, #0x40
   95a6c:	d50b7a20 	dc	cvac, x0
   95a70:	91010000 	add	x0, x0, #0x40
   95a74:	d50b7a20 	dc	cvac, x0
   95a78:	91010000 	add	x0, x0, #0x40
   95a7c:	d50b7a20 	dc	cvac, x0
   95a80:	91010000 	add	x0, x0, #0x40
   95a84:	d50b7a20 	dc	cvac, x0
   95a88:	eb04001f 	cmp	x0, x4
   95a8c:	91010005 	add	x5, x0, #0x40
   95a90:	54000260 	b.eq	95adc <CleanDataCacheRange+0xdc>  // b.none
   95a94:	d50b7a25 	dc	cvac, x5
   95a98:	910100a6 	add	x6, x5, #0x40
   95a9c:	d50b7a26 	dc	cvac, x6
   95aa0:	91030007 	add	x7, x0, #0xc0
   95aa4:	d50b7a27 	dc	cvac, x7
   95aa8:	91040008 	add	x8, x0, #0x100
   95aac:	d50b7a28 	dc	cvac, x8
   95ab0:	91050009 	add	x9, x0, #0x140
   95ab4:	d50b7a29 	dc	cvac, x9
   95ab8:	9106000a 	add	x10, x0, #0x180
   95abc:	d50b7a2a 	dc	cvac, x10
   95ac0:	9107000b 	add	x11, x0, #0x1c0
   95ac4:	d50b7a2b 	dc	cvac, x11
   95ac8:	91080000 	add	x0, x0, #0x200
   95acc:	d50b7a20 	dc	cvac, x0
   95ad0:	eb04001f 	cmp	x0, x4
   95ad4:	91010005 	add	x5, x0, #0x40
   95ad8:	54fffde1 	b.ne	95a94 <CleanDataCacheRange+0x94>  // b.any
   95adc:	d5033f9f 	dsb	sy
   95ae0:	d65f03c0 	ret
   95ae4:	d50b7a20 	dc	cvac, x0
   95ae8:	91010000 	add	x0, x0, #0x40
   95aec:	17ffffdc 	b	95a5c <CleanDataCacheRange+0x5c>

0000000000095af0 <CleanAndInvalidateDataCacheRange>:
   95af0:	d50b7e20 	dc	civac, x0
   95af4:	f101003f 	cmp	x1, #0x40
   95af8:	540006a9 	b.ls	95bcc <CleanAndInvalidateDataCacheRange+0xdc>  // b.plast
   95afc:	d1010421 	sub	x1, x1, #0x41
   95b00:	91010000 	add	x0, x0, #0x40
   95b04:	927ae423 	and	x3, x1, #0xffffffffffffffc0
   95b08:	d3462062 	ubfx	x2, x3, #6, #3
   95b0c:	8b000064 	add	x4, x3, x0
   95b10:	b4000562 	cbz	x2, 95bbc <CleanAndInvalidateDataCacheRange+0xcc>
   95b14:	d50b7e20 	dc	civac, x0
   95b18:	f100045f 	cmp	x2, #0x1
   95b1c:	91010000 	add	x0, x0, #0x40
   95b20:	540004e0 	b.eq	95bbc <CleanAndInvalidateDataCacheRange+0xcc>  // b.none
   95b24:	f100085f 	cmp	x2, #0x2
   95b28:	54000220 	b.eq	95b6c <CleanAndInvalidateDataCacheRange+0x7c>  // b.none
   95b2c:	f1000c5f 	cmp	x2, #0x3
   95b30:	540001a0 	b.eq	95b64 <CleanAndInvalidateDataCacheRange+0x74>  // b.none
   95b34:	f100105f 	cmp	x2, #0x4
   95b38:	54000120 	b.eq	95b5c <CleanAndInvalidateDataCacheRange+0x6c>  // b.none
   95b3c:	f100145f 	cmp	x2, #0x5
   95b40:	540000a0 	b.eq	95b54 <CleanAndInvalidateDataCacheRange+0x64>  // b.none
   95b44:	f100185f 	cmp	x2, #0x6
   95b48:	54000461 	b.ne	95bd4 <CleanAndInvalidateDataCacheRange+0xe4>  // b.any
   95b4c:	d50b7e20 	dc	civac, x0
   95b50:	91010000 	add	x0, x0, #0x40
   95b54:	d50b7e20 	dc	civac, x0
   95b58:	91010000 	add	x0, x0, #0x40
   95b5c:	d50b7e20 	dc	civac, x0
   95b60:	91010000 	add	x0, x0, #0x40
   95b64:	d50b7e20 	dc	civac, x0
   95b68:	91010000 	add	x0, x0, #0x40
   95b6c:	d50b7e20 	dc	civac, x0
   95b70:	91010000 	add	x0, x0, #0x40
   95b74:	d50b7e20 	dc	civac, x0
   95b78:	eb04001f 	cmp	x0, x4
   95b7c:	91010005 	add	x5, x0, #0x40
   95b80:	54000260 	b.eq	95bcc <CleanAndInvalidateDataCacheRange+0xdc>  // b.none
   95b84:	d50b7e25 	dc	civac, x5
   95b88:	910100a6 	add	x6, x5, #0x40
   95b8c:	d50b7e26 	dc	civac, x6
   95b90:	91030007 	add	x7, x0, #0xc0
   95b94:	d50b7e27 	dc	civac, x7
   95b98:	91040008 	add	x8, x0, #0x100
   95b9c:	d50b7e28 	dc	civac, x8
   95ba0:	91050009 	add	x9, x0, #0x140
   95ba4:	d50b7e29 	dc	civac, x9
   95ba8:	9106000a 	add	x10, x0, #0x180
   95bac:	d50b7e2a 	dc	civac, x10
   95bb0:	9107000b 	add	x11, x0, #0x1c0
   95bb4:	d50b7e2b 	dc	civac, x11
   95bb8:	91080000 	add	x0, x0, #0x200
   95bbc:	d50b7e20 	dc	civac, x0
   95bc0:	eb04001f 	cmp	x0, x4
   95bc4:	91010005 	add	x5, x0, #0x40
   95bc8:	54fffde1 	b.ne	95b84 <CleanAndInvalidateDataCacheRange+0x94>  // b.any
   95bcc:	d5033f9f 	dsb	sy
   95bd0:	d65f03c0 	ret
   95bd4:	d50b7e20 	dc	civac, x0
   95bd8:	91010000 	add	x0, x0, #0x40
   95bdc:	17ffffdc 	b	95b4c <CleanAndInvalidateDataCacheRange+0x5c>

0000000000095be0 <SyncDataAndInstructionCache>:
   95be0:	f81f0ffe 	str	x30, [sp, #-16]!
   95be4:	97fffee3 	bl	95770 <CleanDataCache>
   95be8:	d508751f 	ic	iallu
   95bec:	d5033f9f 	dsb	sy
   95bf0:	d5033fdf 	isb
   95bf4:	f84107fe 	ldr	x30, [sp], #16
   95bf8:	d65f03c0 	ret

0000000000095bfc <CTranslationTable::CTranslationTable(unsigned long)>:
   95bfc:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   95c00:	910003fd 	mov	x29, sp
   95c04:	f9000fe0 	str	x0, [sp, #24]
   95c08:	f9000be1 	str	x1, [sp, #16]
   95c0c:	f9400fe0 	ldr	x0, [sp, #24]
   95c10:	f9400be1 	ldr	x1, [sp, #16]
   95c14:	f9000001 	str	x1, [x0]
   95c18:	f9400fe0 	ldr	x0, [sp, #24]
   95c1c:	f900041f 	str	xzr, [x0, #8]
   95c20:	94000564 	bl	971b0 <palloc>
   95c24:	aa0003e1 	mov	x1, x0
   95c28:	f9400fe0 	ldr	x0, [sp, #24]
   95c2c:	f9000401 	str	x1, [x0, #8]
   95c30:	f9400fe0 	ldr	x0, [sp, #24]
   95c34:	f9400400 	ldr	x0, [x0, #8]
   95c38:	f100001f 	cmp	x0, #0x0
   95c3c:	1a9f07e0 	cset	w0, ne  // ne = any
   95c40:	12001c00 	and	w0, w0, #0xff
   95c44:	92401c00 	and	x0, x0, #0xff
   95c48:	f100001f 	cmp	x0, #0x0
   95c4c:	540000e1 	b.ne	95c68 <CTranslationTable::CTranslationTable(unsigned long)+0x6c>  // b.any
   95c50:	528005e2 	mov	w2, #0x2f                  	// #47
   95c54:	f0000020 	adrp	x0, 9c000 <vtable for CSerialDevice>
   95c58:	911d2001 	add	x1, x0, #0x748
   95c5c:	f0000020 	adrp	x0, 9c000 <vtable for CSerialDevice>
   95c60:	911d8000 	add	x0, x0, #0x760
   95c64:	97ffcdc3 	bl	89370 <assertion_failed>
   95c68:	f9400fe0 	ldr	x0, [sp, #24]
   95c6c:	f9400400 	ldr	x0, [x0, #8]
   95c70:	d2a00022 	mov	x2, #0x10000               	// #65536
   95c74:	52800001 	mov	w1, #0x0                   	// #0
   95c78:	97fff661 	bl	935fc <memset>
   95c7c:	b9003fff 	str	wzr, [sp, #60]
   95c80:	b9403fe0 	ldr	w0, [sp, #60]
   95c84:	7101fc1f 	cmp	w0, #0x7f
   95c88:	54000ba8 	b.hi	95dfc <CTranslationTable::CTranslationTable(unsigned long)+0x200>  // b.pmore
   95c8c:	b9403fe0 	ldr	w0, [sp, #60]
   95c90:	d3638800 	lsl	x0, x0, #29
   95c94:	f9001be0 	str	x0, [sp, #48]
   95c98:	f9401be1 	ldr	x1, [sp, #48]
   95c9c:	b2407fe0 	mov	x0, #0xffffffff            	// #4294967295
   95ca0:	eb00003f 	cmp	x1, x0
   95ca4:	54000169 	b.ls	95cd0 <CTranslationTable::CTranslationTable(unsigned long)+0xd4>  // b.plast
   95ca8:	f9401be1 	ldr	x1, [sp, #48]
   95cac:	b2407fe0 	mov	x0, #0xffffffff            	// #4294967295
   95cb0:	f2c000a0 	movk	x0, #0x5, lsl #32
   95cb4:	eb00003f 	cmp	x1, x0
   95cb8:	54000989 	b.ls	95de8 <CTranslationTable::CTranslationTable(unsigned long)+0x1ec>  // b.plast
   95cbc:	f9401be1 	ldr	x1, [sp, #48]
   95cc0:	b24067e0 	mov	x0, #0x3ffffff             	// #67108863
   95cc4:	f2c000c0 	movk	x0, #0x6, lsl #32
   95cc8:	eb00003f 	cmp	x1, x0
   95ccc:	540008e8 	b.hi	95de8 <CTranslationTable::CTranslationTable(unsigned long)+0x1ec>  // b.pmore
   95cd0:	f9401be1 	ldr	x1, [sp, #48]
   95cd4:	f9400fe0 	ldr	x0, [sp, #24]
   95cd8:	94000059 	bl	95e3c <CTranslationTable::CreateLevel3Table(unsigned long)>
   95cdc:	f90017e0 	str	x0, [sp, #40]
   95ce0:	f94017e0 	ldr	x0, [sp, #40]
   95ce4:	f100001f 	cmp	x0, #0x0
   95ce8:	1a9f07e0 	cset	w0, ne  // ne = any
   95cec:	12001c00 	and	w0, w0, #0xff
   95cf0:	92401c00 	and	x0, x0, #0xff
   95cf4:	f100001f 	cmp	x0, #0x0
   95cf8:	540000e1 	b.ne	95d14 <CTranslationTable::CTranslationTable(unsigned long)+0x118>  // b.any
   95cfc:	52800822 	mov	w2, #0x41                  	// #65
   95d00:	f0000020 	adrp	x0, 9c000 <vtable for CSerialDevice>
   95d04:	911d2001 	add	x1, x0, #0x748
   95d08:	f0000020 	adrp	x0, 9c000 <vtable for CSerialDevice>
   95d0c:	911dc000 	add	x0, x0, #0x770
   95d10:	97ffcd98 	bl	89370 <assertion_failed>
   95d14:	f9400fe0 	ldr	x0, [sp, #24]
   95d18:	f9400401 	ldr	x1, [x0, #8]
   95d1c:	b9403fe0 	ldr	w0, [sp, #60]
   95d20:	d37df000 	lsl	x0, x0, #3
   95d24:	8b000020 	add	x0, x1, x0
   95d28:	f90013e0 	str	x0, [sp, #32]
   95d2c:	f94013e0 	ldr	x0, [sp, #32]
   95d30:	39400001 	ldrb	w1, [x0]
   95d34:	32000421 	orr	w1, w1, #0x3
   95d38:	39000001 	strb	w1, [x0]
   95d3c:	f94013e0 	ldr	x0, [sp, #32]
   95d40:	39400001 	ldrb	w1, [x0]
   95d44:	12000421 	and	w1, w1, #0x3
   95d48:	39000001 	strb	w1, [x0]
   95d4c:	39400401 	ldrb	w1, [x0, #1]
   95d50:	52800002 	mov	w2, #0x0                   	// #0
   95d54:	0a020021 	and	w1, w1, w2
   95d58:	39000401 	strb	w1, [x0, #1]
   95d5c:	f94017e0 	ldr	x0, [sp, #40]
   95d60:	d350fc01 	lsr	x1, x0, #16
   95d64:	2a0103e2 	mov	w2, w1
   95d68:	f94013e1 	ldr	x1, [sp, #32]
   95d6c:	f9400020 	ldr	x0, [x1]
   95d70:	b3707c40 	bfi	x0, x2, #16, #32
   95d74:	f9000020 	str	x0, [x1]
   95d78:	f94013e0 	ldr	x0, [sp, #32]
   95d7c:	39401801 	ldrb	w1, [x0, #6]
   95d80:	121c6c21 	and	w1, w1, #0xfffffff0
   95d84:	39001801 	strb	w1, [x0, #6]
   95d88:	f94013e0 	ldr	x0, [sp, #32]
   95d8c:	39401801 	ldrb	w1, [x0, #6]
   95d90:	12000c21 	and	w1, w1, #0xf
   95d94:	39001801 	strb	w1, [x0, #6]
   95d98:	39401c01 	ldrb	w1, [x0, #7]
   95d9c:	121d7021 	and	w1, w1, #0xfffffff8
   95da0:	39001c01 	strb	w1, [x0, #7]
   95da4:	f94013e0 	ldr	x0, [sp, #32]
   95da8:	39401c01 	ldrb	w1, [x0, #7]
   95dac:	121c7821 	and	w1, w1, #0xfffffff7
   95db0:	39001c01 	strb	w1, [x0, #7]
   95db4:	f94013e0 	ldr	x0, [sp, #32]
   95db8:	39401c01 	ldrb	w1, [x0, #7]
   95dbc:	121b7821 	and	w1, w1, #0xffffffef
   95dc0:	39001c01 	strb	w1, [x0, #7]
   95dc4:	f94013e0 	ldr	x0, [sp, #32]
   95dc8:	39401c01 	ldrb	w1, [x0, #7]
   95dcc:	12197421 	and	w1, w1, #0xffffff9f
   95dd0:	39001c01 	strb	w1, [x0, #7]
   95dd4:	f94013e0 	ldr	x0, [sp, #32]
   95dd8:	39401c01 	ldrb	w1, [x0, #7]
   95ddc:	12001821 	and	w1, w1, #0x7f
   95de0:	39001c01 	strb	w1, [x0, #7]
   95de4:	14000002 	b	95dec <CTranslationTable::CTranslationTable(unsigned long)+0x1f0>
   95de8:	d503201f 	nop
   95dec:	b9403fe0 	ldr	w0, [sp, #60]
   95df0:	11000400 	add	w0, w0, #0x1
   95df4:	b9003fe0 	str	w0, [sp, #60]
   95df8:	17ffffa2 	b	95c80 <CTranslationTable::CTranslationTable(unsigned long)+0x84>
   95dfc:	d5033f9f 	dsb	sy
   95e00:	d503201f 	nop
   95e04:	a8c47bfd 	ldp	x29, x30, [sp], #64
   95e08:	d65f03c0 	ret

0000000000095e0c <CTranslationTable::~CTranslationTable()>:
   95e0c:	f9400400 	ldr	x0, [x0, #8]
   95e10:	140004ec 	b	971c0 <pfree>

0000000000095e14 <CTranslationTable::GetBaseAddress() const>:
   95e14:	f9400400 	ldr	x0, [x0, #8]
   95e18:	b4000040 	cbz	x0, 95e20 <CTranslationTable::GetBaseAddress() const+0xc>
   95e1c:	d65f03c0 	ret
   95e20:	f0000021 	adrp	x1, 9c000 <vtable for CSerialDevice>
   95e24:	f0000020 	adrp	x0, 9c000 <vtable for CSerialDevice>
   95e28:	f81f0ffe 	str	x30, [sp, #-16]!
   95e2c:	911d2021 	add	x1, x1, #0x748
   95e30:	911d8000 	add	x0, x0, #0x760
   95e34:	52800b62 	mov	w2, #0x5b                  	// #91
   95e38:	97ffcd4e 	bl	89370 <assertion_failed>

0000000000095e3c <CTranslationTable::CreateLevel3Table(unsigned long)>:
   95e3c:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   95e40:	910003fd 	mov	x29, sp
   95e44:	f9000fe0 	str	x0, [sp, #24]
   95e48:	f9000be1 	str	x1, [sp, #16]
   95e4c:	940004d9 	bl	971b0 <palloc>
   95e50:	f9001be0 	str	x0, [sp, #48]
   95e54:	f9401be0 	ldr	x0, [sp, #48]
   95e58:	f100001f 	cmp	x0, #0x0
   95e5c:	1a9f07e0 	cset	w0, ne  // ne = any
   95e60:	12001c00 	and	w0, w0, #0xff
   95e64:	92401c00 	and	x0, x0, #0xff
   95e68:	f100001f 	cmp	x0, #0x0
   95e6c:	540000e1 	b.ne	95e88 <CTranslationTable::CreateLevel3Table(unsigned long)+0x4c>  // b.any
   95e70:	52800c42 	mov	w2, #0x62                  	// #98
   95e74:	f0000020 	adrp	x0, 9c000 <vtable for CSerialDevice>
   95e78:	911d2001 	add	x1, x0, #0x748
   95e7c:	f0000020 	adrp	x0, 9c000 <vtable for CSerialDevice>
   95e80:	911dc000 	add	x0, x0, #0x770
   95e84:	97ffcd3b 	bl	89370 <assertion_failed>
   95e88:	b9003fff 	str	wzr, [sp, #60]
   95e8c:	b9403fe1 	ldr	w1, [sp, #60]
   95e90:	5283ffe0 	mov	w0, #0x1fff                	// #8191
   95e94:	6b00003f 	cmp	w1, w0
   95e98:	54000fe8 	b.hi	96094 <CTranslationTable::CreateLevel3Table(unsigned long)+0x258>  // b.pmore
   95e9c:	b9403fe0 	ldr	w0, [sp, #60]
   95ea0:	d37df000 	lsl	x0, x0, #3
   95ea4:	f9401be1 	ldr	x1, [sp, #48]
   95ea8:	8b000020 	add	x0, x1, x0
   95eac:	f90017e0 	str	x0, [sp, #40]
   95eb0:	f94017e0 	ldr	x0, [sp, #40]
   95eb4:	39400001 	ldrb	w1, [x0]
   95eb8:	32000421 	orr	w1, w1, #0x3
   95ebc:	39000001 	strb	w1, [x0]
   95ec0:	f94017e0 	ldr	x0, [sp, #40]
   95ec4:	39400001 	ldrb	w1, [x0]
   95ec8:	121b7021 	and	w1, w1, #0xffffffe3
   95ecc:	39000001 	strb	w1, [x0]
   95ed0:	f94017e0 	ldr	x0, [sp, #40]
   95ed4:	39400001 	ldrb	w1, [x0]
   95ed8:	121a7821 	and	w1, w1, #0xffffffdf
   95edc:	39000001 	strb	w1, [x0]
   95ee0:	f94017e0 	ldr	x0, [sp, #40]
   95ee4:	39400001 	ldrb	w1, [x0]
   95ee8:	12001421 	and	w1, w1, #0x3f
   95eec:	39000001 	strb	w1, [x0]
   95ef0:	f94017e0 	ldr	x0, [sp, #40]
   95ef4:	39400401 	ldrb	w1, [x0, #1]
   95ef8:	32000421 	orr	w1, w1, #0x3
   95efc:	39000401 	strb	w1, [x0, #1]
   95f00:	f94017e0 	ldr	x0, [sp, #40]
   95f04:	39400401 	ldrb	w1, [x0, #1]
   95f08:	321e0021 	orr	w1, w1, #0x4
   95f0c:	39000401 	strb	w1, [x0, #1]
   95f10:	f94017e0 	ldr	x0, [sp, #40]
   95f14:	39400401 	ldrb	w1, [x0, #1]
   95f18:	121c7821 	and	w1, w1, #0xfffffff7
   95f1c:	39000401 	strb	w1, [x0, #1]
   95f20:	f94017e0 	ldr	x0, [sp, #40]
   95f24:	39400401 	ldrb	w1, [x0, #1]
   95f28:	12000c21 	and	w1, w1, #0xf
   95f2c:	39000401 	strb	w1, [x0, #1]
   95f30:	f9400be0 	ldr	x0, [sp, #16]
   95f34:	d350fc01 	lsr	x1, x0, #16
   95f38:	2a0103e2 	mov	w2, w1
   95f3c:	f94017e1 	ldr	x1, [sp, #40]
   95f40:	f9400020 	ldr	x0, [x1]
   95f44:	b3707c40 	bfi	x0, x2, #16, #32
   95f48:	f9000020 	str	x0, [x1]
   95f4c:	f94017e0 	ldr	x0, [sp, #40]
   95f50:	39401801 	ldrb	w1, [x0, #6]
   95f54:	121c6c21 	and	w1, w1, #0xfffffff0
   95f58:	39001801 	strb	w1, [x0, #6]
   95f5c:	f94017e0 	ldr	x0, [sp, #40]
   95f60:	39401801 	ldrb	w1, [x0, #6]
   95f64:	121b7821 	and	w1, w1, #0xffffffef
   95f68:	39001801 	strb	w1, [x0, #6]
   95f6c:	f94017e0 	ldr	x0, [sp, #40]
   95f70:	39401801 	ldrb	w1, [x0, #6]
   95f74:	121a7821 	and	w1, w1, #0xffffffdf
   95f78:	39001801 	strb	w1, [x0, #6]
   95f7c:	f94017e0 	ldr	x0, [sp, #40]
   95f80:	39401801 	ldrb	w1, [x0, #6]
   95f84:	321a0021 	orr	w1, w1, #0x40
   95f88:	39001801 	strb	w1, [x0, #6]
   95f8c:	f94017e0 	ldr	x0, [sp, #40]
   95f90:	39401801 	ldrb	w1, [x0, #6]
   95f94:	12001821 	and	w1, w1, #0x7f
   95f98:	39001801 	strb	w1, [x0, #6]
   95f9c:	39401c01 	ldrb	w1, [x0, #7]
   95fa0:	52800002 	mov	w2, #0x0                   	// #0
   95fa4:	0a020021 	and	w1, w1, w2
   95fa8:	39001c01 	strb	w1, [x0, #7]
   95fac:	f9400be1 	ldr	x1, [sp, #16]
   95fb0:	b0000020 	adrp	x0, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   95fb4:	91128000 	add	x0, x0, #0x4a0
   95fb8:	eb00003f 	cmp	x1, x0
   95fbc:	540005e3 	b.cc	96078 <CTranslationTable::CreateLevel3Table(unsigned long)+0x23c>  // b.lo, b.ul, b.last
   95fc0:	f94017e0 	ldr	x0, [sp, #40]
   95fc4:	39401801 	ldrb	w1, [x0, #6]
   95fc8:	321b0021 	orr	w1, w1, #0x20
   95fcc:	39001801 	strb	w1, [x0, #6]
   95fd0:	f9400fe0 	ldr	x0, [sp, #24]
   95fd4:	f9400001 	ldr	x1, [x0]
   95fd8:	f9400be0 	ldr	x0, [sp, #16]
   95fdc:	eb00003f 	cmp	x1, x0
   95fe0:	540000a8 	b.hi	95ff4 <CTranslationTable::CreateLevel3Table(unsigned long)+0x1b8>  // b.pmore
   95fe4:	f9400be1 	ldr	x1, [sp, #16]
   95fe8:	b24077e0 	mov	x0, #0x3fffffff            	// #1073741823
   95fec:	eb00003f 	cmp	x1, x0
   95ff0:	540000a9 	b.ls	96004 <CTranslationTable::CreateLevel3Table(unsigned long)+0x1c8>  // b.plast
   95ff4:	f9400be1 	ldr	x1, [sp, #16]
   95ff8:	12a80000 	mov	w0, #0xbfffffff            	// #-1073741825
   95ffc:	eb00003f 	cmp	x1, x0
   96000:	54000189 	b.ls	96030 <CTranslationTable::CreateLevel3Table(unsigned long)+0x1f4>  // b.plast
   96004:	f94017e1 	ldr	x1, [sp, #40]
   96008:	39400020 	ldrb	w0, [x1]
   9600c:	52800022 	mov	w2, #0x1                   	// #1
   96010:	331e0840 	bfi	w0, w2, #2, #3
   96014:	39000020 	strb	w0, [x1]
   96018:	f94017e1 	ldr	x1, [sp, #40]
   9601c:	39400420 	ldrb	w0, [x1, #1]
   96020:	52800042 	mov	w2, #0x2                   	// #2
   96024:	33000440 	bfxil	w0, w2, #0, #2
   96028:	39000420 	strb	w0, [x1, #1]
   9602c:	14000013 	b	96078 <CTranslationTable::CreateLevel3Table(unsigned long)+0x23c>
   96030:	f9400be1 	ldr	x1, [sp, #16]
   96034:	12bff600 	mov	w0, #0x4fffff              	// #5242879
   96038:	eb00003f 	cmp	x1, x0
   9603c:	540001e9 	b.ls	96078 <CTranslationTable::CreateLevel3Table(unsigned long)+0x23c>  // b.plast
   96040:	f9400be1 	ldr	x1, [sp, #16]
   96044:	12bfee00 	mov	w0, #0x8fffff              	// #9437183
   96048:	eb00003f 	cmp	x1, x0
   9604c:	54000168 	b.hi	96078 <CTranslationTable::CreateLevel3Table(unsigned long)+0x23c>  // b.pmore
   96050:	f94017e1 	ldr	x1, [sp, #40]
   96054:	39400020 	ldrb	w0, [x1]
   96058:	52800042 	mov	w2, #0x2                   	// #2
   9605c:	331e0840 	bfi	w0, w2, #2, #3
   96060:	39000020 	strb	w0, [x1]
   96064:	f94017e1 	ldr	x1, [sp, #40]
   96068:	39400420 	ldrb	w0, [x1, #1]
   9606c:	52800042 	mov	w2, #0x2                   	// #2
   96070:	33000440 	bfxil	w0, w2, #0, #2
   96074:	39000420 	strb	w0, [x1, #1]
   96078:	f9400be0 	ldr	x0, [sp, #16]
   9607c:	91404000 	add	x0, x0, #0x10, lsl #12
   96080:	f9000be0 	str	x0, [sp, #16]
   96084:	b9403fe0 	ldr	w0, [sp, #60]
   96088:	11000400 	add	w0, w0, #0x1
   9608c:	b9003fe0 	str	w0, [sp, #60]
   96090:	17ffff7f 	b	95e8c <CTranslationTable::CreateLevel3Table(unsigned long)+0x50>
   96094:	f9401be0 	ldr	x0, [sp, #48]
   96098:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9609c:	d65f03c0 	ret

00000000000960a0 <CInterruptSystem::DisableFIQ() [clone .part.5]>:
   960a0:	90000042 	adrp	x2, 9e000 <font_data+0x1558>
   960a4:	91190045 	add	x5, x2, #0x640
   960a8:	b94010a3 	ldr	w3, [x5, #16]
   960ac:	340000c3 	cbz	w3, 960c4 <CInterruptSystem::DisableFIQ() [clone .part.5]+0x24>
   960b0:	52800024 	mov	w4, #0x1                   	// #1
   960b4:	aa0403e0 	mov	x0, x4
   960b8:	aa0303e1 	mov	x1, x3
   960bc:	d4000003 	smc	#0x0
   960c0:	b90010bf 	str	wzr, [x5, #16]
   960c4:	d65f03c0 	ret
   960c8:	d503201f 	nop
   960cc:	d503201f 	nop

00000000000960d0 <CInterruptSystem::CInterruptSystem()>:
   960d0:	aa0003e1 	mov	x1, x0
   960d4:	91200003 	add	x3, x0, #0x800
   960d8:	91200022 	add	x2, x1, #0x800
   960dc:	91200024 	add	x4, x1, #0x800
   960e0:	a9007c3f 	stp	xzr, xzr, [x1]
   960e4:	a9017c3f 	stp	xzr, xzr, [x1, #16]
   960e8:	a9027c3f 	stp	xzr, xzr, [x1, #32]
   960ec:	a9037c3f 	stp	xzr, xzr, [x1, #48]
   960f0:	91010021 	add	x1, x1, #0x40
   960f4:	eb03003f 	cmp	x1, x3
   960f8:	a9007c5f 	stp	xzr, xzr, [x2]
   960fc:	a9017c5f 	stp	xzr, xzr, [x2, #16]
   96100:	a9027c9f 	stp	xzr, xzr, [x4, #32]
   96104:	a9037c9f 	stp	xzr, xzr, [x4, #48]
   96108:	54fffe81 	b.ne	960d8 <CInterruptSystem::CInterruptSystem()+0x8>  // b.any
   9610c:	f0016e65 	adrp	x5, 2e65000 <temp_gold+0xf421a0>
   96110:	f901bca0 	str	x0, [x5, #888]
   96114:	d65f03c0 	ret
   96118:	d503201f 	nop
   9611c:	d503201f 	nop

0000000000096120 <CInterruptSystem::~CInterruptSystem()>:
   96120:	d50342df 	msr	daifset, #0x2
   96124:	d2820001 	mov	x1, #0x1000                	// #4096
   96128:	f2bff081 	movk	x1, #0xff84, lsl #16
   9612c:	f0016e60 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   96130:	b900003f 	str	wzr, [x1]
   96134:	f901bc1f 	str	xzr, [x0, #888]
   96138:	d65f03c0 	ret
   9613c:	d503201f 	nop

0000000000096140 <CInterruptSystem::Initialize()>:
   96140:	f0000000 	adrp	x0, 99000 <VectorTable>
   96144:	911e1001 	add	x1, x0, #0x784
   96148:	f81f0ffe 	str	x30, [sp, #-16]!
   9614c:	f0000002 	adrp	x2, 99000 <VectorTable>
   96150:	91262043 	add	x3, x2, #0x988
   96154:	d141c072 	sub	x18, x3, #0x70, lsl #12
   96158:	d141c030 	sub	x16, x1, #0x70, lsl #12
   9615c:	d141c02f 	sub	x15, x1, #0x70, lsl #12
   96160:	d141c02e 	sub	x14, x1, #0x70, lsl #12
   96164:	d141c02d 	sub	x13, x1, #0x70, lsl #12
   96168:	d141c02c 	sub	x12, x1, #0x70, lsl #12
   9616c:	d141c02b 	sub	x11, x1, #0x70, lsl #12
   96170:	d141c02a 	sub	x10, x1, #0x70, lsl #12
   96174:	d141c029 	sub	x9, x1, #0x70, lsl #12
   96178:	d141c028 	sub	x8, x1, #0x70, lsl #12
   9617c:	d141c027 	sub	x7, x1, #0x70, lsl #12
   96180:	d141c026 	sub	x6, x1, #0x70, lsl #12
   96184:	d141c025 	sub	x5, x1, #0x70, lsl #12
   96188:	d141c024 	sub	x4, x1, #0x70, lsl #12
   9618c:	d141c03e 	sub	x30, x1, #0x70, lsl #12
   96190:	d141c031 	sub	x17, x1, #0x70, lsl #12
   96194:	d1100252 	sub	x18, x18, #0x400
   96198:	d11e03de 	sub	x30, x30, #0x780
   9619c:	d1020210 	sub	x16, x16, #0x80
   961a0:	d10401ef 	sub	x15, x15, #0x100
   961a4:	d10601ce 	sub	x14, x14, #0x180
   961a8:	d10801ad 	sub	x13, x13, #0x200
   961ac:	d10a018c 	sub	x12, x12, #0x280
   961b0:	d10c016b 	sub	x11, x11, #0x300
   961b4:	d10e014a 	sub	x10, x10, #0x380
   961b8:	d1120129 	sub	x9, x9, #0x480
   961bc:	d1140108 	sub	x8, x8, #0x500
   961c0:	d11600e7 	sub	x7, x7, #0x580
   961c4:	d11800c6 	sub	x6, x6, #0x600
   961c8:	d11a00a5 	sub	x5, x5, #0x680
   961cc:	d11c0084 	sub	x4, x4, #0x700
   961d0:	52a28003 	mov	w3, #0x14000000            	// #335544320
   961d4:	9342ffc0 	asr	x0, x30, #2
   961d8:	9342fe41 	asr	x1, x18, #2
   961dc:	9342fca5 	asr	x5, x5, #2
   961e0:	9342fc84 	asr	x4, x4, #2
   961e4:	9342fe32 	asr	x18, x17, #2
   961e8:	9342fe10 	asr	x16, x16, #2
   961ec:	9342fdef 	asr	x15, x15, #2
   961f0:	9342fdce 	asr	x14, x14, #2
   961f4:	9342fdad 	asr	x13, x13, #2
   961f8:	9342fd8c 	asr	x12, x12, #2
   961fc:	9342fd6b 	asr	x11, x11, #2
   96200:	9342fd4a 	asr	x10, x10, #2
   96204:	9342fd29 	asr	x9, x9, #2
   96208:	9342fd08 	asr	x8, x8, #2
   9620c:	9342fce7 	asr	x7, x7, #2
   96210:	9342fcc6 	asr	x6, x6, #2
   96214:	d2a000fe 	mov	x30, #0x70000               	// #458752
   96218:	2a030022 	orr	w2, w1, w3
   9621c:	2a030251 	orr	w17, w18, w3
   96220:	2a030201 	orr	w1, w16, w3
   96224:	2a0301f2 	orr	w18, w15, w3
   96228:	2a0301d0 	orr	w16, w14, w3
   9622c:	b90403c2 	str	w2, [x30, #1024]
   96230:	2a0301af 	orr	w15, w13, w3
   96234:	2a03018e 	orr	w14, w12, w3
   96238:	b90003d1 	str	w17, [x30]
   9623c:	2a03016d 	orr	w13, w11, w3
   96240:	2a03014c 	orr	w12, w10, w3
   96244:	b90083c1 	str	w1, [x30, #128]
   96248:	2a03012b 	orr	w11, w9, w3
   9624c:	2a03010a 	orr	w10, w8, w3
   96250:	b90103d2 	str	w18, [x30, #256]
   96254:	2a0300e9 	orr	w9, w7, w3
   96258:	2a0300c8 	orr	w8, w6, w3
   9625c:	b90183d0 	str	w16, [x30, #384]
   96260:	2a0300a7 	orr	w7, w5, w3
   96264:	2a030086 	orr	w6, w4, w3
   96268:	b90203cf 	str	w15, [x30, #512]
   9626c:	2a030003 	orr	w3, w0, w3
   96270:	b90283ce 	str	w14, [x30, #640]
   96274:	b90303cd 	str	w13, [x30, #768]
   96278:	b90383cc 	str	w12, [x30, #896]
   9627c:	b90483cb 	str	w11, [x30, #1152]
   96280:	b90503ca 	str	w10, [x30, #1280]
   96284:	b90583c9 	str	w9, [x30, #1408]
   96288:	b90603c8 	str	w8, [x30, #1536]
   9628c:	b90683c7 	str	w7, [x30, #1664]
   96290:	b90703c6 	str	w6, [x30, #1792]
   96294:	b90783c3 	str	w3, [x30, #1920]
   96298:	97fffe52 	bl	95be0 <SyncDataAndInstructionCache>
   9629c:	d2820000 	mov	x0, #0x1000                	// #4096
   962a0:	f2bff080 	movk	x0, #0xff84, lsl #16
   962a4:	12800011 	mov	w17, #0xffffffff            	// #-1
   962a8:	d2823004 	mov	x4, #0x1180                	// #4480
   962ac:	f2bff084 	movk	x4, #0xff84, lsl #16
   962b0:	d2825002 	mov	x2, #0x1280                	// #4736
   962b4:	f2bff082 	movk	x2, #0xff84, lsl #16
   962b8:	b900001f 	str	wzr, [x0]
   962bc:	d2827001 	mov	x1, #0x1380                	// #4992
   962c0:	f2bff081 	movk	x1, #0xff84, lsl #16
   962c4:	b9000091 	str	w17, [x4]
   962c8:	d2825092 	mov	x18, #0x1284                	// #4740
   962cc:	f2bff092 	movk	x18, #0xff84, lsl #16
   962d0:	b9000051 	str	w17, [x2]
   962d4:	d2827088 	mov	x8, #0x1384                	// #4996
   962d8:	f2bff088 	movk	x8, #0xff84, lsl #16
   962dc:	b9000031 	str	w17, [x1]
   962e0:	d2823106 	mov	x6, #0x1188                	// #4488
   962e4:	f2bff086 	movk	x6, #0xff84, lsl #16
   962e8:	b9018411 	str	w17, [x0, #388]
   962ec:	d2825105 	mov	x5, #0x1288                	// #4744
   962f0:	f2bff085 	movk	x5, #0xff84, lsl #16
   962f4:	b9000251 	str	w17, [x18]
   962f8:	d2823183 	mov	x3, #0x118c                	// #4492
   962fc:	f2bff083 	movk	x3, #0xff84, lsl #16
   96300:	b9000111 	str	w17, [x8]
   96304:	d2823210 	mov	x16, #0x1190                	// #4496
   96308:	f2bff090 	movk	x16, #0xff84, lsl #16
   9630c:	b90000d1 	str	w17, [x6]
   96310:	d282520f 	mov	x15, #0x1290                	// #4752
   96314:	f2bff08f 	movk	x15, #0xff84, lsl #16
   96318:	b90000b1 	str	w17, [x5]
   9631c:	d282720e 	mov	x14, #0x1390                	// #5008
   96320:	f2bff08e 	movk	x14, #0xff84, lsl #16
   96324:	b9020891 	str	w17, [x4, #520]
   96328:	d282328d 	mov	x13, #0x1194                	// #4500
   9632c:	f2bff08d 	movk	x13, #0xff84, lsl #16
   96330:	b9000071 	str	w17, [x3]
   96334:	d282528c 	mov	x12, #0x1294                	// #4756
   96338:	f2bff08c 	movk	x12, #0xff84, lsl #16
   9633c:	b9028c11 	str	w17, [x0, #652]
   96340:	d282728b 	mov	x11, #0x1394                	// #5012
   96344:	f2bff08b 	movk	x11, #0xff84, lsl #16
   96348:	b9000c31 	str	w17, [x1, #12]
   9634c:	d282330a 	mov	x10, #0x1198                	// #4504
   96350:	f2bff08a 	movk	x10, #0xff84, lsl #16
   96354:	b9000211 	str	w17, [x16]
   96358:	d2825309 	mov	x9, #0x1298                	// #4760
   9635c:	f2bff089 	movk	x9, #0xff84, lsl #16
   96360:	b90001f1 	str	w17, [x15]
   96364:	d2823387 	mov	x7, #0x119c                	// #4508
   96368:	f2bff087 	movk	x7, #0xff84, lsl #16
   9636c:	b90001d1 	str	w17, [x14]
   96370:	52941402 	mov	w2, #0xa0a0                	// #41120
   96374:	72b41402 	movk	w2, #0xa0a0, lsl #16
   96378:	b90001b1 	str	w17, [x13]
   9637c:	910e0084 	add	x4, x4, #0x380
   96380:	b9000191 	str	w17, [x12]
   96384:	91100000 	add	x0, x0, #0x400
   96388:	3200c3e1 	mov	w1, #0x1010101             	// #16843009
   9638c:	b9000171 	str	w17, [x11]
   96390:	b9000151 	str	w17, [x10]
   96394:	b9000131 	str	w17, [x9]
   96398:	b9011651 	str	w17, [x18, #276]
   9639c:	b90000f1 	str	w17, [x7]
   963a0:	b90114d1 	str	w17, [x6, #276]
   963a4:	b90114b1 	str	w17, [x5, #276]
   963a8:	b9000002 	str	w2, [x0]
   963ac:	91008000 	add	x0, x0, #0x20
   963b0:	b903e001 	str	w1, [x0, #992]
   963b4:	b81e4002 	stur	w2, [x0, #-28]
   963b8:	b903e401 	str	w1, [x0, #996]
   963bc:	b81e8002 	stur	w2, [x0, #-24]
   963c0:	b903e801 	str	w1, [x0, #1000]
   963c4:	b81ec002 	stur	w2, [x0, #-20]
   963c8:	b903ec01 	str	w1, [x0, #1004]
   963cc:	b81f0002 	stur	w2, [x0, #-16]
   963d0:	b903f001 	str	w1, [x0, #1008]
   963d4:	b81f4002 	stur	w2, [x0, #-12]
   963d8:	b903f401 	str	w1, [x0, #1012]
   963dc:	b81f8002 	stur	w2, [x0, #-8]
   963e0:	b903f801 	str	w1, [x0, #1016]
   963e4:	b81fc002 	stur	w2, [x0, #-4]
   963e8:	b903fc01 	str	w1, [x0, #1020]
   963ec:	eb04001f 	cmp	x0, x4
   963f0:	54fffdc1 	b.ne	963a8 <CInterruptSystem::Initialize()+0x268>  // b.any
   963f4:	d283801e 	mov	x30, #0x1c00                	// #7168
   963f8:	f2bff09e 	movk	x30, #0xff84, lsl #16
   963fc:	d2838091 	mov	x17, #0x1c04                	// #7172
   96400:	f2bff091 	movk	x17, #0xff84, lsl #16
   96404:	d2838112 	mov	x18, #0x1c08                	// #7176
   96408:	f2bff092 	movk	x18, #0xff84, lsl #16
   9640c:	b90003df 	str	wzr, [x30]
   96410:	d2838185 	mov	x5, #0x1c0c                	// #7180
   96414:	f2bff085 	movk	x5, #0xff84, lsl #16
   96418:	b900023f 	str	wzr, [x17]
   9641c:	d2838210 	mov	x16, #0x1c10                	// #7184
   96420:	f2bff090 	movk	x16, #0xff84, lsl #16
   96424:	b900025f 	str	wzr, [x18]
   96428:	d283828f 	mov	x15, #0x1c14                	// #7188
   9642c:	f2bff08f 	movk	x15, #0xff84, lsl #16
   96430:	b90000bf 	str	wzr, [x5]
   96434:	b900021f 	str	wzr, [x16]
   96438:	d283848e 	mov	x14, #0x1c24                	// #7204
   9643c:	f2bff08e 	movk	x14, #0xff84, lsl #16
   96440:	b90001ff 	str	wzr, [x15]
   96444:	d283850d 	mov	x13, #0x1c28                	// #7208
   96448:	f2bff08d 	movk	x13, #0xff84, lsl #16
   9644c:	b900163f 	str	wzr, [x17, #20]
   96450:	d283858c 	mov	x12, #0x1c2c                	// #7212
   96454:	f2bff08c 	movk	x12, #0xff84, lsl #16
   96458:	b9001fdf 	str	wzr, [x30, #28]
   9645c:	d2838608 	mov	x8, #0x1c30                	// #7216
   96460:	f2bff088 	movk	x8, #0xff84, lsl #16
   96464:	b9001a5f 	str	wzr, [x18, #24]
   96468:	d283868b 	mov	x11, #0x1c34                	// #7220
   9646c:	f2bff08b 	movk	x11, #0xff84, lsl #16
   96470:	b90001df 	str	wzr, [x14]
   96474:	d2838706 	mov	x6, #0x1c38                	// #7224
   96478:	f2bff086 	movk	x6, #0xff84, lsl #16
   9647c:	b90001bf 	str	wzr, [x13]
   96480:	52800020 	mov	w0, #0x1                   	// #1
   96484:	d282000a 	mov	x10, #0x1000                	// #4096
   96488:	f2bff08a 	movk	x10, #0xff84, lsl #16
   9648c:	b900019f 	str	wzr, [x12]
   96490:	52801e09 	mov	w9, #0xf0                  	// #240
   96494:	b900011f 	str	wzr, [x8]
   96498:	b900017f 	str	wzr, [x11]
   9649c:	b90000df 	str	wzr, [x6]
   964a0:	b90030bf 	str	wzr, [x5, #48]
   964a4:	b9000140 	str	w0, [x10]
   964a8:	b90407c9 	str	w9, [x30, #1028]
   964ac:	b903fa40 	str	w0, [x18, #1016]
   964b0:	d50342ff 	msr	daifclr, #0x2
   964b4:	f84107fe 	ldr	x30, [sp], #16
   964b8:	d65f03c0 	ret
   964bc:	d503201f 	nop

00000000000964c0 <CInterruptSystem::DisconnectFIQ()>:
   964c0:	90000046 	adrp	x6, 9e000 <font_data+0x1558>
   964c4:	911900c6 	add	x6, x6, #0x640
   964c8:	f81f0ffe 	str	x30, [sp, #-16]!
   964cc:	f94000c0 	ldr	x0, [x6]
   964d0:	b40001c0 	cbz	x0, 96508 <CInterruptSystem::DisconnectFIQ()+0x48>
   964d4:	d2801a83 	mov	x3, #0xd4                  	// #212
   964d8:	528928c4 	mov	w4, #0x4946                	// #18758
   964dc:	72aa6a24 	movk	w4, #0x5351, lsl #16
   964e0:	b9400065 	ldr	w5, [x3]
   964e4:	6b0400bf 	cmp	w5, w4
   964e8:	54000080 	b.eq	964f8 <CInterruptSystem::DisconnectFIQ()+0x38>  // b.none
   964ec:	f84107fe 	ldr	x30, [sp], #16
   964f0:	a9007cdf 	stp	xzr, xzr, [x6]
   964f4:	d65f03c0 	ret
   964f8:	97fffeea 	bl	960a0 <CInterruptSystem::DisableFIQ() [clone .part.5]>
   964fc:	f84107fe 	ldr	x30, [sp], #16
   96500:	a9007cdf 	stp	xzr, xzr, [x6]
   96504:	d65f03c0 	ret
   96508:	d0000022 	adrp	x2, 9c000 <vtable for CSerialDevice>
   9650c:	d0000021 	adrp	x1, 9c000 <vtable for CSerialDevice>
   96510:	911e6040 	add	x0, x2, #0x798
   96514:	911e0021 	add	x1, x1, #0x780
   96518:	52801a82 	mov	w2, #0xd4                  	// #212
   9651c:	97ffcb95 	bl	89370 <assertion_failed>

0000000000096520 <CInterruptSystem::EnableIRQ(unsigned int)>:
   96520:	7103fc1f 	cmp	w0, #0xff
   96524:	54000128 	b.hi	96548 <CInterruptSystem::EnableIRQ(unsigned int)+0x28>  // b.pmore
   96528:	52808803 	mov	w3, #0x440                 	// #1088
   9652c:	72a7fc23 	movk	w3, #0x3fe1, lsl #16
   96530:	0b401464 	add	w4, w3, w0, lsr #5
   96534:	52800022 	mov	w2, #0x1                   	// #1
   96538:	1ac02045 	lsl	w5, w2, w0
   9653c:	531e7486 	lsl	w6, w4, #2
   96540:	b90000c5 	str	w5, [x6]
   96544:	d65f03c0 	ret
   96548:	d0000021 	adrp	x1, 9c000 <vtable for CSerialDevice>
   9654c:	d0000020 	adrp	x0, 9c000 <vtable for CSerialDevice>
   96550:	f81f0ffe 	str	x30, [sp, #-16]!
   96554:	911e0021 	add	x1, x1, #0x780
   96558:	911ec000 	add	x0, x0, #0x7b0
   9655c:	52801bc2 	mov	w2, #0xde                  	// #222
   96560:	97ffcb84 	bl	89370 <assertion_failed>
   96564:	d503201f 	nop
   96568:	d503201f 	nop
   9656c:	d503201f 	nop

0000000000096570 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   96570:	7103fc3f 	cmp	w1, #0xff
   96574:	f81f0ffe 	str	x30, [sp, #-16]!
   96578:	54000148 	b.hi	965a0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x30>  // b.pmore
   9657c:	2a0103e4 	mov	w4, w1
   96580:	f8647805 	ldr	x5, [x0, x4, lsl #3]
   96584:	8b040c06 	add	x6, x0, x4, lsl #3
   96588:	b5000185 	cbnz	x5, 965b8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x48>
   9658c:	f8247802 	str	x2, [x0, x4, lsl #3]
   96590:	2a0103e0 	mov	w0, w1
   96594:	f84107fe 	ldr	x30, [sp], #16
   96598:	f90400c3 	str	x3, [x6, #2048]
   9659c:	17ffffe1 	b	96520 <CInterruptSystem::EnableIRQ(unsigned int)>
   965a0:	d0000021 	adrp	x1, 9c000 <vtable for CSerialDevice>
   965a4:	d0000020 	adrp	x0, 9c000 <vtable for CSerialDevice>
   965a8:	911e0021 	add	x1, x1, #0x780
   965ac:	911ec000 	add	x0, x0, #0x7b0
   965b0:	52801642 	mov	w2, #0xb2                  	// #178
   965b4:	97ffcb6f 	bl	89370 <assertion_failed>
   965b8:	d0000022 	adrp	x2, 9c000 <vtable for CSerialDevice>
   965bc:	d0000023 	adrp	x3, 9c000 <vtable for CSerialDevice>
   965c0:	911e0041 	add	x1, x2, #0x780
   965c4:	911f2060 	add	x0, x3, #0x7c8
   965c8:	52801662 	mov	w2, #0xb3                  	// #179
   965cc:	97ffcb69 	bl	89370 <assertion_failed>

00000000000965d0 <CInterruptSystem::DisableIRQ(unsigned int)>:
   965d0:	7103fc1f 	cmp	w0, #0xff
   965d4:	54000128 	b.hi	965f8 <CInterruptSystem::DisableIRQ(unsigned int)+0x28>  // b.pmore
   965d8:	52808c03 	mov	w3, #0x460                 	// #1120
   965dc:	72a7fc23 	movk	w3, #0x3fe1, lsl #16
   965e0:	0b401464 	add	w4, w3, w0, lsr #5
   965e4:	52800022 	mov	w2, #0x1                   	// #1
   965e8:	1ac02045 	lsl	w5, w2, w0
   965ec:	531e7486 	lsl	w6, w4, #2
   965f0:	b90000c5 	str	w5, [x6]
   965f4:	d65f03c0 	ret
   965f8:	d0000021 	adrp	x1, 9c000 <vtable for CSerialDevice>
   965fc:	d0000020 	adrp	x0, 9c000 <vtable for CSerialDevice>
   96600:	f81f0ffe 	str	x30, [sp, #-16]!
   96604:	911e0021 	add	x1, x1, #0x780
   96608:	911ec000 	add	x0, x0, #0x7b0
   9660c:	52801ca2 	mov	w2, #0xe5                  	// #229
   96610:	97ffcb58 	bl	89370 <assertion_failed>
   96614:	d503201f 	nop
   96618:	d503201f 	nop
   9661c:	d503201f 	nop

0000000000096620 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   96620:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   96624:	7103fc3f 	cmp	w1, #0xff
   96628:	a9017bf5 	stp	x21, x30, [sp, #16]
   9662c:	540001a8 	b.hi	96660 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x40>  // b.pmore
   96630:	2a0103f4 	mov	w20, w1
   96634:	aa0003f3 	mov	x19, x0
   96638:	f8747802 	ldr	x2, [x0, x20, lsl #3]
   9663c:	8b140c15 	add	x21, x0, x20, lsl #3
   96640:	b40001c2 	cbz	x2, 96678 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x58>
   96644:	2a0103e0 	mov	w0, w1
   96648:	97ffffe2 	bl	965d0 <CInterruptSystem::DisableIRQ(unsigned int)>
   9664c:	f8347a7f 	str	xzr, [x19, x20, lsl #3]
   96650:	f90402bf 	str	xzr, [x21, #2048]
   96654:	a9417bf5 	ldp	x21, x30, [sp, #16]
   96658:	a8c253f3 	ldp	x19, x20, [sp], #32
   9665c:	d65f03c0 	ret
   96660:	d0000021 	adrp	x1, 9c000 <vtable for CSerialDevice>
   96664:	d0000020 	adrp	x0, 9c000 <vtable for CSerialDevice>
   96668:	911e0021 	add	x1, x1, #0x780
   9666c:	911ec000 	add	x0, x0, #0x7b0
   96670:	528017a2 	mov	w2, #0xbd                  	// #189
   96674:	97ffcb3f 	bl	89370 <assertion_failed>
   96678:	d0000023 	adrp	x3, 9c000 <vtable for CSerialDevice>
   9667c:	d0000024 	adrp	x4, 9c000 <vtable for CSerialDevice>
   96680:	911e0061 	add	x1, x3, #0x780
   96684:	911fa080 	add	x0, x4, #0x7e8
   96688:	528017c2 	mov	w2, #0xbe                  	// #190
   9668c:	97ffcb39 	bl	89370 <assertion_failed>

0000000000096690 <CInterruptSystem::EnableFIQ(unsigned int)>:
   96690:	d2801a82 	mov	x2, #0xd4                  	// #212
   96694:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   96698:	2a0003f3 	mov	w19, w0
   9669c:	528928c1 	mov	w1, #0x4946                	// #18758
   966a0:	72aa6a21 	movk	w1, #0x5351, lsl #16
   966a4:	b9400040 	ldr	w0, [x2]
   966a8:	6b01001f 	cmp	w0, w1
   966ac:	54000100 	b.eq	966cc <CInterruptSystem::EnableFIQ(unsigned int)+0x3c>  // b.none
   966b0:	97ffd594 	bl	8bd00 <CLogger::Get()>
   966b4:	d0000023 	adrp	x3, 9c000 <vtable for CSerialDevice>
   966b8:	d0000024 	adrp	x4, 9c000 <vtable for CSerialDevice>
   966bc:	91202063 	add	x3, x3, #0x808
   966c0:	9120c081 	add	x1, x4, #0x830
   966c4:	52800002 	mov	w2, #0x0                   	// #0
   966c8:	97ffd4ca 	bl	8b9f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   966cc:	71003e7f 	cmp	w19, #0xf
   966d0:	54000189 	b.ls	96700 <CInterruptSystem::EnableFIQ(unsigned int)+0x70>  // b.plast
   966d4:	7103fe7f 	cmp	w19, #0xff
   966d8:	54000208 	b.hi	96718 <CInterruptSystem::EnableFIQ(unsigned int)+0x88>  // b.pmore
   966dc:	90000049 	adrp	x9, 9e000 <font_data+0x1558>
   966e0:	9119012a 	add	x10, x9, #0x640
   966e4:	5280000b 	mov	w11, #0x0                   	// #0
   966e8:	b9001153 	str	w19, [x10, #16]
   966ec:	aa0b03e0 	mov	x0, x11
   966f0:	aa1303e1 	mov	x1, x19
   966f4:	d4000003 	smc	#0x0
   966f8:	a8c17bf3 	ldp	x19, x30, [sp], #16
   966fc:	d65f03c0 	ret
   96700:	d0000025 	adrp	x5, 9c000 <vtable for CSerialDevice>
   96704:	d0000026 	adrp	x6, 9c000 <vtable for CSerialDevice>
   96708:	911e00a1 	add	x1, x5, #0x780
   9670c:	9120e0c0 	add	x0, x6, #0x838
   96710:	52801e82 	mov	w2, #0xf4                  	// #244
   96714:	97ffcb17 	bl	89370 <assertion_failed>
   96718:	d0000027 	adrp	x7, 9c000 <vtable for CSerialDevice>
   9671c:	d0000028 	adrp	x8, 9c000 <vtable for CSerialDevice>
   96720:	911e00e1 	add	x1, x7, #0x780
   96724:	91212100 	add	x0, x8, #0x848
   96728:	52801ea2 	mov	w2, #0xf5                  	// #245
   9672c:	97ffcb11 	bl	89370 <assertion_failed>

0000000000096730 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   96730:	7104003f 	cmp	w1, #0x100
   96734:	f81f0ffe 	str	x30, [sp, #-16]!
   96738:	54000148 	b.hi	96760 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x30>  // b.pmore
   9673c:	b40001e2 	cbz	x2, 96778 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x48>
   96740:	90000044 	adrp	x4, 9e000 <font_data+0x1558>
   96744:	91190085 	add	x5, x4, #0x640
   96748:	f94000a6 	ldr	x6, [x5]
   9674c:	b5000226 	cbnz	x6, 96790 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x60>
   96750:	2a0103e0 	mov	w0, w1
   96754:	f84107fe 	ldr	x30, [sp], #16
   96758:	a9000ca2 	stp	x2, x3, [x5]
   9675c:	17ffffcd 	b	96690 <CInterruptSystem::EnableFIQ(unsigned int)>
   96760:	d0000021 	adrp	x1, 9c000 <vtable for CSerialDevice>
   96764:	d0000020 	adrp	x0, 9c000 <vtable for CSerialDevice>
   96768:	911e0021 	add	x1, x1, #0x780
   9676c:	91218000 	add	x0, x0, #0x860
   96770:	52801902 	mov	w2, #0xc8                  	// #200
   96774:	97ffcaff 	bl	89370 <assertion_failed>
   96778:	d0000022 	adrp	x2, 9c000 <vtable for CSerialDevice>
   9677c:	d0000023 	adrp	x3, 9c000 <vtable for CSerialDevice>
   96780:	911e0041 	add	x1, x2, #0x780
   96784:	911e8060 	add	x0, x3, #0x7a0
   96788:	52801922 	mov	w2, #0xc9                  	// #201
   9678c:	97ffcaf9 	bl	89370 <assertion_failed>
   96790:	d0000027 	adrp	x7, 9c000 <vtable for CSerialDevice>
   96794:	d0000028 	adrp	x8, 9c000 <vtable for CSerialDevice>
   96798:	911e00e1 	add	x1, x7, #0x780
   9679c:	9121e100 	add	x0, x8, #0x878
   967a0:	52801942 	mov	w2, #0xca                  	// #202
   967a4:	97ffcaf3 	bl	89370 <assertion_failed>
   967a8:	d503201f 	nop
   967ac:	d503201f 	nop

00000000000967b0 <CInterruptSystem::DisableFIQ()>:
   967b0:	d2801a81 	mov	x1, #0xd4                  	// #212
   967b4:	528928c0 	mov	w0, #0x4946                	// #18758
   967b8:	72aa6a20 	movk	w0, #0x5351, lsl #16
   967bc:	b9400022 	ldr	w2, [x1]
   967c0:	6b00005f 	cmp	w2, w0
   967c4:	54000041 	b.ne	967cc <CInterruptSystem::DisableFIQ()+0x1c>  // b.any
   967c8:	17fffe36 	b	960a0 <CInterruptSystem::DisableFIQ() [clone .part.5]>
   967cc:	d65f03c0 	ret

00000000000967d0 <CInterruptSystem::Get()>:
   967d0:	f0016e60 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   967d4:	f941bc00 	ldr	x0, [x0, #888]
   967d8:	b4000040 	cbz	x0, 967e0 <CInterruptSystem::Get()+0x10>
   967dc:	d65f03c0 	ret
   967e0:	d0000022 	adrp	x2, 9c000 <vtable for CSerialDevice>
   967e4:	d0000021 	adrp	x1, 9c000 <vtable for CSerialDevice>
   967e8:	f81f0ffe 	str	x30, [sp, #-16]!
   967ec:	91100040 	add	x0, x2, #0x400
   967f0:	911e0021 	add	x1, x1, #0x780
   967f4:	528021e2 	mov	w2, #0x10f                 	// #271
   967f8:	97ffcade 	bl	89370 <assertion_failed>
   967fc:	d503201f 	nop

0000000000096800 <CInterruptSystem::CallIRQHandler(unsigned int)>:
   96800:	7103fc3f 	cmp	w1, #0xff
   96804:	f81f0ffe 	str	x30, [sp, #-16]!
   96808:	540001e8 	b.hi	96844 <CInterruptSystem::CallIRQHandler(unsigned int)+0x44>  // b.pmore
   9680c:	2a0103e2 	mov	w2, w1
   96810:	f8627803 	ldr	x3, [x0, x2, lsl #3]
   96814:	8b020c04 	add	x4, x0, x2, lsl #3
   96818:	b40000c3 	cbz	x3, 96830 <CInterruptSystem::CallIRQHandler(unsigned int)+0x30>
   9681c:	f9440080 	ldr	x0, [x4, #2048]
   96820:	d63f0060 	blr	x3
   96824:	f84107fe 	ldr	x30, [sp], #16
   96828:	52800020 	mov	w0, #0x1                   	// #1
   9682c:	d65f03c0 	ret
   96830:	2a0103e0 	mov	w0, w1
   96834:	97ffff67 	bl	965d0 <CInterruptSystem::DisableIRQ(unsigned int)>
   96838:	52800000 	mov	w0, #0x0                   	// #0
   9683c:	f84107fe 	ldr	x30, [sp], #16
   96840:	d65f03c0 	ret
   96844:	d0000021 	adrp	x1, 9c000 <vtable for CSerialDevice>
   96848:	d0000020 	adrp	x0, 9c000 <vtable for CSerialDevice>
   9684c:	911e0021 	add	x1, x1, #0x780
   96850:	911ec000 	add	x0, x0, #0x7b0
   96854:	528022a2 	mov	w2, #0x115                 	// #277
   96858:	97ffcac6 	bl	89370 <assertion_failed>
   9685c:	d503201f 	nop

0000000000096860 <CInterruptSystem::InterruptHandler()>:
   96860:	d2840180 	mov	x0, #0x200c                	// #8204
   96864:	f2bff080 	movk	x0, #0xff84, lsl #16
   96868:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   9686c:	b9400013 	ldr	w19, [x0]
   96870:	7218067f 	tst	w19, #0x300
   96874:	12002661 	and	w1, w19, #0x3ff
   96878:	54000181 	b.ne	968a8 <CInterruptSystem::InterruptHandler()+0x48>  // b.any
   9687c:	721c167f 	tst	w19, #0x3f0
   96880:	540000a0 	b.eq	96894 <CInterruptSystem::InterruptHandler()+0x34>  // b.none
   96884:	f0016e63 	adrp	x3, 2e65000 <temp_gold+0xf421a0>
   96888:	f941bc60 	ldr	x0, [x3, #888]
   9688c:	b40001e0 	cbz	x0, 968c8 <CInterruptSystem::InterruptHandler()+0x68>
   96890:	97ffffdc 	bl	96800 <CInterruptSystem::CallIRQHandler(unsigned int)>
   96894:	d2840206 	mov	x6, #0x2010                	// #8208
   96898:	f2bff086 	movk	x6, #0xff84, lsl #16
   9689c:	b90000d3 	str	w19, [x6]
   968a0:	a8c17bf3 	ldp	x19, x30, [sp], #16
   968a4:	d65f03c0 	ret
   968a8:	710fec3f 	cmp	w1, #0x3fb
   968ac:	54ffffa8 	b.hi	968a0 <CInterruptSystem::InterruptHandler()+0x40>  // b.pmore
   968b0:	d0000022 	adrp	x2, 9c000 <vtable for CSerialDevice>
   968b4:	d0000021 	adrp	x1, 9c000 <vtable for CSerialDevice>
   968b8:	91224040 	add	x0, x2, #0x890
   968bc:	911e0021 	add	x1, x1, #0x780
   968c0:	52802842 	mov	w2, #0x142                 	// #322
   968c4:	97ffcaab 	bl	89370 <assertion_failed>
   968c8:	d0000024 	adrp	x4, 9c000 <vtable for CSerialDevice>
   968cc:	d0000025 	adrp	x5, 9c000 <vtable for CSerialDevice>
   968d0:	911e0081 	add	x1, x4, #0x780
   968d4:	911000a0 	add	x0, x5, #0x400
   968d8:	52802602 	mov	w2, #0x130                 	// #304
   968dc:	97ffcaa5 	bl	89370 <assertion_failed>

00000000000968e0 <InterruptHandler>:
   968e0:	17ffffe0 	b	96860 <CInterruptSystem::InterruptHandler()>
   968e4:	d503201f 	nop
   968e8:	d503201f 	nop
   968ec:	d503201f 	nop

00000000000968f0 <CInterruptSystem::InitializeSecondary()>:
   968f0:	52801e03 	mov	w3, #0xf0                  	// #240
   968f4:	d2840082 	mov	x2, #0x2004                	// #8196
   968f8:	f2bff082 	movk	x2, #0xff84, lsl #16
   968fc:	52800021 	mov	w1, #0x1                   	// #1
   96900:	d2840000 	mov	x0, #0x2000                	// #8192
   96904:	f2bff080 	movk	x0, #0xff84, lsl #16
   96908:	b9000043 	str	w3, [x2]
   9690c:	b9000001 	str	w1, [x0]
   96910:	d65f03c0 	ret
   96914:	d503201f 	nop
   96918:	d503201f 	nop
   9691c:	d503201f 	nop

0000000000096920 <CInterruptSystem::SendIPI(unsigned int, unsigned int)>:
   96920:	71001c1f 	cmp	w0, #0x7
   96924:	f81f0ffe 	str	x30, [sp, #-16]!
   96928:	54000188 	b.hi	96958 <CInterruptSystem::SendIPI(unsigned int, unsigned int)+0x38>  // b.pmore
   9692c:	71003c3f 	cmp	w1, #0xf
   96930:	54000208 	b.hi	96970 <CInterruptSystem::SendIPI(unsigned int, unsigned int)+0x50>  // b.pmore
   96934:	11004004 	add	w4, w0, #0x10
   96938:	52800025 	mov	w5, #0x1                   	// #1
   9693c:	f84107fe 	ldr	x30, [sp], #16
   96940:	1ac420a6 	lsl	w6, w5, w4
   96944:	d283e007 	mov	x7, #0x1f00                	// #7936
   96948:	f2bff087 	movk	x7, #0xff84, lsl #16
   9694c:	2a0100c8 	orr	w8, w6, w1
   96950:	b90000e8 	str	w8, [x7]
   96954:	d65f03c0 	ret
   96958:	d0000021 	adrp	x1, 9c000 <vtable for CSerialDevice>
   9695c:	d0000020 	adrp	x0, 9c000 <vtable for CSerialDevice>
   96960:	911e0021 	add	x1, x1, #0x780
   96964:	91228000 	add	x0, x0, #0x8a0
   96968:	52802aa2 	mov	w2, #0x155                 	// #341
   9696c:	97ffca81 	bl	89370 <assertion_failed>
   96970:	d0000022 	adrp	x2, 9c000 <vtable for CSerialDevice>
   96974:	d0000023 	adrp	x3, 9c000 <vtable for CSerialDevice>
   96978:	911e0041 	add	x1, x2, #0x780
   9697c:	9122c060 	add	x0, x3, #0x8b0
   96980:	52802ac2 	mov	w2, #0x156                 	// #342
   96984:	97ffca7b 	bl	89370 <assertion_failed>
   96988:	d503201f 	nop
   9698c:	d503201f 	nop

0000000000096990 <CInterruptSystem::CallSecureMonitor(unsigned int, unsigned int)>:
   96990:	2a0003e2 	mov	w2, w0
   96994:	2a0103e3 	mov	w3, w1
   96998:	aa0203e0 	mov	x0, x2
   9699c:	aa0303e1 	mov	x1, x3
   969a0:	d4000003 	smc	#0x0
   969a4:	d65f03c0 	ret
   969a8:	d503201f 	nop
   969ac:	d503201f 	nop

00000000000969b0 <CInterruptSystem::SecureMonitorHandler(unsigned int, unsigned int)>:
   969b0:	121e7423 	and	w3, w1, #0xfffffffc
   969b4:	53057c22 	lsr	w2, w1, #5
   969b8:	531d0424 	ubfiz	w4, w1, #3, #2
   969bc:	52800026 	mov	w6, #0x1                   	// #1
   969c0:	52801fe5 	mov	w5, #0xff                  	// #255
   969c4:	515ef86b 	sub	w11, w3, #0x7be, lsl #12
   969c8:	531e744a 	lsl	w10, w2, #2
   969cc:	5130016b 	sub	w11, w11, #0xc00
   969d0:	1ac120c1 	lsl	w1, w6, w1
   969d4:	1ac420a7 	lsl	w7, w5, w4
   969d8:	35000300 	cbnz	w0, 96a38 <CInterruptSystem::SecureMonitorHandler(unsigned int, unsigned int)+0x88>
   969dc:	d282000c 	mov	x12, #0x1000                	// #4096
   969e0:	f2bff08c 	movk	x12, #0xff84, lsl #16
   969e4:	52800069 	mov	w9, #0x3                   	// #3
   969e8:	515ef945 	sub	w5, w10, #0x7be, lsl #12
   969ec:	d2840000 	mov	x0, #0x2000                	// #8192
   969f0:	f2bff080 	movk	x0, #0xff84, lsl #16
   969f4:	52800166 	mov	w6, #0xb                   	// #11
   969f8:	513e00a5 	sub	w5, w5, #0xf80
   969fc:	b9000189 	str	w9, [x12]
   96a00:	5280080d 	mov	w13, #0x40                  	// #64
   96a04:	515ef94a 	sub	w10, w10, #0x7be, lsl #12
   96a08:	b9000006 	str	w6, [x0]
   96a0c:	1ac421a4 	lsl	w4, w13, w4
   96a10:	513c014a 	sub	w10, w10, #0xf00
   96a14:	b94000a8 	ldr	w8, [x5]
   96a18:	0a21010e 	bic	w14, w8, w1
   96a1c:	b90000ae 	str	w14, [x5]
   96a20:	b940016f 	ldr	w15, [x11]
   96a24:	0a2701e7 	bic	w7, w15, w7
   96a28:	2a0400f0 	orr	w16, w7, w4
   96a2c:	b9000170 	str	w16, [x11]
   96a30:	b9000141 	str	w1, [x10]
   96a34:	d65f03c0 	ret
   96a38:	7100041f 	cmp	w0, #0x1
   96a3c:	54ffffc1 	b.ne	96a34 <CInterruptSystem::SecureMonitorHandler(unsigned int, unsigned int)+0x84>  // b.any
   96a40:	515ef949 	sub	w9, w10, #0x7be, lsl #12
   96a44:	52801400 	mov	w0, #0xa0                  	// #160
   96a48:	513a0129 	sub	w9, w9, #0xe80
   96a4c:	1ac4200c 	lsl	w12, w0, w4
   96a50:	515ef94d 	sub	w13, w10, #0x7be, lsl #12
   96a54:	5280004f 	mov	w15, #0x2                   	// #2
   96a58:	b9000121 	str	w1, [x9]
   96a5c:	513e01ad 	sub	w13, w13, #0xf80
   96a60:	d2840008 	mov	x8, #0x2000                	// #8192
   96a64:	f2bff088 	movk	x8, #0xff84, lsl #16
   96a68:	b9400170 	ldr	w16, [x11]
   96a6c:	d282000e 	mov	x14, #0x1000                	// #4096
   96a70:	f2bff08e 	movk	x14, #0xff84, lsl #16
   96a74:	0a270211 	bic	w17, w16, w7
   96a78:	2a0c0232 	orr	w18, w17, w12
   96a7c:	b9000172 	str	w18, [x11]
   96a80:	b94001a2 	ldr	w2, [x13]
   96a84:	2a020023 	orr	w3, w1, w2
   96a88:	b90001a3 	str	w3, [x13]
   96a8c:	b900010f 	str	w15, [x8]
   96a90:	b90001cf 	str	w15, [x14]
   96a94:	d65f03c0 	ret
   96a98:	d503201f 	nop
   96a9c:	d503201f 	nop

0000000000096aa0 <SecureMonitorHandler>:
   96aa0:	17ffffc4 	b	969b0 <CInterruptSystem::SecureMonitorHandler(unsigned int, unsigned int)>
	...

0000000000096ab0 <CDeviceTreeBlob::CDeviceTreeBlob(void const*)>:
   96ab0:	f900001f 	str	xzr, [x0]
   96ab4:	b4000221 	cbz	x1, 96af8 <CDeviceTreeBlob::CDeviceTreeBlob(void const*)+0x48>
   96ab8:	b9400023 	ldr	w3, [x1]
   96abc:	5281ba02 	mov	w2, #0xdd0                 	// #3536
   96ac0:	72bdbfc2 	movk	w2, #0xedfe, lsl #16
   96ac4:	6b02007f 	cmp	w3, w2
   96ac8:	54000181 	b.ne	96af8 <CDeviceTreeBlob::CDeviceTreeBlob(void const*)+0x48>  // b.any
   96acc:	b9401824 	ldr	w4, [x1, #24]
   96ad0:	5ac00885 	rev	w5, w4
   96ad4:	710040bf 	cmp	w5, #0x10
   96ad8:	54000101 	b.ne	96af8 <CDeviceTreeBlob::CDeviceTreeBlob(void const*)+0x48>  // b.any
   96adc:	b9400427 	ldr	w7, [x1, #4]
   96ae0:	529ffb06 	mov	w6, #0xffd8                	// #65496
   96ae4:	72a001e6 	movk	w6, #0xf, lsl #16
   96ae8:	5ac008e8 	rev	w8, w7
   96aec:	5100a109 	sub	w9, w8, #0x28
   96af0:	6b06013f 	cmp	w9, w6
   96af4:	54000049 	b.ls	96afc <CDeviceTreeBlob::CDeviceTreeBlob(void const*)+0x4c>  // b.plast
   96af8:	d65f03c0 	ret
   96afc:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   96b00:	aa0003f4 	mov	x20, x0
   96b04:	aa0103f3 	mov	x19, x1
   96b08:	a9017bf5 	stp	x21, x30, [sp, #16]
   96b0c:	2a0803f5 	mov	w21, w8
   96b10:	aa1503e0 	mov	x0, x21
   96b14:	97fff7cf 	bl	94a50 <operator new[](unsigned long)>
   96b18:	aa1503e2 	mov	x2, x21
   96b1c:	aa1303e1 	mov	x1, x19
   96b20:	a9417bf5 	ldp	x21, x30, [sp, #16]
   96b24:	f9000280 	str	x0, [x20]
   96b28:	a8c253f3 	ldp	x19, x20, [sp], #32
   96b2c:	17fff629 	b	943d0 <memcpy>

0000000000096b30 <CDeviceTreeBlob::~CDeviceTreeBlob()>:
   96b30:	f9400000 	ldr	x0, [x0]
   96b34:	b4000040 	cbz	x0, 96b3c <CDeviceTreeBlob::~CDeviceTreeBlob()+0xc>
   96b38:	17fff7d6 	b	94a90 <operator delete[](void*)>
   96b3c:	d65f03c0 	ret

0000000000096b40 <CDeviceTreeBlob::FindNode(char const*, TDeviceTreeNode const*) const>:
   96b40:	d2800003 	mov	x3, #0x0                   	// #0
   96b44:	14000003 	b	96b50 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const>
   96b48:	d503201f 	nop
   96b4c:	d503201f 	nop

0000000000096b50 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const>:
   96b50:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   96b54:	910003fd 	mov	x29, sp
   96b58:	a90153f3 	stp	x19, x20, [sp, #16]
   96b5c:	a9025bf5 	stp	x21, x22, [sp, #32]
   96b60:	a90363f7 	stp	x23, x24, [sp, #48]
   96b64:	b40010e1 	cbz	x1, 96d80 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x230>
   96b68:	aa0003f7 	mov	x23, x0
   96b6c:	f9400004 	ldr	x4, [x0]
   96b70:	b40013c4 	cbz	x4, 96de8 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x298>
   96b74:	aa0103f5 	mov	x21, x1
   96b78:	aa0203f3 	mov	x19, x2
   96b7c:	aa0303f4 	mov	x20, x3
   96b80:	b4000662 	cbz	x2, 96c4c <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0xfc>
   96b84:	b9400267 	ldr	w7, [x19]
   96b88:	5ac008e9 	rev	w9, w7
   96b8c:	7100113f 	cmp	w9, #0x4
   96b90:	540000c1 	b.ne	96ba8 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x58>  // b.any
   96b94:	d503201f 	nop
   96b98:	b8404e68 	ldr	w8, [x19, #4]!
   96b9c:	5ac00909 	rev	w9, w8
   96ba0:	7100113f 	cmp	w9, #0x4
   96ba4:	54ffffa0 	b.eq	96b98 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x48>  // b.none
   96ba8:	7100053f 	cmp	w9, #0x1
   96bac:	54000ca1 	b.ne	96d40 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x1f0>  // b.any
   96bb0:	39c002aa 	ldrsb	w10, [x21]
   96bb4:	3500010a 	cbnz	w10, 96bd4 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x84>
   96bb8:	910003bf 	mov	sp, x29
   96bbc:	aa1303e0 	mov	x0, x19
   96bc0:	a94153f3 	ldp	x19, x20, [sp, #16]
   96bc4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   96bc8:	a94363f7 	ldp	x23, x24, [sp, #48]
   96bcc:	a8c57bfd 	ldp	x29, x30, [sp], #80
   96bd0:	d65f03c0 	ret
   96bd4:	528005e1 	mov	w1, #0x2f                  	// #47
   96bd8:	aa1503e0 	mov	x0, x21
   96bdc:	97fff4e3 	bl	93f68 <strchr>
   96be0:	b4000dc0 	cbz	x0, 96d98 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x248>
   96be4:	cb150016 	sub	x22, x0, x21
   96be8:	b4000e16 	cbz	x22, 96da8 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x258>
   96bec:	910042cb 	add	x11, x22, #0x10
   96bf0:	aa1503e1 	mov	x1, x21
   96bf4:	927ced6c 	and	x12, x11, #0xfffffffffffffff0
   96bf8:	aa1603e2 	mov	x2, x22
   96bfc:	cb2c63ff 	sub	sp, sp, x12
   96c00:	91001278 	add	x24, x19, #0x4
   96c04:	910003e0 	mov	x0, sp
   96c08:	97fff5f2 	bl	943d0 <memcpy>
   96c0c:	910003e1 	mov	x1, sp
   96c10:	aa1803e0 	mov	x0, x24
   96c14:	38366bff 	strb	wzr, [sp, x22]
   96c18:	97fff38a 	bl	93a40 <strcmp>
   96c1c:	350002a0 	cbnz	w0, 96c70 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x120>
   96c20:	38f66aa6 	ldrsb	w6, [x21, x22]
   96c24:	8b1602b5 	add	x21, x21, x22
   96c28:	7100bcdf 	cmp	w6, #0x2f
   96c2c:	54fffc61 	b.ne	96bb8 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x68>  // b.any
   96c30:	aa1303e2 	mov	x2, x19
   96c34:	910006a1 	add	x1, x21, #0x1
   96c38:	aa1703e0 	mov	x0, x23
   96c3c:	d2800003 	mov	x3, #0x0                   	// #0
   96c40:	97ffffc4 	bl	96b50 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const>
   96c44:	aa0003f3 	mov	x19, x0
   96c48:	17ffffdc 	b	96bb8 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x68>
   96c4c:	39c00021 	ldrsb	w1, [x1]
   96c50:	b9400883 	ldr	w3, [x4, #8]
   96c54:	7100bc3f 	cmp	w1, #0x2f
   96c58:	5ac00865 	rev	w5, w3
   96c5c:	8b050086 	add	x6, x4, x5
   96c60:	54000b41 	b.ne	96dc8 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x278>  // b.any
   96c64:	910006b5 	add	x21, x21, #0x1
   96c68:	aa0603f3 	mov	x19, x6
   96c6c:	17ffffc6 	b	96b84 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x34>
   96c70:	aa1803e0 	mov	x0, x24
   96c74:	97fff369 	bl	93a18 <strlen>
   96c78:	91001013 	add	x19, x0, #0x4
   96c7c:	927ef66d 	and	x13, x19, #0xfffffffffffffffc
   96c80:	b86d6b0e 	ldr	w14, [x24, x13]
   96c84:	8b0d0313 	add	x19, x24, x13
   96c88:	5ac009c3 	rev	w3, w14
   96c8c:	51000c6f 	sub	w15, w3, #0x3
   96c90:	710005ff 	cmp	w15, #0x1
   96c94:	540001e8 	b.hi	96cd0 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x180>  // b.pmore
   96c98:	7100107f 	cmp	w3, #0x4
   96c9c:	d2800080 	mov	x0, #0x4                   	// #4
   96ca0:	540000c0 	b.eq	96cb8 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x168>  // b.none
   96ca4:	b9400670 	ldr	w16, [x19, #4]
   96ca8:	5ac00a11 	rev	w17, w16
   96cac:	11000e32 	add	w18, w17, #0x3
   96cb0:	927e765e 	and	x30, x18, #0xfffffffc
   96cb4:	910033c0 	add	x0, x30, #0xc
   96cb8:	8b000273 	add	x19, x19, x0
   96cbc:	b9400262 	ldr	w2, [x19]
   96cc0:	5ac00843 	rev	w3, w2
   96cc4:	51000c64 	sub	w4, w3, #0x3
   96cc8:	7100049f 	cmp	w4, #0x1
   96ccc:	54fffe69 	b.ls	96c98 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x148>  // b.plast
   96cd0:	7100047f 	cmp	w3, #0x1
   96cd4:	54000281 	b.ne	96d24 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x1d4>  // b.any
   96cd8:	aa1303e2 	mov	x2, x19
   96cdc:	910123a3 	add	x3, x29, #0x48
   96ce0:	f90027bf 	str	xzr, [x29, #72]
   96ce4:	aa1503e1 	mov	x1, x21
   96ce8:	aa1703e0 	mov	x0, x23
   96cec:	97ffff99 	bl	96b50 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const>
   96cf0:	aa0003f3 	mov	x19, x0
   96cf4:	b5fff620 	cbnz	x0, 96bb8 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x68>
   96cf8:	f94027b3 	ldr	x19, [x29, #72]
   96cfc:	b4fff5f3 	cbz	x19, 96bb8 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x68>
   96d00:	b9400261 	ldr	w1, [x19]
   96d04:	5ac00823 	rev	w3, w1
   96d08:	7100047f 	cmp	w3, #0x1
   96d0c:	54fffe60 	b.eq	96cd8 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x188>  // b.none
   96d10:	14000003 	b	96d1c <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x1cc>
   96d14:	b8404e77 	ldr	w23, [x19, #4]!
   96d18:	5ac00ae3 	rev	w3, w23
   96d1c:	7100107f 	cmp	w3, #0x4
   96d20:	54ffffa0 	b.eq	96d14 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x1c4>  // b.none
   96d24:	f100029f 	cmp	x20, #0x0
   96d28:	7a421860 	ccmp	w3, #0x2, #0x0, ne  // ne = any
   96d2c:	540006e1 	b.ne	96e08 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x2b8>  // b.any
   96d30:	91001265 	add	x5, x19, #0x4
   96d34:	d2800013 	mov	x19, #0x0                   	// #0
   96d38:	f9000285 	str	x5, [x20]
   96d3c:	17ffff9f 	b	96bb8 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x68>
   96d40:	97ffd3f0 	bl	8bd00 <CLogger::Get()>
   96d44:	b9400269 	ldr	w9, [x19]
   96d48:	d0000028 	adrp	x8, 9c000 <vtable for CSerialDevice>
   96d4c:	91230101 	add	x1, x8, #0x8c0
   96d50:	91018023 	add	x3, x1, #0x60
   96d54:	52800042 	mov	w2, #0x2                   	// #2
   96d58:	d2800013 	mov	x19, #0x0                   	// #0
   96d5c:	5ac00924 	rev	w4, w9
   96d60:	97ffd324 	bl	8b9f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   96d64:	910003bf 	mov	sp, x29
   96d68:	aa1303e0 	mov	x0, x19
   96d6c:	a94153f3 	ldp	x19, x20, [sp, #16]
   96d70:	a9425bf5 	ldp	x21, x22, [sp, #32]
   96d74:	a94363f7 	ldp	x23, x24, [sp, #48]
   96d78:	a8c57bfd 	ldp	x29, x30, [sp], #80
   96d7c:	d65f03c0 	ret
   96d80:	d0000020 	adrp	x0, 9c000 <vtable for CSerialDevice>
   96d84:	91230002 	add	x2, x0, #0x8c0
   96d88:	91002041 	add	x1, x2, #0x8
   96d8c:	91008040 	add	x0, x2, #0x20
   96d90:	52801082 	mov	w2, #0x84                  	// #132
   96d94:	97ffc977 	bl	89370 <assertion_failed>
   96d98:	aa1503e0 	mov	x0, x21
   96d9c:	97fff31f 	bl	93a18 <strlen>
   96da0:	aa0003f6 	mov	x22, x0
   96da4:	17ffff91 	b	96be8 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x98>
   96da8:	97ffd3d6 	bl	8bd00 <CLogger::Get()>
   96dac:	d0000027 	adrp	x7, 9c000 <vtable for CSerialDevice>
   96db0:	912300e1 	add	x1, x7, #0x8c0
   96db4:	91020023 	add	x3, x1, #0x80
   96db8:	52800042 	mov	w2, #0x2                   	// #2
   96dbc:	d2800013 	mov	x19, #0x0                   	// #0
   96dc0:	97ffd30c 	bl	8b9f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   96dc4:	17ffff7d 	b	96bb8 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x68>
   96dc8:	97ffd3ce 	bl	8bd00 <CLogger::Get()>
   96dcc:	d000002a 	adrp	x10, 9c000 <vtable for CSerialDevice>
   96dd0:	91230141 	add	x1, x10, #0x8c0
   96dd4:	aa1503e4 	mov	x4, x21
   96dd8:	91012023 	add	x3, x1, #0x48
   96ddc:	52800042 	mov	w2, #0x2                   	// #2
   96de0:	97ffd304 	bl	8b9f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   96de4:	17ffff75 	b	96bb8 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x68>
   96de8:	97ffd3c6 	bl	8bd00 <CLogger::Get()>
   96dec:	d0000036 	adrp	x22, 9c000 <vtable for CSerialDevice>
   96df0:	912302c1 	add	x1, x22, #0x8c0
   96df4:	9100c023 	add	x3, x1, #0x30
   96df8:	52800042 	mov	w2, #0x2                   	// #2
   96dfc:	d2800013 	mov	x19, #0x0                   	// #0
   96e00:	97ffd2fc 	bl	8b9f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   96e04:	17ffff6d 	b	96bb8 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x68>
   96e08:	d2800013 	mov	x19, #0x0                   	// #0
   96e0c:	17ffff6b 	b	96bb8 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x68>

0000000000096e10 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const>:
   96e10:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   96e14:	a9017bf5 	stp	x21, x30, [sp, #16]
   96e18:	b4000921 	cbz	x1, 96f3c <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0x12c>
   96e1c:	aa0203f4 	mov	x20, x2
   96e20:	b40009a2 	cbz	x2, 96f54 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0x144>
   96e24:	f9400004 	ldr	x4, [x0]
   96e28:	aa0003f5 	mov	x21, x0
   96e2c:	b4000a04 	cbz	x4, 96f6c <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0x15c>
   96e30:	b9400025 	ldr	w5, [x1]
   96e34:	aa0103f3 	mov	x19, x1
   96e38:	5ac008a6 	rev	w6, w5
   96e3c:	710004df 	cmp	w6, #0x1
   96e40:	540005e1 	b.ne	96efc <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0xec>  // b.any
   96e44:	91001020 	add	x0, x1, #0x4
   96e48:	97fff2f4 	bl	93a18 <strlen>
   96e4c:	91001007 	add	x7, x0, #0x4
   96e50:	927ef4e8 	and	x8, x7, #0xfffffffffffffffc
   96e54:	91001109 	add	x9, x8, #0x4
   96e58:	b8696a6a 	ldr	w10, [x19, x9]
   96e5c:	8b090273 	add	x19, x19, x9
   96e60:	5ac00944 	rev	w4, w10
   96e64:	51000c8b 	sub	w11, w4, #0x3
   96e68:	7100057f 	cmp	w11, #0x1
   96e6c:	54000328 	b.hi	96ed0 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0xc0>  // b.pmore
   96e70:	7100109f 	cmp	w4, #0x4
   96e74:	d2800081 	mov	x1, #0x4                   	// #4
   96e78:	54000200 	b.eq	96eb8 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0xa8>  // b.none
   96e7c:	f94002ae 	ldr	x14, [x21]
   96e80:	aa1403e1 	mov	x1, x20
   96e84:	b9400a6c 	ldr	w12, [x19, #8]
   96e88:	b9400dcf 	ldr	w15, [x14, #12]
   96e8c:	5ac0098d 	rev	w13, w12
   96e90:	5ac009f0 	rev	w16, w15
   96e94:	8b0d0211 	add	x17, x16, x13
   96e98:	8b1101c0 	add	x0, x14, x17
   96e9c:	97fff2e9 	bl	93a40 <strcmp>
   96ea0:	34000460 	cbz	w0, 96f2c <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0x11c>
   96ea4:	b9400672 	ldr	w18, [x19, #4]
   96ea8:	5ac00a5e 	rev	w30, w18
   96eac:	11000fc0 	add	w0, w30, #0x3
   96eb0:	927e7402 	and	x2, x0, #0xfffffffc
   96eb4:	91003041 	add	x1, x2, #0xc
   96eb8:	8b010273 	add	x19, x19, x1
   96ebc:	b9400263 	ldr	w3, [x19]
   96ec0:	5ac00864 	rev	w4, w3
   96ec4:	51000c85 	sub	w5, w4, #0x3
   96ec8:	710004bf 	cmp	w5, #0x1
   96ecc:	54fffd29 	b.ls	96e70 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0x60>  // b.plast
   96ed0:	97ffd38c 	bl	8bd00 <CLogger::Get()>
   96ed4:	d0000035 	adrp	x21, 9c000 <vtable for CSerialDevice>
   96ed8:	912302a1 	add	x1, x21, #0x8c0
   96edc:	aa1403e4 	mov	x4, x20
   96ee0:	91030023 	add	x3, x1, #0xc0
   96ee4:	52800042 	mov	w2, #0x2                   	// #2
   96ee8:	97ffd2c2 	bl	8b9f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   96eec:	d2800000 	mov	x0, #0x0                   	// #0
   96ef0:	a9417bf5 	ldp	x21, x30, [sp, #16]
   96ef4:	a8c253f3 	ldp	x19, x20, [sp], #32
   96ef8:	d65f03c0 	ret
   96efc:	97ffd381 	bl	8bd00 <CLogger::Get()>
   96f00:	b9400266 	ldr	w6, [x19]
   96f04:	d0000034 	adrp	x20, 9c000 <vtable for CSerialDevice>
   96f08:	91230281 	add	x1, x20, #0x8c0
   96f0c:	91018023 	add	x3, x1, #0x60
   96f10:	52800042 	mov	w2, #0x2                   	// #2
   96f14:	5ac008c4 	rev	w4, w6
   96f18:	97ffd2b6 	bl	8b9f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   96f1c:	d2800000 	mov	x0, #0x0                   	// #0
   96f20:	a9417bf5 	ldp	x21, x30, [sp, #16]
   96f24:	a8c253f3 	ldp	x19, x20, [sp], #32
   96f28:	d65f03c0 	ret
   96f2c:	aa1303e0 	mov	x0, x19
   96f30:	a9417bf5 	ldp	x21, x30, [sp, #16]
   96f34:	a8c253f3 	ldp	x19, x20, [sp], #32
   96f38:	d65f03c0 	ret
   96f3c:	d0000020 	adrp	x0, 9c000 <vtable for CSerialDevice>
   96f40:	91230002 	add	x2, x0, #0x8c0
   96f44:	91002041 	add	x1, x2, #0x8
   96f48:	91028040 	add	x0, x2, #0xa0
   96f4c:	52802162 	mov	w2, #0x10b                 	// #267
   96f50:	97ffc908 	bl	89370 <assertion_failed>
   96f54:	d0000021 	adrp	x1, 9c000 <vtable for CSerialDevice>
   96f58:	91230023 	add	x3, x1, #0x8c0
   96f5c:	91002061 	add	x1, x3, #0x8
   96f60:	9102c060 	add	x0, x3, #0xb0
   96f64:	52802182 	mov	w2, #0x10c                 	// #268
   96f68:	97ffc902 	bl	89370 <assertion_failed>
   96f6c:	d2800000 	mov	x0, #0x0                   	// #0
   96f70:	17ffffe0 	b	96ef0 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0xe0>
   96f74:	d503201f 	nop
   96f78:	d503201f 	nop
   96f7c:	d503201f 	nop

0000000000096f80 <CDeviceTreeBlob::GetPropertyValueLength(TDeviceTreeProperty const*) const>:
   96f80:	b4000101 	cbz	x1, 96fa0 <CDeviceTreeBlob::GetPropertyValueLength(TDeviceTreeProperty const*) const+0x20>
   96f84:	f9400003 	ldr	x3, [x0]
   96f88:	b4000083 	cbz	x3, 96f98 <CDeviceTreeBlob::GetPropertyValueLength(TDeviceTreeProperty const*) const+0x18>
   96f8c:	b9400421 	ldr	w1, [x1, #4]
   96f90:	5ac00820 	rev	w0, w1
   96f94:	d65f03c0 	ret
   96f98:	d2800000 	mov	x0, #0x0                   	// #0
   96f9c:	d65f03c0 	ret
   96fa0:	d0000020 	adrp	x0, 9c000 <vtable for CSerialDevice>
   96fa4:	91230002 	add	x2, x0, #0x8c0
   96fa8:	f81f0ffe 	str	x30, [sp, #-16]!
   96fac:	91002041 	add	x1, x2, #0x8
   96fb0:	91036040 	add	x0, x2, #0xd8
   96fb4:	52802802 	mov	w2, #0x140                 	// #320
   96fb8:	97ffc8ee 	bl	89370 <assertion_failed>
   96fbc:	d503201f 	nop

0000000000096fc0 <CDeviceTreeBlob::GetPropertyValue(TDeviceTreeProperty const*) const>:
   96fc0:	b40000c1 	cbz	x1, 96fd8 <CDeviceTreeBlob::GetPropertyValue(TDeviceTreeProperty const*) const+0x18>
   96fc4:	f9400003 	ldr	x3, [x0]
   96fc8:	91003021 	add	x1, x1, #0xc
   96fcc:	f100007f 	cmp	x3, #0x0
   96fd0:	9a9f1020 	csel	x0, x1, xzr, ne  // ne = any
   96fd4:	d65f03c0 	ret
   96fd8:	d0000020 	adrp	x0, 9c000 <vtable for CSerialDevice>
   96fdc:	91230002 	add	x2, x0, #0x8c0
   96fe0:	f81f0ffe 	str	x30, [sp, #-16]!
   96fe4:	91002041 	add	x1, x2, #0x8
   96fe8:	91036040 	add	x0, x2, #0xd8
   96fec:	52802982 	mov	w2, #0x14c                 	// #332
   96ff0:	97ffc8e0 	bl	89370 <assertion_failed>
   96ff4:	d503201f 	nop
   96ff8:	d503201f 	nop
   96ffc:	d503201f 	nop

0000000000097000 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const>:
   97000:	f81e0ffe 	str	x30, [sp, #-32]!
   97004:	b40003a1 	cbz	x1, 97078 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const+0x78>
   97008:	f9400003 	ldr	x3, [x0]
   9700c:	b4000163 	cbz	x3, 97038 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const+0x38>
   97010:	b9400425 	ldr	w5, [x1, #4]
   97014:	11000444 	add	w4, w2, #0x1
   97018:	5ac008a6 	rev	w6, w5
   9701c:	eb0408df 	cmp	x6, x4, lsl #2
   97020:	54000123 	b.cc	97044 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const+0x44>  // b.lo, b.ul, b.last
   97024:	8b224821 	add	x1, x1, w2, uxtw #2
   97028:	b9400c27 	ldr	w7, [x1, #12]
   9702c:	f84207fe 	ldr	x30, [sp], #32
   97030:	5ac008e0 	rev	w0, w7
   97034:	d65f03c0 	ret
   97038:	52800000 	mov	w0, #0x0                   	// #0
   9703c:	f84207fe 	ldr	x30, [sp], #32
   97040:	d65f03c0 	ret
   97044:	f9000fe1 	str	x1, [sp, #24]
   97048:	97ffd32e 	bl	8bd00 <CLogger::Get()>
   9704c:	f9400fe8 	ldr	x8, [sp, #24]
   97050:	b000002a 	adrp	x10, 9c000 <vtable for CSerialDevice>
   97054:	91230141 	add	x1, x10, #0x8c0
   97058:	52800042 	mov	w2, #0x2                   	// #2
   9705c:	9103a023 	add	x3, x1, #0xe8
   97060:	b9400509 	ldr	w9, [x8, #4]
   97064:	5ac00924 	rev	w4, w9
   97068:	97ffd262 	bl	8b9f0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9706c:	52800000 	mov	w0, #0x0                   	// #0
   97070:	f84207fe 	ldr	x30, [sp], #32
   97074:	d65f03c0 	ret
   97078:	b0000020 	adrp	x0, 9c000 <vtable for CSerialDevice>
   9707c:	91230002 	add	x2, x0, #0x8c0
   97080:	91002041 	add	x1, x2, #0x8
   97084:	91036040 	add	x0, x2, #0xd8
   97088:	52802b22 	mov	w2, #0x159                 	// #345
   9708c:	97ffc8b9 	bl	89370 <assertion_failed>

0000000000097090 <malloc>:
   97090:	d0016e62 	adrp	x2, 2e65000 <temp_gold+0xf421a0>
   97094:	aa0003e1 	mov	x1, x0
   97098:	f9418c40 	ldr	x0, [x2, #792]
   9709c:	91006000 	add	x0, x0, #0x18
   970a0:	17fff6c8 	b	94bc0 <CHeapAllocator::Allocate(unsigned long)>
   970a4:	d503201f 	nop
   970a8:	d503201f 	nop
   970ac:	d503201f 	nop

00000000000970b0 <memalign>:
   970b0:	f101001f 	cmp	x0, #0x40
   970b4:	540000a8 	b.hi	970c8 <memalign+0x18>  // b.pmore
   970b8:	d0016e60 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   970bc:	f9418c02 	ldr	x2, [x0, #792]
   970c0:	91006040 	add	x0, x2, #0x18
   970c4:	17fff6bf 	b	94bc0 <CHeapAllocator::Allocate(unsigned long)>
   970c8:	b0000021 	adrp	x1, 9c000 <vtable for CSerialDevice>
   970cc:	91272021 	add	x1, x1, #0x9c8
   970d0:	f81f0ffe 	str	x30, [sp, #-16]!
   970d4:	91004020 	add	x0, x1, #0x10
   970d8:	52800422 	mov	w2, #0x21                  	// #33
   970dc:	97ffc8a5 	bl	89370 <assertion_failed>

00000000000970e0 <free>:
   970e0:	aa0003e1 	mov	x1, x0
   970e4:	b24077e0 	mov	x0, #0x3fffffff            	// #1073741823
   970e8:	d0016e62 	adrp	x2, 2e65000 <temp_gold+0xf421a0>
   970ec:	eb00003f 	cmp	x1, x0
   970f0:	f9418c43 	ldr	x3, [x2, #792]
   970f4:	54000068 	b.hi	97100 <free+0x20>  // b.pmore
   970f8:	91006060 	add	x0, x3, #0x18
   970fc:	17fff741 	b	94e00 <CHeapAllocator::Free(void*)>
   97100:	91064060 	add	x0, x3, #0x190
   97104:	17fff73f 	b	94e00 <CHeapAllocator::Free(void*)>
   97108:	d503201f 	nop
   9710c:	d503201f 	nop

0000000000097110 <calloc>:
   97110:	9b007c21 	mul	x1, x1, x0
   97114:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   97118:	f100003f 	cmp	x1, #0x0
   9711c:	9a9f1433 	csinc	x19, x1, xzr, ne  // ne = any
   97120:	f9000bfe 	str	x30, [sp, #16]
   97124:	eb00027f 	cmp	x19, x0
   97128:	540001e3 	b.cc	97164 <calloc+0x54>  // b.lo, b.ul, b.last
   9712c:	d0016e62 	adrp	x2, 2e65000 <temp_gold+0xf421a0>
   97130:	aa1303e1 	mov	x1, x19
   97134:	f9418c43 	ldr	x3, [x2, #792]
   97138:	91006060 	add	x0, x3, #0x18
   9713c:	97fff6a1 	bl	94bc0 <CHeapAllocator::Allocate(unsigned long)>
   97140:	aa0003f4 	mov	x20, x0
   97144:	b4000080 	cbz	x0, 97154 <calloc+0x44>
   97148:	aa1303e2 	mov	x2, x19
   9714c:	52800001 	mov	w1, #0x0                   	// #0
   97150:	97fff12b 	bl	935fc <memset>
   97154:	aa1403e0 	mov	x0, x20
   97158:	f9400bfe 	ldr	x30, [sp, #16]
   9715c:	a8c253f3 	ldp	x19, x20, [sp], #32
   97160:	d65f03c0 	ret
   97164:	b0000020 	adrp	x0, 9c000 <vtable for CSerialDevice>
   97168:	91272001 	add	x1, x0, #0x9c8
   9716c:	9100c020 	add	x0, x1, #0x30
   97170:	52800622 	mov	w2, #0x31                  	// #49
   97174:	97ffc87f 	bl	89370 <assertion_failed>
   97178:	d503201f 	nop
   9717c:	d503201f 	nop

0000000000097180 <realloc>:
   97180:	b24077e2 	mov	x2, #0x3fffffff            	// #1073741823
   97184:	d0016e63 	adrp	x3, 2e65000 <temp_gold+0xf421a0>
   97188:	eb02001f 	cmp	x0, x2
   9718c:	f9418c64 	ldr	x4, [x3, #792]
   97190:	aa0103e2 	mov	x2, x1
   97194:	aa0003e1 	mov	x1, x0
   97198:	54000068 	b.hi	971a4 <realloc+0x24>  // b.pmore
   9719c:	91006080 	add	x0, x4, #0x18
   971a0:	17fff6ec 	b	94d50 <CHeapAllocator::ReAllocate(void*, unsigned long)>
   971a4:	91064080 	add	x0, x4, #0x190
   971a8:	17fff6ea 	b	94d50 <CHeapAllocator::ReAllocate(void*, unsigned long)>
   971ac:	d503201f 	nop

00000000000971b0 <palloc>:
   971b0:	d0016e60 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   971b4:	f9418c01 	ldr	x1, [x0, #792]
   971b8:	910c2020 	add	x0, x1, #0x308
   971bc:	140006b9 	b	98ca0 <CPageAllocator::Allocate()>

00000000000971c0 <pfree>:
   971c0:	d0016e62 	adrp	x2, 2e65000 <temp_gold+0xf421a0>
   971c4:	aa0003e1 	mov	x1, x0
   971c8:	f9418c40 	ldr	x0, [x2, #792]
   971cc:	910c2000 	add	x0, x0, #0x308
   971d0:	140006e8 	b	98d70 <CPageAllocator::Free(void*)>
	...

00000000000971e0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)>:
   971e0:	a9bc53f3 	stp	x19, x20, [sp, #-64]!
   971e4:	aa0003f3 	mov	x19, x0
   971e8:	d0016e60 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   971ec:	2a0603f4 	mov	w20, w6
   971f0:	a9017bf5 	stp	x21, x30, [sp, #16]
   971f4:	12001cf5 	and	w21, w7, #0xff
   971f8:	b9438000 	ldr	w0, [x0, #896]
   971fc:	29000a61 	stp	w1, w2, [x19]
   97200:	29011664 	stp	w4, w5, [x19, #8]
   97204:	29021a63 	stp	w3, w6, [x19, #16]
   97208:	f9000e7f 	str	xzr, [x19, #24]
   9720c:	b900227f 	str	wzr, [x19, #32]
   97210:	f900167f 	str	xzr, [x19, #40]
   97214:	35000040 	cbnz	w0, 9721c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x3c>
   97218:	9400017e 	bl	97810 <CBcmFrameBuffer::GetNumDisplays() [clone .part.2]>
   9721c:	6b00029f 	cmp	w20, w0
   97220:	54000682 	b.cs	972f0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x110>  // b.hs, b.nlast
   97224:	b9400261 	ldr	w1, [x19]
   97228:	350006a1 	cbnz	w1, 972fc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x11c>
   9722c:	f0000023 	adrp	x3, 9e000 <font_data+0x1558>
   97230:	b9401665 	ldr	w5, [x19, #20]
   97234:	b9463864 	ldr	w4, [x3, #1592]
   97238:	6b0400bf 	cmp	w5, w4
   9723c:	54000060 	b.eq	97248 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x68>  // b.none
   97240:	aa1303e0 	mov	x0, x19
   97244:	94000133 	bl	97710 <CBcmFrameBuffer::SetDisplay() [clone .part.0]>
   97248:	52800001 	mov	w1, #0x0                   	// #0
   9724c:	910083e0 	add	x0, sp, #0x20
   97250:	97ffc868 	bl	893f0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   97254:	910083e0 	add	x0, sp, #0x20
   97258:	52800061 	mov	w1, #0x3                   	// #3
   9725c:	72a00081 	movk	w1, #0x4, lsl #16
   97260:	52800004 	mov	w4, #0x0                   	// #0
   97264:	52800283 	mov	w3, #0x14                  	// #20
   97268:	9100a3e2 	add	x2, sp, #0x28
   9726c:	97ffc869 	bl	89410 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   97270:	72001c1f 	tst	w0, #0xff
   97274:	54000120 	b.eq	97298 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xb8>  // b.none
   97278:	2946a3e7 	ldp	w7, w8, [sp, #52]
   9727c:	5281b006 	mov	w6, #0xd80                 	// #3456
   97280:	51078109 	sub	w9, w8, #0x1e0
   97284:	510a00ea 	sub	w10, w7, #0x280
   97288:	29002267 	stp	w7, w8, [x19]
   9728c:	711a413f 	cmp	w9, #0x690
   97290:	7a469142 	ccmp	w10, w6, #0x2, ls  // ls = plast
   97294:	54000089 	b.ls	972a4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xc4>  // b.plast
   97298:	d280500b 	mov	x11, #0x280                 	// #640
   9729c:	f2c03c0b 	movk	x11, #0x1e0, lsl #32
   972a0:	f900026b 	str	x11, [x19]
   972a4:	910083e0 	add	x0, sp, #0x20
   972a8:	97ffc856 	bl	89400 <CBcmPropertyTags::~CBcmPropertyTags()>
   972ac:	b9400a6c 	ldr	w12, [x19, #8]
   972b0:	3400030c 	cbz	w12, 97310 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x130>
   972b4:	b9400e6d 	ldr	w13, [x19, #12]
   972b8:	340002cd 	cbz	w13, 97310 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x130>
   972bc:	b9401271 	ldr	w17, [x19, #16]
   972c0:	7100223f 	cmp	w17, #0x8
   972c4:	54000329 	b.ls	97328 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x148>  // b.plast
   972c8:	b000003e 	adrp	x30, 9c000 <vtable for CSerialDevice>
   972cc:	d2800e02 	mov	x2, #0x70                  	// #112
   972d0:	912843c1 	add	x1, x30, #0xa10
   972d4:	9100c260 	add	x0, x19, #0x30
   972d8:	97fff43e 	bl	943d0 <memcpy>
   972dc:	b9401274 	ldr	w20, [x19, #16]
   972e0:	a9405660 	ldp	x0, x21, [x19]
   972e4:	b9006674 	str	w20, [x19, #100]
   972e8:	f803c260 	stur	x0, [x19, #60]
   972ec:	f9002a75 	str	x21, [x19, #80]
   972f0:	a9417bf5 	ldp	x21, x30, [sp, #16]
   972f4:	a8c453f3 	ldp	x19, x20, [sp], #64
   972f8:	d65f03c0 	ret
   972fc:	b9400662 	ldr	w2, [x19, #4]
   97300:	34fff962 	cbz	w2, 9722c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x4c>
   97304:	b9400a6c 	ldr	w12, [x19, #8]
   97308:	35fffd6c 	cbnz	w12, 972b4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xd4>
   9730c:	d503201f 	nop
   97310:	29403e6e 	ldp	w14, w15, [x19]
   97314:	b9401271 	ldr	w17, [x19, #16]
   97318:	1b0f3eb0 	madd	w16, w21, w15, w15
   9731c:	7100223f 	cmp	w17, #0x8
   97320:	2901426e 	stp	w14, w16, [x19, #8]
   97324:	54fffd28 	b.hi	972c8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xe8>  // b.pmore
   97328:	d2808280 	mov	x0, #0x414                 	// #1044
   9732c:	97fff5c9 	bl	94a50 <operator new[](unsigned long)>
   97330:	aa0003f2 	mov	x18, x0
   97334:	d2808002 	mov	x2, #0x400                 	// #1024
   97338:	52800001 	mov	w1, #0x0                   	// #0
   9733c:	91005000 	add	x0, x0, #0x14
   97340:	f9001672 	str	x18, [x19, #40]
   97344:	97fff0ae 	bl	935fc <memset>
   97348:	17ffffe0 	b	972c8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xe8>
   9734c:	d503201f 	nop

0000000000097350 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   97350:	d2800281 	mov	x1, #0x14                  	// #20
   97354:	f9401400 	ldr	x0, [x0, #40]
   97358:	17fff5da 	b	94ac0 <operator delete(void*, unsigned long)>
   9735c:	d503201f 	nop

0000000000097360 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   97360:	b9401003 	ldr	w3, [x0, #16]
   97364:	12001c21 	and	w1, w1, #0xff
   97368:	12003c42 	and	w2, w2, #0xffff
   9736c:	7100207f 	cmp	w3, #0x8
   97370:	54000168 	b.hi	9739c <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)+0x3c>  // b.pmore
   97374:	13057c45 	asr	w5, w2, #5
   97378:	530d1044 	ubfiz	w4, w2, #19, #5
   9737c:	f9401400 	ldr	x0, [x0, #40]
   97380:	530b7c46 	lsr	w6, w2, #11
   97384:	531614a7 	ubfiz	w7, w5, #10, #6
   97388:	8b21c80b 	add	x11, x0, w1, sxtw #2
   9738c:	2a060c88 	orr	w8, w4, w6, lsl #3
   97390:	32081ce9 	orr	w9, w7, #0xff000000
   97394:	2a08012a 	orr	w10, w9, w8
   97398:	b900156a 	str	w10, [x11, #20]
   9739c:	d65f03c0 	ret

00000000000973a0 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   973a0:	b9401003 	ldr	w3, [x0, #16]
   973a4:	12001c21 	and	w1, w1, #0xff
   973a8:	7100207f 	cmp	w3, #0x8
   973ac:	54000088 	b.hi	973bc <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)+0x1c>  // b.pmore
   973b0:	f9401400 	ldr	x0, [x0, #40]
   973b4:	8b21c804 	add	x4, x0, w1, sxtw #2
   973b8:	b9001482 	str	w2, [x4, #20]
   973bc:	d65f03c0 	ret

00000000000973c0 <CBcmFrameBuffer::Initialize()>:
   973c0:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   973c4:	d0016e61 	adrp	x1, 2e65000 <temp_gold+0xf421a0>
   973c8:	aa0003f3 	mov	x19, x0
   973cc:	b9401674 	ldr	w20, [x19, #20]
   973d0:	f9000bfe 	str	x30, [sp, #16]
   973d4:	b9438020 	ldr	w0, [x1, #896]
   973d8:	35000040 	cbnz	w0, 973e0 <CBcmFrameBuffer::Initialize()+0x20>
   973dc:	9400010d 	bl	97810 <CBcmFrameBuffer::GetNumDisplays() [clone .part.2]>
   973e0:	6b00029f 	cmp	w20, w0
   973e4:	52800014 	mov	w20, #0x0                   	// #0
   973e8:	54000542 	b.cs	97490 <CBcmFrameBuffer::Initialize()+0xd0>  // b.hs, b.nlast
   973ec:	f0000020 	adrp	x0, 9e000 <font_data+0x1558>
   973f0:	b9401663 	ldr	w3, [x19, #20]
   973f4:	b9463802 	ldr	w2, [x0, #1592]
   973f8:	6b02007f 	cmp	w3, w2
   973fc:	54000060 	b.eq	97408 <CBcmFrameBuffer::Initialize()+0x48>  // b.none
   97400:	aa1303e0 	mov	x0, x19
   97404:	940000c3 	bl	97710 <CBcmFrameBuffer::SetDisplay() [clone .part.0]>
   97408:	52800001 	mov	w1, #0x0                   	// #0
   9740c:	9100a3e0 	add	x0, sp, #0x28
   97410:	97ffc7f8 	bl	893f0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   97414:	9100a3e0 	add	x0, sp, #0x28
   97418:	52800e02 	mov	w2, #0x70                  	// #112
   9741c:	9100c261 	add	x1, x19, #0x30
   97420:	97ffc81c 	bl	89490 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   97424:	72001c14 	ands	w20, w0, #0xff
   97428:	54000300 	b.eq	97488 <CBcmFrameBuffer::Initialize()+0xc8>  // b.none
   9742c:	b9403e64 	ldr	w4, [x19, #60]
   97430:	34000384 	cbz	w4, 974a0 <CBcmFrameBuffer::Initialize()+0xe0>
   97434:	b9404265 	ldr	w5, [x19, #64]
   97438:	34000345 	cbz	w5, 974a0 <CBcmFrameBuffer::Initialize()+0xe0>
   9743c:	b9405266 	ldr	w6, [x19, #80]
   97440:	34000306 	cbz	w6, 974a0 <CBcmFrameBuffer::Initialize()+0xe0>
   97444:	b9405667 	ldr	w7, [x19, #84]
   97448:	340002c7 	cbz	w7, 974a0 <CBcmFrameBuffer::Initialize()+0xe0>
   9744c:	b9406668 	ldr	w8, [x19, #100]
   97450:	34000288 	cbz	w8, 974a0 <CBcmFrameBuffer::Initialize()+0xe0>
   97454:	b9408a69 	ldr	w9, [x19, #136]
   97458:	34000249 	cbz	w9, 974a0 <CBcmFrameBuffer::Initialize()+0xe0>
   9745c:	b940126b 	ldr	w11, [x19, #16]
   97460:	1200752a 	and	w10, w9, #0x3fffffff
   97464:	b9408e6c 	ldr	w12, [x19, #140]
   97468:	b9409e6d 	ldr	w13, [x19, #156]
   9746c:	7100217f 	cmp	w11, #0x8
   97470:	2903326a 	stp	w10, w12, [x19, #24]
   97474:	b900226d 	str	w13, [x19, #32]
   97478:	54000088 	b.hi	97488 <CBcmFrameBuffer::Initialize()+0xc8>  // b.pmore
   9747c:	aa1303e0 	mov	x0, x19
   97480:	940000bc 	bl	97770 <CBcmFrameBuffer::UpdatePalette() [clone .part.1]>
   97484:	12001c14 	and	w20, w0, #0xff
   97488:	9100a3e0 	add	x0, sp, #0x28
   9748c:	97ffc7dd 	bl	89400 <CBcmPropertyTags::~CBcmPropertyTags()>
   97490:	2a1403e0 	mov	w0, w20
   97494:	f9400bfe 	ldr	x30, [sp, #16]
   97498:	a8c353f3 	ldp	x19, x20, [sp], #48
   9749c:	d65f03c0 	ret
   974a0:	52800014 	mov	w20, #0x0                   	// #0
   974a4:	17fffff9 	b	97488 <CBcmFrameBuffer::Initialize()+0xc8>
   974a8:	d503201f 	nop
   974ac:	d503201f 	nop

00000000000974b0 <CBcmFrameBuffer::GetWidth() const>:
   974b0:	b9400000 	ldr	w0, [x0]
   974b4:	d65f03c0 	ret
   974b8:	d503201f 	nop
   974bc:	d503201f 	nop

00000000000974c0 <CBcmFrameBuffer::GetHeight() const>:
   974c0:	b9400400 	ldr	w0, [x0, #4]
   974c4:	d65f03c0 	ret
   974c8:	d503201f 	nop
   974cc:	d503201f 	nop

00000000000974d0 <CBcmFrameBuffer::GetVirtWidth() const>:
   974d0:	b9400800 	ldr	w0, [x0, #8]
   974d4:	d65f03c0 	ret
   974d8:	d503201f 	nop
   974dc:	d503201f 	nop

00000000000974e0 <CBcmFrameBuffer::GetVirtHeight() const>:
   974e0:	b9400c00 	ldr	w0, [x0, #12]
   974e4:	d65f03c0 	ret
   974e8:	d503201f 	nop
   974ec:	d503201f 	nop

00000000000974f0 <CBcmFrameBuffer::GetPitch() const>:
   974f0:	b9402000 	ldr	w0, [x0, #32]
   974f4:	d65f03c0 	ret
   974f8:	d503201f 	nop
   974fc:	d503201f 	nop

0000000000097500 <CBcmFrameBuffer::GetDepth() const>:
   97500:	b9401000 	ldr	w0, [x0, #16]
   97504:	d65f03c0 	ret
   97508:	d503201f 	nop
   9750c:	d503201f 	nop

0000000000097510 <CBcmFrameBuffer::GetBuffer() const>:
   97510:	b9401800 	ldr	w0, [x0, #24]
   97514:	d65f03c0 	ret
   97518:	d503201f 	nop
   9751c:	d503201f 	nop

0000000000097520 <CBcmFrameBuffer::GetSize() const>:
   97520:	b9401c00 	ldr	w0, [x0, #28]
   97524:	d65f03c0 	ret
   97528:	d503201f 	nop
   9752c:	d503201f 	nop

0000000000097530 <CBcmFrameBuffer::UpdatePalette()>:
   97530:	b9401001 	ldr	w1, [x0, #16]
   97534:	7100203f 	cmp	w1, #0x8
   97538:	54000048 	b.hi	97540 <CBcmFrameBuffer::UpdatePalette()+0x10>  // b.pmore
   9753c:	1400008d 	b	97770 <CBcmFrameBuffer::UpdatePalette() [clone .part.1]>
   97540:	52800020 	mov	w0, #0x1                   	// #1
   97544:	d65f03c0 	ret
   97548:	d503201f 	nop
   9754c:	d503201f 	nop

0000000000097550 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   97550:	f0000024 	adrp	x4, 9e000 <font_data+0x1558>
   97554:	a9bc53f3 	stp	x19, x20, [sp, #-64]!
   97558:	2a0103f4 	mov	w20, w1
   9755c:	b9401403 	ldr	w3, [x0, #20]
   97560:	a9017bf5 	stp	x21, x30, [sp, #16]
   97564:	2a0203f5 	mov	w21, w2
   97568:	b9463881 	ldr	w1, [x4, #1592]
   9756c:	6b01007f 	cmp	w3, w1
   97570:	54000040 	b.eq	97578 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x28>  // b.none
   97574:	94000067 	bl	97710 <CBcmFrameBuffer::SetDisplay() [clone .part.0]>
   97578:	52800001 	mov	w1, #0x0                   	// #0
   9757c:	910083e0 	add	x0, sp, #0x20
   97580:	97ffc79c 	bl	893f0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   97584:	910083e0 	add	x0, sp, #0x20
   97588:	52900121 	mov	w1, #0x8009                	// #32777
   9758c:	72a00081 	movk	w1, #0x4, lsl #16
   97590:	52800104 	mov	w4, #0x8                   	// #8
   97594:	2906d7f4 	stp	w20, w21, [sp, #52]
   97598:	52800283 	mov	w3, #0x14                  	// #20
   9759c:	9100a3e2 	add	x2, sp, #0x28
   975a0:	97ffc79c 	bl	89410 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   975a4:	72001c13 	ands	w19, w0, #0xff
   975a8:	540000a0 	b.eq	975bc <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x6c>  // b.none
   975ac:	b94037e0 	ldr	w0, [sp, #52]
   975b0:	52800013 	mov	w19, #0x0                   	// #0
   975b4:	6b14001f 	cmp	w0, w20
   975b8:	540000e0 	b.eq	975d4 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x84>  // b.none
   975bc:	910083e0 	add	x0, sp, #0x20
   975c0:	97ffc790 	bl	89400 <CBcmPropertyTags::~CBcmPropertyTags()>
   975c4:	2a1303e0 	mov	w0, w19
   975c8:	a9417bf5 	ldp	x21, x30, [sp, #16]
   975cc:	a8c453f3 	ldp	x19, x20, [sp], #64
   975d0:	d65f03c0 	ret
   975d4:	b9403be2 	ldr	w2, [sp, #56]
   975d8:	910083e0 	add	x0, sp, #0x20
   975dc:	6b15005f 	cmp	w2, w21
   975e0:	1a9f17f3 	cset	w19, eq  // eq = none
   975e4:	97ffc787 	bl	89400 <CBcmPropertyTags::~CBcmPropertyTags()>
   975e8:	2a1303e0 	mov	w0, w19
   975ec:	a9417bf5 	ldp	x21, x30, [sp, #16]
   975f0:	a8c453f3 	ldp	x19, x20, [sp], #64
   975f4:	d65f03c0 	ret
   975f8:	d503201f 	nop
   975fc:	d503201f 	nop

0000000000097600 <CBcmFrameBuffer::WaitForVerticalSync()>:
   97600:	f0000021 	adrp	x1, 9e000 <font_data+0x1558>
   97604:	a9bd7bf3 	stp	x19, x30, [sp, #-48]!
   97608:	b9463823 	ldr	w3, [x1, #1592]
   9760c:	b9401402 	ldr	w2, [x0, #20]
   97610:	6b03005f 	cmp	w2, w3
   97614:	54000040 	b.eq	9761c <CBcmFrameBuffer::WaitForVerticalSync()+0x1c>  // b.none
   97618:	9400003e 	bl	97710 <CBcmFrameBuffer::SetDisplay() [clone .part.0]>
   9761c:	910063e0 	add	x0, sp, #0x18
   97620:	52800001 	mov	w1, #0x0                   	// #0
   97624:	97ffc773 	bl	893f0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   97628:	910083e2 	add	x2, sp, #0x20
   9762c:	52800004 	mov	w4, #0x0                   	// #0
   97630:	52800203 	mov	w3, #0x10                  	// #16
   97634:	910063e0 	add	x0, sp, #0x18
   97638:	529001c1 	mov	w1, #0x800e                	// #32782
   9763c:	72a00081 	movk	w1, #0x4, lsl #16
   97640:	97ffc774 	bl	89410 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   97644:	2a0003f3 	mov	w19, w0
   97648:	910063e0 	add	x0, sp, #0x18
   9764c:	97ffc76d 	bl	89400 <CBcmPropertyTags::~CBcmPropertyTags()>
   97650:	2a1303e0 	mov	w0, w19
   97654:	a8c37bf3 	ldp	x19, x30, [sp], #48
   97658:	d65f03c0 	ret
   9765c:	d503201f 	nop

0000000000097660 <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)>:
   97660:	f0000023 	adrp	x3, 9e000 <font_data+0x1558>
   97664:	a9bd7bf3 	stp	x19, x30, [sp, #-48]!
   97668:	2a0103f3 	mov	w19, w1
   9766c:	b9401402 	ldr	w2, [x0, #20]
   97670:	b9463861 	ldr	w1, [x3, #1592]
   97674:	6b01005f 	cmp	w2, w1
   97678:	54000040 	b.eq	97680 <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)+0x20>  // b.none
   9767c:	94000025 	bl	97710 <CBcmFrameBuffer::SetDisplay() [clone .part.0]>
   97680:	910063e0 	add	x0, sp, #0x18
   97684:	52800001 	mov	w1, #0x0                   	// #0
   97688:	97ffc75a 	bl	893f0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   9768c:	910083e2 	add	x2, sp, #0x20
   97690:	52800084 	mov	w4, #0x4                   	// #4
   97694:	b9002ff3 	str	w19, [sp, #44]
   97698:	52800203 	mov	w3, #0x10                  	// #16
   9769c:	910063e0 	add	x0, sp, #0x18
   976a0:	529001e1 	mov	w1, #0x800f                	// #32783
   976a4:	72a00081 	movk	w1, #0x4, lsl #16
   976a8:	97ffc75a 	bl	89410 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   976ac:	2a0003f3 	mov	w19, w0
   976b0:	910063e0 	add	x0, sp, #0x18
   976b4:	97ffc753 	bl	89400 <CBcmPropertyTags::~CBcmPropertyTags()>
   976b8:	2a1303e0 	mov	w0, w19
   976bc:	a8c37bf3 	ldp	x19, x30, [sp], #48
   976c0:	d65f03c0 	ret
   976c4:	d503201f 	nop
   976c8:	d503201f 	nop
   976cc:	d503201f 	nop

00000000000976d0 <CBcmFrameBuffer::SetDisplay()>:
   976d0:	f0000021 	adrp	x1, 9e000 <font_data+0x1558>
   976d4:	b9401402 	ldr	w2, [x0, #20]
   976d8:	b9463823 	ldr	w3, [x1, #1592]
   976dc:	6b03005f 	cmp	w2, w3
   976e0:	54000040 	b.eq	976e8 <CBcmFrameBuffer::SetDisplay()+0x18>  // b.none
   976e4:	1400000b 	b	97710 <CBcmFrameBuffer::SetDisplay() [clone .part.0]>
   976e8:	d65f03c0 	ret
   976ec:	d503201f 	nop

00000000000976f0 <CBcmFrameBuffer::GetNumDisplays()>:
   976f0:	d0016e60 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   976f4:	b9438000 	ldr	w0, [x0, #896]
   976f8:	34000040 	cbz	w0, 97700 <CBcmFrameBuffer::GetNumDisplays()+0x10>
   976fc:	d65f03c0 	ret
   97700:	14000044 	b	97810 <CBcmFrameBuffer::GetNumDisplays() [clone .part.2]>
   97704:	d503201f 	nop
   97708:	d503201f 	nop
   9770c:	d503201f 	nop

0000000000097710 <CBcmFrameBuffer::SetDisplay() [clone .part.0]>:
   97710:	a9bd7bf3 	stp	x19, x30, [sp, #-48]!
   97714:	52800001 	mov	w1, #0x0                   	// #0
   97718:	aa0003f3 	mov	x19, x0
   9771c:	910063e0 	add	x0, sp, #0x18
   97720:	97ffc734 	bl	893f0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   97724:	b9401665 	ldr	w5, [x19, #20]
   97728:	910063e0 	add	x0, sp, #0x18
   9772c:	52900261 	mov	w1, #0x8013                	// #32787
   97730:	72a00081 	movk	w1, #0x4, lsl #16
   97734:	52800084 	mov	w4, #0x4                   	// #4
   97738:	52800203 	mov	w3, #0x10                  	// #16
   9773c:	910083e2 	add	x2, sp, #0x20
   97740:	b9002fe5 	str	w5, [sp, #44]
   97744:	97ffc733 	bl	89410 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   97748:	72001c1f 	tst	w0, #0xff
   9774c:	54000080 	b.eq	9775c <CBcmFrameBuffer::SetDisplay() [clone .part.0]+0x4c>  // b.none
   97750:	b9401661 	ldr	w1, [x19, #20]
   97754:	f0000020 	adrp	x0, 9e000 <font_data+0x1558>
   97758:	b9063801 	str	w1, [x0, #1592]
   9775c:	910063e0 	add	x0, sp, #0x18
   97760:	97ffc728 	bl	89400 <CBcmPropertyTags::~CBcmPropertyTags()>
   97764:	a8c37bf3 	ldp	x19, x30, [sp], #48
   97768:	d65f03c0 	ret
   9776c:	d503201f 	nop

0000000000097770 <CBcmFrameBuffer::UpdatePalette() [clone .part.1]>:
   97770:	f0000021 	adrp	x1, 9e000 <font_data+0x1558>
   97774:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   97778:	aa0003f3 	mov	x19, x0
   9777c:	b9401402 	ldr	w2, [x0, #20]
   97780:	f9000bfe 	str	x30, [sp, #16]
   97784:	b9463823 	ldr	w3, [x1, #1592]
   97788:	6b03005f 	cmp	w2, w3
   9778c:	54000040 	b.eq	97794 <CBcmFrameBuffer::UpdatePalette() [clone .part.1]+0x24>  // b.none
   97790:	97ffffe0 	bl	97710 <CBcmFrameBuffer::SetDisplay() [clone .part.0]>
   97794:	f9401665 	ldr	x5, [x19, #40]
   97798:	d2c02004 	mov	x4, #0x10000000000         	// #1099511627776
   9779c:	9100a3e0 	add	x0, sp, #0x28
   977a0:	52800001 	mov	w1, #0x0                   	// #0
   977a4:	f800c0a4 	stur	x4, [x5, #12]
   977a8:	97ffc712 	bl	893f0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   977ac:	9100a3e0 	add	x0, sp, #0x28
   977b0:	52900161 	mov	w1, #0x800b                	// #32779
   977b4:	72a00081 	movk	w1, #0x4, lsl #16
   977b8:	52808104 	mov	w4, #0x408                 	// #1032
   977bc:	f9401662 	ldr	x2, [x19, #40]
   977c0:	52808283 	mov	w3, #0x414                 	// #1044
   977c4:	97ffc713 	bl	89410 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   977c8:	72001c14 	ands	w20, w0, #0xff
   977cc:	54000080 	b.eq	977dc <CBcmFrameBuffer::UpdatePalette() [clone .part.1]+0x6c>  // b.none
   977d0:	f9401660 	ldr	x0, [x19, #40]
   977d4:	b9400c06 	ldr	w6, [x0, #12]
   977d8:	34000106 	cbz	w6, 977f8 <CBcmFrameBuffer::UpdatePalette() [clone .part.1]+0x88>
   977dc:	9100a3e0 	add	x0, sp, #0x28
   977e0:	52800014 	mov	w20, #0x0                   	// #0
   977e4:	97ffc707 	bl	89400 <CBcmPropertyTags::~CBcmPropertyTags()>
   977e8:	2a1403e0 	mov	w0, w20
   977ec:	f9400bfe 	ldr	x30, [sp, #16]
   977f0:	a8c353f3 	ldp	x19, x20, [sp], #48
   977f4:	d65f03c0 	ret
   977f8:	9100a3e0 	add	x0, sp, #0x28
   977fc:	97ffc701 	bl	89400 <CBcmPropertyTags::~CBcmPropertyTags()>
   97800:	2a1403e0 	mov	w0, w20
   97804:	f9400bfe 	ldr	x30, [sp, #16]
   97808:	a8c353f3 	ldp	x19, x20, [sp], #48
   9780c:	d65f03c0 	ret

0000000000097810 <CBcmFrameBuffer::GetNumDisplays() [clone .part.2]>:
   97810:	a9bd7bf3 	stp	x19, x30, [sp, #-48]!
   97814:	52800001 	mov	w1, #0x0                   	// #0
   97818:	910063e0 	add	x0, sp, #0x18
   9781c:	97ffc6f5 	bl	893f0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   97820:	910083e2 	add	x2, sp, #0x20
   97824:	52800004 	mov	w4, #0x0                   	// #0
   97828:	52800203 	mov	w3, #0x10                  	// #16
   9782c:	910063e0 	add	x0, sp, #0x18
   97830:	52800261 	mov	w1, #0x13                  	// #19
   97834:	72a00081 	movk	w1, #0x4, lsl #16
   97838:	97ffc6f6 	bl	89410 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   9783c:	d0016e61 	adrp	x1, 2e65000 <temp_gold+0xf421a0>
   97840:	72001c1f 	tst	w0, #0xff
   97844:	b9402ff3 	ldr	w19, [sp, #44]
   97848:	910063e0 	add	x0, sp, #0x18
   9784c:	1a9f1673 	csinc	w19, w19, wzr, ne  // ne = any
   97850:	b9038033 	str	w19, [x1, #896]
   97854:	97ffc6eb 	bl	89400 <CBcmPropertyTags::~CBcmPropertyTags()>
   97858:	2a1303e0 	mov	w0, w19
   9785c:	a8c37bf3 	ldp	x19, x30, [sp], #48
   97860:	d65f03c0 	ret
	...

0000000000097870 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>:
   97870:	b9000001 	str	w1, [x0]
   97874:	39001002 	strb	w2, [x0, #4]
   97878:	d65f03c0 	ret
   9787c:	d503201f 	nop

0000000000097880 <CBcmMailBox::~CBcmMailBox()>:
   97880:	d65f03c0 	ret
   97884:	d503201f 	nop
   97888:	d503201f 	nop
   9788c:	d503201f 	nop

0000000000097890 <CBcmMailBox::Flush()>:
   97890:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   97894:	d2971313 	mov	x19, #0xb898                	// #47256
   97898:	f2bfc013 	movk	x19, #0xfe00, lsl #16
   9789c:	b9400260 	ldr	w0, [x19]
   978a0:	f9000bfe 	str	x30, [sp, #16]
   978a4:	37f00100 	tbnz	w0, #30, 978c4 <CBcmMailBox::Flush()+0x34>
   978a8:	d2971014 	mov	x20, #0xb880                	// #47232
   978ac:	f2bfc014 	movk	x20, #0xfe00, lsl #16
   978b0:	b9400281 	ldr	w1, [x20]
   978b4:	52800280 	mov	w0, #0x14                  	// #20
   978b8:	97ffef0a 	bl	934e0 <CTimer::SimpleMsDelay(unsigned int)>
   978bc:	b9400261 	ldr	w1, [x19]
   978c0:	36f7ff81 	tbz	w1, #30, 978b0 <CBcmMailBox::Flush()+0x20>
   978c4:	f9400bfe 	ldr	x30, [sp, #16]
   978c8:	a8c253f3 	ldp	x19, x20, [sp], #32
   978cc:	d65f03c0 	ret

00000000000978d0 <CBcmMailBox::Read()>:
   978d0:	b9400004 	ldr	w4, [x0]
   978d4:	d2971301 	mov	x1, #0xb898                	// #47256
   978d8:	f2bfc001 	movk	x1, #0xfe00, lsl #16
   978dc:	d2971003 	mov	x3, #0xb880                	// #47232
   978e0:	f2bfc003 	movk	x3, #0xfe00, lsl #16
   978e4:	d503201f 	nop
   978e8:	b9400020 	ldr	w0, [x1]
   978ec:	37f7ffe0 	tbnz	w0, #30, 978e8 <CBcmMailBox::Read()+0x18>
   978f0:	b9400065 	ldr	w5, [x3]
   978f4:	12000ca2 	and	w2, w5, #0xf
   978f8:	6b04005f 	cmp	w2, w4
   978fc:	54ffff61 	b.ne	978e8 <CBcmMailBox::Read()+0x18>  // b.any
   97900:	121c6ca0 	and	w0, w5, #0xfffffff0
   97904:	d65f03c0 	ret
   97908:	d503201f 	nop
   9790c:	d503201f 	nop

0000000000097910 <CBcmMailBox::Write(unsigned int)>:
   97910:	d2971703 	mov	x3, #0xb8b8                	// #47288
   97914:	f2bfc003 	movk	x3, #0xfe00, lsl #16
   97918:	b9400062 	ldr	w2, [x3]
   9791c:	37ffffe2 	tbnz	w2, #31, 97918 <CBcmMailBox::Write(unsigned int)+0x8>
   97920:	f2400c3f 	tst	x1, #0xf
   97924:	540000e1 	b.ne	97940 <CBcmMailBox::Write(unsigned int)+0x30>  // b.any
   97928:	b9400004 	ldr	w4, [x0]
   9792c:	d2971405 	mov	x5, #0xb8a0                	// #47264
   97930:	f2bfc005 	movk	x5, #0xfe00, lsl #16
   97934:	2a040026 	orr	w6, w1, w4
   97938:	b90000a6 	str	w6, [x5]
   9793c:	d65f03c0 	ret
   97940:	b0000021 	adrp	x1, 9c000 <vtable for CSerialDevice>
   97944:	b0000020 	adrp	x0, 9c000 <vtable for CSerialDevice>
   97948:	f81f0ffe 	str	x30, [sp, #-16]!
   9794c:	912a0021 	add	x1, x1, #0xa80
   97950:	912a4000 	add	x0, x0, #0xa90
   97954:	52800c42 	mov	w2, #0x62                  	// #98
   97958:	97ffc686 	bl	89370 <assertion_failed>
   9795c:	d503201f 	nop

0000000000097960 <CBcmMailBox::WriteRead(unsigned int)>:
   97960:	a9bc53f3 	stp	x19, x20, [sp, #-64]!
   97964:	aa0003f4 	mov	x20, x0
   97968:	39401000 	ldrb	w0, [x0, #4]
   9796c:	a9015bf5 	stp	x21, x22, [sp, #16]
   97970:	2a0103f6 	mov	w22, w1
   97974:	f90013fe 	str	x30, [sp, #32]
   97978:	35000080 	cbnz	w0, 97988 <CBcmMailBox::WriteRead(unsigned int)+0x28>
   9797c:	d0016e61 	adrp	x1, 2e65000 <temp_gold+0xf421a0>
   97980:	b9438820 	ldr	w0, [x1, #904]
   97984:	35000580 	cbnz	w0, 97a34 <CBcmMailBox::WriteRead(unsigned int)+0xd4>
   97988:	d2971313 	mov	x19, #0xb898                	// #47256
   9798c:	f2bfc013 	movk	x19, #0xfe00, lsl #16
   97990:	b9400262 	ldr	w2, [x19]
   97994:	d2971015 	mov	x21, #0xb880                	// #47232
   97998:	f2bfc015 	movk	x21, #0xfe00, lsl #16
   9799c:	37f000c2 	tbnz	w2, #30, 979b4 <CBcmMailBox::WriteRead(unsigned int)+0x54>
   979a0:	b94002a1 	ldr	w1, [x21]
   979a4:	52800280 	mov	w0, #0x14                  	// #20
   979a8:	97ffeece 	bl	934e0 <CTimer::SimpleMsDelay(unsigned int)>
   979ac:	b9400263 	ldr	w3, [x19]
   979b0:	36f7ff83 	tbz	w3, #30, 979a0 <CBcmMailBox::WriteRead(unsigned int)+0x40>
   979b4:	2a1603e1 	mov	w1, w22
   979b8:	aa1403e0 	mov	x0, x20
   979bc:	97ffffd5 	bl	97910 <CBcmMailBox::Write(unsigned int)>
   979c0:	b9400286 	ldr	w6, [x20]
   979c4:	d2971305 	mov	x5, #0xb898                	// #47256
   979c8:	f2bfc005 	movk	x5, #0xfe00, lsl #16
   979cc:	d2971004 	mov	x4, #0xb880                	// #47232
   979d0:	f2bfc004 	movk	x4, #0xfe00, lsl #16
   979d4:	d503201f 	nop
   979d8:	b94000a7 	ldr	w7, [x5]
   979dc:	37f7ffe7 	tbnz	w7, #30, 979d8 <CBcmMailBox::WriteRead(unsigned int)+0x78>
   979e0:	b9400088 	ldr	w8, [x4]
   979e4:	12000d09 	and	w9, w8, #0xf
   979e8:	6b06013f 	cmp	w9, w6
   979ec:	54ffff61 	b.ne	979d8 <CBcmMailBox::WriteRead(unsigned int)+0x78>  // b.any
   979f0:	3940128a 	ldrb	w10, [x20, #4]
   979f4:	121c6d00 	and	w0, w8, #0xfffffff0
   979f8:	3500008a 	cbnz	w10, 97a08 <CBcmMailBox::WriteRead(unsigned int)+0xa8>
   979fc:	d0016e6b 	adrp	x11, 2e65000 <temp_gold+0xf421a0>
   97a00:	b943896c 	ldr	w12, [x11, #904]
   97a04:	350000ac 	cbnz	w12, 97a18 <CBcmMailBox::WriteRead(unsigned int)+0xb8>
   97a08:	a9415bf5 	ldp	x21, x22, [sp, #16]
   97a0c:	f94013fe 	ldr	x30, [sp, #32]
   97a10:	a8c453f3 	ldp	x19, x20, [sp], #64
   97a14:	d65f03c0 	ret
   97a18:	b9003fe0 	str	w0, [sp, #60]
   97a1c:	97fff6b1 	bl	954e0 <LeaveCritical>
   97a20:	b9403fe0 	ldr	w0, [sp, #60]
   97a24:	a9415bf5 	ldp	x21, x22, [sp, #16]
   97a28:	f94013fe 	ldr	x30, [sp, #32]
   97a2c:	a8c453f3 	ldp	x19, x20, [sp], #64
   97a30:	d65f03c0 	ret
   97a34:	97fff67f 	bl	95430 <EnterCritical>
   97a38:	17ffffd4 	b	97988 <CBcmMailBox::WriteRead(unsigned int)+0x28>
   97a3c:	00000000 	.inst	0x00000000 ; undefined

0000000000097a40 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   97a40:	d0016e60 	adrp	x0, 2e65000 <temp_gold+0xf421a0>
   97a44:	b903881f 	str	wzr, [x0, #904]
   97a48:	d65f03c0 	ret
   97a4c:	00000000 	.inst	0x00000000 ; undefined

0000000000097a50 <CCharGenerator::CCharGenerator()>:
   97a50:	52800101 	mov	w1, #0x8                   	// #8
   97a54:	b9000001 	str	w1, [x0]
   97a58:	d65f03c0 	ret
   97a5c:	d503201f 	nop

0000000000097a60 <CCharGenerator::~CCharGenerator()>:
   97a60:	d65f03c0 	ret
   97a64:	d503201f 	nop
   97a68:	d503201f 	nop
   97a6c:	d503201f 	nop

0000000000097a70 <CCharGenerator::GetCharWidth() const>:
   97a70:	b9400000 	ldr	w0, [x0]
   97a74:	d65f03c0 	ret
   97a78:	d503201f 	nop
   97a7c:	d503201f 	nop

0000000000097a80 <CCharGenerator::GetCharHeight() const>:
   97a80:	52800260 	mov	w0, #0x13                  	// #19
   97a84:	d65f03c0 	ret
   97a88:	d503201f 	nop
   97a8c:	d503201f 	nop

0000000000097a90 <CCharGenerator::GetUnderline() const>:
   97a90:	52800200 	mov	w0, #0x10                  	// #16
   97a94:	d65f03c0 	ret
   97a98:	d503201f 	nop
   97a9c:	d503201f 	nop

0000000000097aa0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
   97aa0:	12001c21 	and	w1, w1, #0xff
   97aa4:	51008424 	sub	w4, w1, #0x21
   97aa8:	7103789f 	cmp	w4, #0xde
   97aac:	54000228 	b.hi	97af0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>  // b.pmore
   97ab0:	b9400000 	ldr	w0, [x0]
   97ab4:	6b02001f 	cmp	w0, w2
   97ab8:	54000209 	b.ls	97af8 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x58>  // b.plast
   97abc:	71003c7f 	cmp	w3, #0xf
   97ac0:	52800000 	mov	w0, #0x0                   	// #0
   97ac4:	54000188 	b.hi	97af4 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>  // b.pmore
   97ac8:	d37c7c85 	ubfiz	x5, x4, #4, #32
   97acc:	b0000026 	adrp	x6, 9c000 <vtable for CSerialDevice>
   97ad0:	912aa0c7 	add	x7, x6, #0xaa8
   97ad4:	52801008 	mov	w8, #0x80                  	// #128
   97ad8:	8b0500e9 	add	x9, x7, x5
   97adc:	1ac2290a 	asr	w10, w8, w2
   97ae0:	3863492b 	ldrb	w11, [x9, w3, uxtw]
   97ae4:	6a0a017f 	tst	w11, w10
   97ae8:	1a9f07e0 	cset	w0, ne  // ne = any
   97aec:	d65f03c0 	ret
   97af0:	52800000 	mov	w0, #0x0                   	// #0
   97af4:	d65f03c0 	ret
   97af8:	d0000022 	adrp	x2, 9d000 <font_data+0x558>
   97afc:	d0000023 	adrp	x3, 9d000 <font_data+0x558>
   97b00:	f81f0ffe 	str	x30, [sp, #-16]!
   97b04:	91226041 	add	x1, x2, #0x898
   97b08:	9122c060 	add	x0, x3, #0x8b0
   97b0c:	528009c2 	mov	w2, #0x4e                  	// #78
   97b10:	97ffc618 	bl	89370 <assertion_failed>
	...

0000000000097b40 <DelayLoop>:
   97b40:	2a0103e1 	mov	w1, w1
   97b44:	2a0203e2 	mov	w2, w2
   97b48:	71000400 	subs	w0, w0, #0x1
   97b4c:	54ffffa1 	b.ne	97b40 <DelayLoop>  // b.any
   97b50:	d65f03c0 	ret
	...

0000000000097b60 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>:
   97b60:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   97b64:	aa0003f3 	mov	x19, x0
   97b68:	2a0103f4 	mov	w20, w1
   97b6c:	f9000bfe 	str	x30, [sp, #16]
   97b70:	f90017e2 	str	x2, [sp, #40]
   97b74:	97ffd536 	bl	8d04c <CMachineInfo::Get()>
   97b78:	2a1403e1 	mov	w1, w20
   97b7c:	97ffd414 	bl	8cbcc <CMachineInfo::AllocateDMAChannel(unsigned int)>
   97b80:	f94017e2 	ldr	x2, [sp, #40]
   97b84:	71020e9f 	cmp	w20, #0x83
   97b88:	51002e81 	sub	w1, w20, #0xb
   97b8c:	7a431820 	ccmp	w1, #0x3, #0x0, ne  // ne = any
   97b90:	b9000260 	str	w0, [x19]
   97b94:	a900fe7f 	stp	xzr, xzr, [x19, #8]
   97b98:	f9000e62 	str	x2, [x19, #24]
   97b9c:	3900827f 	strb	wzr, [x19, #32]
   97ba0:	a902fe7f 	stp	xzr, xzr, [x19, #40]
   97ba4:	3900e27f 	strb	wzr, [x19, #56]
   97ba8:	f9002a7f 	str	xzr, [x19, #80]
   97bac:	540001a8 	b.hi	97be0 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x80>  // b.pmore
   97bb0:	7102001f 	cmp	w0, #0x80
   97bb4:	54000600 	b.eq	97c74 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x114>  // b.none
   97bb8:	d2800a00 	mov	x0, #0x50                  	// #80
   97bbc:	97fff39d 	bl	94a30 <operator new(unsigned long)>
   97bc0:	aa0003f4 	mov	x20, x0
   97bc4:	b9400261 	ldr	w1, [x19]
   97bc8:	f9400e62 	ldr	x2, [x19, #24]
   97bcc:	94000785 	bl	999e0 <CDMA4Channel::CDMA4Channel(unsigned int, CInterruptSystem*)>
   97bd0:	f9002a74 	str	x20, [x19, #80]
   97bd4:	f9400bfe 	ldr	x30, [sp, #16]
   97bd8:	a8c353f3 	ldp	x19, x20, [sp], #48
   97bdc:	d65f03c0 	ret
   97be0:	7102001f 	cmp	w0, #0x80
   97be4:	54000520 	b.eq	97c88 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x128>  // b.none
   97be8:	71001c1f 	cmp	w0, #0x7
   97bec:	54000588 	b.hi	97c9c <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x13c>  // b.pmore
   97bf0:	52800001 	mov	w1, #0x0                   	// #0
   97bf4:	d28007e0 	mov	x0, #0x3f                  	// #63
   97bf8:	97fff362 	bl	94980 <operator new[](unsigned long, int)>
   97bfc:	91007c04 	add	x4, x0, #0x1f
   97c00:	d28ffe05 	mov	x5, #0x7ff0                	// #32752
   97c04:	f2bfc005 	movk	x5, #0xfe00, lsl #16
   97c08:	927be887 	and	x7, x4, #0xffffffffffffffe0
   97c0c:	52800026 	mov	w6, #0x1                   	// #1
   97c10:	a9009e60 	stp	x0, x7, [x19, #8]
   97c14:	52807d00 	mov	w0, #0x3e8                 	// #1000
   97c18:	f9000cff 	str	xzr, [x7, #24]
   97c1c:	b9400269 	ldr	w9, [x19]
   97c20:	b94000a8 	ldr	w8, [x5]
   97c24:	1ac920ca 	lsl	w10, w6, w9
   97c28:	2a08014b 	orr	w11, w10, w8
   97c2c:	b90000ab 	str	w11, [x5]
   97c30:	97ffee34 	bl	93500 <CTimer::SimpleusDelay(unsigned int)>
   97c34:	b940026e 	ldr	w14, [x19]
   97c38:	52800e0c 	mov	w12, #0x70                  	// #112
   97c3c:	72a01fcc 	movk	w12, #0xfe, lsl #16
   97c40:	52b0000d 	mov	w13, #0x80000000            	// #-2147483648
   97c44:	0b0c01cf 	add	w15, w14, w12
   97c48:	53185df0 	lsl	w16, w15, #8
   97c4c:	b900020d 	str	w13, [x16]
   97c50:	b9400271 	ldr	w17, [x19]
   97c54:	0b0c0232 	add	w18, w17, w12
   97c58:	53185e54 	lsl	w20, w18, #8
   97c5c:	d503201f 	nop
   97c60:	b940029e 	ldr	w30, [x20]
   97c64:	37fffffe 	tbnz	w30, #31, 97c60 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x100>
   97c68:	f9400bfe 	ldr	x30, [sp, #16]
   97c6c:	a8c353f3 	ldp	x19, x20, [sp], #48
   97c70:	d65f03c0 	ret
   97c74:	d0000033 	adrp	x19, 9d000 <font_data+0x558>
   97c78:	91232261 	add	x1, x19, #0x8c8
   97c7c:	91004020 	add	x0, x1, #0x10
   97c80:	528005e2 	mov	w2, #0x2f                  	// #47
   97c84:	97ffc5bb 	bl	89370 <assertion_failed>
   97c88:	d0000020 	adrp	x0, 9d000 <font_data+0x558>
   97c8c:	91232001 	add	x1, x0, #0x8c8
   97c90:	91004020 	add	x0, x1, #0x10
   97c94:	52800722 	mov	w2, #0x39                  	// #57
   97c98:	97ffc5b6 	bl	89370 <assertion_failed>
   97c9c:	d0000023 	adrp	x3, 9d000 <font_data+0x558>
   97ca0:	91232061 	add	x1, x3, #0x8c8
   97ca4:	9100c020 	add	x0, x1, #0x30
   97ca8:	52800742 	mov	w2, #0x3a                  	// #58
   97cac:	97ffc5b1 	bl	89370 <assertion_failed>

0000000000097cb0 <CDMAChannel::~CDMAChannel()>:
   97cb0:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   97cb4:	aa0003f3 	mov	x19, x0
   97cb8:	f9402814 	ldr	x20, [x0, #80]
   97cbc:	b9400000 	ldr	w0, [x0]
   97cc0:	f9000bfe 	str	x30, [sp, #16]
   97cc4:	b40001f4 	cbz	x20, 97d00 <CDMAChannel::~CDMAChannel()+0x50>
   97cc8:	51002c12 	sub	w18, w0, #0xb
   97ccc:	71000e5f 	cmp	w18, #0x3
   97cd0:	54000708 	b.hi	97db0 <CDMAChannel::~CDMAChannel()+0x100>  // b.pmore
   97cd4:	aa1403e0 	mov	x0, x20
   97cd8:	94000786 	bl	99af0 <CDMA4Channel::~CDMA4Channel()>
   97cdc:	aa1403e0 	mov	x0, x20
   97ce0:	d2800a01 	mov	x1, #0x50                  	// #80
   97ce4:	97fff377 	bl	94ac0 <operator delete(void*, unsigned long)>
   97ce8:	f9002a7f 	str	xzr, [x19, #80]
   97cec:	97ffd4d8 	bl	8d04c <CMachineInfo::Get()>
   97cf0:	b9400261 	ldr	w1, [x19]
   97cf4:	f9400bfe 	ldr	x30, [sp, #16]
   97cf8:	a8c253f3 	ldp	x19, x20, [sp], #32
   97cfc:	17ffd436 	b	8cdd4 <CMachineInfo::FreeDMAChannel(unsigned int)>
   97d00:	71001c1f 	cmp	w0, #0x7
   97d04:	54000608 	b.hi	97dc4 <CDMAChannel::~CDMAChannel()+0x114>  // b.pmore
   97d08:	52800e04 	mov	w4, #0x70                  	// #112
   97d0c:	72a01fc4 	movk	w4, #0xfe, lsl #16
   97d10:	0b040003 	add	w3, w0, w4
   97d14:	52b00002 	mov	w2, #0x80000000            	// #-2147483648
   97d18:	53185c65 	lsl	w5, w3, #8
   97d1c:	b90000a2 	str	w2, [x5]
   97d20:	b9400266 	ldr	w6, [x19]
   97d24:	0b0400c7 	add	w7, w6, w4
   97d28:	53185ce8 	lsl	w8, w7, #8
   97d2c:	d503201f 	nop
   97d30:	b9400109 	ldr	w9, [x8]
   97d34:	37ffffe9 	tbnz	w9, #31, 97d30 <CDMAChannel::~CDMAChannel()+0x80>
   97d38:	d28ffe0a 	mov	x10, #0x7ff0                	// #32752
   97d3c:	f2bfc00a 	movk	x10, #0xfe00, lsl #16
   97d40:	f9400e60 	ldr	x0, [x19, #24]
   97d44:	5280002b 	mov	w11, #0x1                   	// #1
   97d48:	b940014d 	ldr	w13, [x10]
   97d4c:	1ac6216c 	lsl	w12, w11, w6
   97d50:	0a2c01ae 	bic	w14, w13, w12
   97d54:	b900014e 	str	w14, [x10]
   97d58:	f900167f 	str	xzr, [x19, #40]
   97d5c:	b4000120 	cbz	x0, 97d80 <CDMAChannel::~CDMAChannel()+0xd0>
   97d60:	3940826f 	ldrb	w15, [x19, #32]
   97d64:	340000cf 	cbz	w15, 97d7c <CDMAChannel::~CDMAChannel()+0xcc>
   97d68:	b9400270 	ldr	w16, [x19]
   97d6c:	7100321f 	cmp	w16, #0xc
   97d70:	54000348 	b.hi	97dd8 <CDMAChannel::~CDMAChannel()+0x128>  // b.pmore
   97d74:	1101c201 	add	w1, w16, #0x70
   97d78:	97fffa2a 	bl	96620 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   97d7c:	f9000e7f 	str	xzr, [x19, #24]
   97d80:	97ffd4b3 	bl	8d04c <CMachineInfo::Get()>
   97d84:	b9400261 	ldr	w1, [x19]
   97d88:	97ffd413 	bl	8cdd4 <CMachineInfo::FreeDMAChannel(unsigned int)>
   97d8c:	f9000a7f 	str	xzr, [x19, #16]
   97d90:	f9400660 	ldr	x0, [x19, #8]
   97d94:	b4000080 	cbz	x0, 97da4 <CDMAChannel::~CDMAChannel()+0xf4>
   97d98:	f9400bfe 	ldr	x30, [sp, #16]
   97d9c:	a8c253f3 	ldp	x19, x20, [sp], #32
   97da0:	17fff33c 	b	94a90 <operator delete[](void*)>
   97da4:	f9400bfe 	ldr	x30, [sp, #16]
   97da8:	a8c253f3 	ldp	x19, x20, [sp], #32
   97dac:	d65f03c0 	ret
   97db0:	d000003e 	adrp	x30, 9d000 <font_data+0x558>
   97db4:	912323c1 	add	x1, x30, #0x8c8
   97db8:	91014020 	add	x0, x1, #0x50
   97dbc:	52800aa2 	mov	w2, #0x55                  	// #85
   97dc0:	97ffc56c 	bl	89370 <assertion_failed>
   97dc4:	d0000021 	adrp	x1, 9d000 <font_data+0x558>
   97dc8:	91232021 	add	x1, x1, #0x8c8
   97dcc:	9100c020 	add	x0, x1, #0x30
   97dd0:	52800c42 	mov	w2, #0x62                  	// #98
   97dd4:	97ffc567 	bl	89370 <assertion_failed>
   97dd8:	d0000031 	adrp	x17, 9d000 <font_data+0x558>
   97ddc:	91232221 	add	x1, x17, #0x8c8
   97de0:	91026020 	add	x0, x1, #0x98
   97de4:	52800e82 	mov	w2, #0x74                  	// #116
   97de8:	97ffc562 	bl	89370 <assertion_failed>
   97dec:	d503201f 	nop

0000000000097df0 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)>:
   97df0:	f9402808 	ldr	x8, [x0, #80]
   97df4:	12001ca5 	and	w5, w5, #0xff
   97df8:	b50004e8 	cbnz	x8, 97e94 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0xa4>
   97dfc:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   97e00:	aa0003e6 	mov	x6, x0
   97e04:	aa0103f4 	mov	x20, x1
   97e08:	aa0303f3 	mov	x19, x3
   97e0c:	f9000bfe 	str	x30, [sp, #16]
   97e10:	b4000621 	cbz	x1, 97ed4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0xe4>
   97e14:	b40006a2 	cbz	x2, 97ee8 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0xf8>
   97e18:	b4000433 	cbz	x19, 97e9c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0xac>
   97e1c:	71003c9f 	cmp	w4, #0xf
   97e20:	540006e8 	b.hi	97efc <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x10c>  // b.pmore
   97e24:	f940080a 	ldr	x10, [x0, #16]
   97e28:	b400074a 	cbz	x10, 97f10 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x120>
   97e2c:	b24077eb 	mov	x11, #0x3fffffff            	// #1073741823
   97e30:	eb0b027f 	cmp	x19, x11
   97e34:	54000788 	b.hi	97f24 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x134>  // b.pmore
   97e38:	b940000e 	ldr	w14, [x0]
   97e3c:	d29fffed 	mov	x13, #0xffff                	// #65535
   97e40:	117f81cf 	add	w15, w14, #0xfe0, lsl #12
   97e44:	1101c1ef 	add	w15, w15, #0x70
   97e48:	53185df0 	lsl	w16, w15, #8
   97e4c:	11008211 	add	w17, w16, #0x20
   97e50:	2a1103f2 	mov	w18, w17
   97e54:	b940025e 	ldr	w30, [x18]
   97e58:	f26403df 	tst	x30, #0x10000000
   97e5c:	fa4d1260 	ccmp	x19, x13, #0x0, ne  // ne = any
   97e60:	540006c8 	b.hi	97f38 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x148>  // b.pmore
   97e64:	52806603 	mov	w3, #0x330                 	// #816
   97e68:	32020440 	orr	w0, w2, #0xc0000000
   97e6c:	f900095f 	str	xzr, [x10, #16]
   97e70:	2a043069 	orr	w9, w3, w4, lsl #12
   97e74:	32020421 	orr	w1, w1, #0xc0000000
   97e78:	29014d41 	stp	w1, w19, [x10, #8]
   97e7c:	29000149 	stp	w9, w0, [x10]
   97e80:	35000185 	cbnz	w5, 97eb0 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0xc0>
   97e84:	f9400bfe 	ldr	x30, [sp, #16]
   97e88:	f90020df 	str	xzr, [x6, #64]
   97e8c:	a8c253f3 	ldp	x19, x20, [sp], #32
   97e90:	d65f03c0 	ret
   97e94:	aa0803e0 	mov	x0, x8
   97e98:	14000752 	b	99be0 <CDMA4Channel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)>
   97e9c:	d0000022 	adrp	x2, 9d000 <font_data+0x558>
   97ea0:	91232041 	add	x1, x2, #0x8c8
   97ea4:	91036020 	add	x0, x1, #0xd8
   97ea8:	52801222 	mov	w2, #0x91                  	// #145
   97eac:	97ffc531 	bl	89370 <assertion_failed>
   97eb0:	aa0203e0 	mov	x0, x2
   97eb4:	aa1303e1 	mov	x1, x19
   97eb8:	a9044cd4 	stp	x20, x19, [x6, #64]
   97ebc:	97fff70d 	bl	95af0 <CleanAndInvalidateDataCacheRange>
   97ec0:	aa1303e1 	mov	x1, x19
   97ec4:	aa1403e0 	mov	x0, x20
   97ec8:	f9400bfe 	ldr	x30, [sp, #16]
   97ecc:	a8c253f3 	ldp	x19, x20, [sp], #32
   97ed0:	17fff708 	b	95af0 <CleanAndInvalidateDataCacheRange>
   97ed4:	d0000021 	adrp	x1, 9d000 <font_data+0x558>
   97ed8:	91232021 	add	x1, x1, #0x8c8
   97edc:	9102c020 	add	x0, x1, #0xb0
   97ee0:	528011e2 	mov	w2, #0x8f                  	// #143
   97ee4:	97ffc523 	bl	89370 <assertion_failed>
   97ee8:	d0000020 	adrp	x0, 9d000 <font_data+0x558>
   97eec:	91232001 	add	x1, x0, #0x8c8
   97ef0:	91032020 	add	x0, x1, #0xc8
   97ef4:	52801202 	mov	w2, #0x90                  	// #144
   97ef8:	97ffc51e 	bl	89370 <assertion_failed>
   97efc:	d0000024 	adrp	x4, 9d000 <font_data+0x558>
   97f00:	91232081 	add	x1, x4, #0x8c8
   97f04:	9103a020 	add	x0, x1, #0xe8
   97f08:	52801242 	mov	w2, #0x92                  	// #146
   97f0c:	97ffc519 	bl	89370 <assertion_failed>
   97f10:	d0000025 	adrp	x5, 9d000 <font_data+0x558>
   97f14:	912320a1 	add	x1, x5, #0x8c8
   97f18:	91040020 	add	x0, x1, #0x100
   97f1c:	52801282 	mov	w2, #0x94                  	// #148
   97f20:	97ffc514 	bl	89370 <assertion_failed>
   97f24:	d000002c 	adrp	x12, 9d000 <font_data+0x558>
   97f28:	91232181 	add	x1, x12, #0x8c8
   97f2c:	91046020 	add	x0, x1, #0x118
   97f30:	528012a2 	mov	w2, #0x95                  	// #149
   97f34:	97ffc50f 	bl	89370 <assertion_failed>
   97f38:	d0000028 	adrp	x8, 9d000 <font_data+0x558>
   97f3c:	91232101 	add	x1, x8, #0x8c8
   97f40:	9104c020 	add	x0, x1, #0x130
   97f44:	528012e2 	mov	w2, #0x97                  	// #151
   97f48:	97ffc50a 	bl	89370 <assertion_failed>
   97f4c:	d503201f 	nop

0000000000097f50 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)>:
   97f50:	f9402809 	ldr	x9, [x0, #80]
   97f54:	b50004c9 	cbnz	x9, 97fec <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0x9c>
   97f58:	f81f0ffe 	str	x30, [sp, #-16]!
   97f5c:	aa0103e7 	mov	x7, x1
   97f60:	aa0303ea 	mov	x10, x3
   97f64:	aa0003e5 	mov	x5, x0
   97f68:	b4000501 	cbz	x1, 98008 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0xb8>
   97f6c:	b4000583 	cbz	x3, 9801c <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0xcc>
   97f70:	b24077e6 	mov	x6, #0x3fffffff            	// #1073741823
   97f74:	eb06007f 	cmp	x3, x6
   97f78:	540003e8 	b.hi	97ff4 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0xa4>  // b.pmore
   97f7c:	b940000b 	ldr	w11, [x0]
   97f80:	d29fffe8 	mov	x8, #0xffff                	// #65535
   97f84:	117f816c 	add	w12, w11, #0xfe0, lsl #12
   97f88:	1101c18c 	add	w12, w12, #0x70
   97f8c:	53185d8d 	lsl	w13, w12, #8
   97f90:	110081ae 	add	w14, w13, #0x20
   97f94:	2a0e03ef 	mov	w15, w14
   97f98:	b94001f0 	ldr	w16, [x15]
   97f9c:	f264021f 	tst	x16, #0x10000000
   97fa0:	fa481060 	ccmp	x3, x8, #0x0, ne  // ne = any
   97fa4:	540005a8 	b.hi	98058 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0x108>  // b.pmore
   97fa8:	72005c52 	ands	w18, w2, #0xffffff
   97fac:	54000420 	b.eq	98030 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0xe0>  // b.none
   97fb0:	52afc003 	mov	w3, #0x7e000000            	// #2113929216
   97fb4:	f9400802 	ldr	x2, [x0, #16]
   97fb8:	0b030246 	add	w6, w18, w3
   97fbc:	b4000442 	cbz	x2, 98044 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0xf4>
   97fc0:	52808701 	mov	w1, #0x438                 	// #1080
   97fc4:	320204e0 	orr	w0, w7, #0xc0000000
   97fc8:	f84107fe 	ldr	x30, [sp], #16
   97fcc:	2a044028 	orr	w8, w1, w4, lsl #16
   97fd0:	f900085f 	str	xzr, [x2, #16]
   97fd4:	aa0a03e1 	mov	x1, x10
   97fd8:	29012840 	stp	w0, w10, [x2, #8]
   97fdc:	aa0703e0 	mov	x0, x7
   97fe0:	29001848 	stp	w8, w6, [x2]
   97fe4:	a90428a7 	stp	x7, x10, [x5, #64]
   97fe8:	17fff6c2 	b	95af0 <CleanAndInvalidateDataCacheRange>
   97fec:	aa0903e0 	mov	x0, x9
   97ff0:	14000744 	b	99d00 <CDMA4Channel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)>
   97ff4:	d0000022 	adrp	x2, 9d000 <font_data+0x558>
   97ff8:	91232041 	add	x1, x2, #0x8c8
   97ffc:	91046020 	add	x0, x1, #0x118
   98000:	528017e2 	mov	w2, #0xbf                  	// #191
   98004:	97ffc4db 	bl	89370 <assertion_failed>
   98008:	b0000021 	adrp	x1, 9d000 <font_data+0x558>
   9800c:	91232021 	add	x1, x1, #0x8c8
   98010:	9102c020 	add	x0, x1, #0xb0
   98014:	528017a2 	mov	w2, #0xbd                  	// #189
   98018:	97ffc4d6 	bl	89370 <assertion_failed>
   9801c:	b0000020 	adrp	x0, 9d000 <font_data+0x558>
   98020:	91232001 	add	x1, x0, #0x8c8
   98024:	91036020 	add	x0, x1, #0xd8
   98028:	528017c2 	mov	w2, #0xbe                  	// #190
   9802c:	97ffc4d1 	bl	89370 <assertion_failed>
   98030:	b000003e 	adrp	x30, 9d000 <font_data+0x558>
   98034:	912323c1 	add	x1, x30, #0x8c8
   98038:	91062020 	add	x0, x1, #0x188
   9803c:	52801882 	mov	w2, #0xc4                  	// #196
   98040:	97ffc4cc 	bl	89370 <assertion_failed>
   98044:	b0000027 	adrp	x7, 9d000 <font_data+0x558>
   98048:	912320e1 	add	x1, x7, #0x8c8
   9804c:	91040020 	add	x0, x1, #0x100
   98050:	528018e2 	mov	w2, #0xc7                  	// #199
   98054:	97ffc4c7 	bl	89370 <assertion_failed>
   98058:	b0000024 	adrp	x4, 9d000 <font_data+0x558>
   9805c:	91232081 	add	x1, x4, #0x8c8
   98060:	9104c020 	add	x0, x1, #0x130
   98064:	52801822 	mov	w2, #0xc1                  	// #193
   98068:	97ffc4c2 	bl	89370 <assertion_failed>
   9806c:	d503201f 	nop

0000000000098070 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)>:
   98070:	f9402809 	ldr	x9, [x0, #80]
   98074:	b50004c9 	cbnz	x9, 9810c <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0x9c>
   98078:	f81f0ffe 	str	x30, [sp, #-16]!
   9807c:	2a0103e5 	mov	w5, w1
   98080:	aa0203e7 	mov	x7, x2
   98084:	aa0303e1 	mov	x1, x3
   98088:	aa0003e3 	mov	x3, x0
   9808c:	b40004e2 	cbz	x2, 98128 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0xb8>
   98090:	b4000561 	cbz	x1, 9813c <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0xcc>
   98094:	b24077e6 	mov	x6, #0x3fffffff            	// #1073741823
   98098:	eb06003f 	cmp	x1, x6
   9809c:	540003c8 	b.hi	98114 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0xa4>  // b.pmore
   980a0:	b940000b 	ldr	w11, [x0]
   980a4:	d29fffea 	mov	x10, #0xffff                	// #65535
   980a8:	117f816c 	add	w12, w11, #0xfe0, lsl #12
   980ac:	1101c18c 	add	w12, w12, #0x70
   980b0:	53185d8d 	lsl	w13, w12, #8
   980b4:	110081ae 	add	w14, w13, #0x20
   980b8:	2a0e03ef 	mov	w15, w14
   980bc:	b94001f0 	ldr	w16, [x15]
   980c0:	f264021f 	tst	x16, #0x10000000
   980c4:	fa4a1020 	ccmp	x1, x10, #0x0, ne  // ne = any
   980c8:	54000588 	b.hi	98178 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0x108>  // b.pmore
   980cc:	72005cb2 	ands	w18, w5, #0xffffff
   980d0:	54000400 	b.eq	98150 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0xe0>  // b.none
   980d4:	52afc009 	mov	w9, #0x7e000000            	// #2113929216
   980d8:	f9400802 	ldr	x2, [x0, #16]
   980dc:	0b090245 	add	w5, w18, w9
   980e0:	b4000422 	cbz	x2, 98164 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0xf4>
   980e4:	52806906 	mov	w6, #0x348                 	// #840
   980e8:	320204e0 	orr	w0, w7, #0xc0000000
   980ec:	f84107fe 	ldr	x30, [sp], #16
   980f0:	2a0440c4 	orr	w4, w6, w4, lsl #16
   980f4:	29010445 	stp	w5, w1, [x2, #8]
   980f8:	f900085f 	str	xzr, [x2, #16]
   980fc:	29000044 	stp	w4, w0, [x2]
   98100:	aa0703e0 	mov	x0, x7
   98104:	f900207f 	str	xzr, [x3, #64]
   98108:	17fff67a 	b	95af0 <CleanAndInvalidateDataCacheRange>
   9810c:	aa0903e0 	mov	x0, x9
   98110:	14000734 	b	99de0 <CDMA4Channel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)>
   98114:	b0000024 	adrp	x4, 9d000 <font_data+0x558>
   98118:	91232081 	add	x1, x4, #0x8c8
   9811c:	91046020 	add	x0, x1, #0x118
   98120:	52801ce2 	mov	w2, #0xe7                  	// #231
   98124:	97ffc493 	bl	89370 <assertion_failed>
   98128:	b0000020 	adrp	x0, 9d000 <font_data+0x558>
   9812c:	91232001 	add	x1, x0, #0x8c8
   98130:	91032020 	add	x0, x1, #0xc8
   98134:	52801ca2 	mov	w2, #0xe5                  	// #229
   98138:	97ffc48e 	bl	89370 <assertion_failed>
   9813c:	b0000022 	adrp	x2, 9d000 <font_data+0x558>
   98140:	91232041 	add	x1, x2, #0x8c8
   98144:	91036020 	add	x0, x1, #0xd8
   98148:	52801cc2 	mov	w2, #0xe6                  	// #230
   9814c:	97ffc489 	bl	89370 <assertion_failed>
   98150:	b000003e 	adrp	x30, 9d000 <font_data+0x558>
   98154:	912323c1 	add	x1, x30, #0x8c8
   98158:	91062020 	add	x0, x1, #0x188
   9815c:	52801d82 	mov	w2, #0xec                  	// #236
   98160:	97ffc484 	bl	89370 <assertion_failed>
   98164:	b0000027 	adrp	x7, 9d000 <font_data+0x558>
   98168:	912320e1 	add	x1, x7, #0x8c8
   9816c:	91040020 	add	x0, x1, #0x100
   98170:	52801de2 	mov	w2, #0xef                  	// #239
   98174:	97ffc47f 	bl	89370 <assertion_failed>
   98178:	b0000031 	adrp	x17, 9d000 <font_data+0x558>
   9817c:	91232221 	add	x1, x17, #0x8c8
   98180:	9104c020 	add	x0, x1, #0x130
   98184:	52801d22 	mov	w2, #0xe9                  	// #233
   98188:	97ffc47a 	bl	89370 <assertion_failed>
   9818c:	d503201f 	nop

0000000000098190 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)>:
   98190:	f940280d 	ldr	x13, [x0, #80]
   98194:	b500062d 	cbnz	x13, 98258 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0xc8>
   98198:	f81f0ffe 	str	x30, [sp, #-16]!
   9819c:	aa0103e9 	mov	x9, x1
   981a0:	2a0403ee 	mov	w14, w4
   981a4:	aa0303ef 	mov	x15, x3
   981a8:	aa0003e7 	mov	x7, x0
   981ac:	b4000641 	cbz	x1, 98274 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0xe4>
   981b0:	aa0203ea 	mov	x10, x2
   981b4:	b40006a2 	cbz	x2, 98288 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0xf8>
   981b8:	b4000543 	cbz	x3, 98260 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0xd0>
   981bc:	d29fffe8 	mov	x8, #0xffff                	// #65535
   981c0:	eb08007f 	cmp	x3, x8
   981c4:	540006c8 	b.hi	9829c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x10c>  // b.pmore
   981c8:	34000744 	cbz	w4, 982b0 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x120>
   981cc:	5287ffeb 	mov	w11, #0x3fff                	// #16383
   981d0:	6b0b009f 	cmp	w4, w11
   981d4:	54000788 	b.hi	982c4 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x134>  // b.pmore
   981d8:	eb0800bf 	cmp	x5, x8
   981dc:	aa0503f0 	mov	x16, x5
   981e0:	540007c8 	b.hi	982d8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x148>  // b.pmore
   981e4:	71003cdf 	cmp	w6, #0xf
   981e8:	2a0603f2 	mov	w18, w6
   981ec:	54000808 	b.hi	982ec <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x15c>  // b.pmore
   981f0:	b940000d 	ldr	w13, [x0]
   981f4:	117f81a3 	add	w3, w13, #0xfe0, lsl #12
   981f8:	1101c063 	add	w3, w3, #0x70
   981fc:	53185c64 	lsl	w4, w3, #8
   98200:	11008081 	add	w1, w4, #0x20
   98204:	2a0103e0 	mov	w0, w1
   98208:	b9400002 	ldr	w2, [x0]
   9820c:	37e007a2 	tbnz	w2, #28, 98300 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x170>
   98210:	f94008e5 	ldr	x5, [x7, #16]
   98214:	b4000805 	cbz	x5, 98314 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x184>
   98218:	52806648 	mov	w8, #0x332                 	// #818
   9821c:	510005c6 	sub	w6, w14, #0x1
   98220:	2a12310c 	orr	w12, w8, w18, lsl #12
   98224:	53103e0b 	lsl	w11, w16, #16
   98228:	2a0e03fe 	mov	w30, w14
   9822c:	2a0641f0 	orr	w16, w15, w6, lsl #16
   98230:	32020531 	orr	w17, w9, #0xc0000000
   98234:	32020552 	orr	w18, w10, #0xc0000000
   98238:	9b0f7fc1 	mul	x1, x30, x15
   9823c:	f84107fe 	ldr	x30, [sp], #16
   98240:	aa0a03e0 	mov	x0, x10
   98244:	290048ac 	stp	w12, w18, [x5]
   98248:	290140b1 	stp	w17, w16, [x5, #8]
   9824c:	29027cab 	stp	w11, wzr, [x5, #16]
   98250:	f90020ff 	str	xzr, [x7, #64]
   98254:	17fff627 	b	95af0 <CleanAndInvalidateDataCacheRange>
   98258:	aa0d03e0 	mov	x0, x13
   9825c:	14000719 	b	99ec0 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)>
   98260:	b0000022 	adrp	x2, 9d000 <font_data+0x558>
   98264:	91232041 	add	x1, x2, #0x8c8
   98268:	91066020 	add	x0, x1, #0x198
   9826c:	52802222 	mov	w2, #0x111                 	// #273
   98270:	97ffc440 	bl	89370 <assertion_failed>
   98274:	b0000021 	adrp	x1, 9d000 <font_data+0x558>
   98278:	91232021 	add	x1, x1, #0x8c8
   9827c:	9102c020 	add	x0, x1, #0xb0
   98280:	528021e2 	mov	w2, #0x10f                 	// #271
   98284:	97ffc43b 	bl	89370 <assertion_failed>
   98288:	b0000020 	adrp	x0, 9d000 <font_data+0x558>
   9828c:	91232001 	add	x1, x0, #0x8c8
   98290:	91032020 	add	x0, x1, #0xc8
   98294:	52802202 	mov	w2, #0x110                 	// #272
   98298:	97ffc436 	bl	89370 <assertion_failed>
   9829c:	b0000025 	adrp	x5, 9d000 <font_data+0x558>
   982a0:	912320a1 	add	x1, x5, #0x8c8
   982a4:	9106c020 	add	x0, x1, #0x1b0
   982a8:	52802242 	mov	w2, #0x112                 	// #274
   982ac:	97ffc431 	bl	89370 <assertion_failed>
   982b0:	b0000026 	adrp	x6, 9d000 <font_data+0x558>
   982b4:	912320c1 	add	x1, x6, #0x8c8
   982b8:	91072020 	add	x0, x1, #0x1c8
   982bc:	52802262 	mov	w2, #0x113                 	// #275
   982c0:	97ffc42c 	bl	89370 <assertion_failed>
   982c4:	b000002c 	adrp	x12, 9d000 <font_data+0x558>
   982c8:	91232181 	add	x1, x12, #0x8c8
   982cc:	91076020 	add	x0, x1, #0x1d8
   982d0:	52802282 	mov	w2, #0x114                 	// #276
   982d4:	97ffc427 	bl	89370 <assertion_failed>
   982d8:	b0000031 	adrp	x17, 9d000 <font_data+0x558>
   982dc:	91232221 	add	x1, x17, #0x8c8
   982e0:	9107c020 	add	x0, x1, #0x1f0
   982e4:	528022a2 	mov	w2, #0x115                 	// #277
   982e8:	97ffc422 	bl	89370 <assertion_failed>
   982ec:	b000003e 	adrp	x30, 9d000 <font_data+0x558>
   982f0:	912323c1 	add	x1, x30, #0x8c8
   982f4:	9103a020 	add	x0, x1, #0xe8
   982f8:	528022c2 	mov	w2, #0x116                 	// #278
   982fc:	97ffc41d 	bl	89370 <assertion_failed>
   98300:	b0000029 	adrp	x9, 9d000 <font_data+0x558>
   98304:	91232121 	add	x1, x9, #0x8c8
   98308:	91082020 	add	x0, x1, #0x208
   9830c:	52802302 	mov	w2, #0x118                 	// #280
   98310:	97ffc418 	bl	89370 <assertion_failed>
   98314:	b000002e 	adrp	x14, 9d000 <font_data+0x558>
   98318:	912321c1 	add	x1, x14, #0x8c8
   9831c:	91040020 	add	x0, x1, #0x100
   98320:	52802342 	mov	w2, #0x11a                 	// #282
   98324:	97ffc413 	bl	89370 <assertion_failed>
   98328:	d503201f 	nop
   9832c:	d503201f 	nop

0000000000098330 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)>:
   98330:	f9402804 	ldr	x4, [x0, #80]
   98334:	b5000264 	cbnz	x4, 98380 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x50>
   98338:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   9833c:	aa0103f4 	mov	x20, x1
   98340:	aa0003f3 	mov	x19, x0
   98344:	b9400001 	ldr	w1, [x0]
   98348:	a9017bf5 	stp	x21, x30, [sp, #16]
   9834c:	7100203f 	cmp	w1, #0x8
   98350:	54000388 	b.hi	983c0 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x90>  // b.pmore
   98354:	f9400c00 	ldr	x0, [x0, #24]
   98358:	b40003e0 	cbz	x0, 983d4 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0xa4>
   9835c:	39408263 	ldrb	w3, [x19, #32]
   98360:	aa0203f5 	mov	x21, x2
   98364:	34000123 	cbz	w3, 98388 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x58>
   98368:	f9001674 	str	x20, [x19, #40]
   9836c:	b4000214 	cbz	x20, 983ac <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x7c>
   98370:	f9001a75 	str	x21, [x19, #48]
   98374:	a9417bf5 	ldp	x21, x30, [sp, #16]
   98378:	a8c253f3 	ldp	x19, x20, [sp], #32
   9837c:	d65f03c0 	ret
   98380:	aa0403e0 	mov	x0, x4
   98384:	14000727 	b	9a020 <CDMA4Channel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)>
   98388:	90000005 	adrp	x5, 98000 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0xb0>
   9838c:	1101c021 	add	w1, w1, #0x70
   98390:	911d00a2 	add	x2, x5, #0x740
   98394:	aa1303e3 	mov	x3, x19
   98398:	97fff876 	bl	96570 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   9839c:	52800026 	mov	w6, #0x1                   	// #1
   983a0:	f9001674 	str	x20, [x19, #40]
   983a4:	39008266 	strb	w6, [x19, #32]
   983a8:	b5fffe54 	cbnz	x20, 98370 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x40>
   983ac:	b0000027 	adrp	x7, 9d000 <font_data+0x558>
   983b0:	912320e1 	add	x1, x7, #0x8c8
   983b4:	9109e020 	add	x0, x1, #0x278
   983b8:	52802882 	mov	w2, #0x144                 	// #324
   983bc:	97ffc3ed 	bl	89370 <assertion_failed>
   983c0:	b0000020 	adrp	x0, 9d000 <font_data+0x558>
   983c4:	91232001 	add	x1, x0, #0x8c8
   983c8:	91090020 	add	x0, x1, #0x240
   983cc:	52802722 	mov	w2, #0x139                 	// #313
   983d0:	97ffc3e8 	bl	89370 <assertion_failed>
   983d4:	b0000022 	adrp	x2, 9d000 <font_data+0x558>
   983d8:	91232041 	add	x1, x2, #0x8c8
   983dc:	91098020 	add	x0, x1, #0x260
   983e0:	52802742 	mov	w2, #0x13a                 	// #314
   983e4:	97ffc3e3 	bl	89370 <assertion_failed>
   983e8:	d503201f 	nop
   983ec:	d503201f 	nop

00000000000983f0 <CDMAChannel::Start()>:
   983f0:	f9402801 	ldr	x1, [x0, #80]
   983f4:	b50005e1 	cbnz	x1, 984b0 <CDMAChannel::Start()+0xc0>
   983f8:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   983fc:	aa0003f3 	mov	x19, x0
   98400:	b9400002 	ldr	w2, [x0]
   98404:	f9000bfe 	str	x30, [sp, #16]
   98408:	71001c5f 	cmp	w2, #0x7
   9840c:	54000568 	b.hi	984b8 <CDMAChannel::Start()+0xc8>  // b.pmore
   98410:	f9400800 	ldr	x0, [x0, #16]
   98414:	b40005c0 	cbz	x0, 984cc <CDMAChannel::Start()+0xdc>
   98418:	f9401664 	ldr	x4, [x19, #40]
   9841c:	b4000104 	cbz	x4, 9843c <CDMAChannel::Start()+0x4c>
   98420:	f9400e65 	ldr	x5, [x19, #24]
   98424:	b4000725 	cbz	x5, 98508 <CDMAChannel::Start()+0x118>
   98428:	39408267 	ldrb	w7, [x19, #32]
   9842c:	34000787 	cbz	w7, 9851c <CDMAChannel::Start()+0x12c>
   98430:	b9400009 	ldr	w9, [x0]
   98434:	3200012a 	orr	w10, w9, #0x1
   98438:	b900000a 	str	w10, [x0]
   9843c:	52800e14 	mov	w20, #0x70                  	// #112
   98440:	72a01fd4 	movk	w20, #0xfe, lsl #16
   98444:	0b14004b 	add	w11, w2, w20
   98448:	53185d6c 	lsl	w12, w11, #8
   9844c:	2a0c03ed 	mov	w13, w12
   98450:	b94001ae 	ldr	w14, [x13]
   98454:	3710046e 	tbnz	w14, #2, 984e0 <CDMAChannel::Start()+0xf0>
   98458:	d28ffc10 	mov	x16, #0x7fe0                	// #32736
   9845c:	f2bfc010 	movk	x16, #0xfe00, lsl #16
   98460:	b940021e 	ldr	w30, [x16]
   98464:	52800031 	mov	w17, #0x1                   	// #1
   98468:	1ac22232 	lsl	w18, w17, w2
   9846c:	6a1e025f 	tst	w18, w30
   98470:	54000421 	b.ne	984f4 <CDMAChannel::Start()+0x104>  // b.any
   98474:	11001182 	add	w2, w12, #0x4
   98478:	32020403 	orr	w3, w0, #0xc0000000
   9847c:	2a0203e4 	mov	w4, w2
   98480:	d2800401 	mov	x1, #0x20                  	// #32
   98484:	b9000083 	str	w3, [x4]
   98488:	97fff59a 	bl	95af0 <CleanAndInvalidateDataCacheRange>
   9848c:	b9400273 	ldr	w19, [x19]
   98490:	52800025 	mov	w5, #0x1                   	// #1
   98494:	72a21e25 	movk	w5, #0x10f1, lsl #16
   98498:	f9400bfe 	ldr	x30, [sp, #16]
   9849c:	0b140260 	add	w0, w19, w20
   984a0:	53185c06 	lsl	w6, w0, #8
   984a4:	b90000c5 	str	w5, [x6]
   984a8:	a8c253f3 	ldp	x19, x20, [sp], #32
   984ac:	d65f03c0 	ret
   984b0:	aa0103e0 	mov	x0, x1
   984b4:	1400070b 	b	9a0e0 <CDMA4Channel::Start()>
   984b8:	b0000020 	adrp	x0, 9d000 <font_data+0x558>
   984bc:	91232001 	add	x1, x0, #0x8c8
   984c0:	9100c020 	add	x0, x1, #0x30
   984c4:	52802a82 	mov	w2, #0x154                 	// #340
   984c8:	97ffc3aa 	bl	89370 <assertion_failed>
   984cc:	b0000023 	adrp	x3, 9d000 <font_data+0x558>
   984d0:	91232061 	add	x1, x3, #0x8c8
   984d4:	91040020 	add	x0, x1, #0x100
   984d8:	52802aa2 	mov	w2, #0x155                 	// #341
   984dc:	97ffc3a5 	bl	89370 <assertion_failed>
   984e0:	b000002f 	adrp	x15, 9d000 <font_data+0x558>
   984e4:	912321e1 	add	x1, x15, #0x8c8
   984e8:	910aa020 	add	x0, x1, #0x2a8
   984ec:	52802c02 	mov	w2, #0x160                 	// #352
   984f0:	97ffc3a0 	bl	89370 <assertion_failed>
   984f4:	b0000021 	adrp	x1, 9d000 <font_data+0x558>
   984f8:	91232021 	add	x1, x1, #0x8c8
   984fc:	910b8020 	add	x0, x1, #0x2e0
   98500:	52802c22 	mov	w2, #0x161                 	// #353
   98504:	97ffc39b 	bl	89370 <assertion_failed>
   98508:	b0000026 	adrp	x6, 9d000 <font_data+0x558>
   9850c:	912320c1 	add	x1, x6, #0x8c8
   98510:	91098020 	add	x0, x1, #0x260
   98514:	52802b22 	mov	w2, #0x159                 	// #345
   98518:	97ffc396 	bl	89370 <assertion_failed>
   9851c:	b0000028 	adrp	x8, 9d000 <font_data+0x558>
   98520:	91232101 	add	x1, x8, #0x8c8
   98524:	910a6020 	add	x0, x1, #0x298
   98528:	52802b42 	mov	w2, #0x15a                 	// #346
   9852c:	97ffc391 	bl	89370 <assertion_failed>

0000000000098530 <CDMAChannel::Wait()>:
   98530:	f9402801 	ldr	x1, [x0, #80]
   98534:	b4000061 	cbz	x1, 98540 <CDMAChannel::Wait()+0x10>
   98538:	aa0103e0 	mov	x0, x1
   9853c:	1400073d 	b	9a230 <CDMA4Channel::Wait()>
   98540:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   98544:	aa0003f3 	mov	x19, x0
   98548:	b9400002 	ldr	w2, [x0]
   9854c:	71001c5f 	cmp	w2, #0x7
   98550:	540002a8 	b.hi	985a4 <CDMAChannel::Wait()+0x74>  // b.pmore
   98554:	f9401403 	ldr	x3, [x0, #40]
   98558:	b5000303 	cbnz	x3, 985b8 <CDMAChannel::Wait()+0x88>
   9855c:	117f8045 	add	w5, w2, #0xfe0, lsl #12
   98560:	1101c0a5 	add	w5, w5, #0x70
   98564:	53185ca6 	lsl	w6, w5, #8
   98568:	b94000c7 	ldr	w7, [x6]
   9856c:	3707ffe7 	tbnz	w7, #0, 98568 <CDMAChannel::Wait()+0x38>
   98570:	d27800e8 	eor	x8, x7, #0x100
   98574:	f9402269 	ldr	x9, [x19, #64]
   98578:	53082100 	ubfx	w0, w8, #8, #1
   9857c:	3900e260 	strb	w0, [x19, #56]
   98580:	b5000069 	cbnz	x9, 9858c <CDMAChannel::Wait()+0x5c>
   98584:	a8c17bf3 	ldp	x19, x30, [sp], #16
   98588:	d65f03c0 	ret
   9858c:	aa0903e0 	mov	x0, x9
   98590:	f9402661 	ldr	x1, [x19, #72]
   98594:	97fff557 	bl	95af0 <CleanAndInvalidateDataCacheRange>
   98598:	3940e260 	ldrb	w0, [x19, #56]
   9859c:	a8c17bf3 	ldp	x19, x30, [sp], #16
   985a0:	d65f03c0 	ret
   985a4:	b0000020 	adrp	x0, 9d000 <font_data+0x558>
   985a8:	91232001 	add	x1, x0, #0x8c8
   985ac:	9100c020 	add	x0, x1, #0x30
   985b0:	52802f02 	mov	w2, #0x178                 	// #376
   985b4:	97ffc36f 	bl	89370 <assertion_failed>
   985b8:	b0000024 	adrp	x4, 9d000 <font_data+0x558>
   985bc:	91232081 	add	x1, x4, #0x8c8
   985c0:	910c6020 	add	x0, x1, #0x318
   985c4:	52802f22 	mov	w2, #0x179                 	// #377
   985c8:	97ffc36a 	bl	89370 <assertion_failed>
   985cc:	d503201f 	nop

00000000000985d0 <CDMAChannel::GetStatus()>:
   985d0:	f9402801 	ldr	x1, [x0, #80]
   985d4:	b4000061 	cbz	x1, 985e0 <CDMAChannel::GetStatus()+0x10>
   985d8:	aa0103e0 	mov	x0, x1
   985dc:	14000741 	b	9a2e0 <CDMA4Channel::GetStatus()>
   985e0:	b9400002 	ldr	w2, [x0]
   985e4:	f81f0ffe 	str	x30, [sp, #-16]!
   985e8:	71001c5f 	cmp	w2, #0x7
   985ec:	54000128 	b.hi	98610 <CDMAChannel::GetStatus()+0x40>  // b.pmore
   985f0:	117f8043 	add	w3, w2, #0xfe0, lsl #12
   985f4:	1101c063 	add	w3, w3, #0x70
   985f8:	53185c64 	lsl	w4, w3, #8
   985fc:	b9400085 	ldr	w5, [x4]
   98600:	37000125 	tbnz	w5, #0, 98624 <CDMAChannel::GetStatus()+0x54>
   98604:	3940e000 	ldrb	w0, [x0, #56]
   98608:	f84107fe 	ldr	x30, [sp], #16
   9860c:	d65f03c0 	ret
   98610:	b0000020 	adrp	x0, 9d000 <font_data+0x558>
   98614:	91232001 	add	x1, x0, #0x8c8
   98618:	9100c020 	add	x0, x1, #0x30
   9861c:	52803302 	mov	w2, #0x198                 	// #408
   98620:	97ffc354 	bl	89370 <assertion_failed>
   98624:	b0000026 	adrp	x6, 9d000 <font_data+0x558>
   98628:	912320c1 	add	x1, x6, #0x8c8
   9862c:	910ce020 	add	x0, x1, #0x338
   98630:	52803322 	mov	w2, #0x199                 	// #409
   98634:	97ffc34f 	bl	89370 <assertion_failed>
   98638:	d503201f 	nop
   9863c:	d503201f 	nop

0000000000098640 <CDMAChannel::InterruptHandler()>:
   98640:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   98644:	aa0003f3 	mov	x19, x0
   98648:	f9402000 	ldr	x0, [x0, #64]
   9864c:	b50003c0 	cbnz	x0, 986c4 <CDMAChannel::InterruptHandler()+0x84>
   98650:	b9400261 	ldr	w1, [x19]
   98654:	71001c3f 	cmp	w1, #0x7
   98658:	54000408 	b.hi	986d8 <CDMAChannel::InterruptHandler()+0x98>  // b.pmore
   9865c:	d28ffc02 	mov	x2, #0x7fe0                	// #32736
   98660:	f2bfc002 	movk	x2, #0xfe00, lsl #16
   98664:	b9400045 	ldr	w5, [x2]
   98668:	52800023 	mov	w3, #0x1                   	// #1
   9866c:	1ac12064 	lsl	w4, w3, w1
   98670:	6a05009f 	tst	w4, w5
   98674:	540003c0 	b.eq	986ec <CDMAChannel::InterruptHandler()+0xac>  // b.none
   98678:	b9000044 	str	w4, [x2]
   9867c:	b9400267 	ldr	w7, [x19]
   98680:	117f80e8 	add	w8, w7, #0xfe0, lsl #12
   98684:	1101c108 	add	w8, w8, #0x70
   98688:	53185d09 	lsl	w9, w8, #8
   9868c:	b940012a 	ldr	w10, [x9]
   98690:	3610038a 	tbz	w10, #2, 98700 <CDMAChannel::InterruptHandler()+0xc0>
   98694:	3700040a 	tbnz	w10, #0, 98714 <CDMAChannel::InterruptHandler()+0xd4>
   98698:	d278014d 	eor	x13, x10, #0x100
   9869c:	5280008e 	mov	w14, #0x4                   	// #4
   986a0:	f940166f 	ldr	x15, [x19, #40]
   986a4:	530821a1 	ubfx	w1, w13, #8, #1
   986a8:	b900012e 	str	w14, [x9]
   986ac:	3900e261 	strb	w1, [x19, #56]
   986b0:	b40003cf 	cbz	x15, 98728 <CDMAChannel::InterruptHandler()+0xe8>
   986b4:	b9400260 	ldr	w0, [x19]
   986b8:	f9401a62 	ldr	x2, [x19, #48]
   986bc:	a8c17bf3 	ldp	x19, x30, [sp], #16
   986c0:	d61f01e0 	br	x15
   986c4:	f9402661 	ldr	x1, [x19, #72]
   986c8:	97fff50a 	bl	95af0 <CleanAndInvalidateDataCacheRange>
   986cc:	b9400261 	ldr	w1, [x19]
   986d0:	71001c3f 	cmp	w1, #0x7
   986d4:	54fffc49 	b.ls	9865c <CDMAChannel::InterruptHandler()+0x1c>  // b.plast
   986d8:	b0000020 	adrp	x0, 9d000 <font_data+0x558>
   986dc:	91232001 	add	x1, x0, #0x8c8
   986e0:	9100c020 	add	x0, x1, #0x30
   986e4:	528034e2 	mov	w2, #0x1a7                 	// #423
   986e8:	97ffc322 	bl	89370 <assertion_failed>
   986ec:	b0000026 	adrp	x6, 9d000 <font_data+0x558>
   986f0:	912320c1 	add	x1, x6, #0x8c8
   986f4:	910dc020 	add	x0, x1, #0x370
   986f8:	528035a2 	mov	w2, #0x1ad                 	// #429
   986fc:	97ffc31d 	bl	89370 <assertion_failed>
   98700:	b000002b 	adrp	x11, 9d000 <font_data+0x558>
   98704:	91232161 	add	x1, x11, #0x8c8
   98708:	910e2020 	add	x0, x1, #0x388
   9870c:	52803622 	mov	w2, #0x1b1                 	// #433
   98710:	97ffc318 	bl	89370 <assertion_failed>
   98714:	b000002c 	adrp	x12, 9d000 <font_data+0x558>
   98718:	91232181 	add	x1, x12, #0x8c8
   9871c:	910e6020 	add	x0, x1, #0x398
   98720:	52803642 	mov	w2, #0x1b2                 	// #434
   98724:	97ffc313 	bl	89370 <assertion_failed>
   98728:	b0000030 	adrp	x16, 9d000 <font_data+0x558>
   9872c:	91232201 	add	x1, x16, #0x8c8
   98730:	9109e020 	add	x0, x1, #0x278
   98734:	52803722 	mov	w2, #0x1b9                 	// #441
   98738:	97ffc30e 	bl	89370 <assertion_failed>
   9873c:	d503201f 	nop

0000000000098740 <CDMAChannel::InterruptStub(void*)>:
   98740:	b4000040 	cbz	x0, 98748 <CDMAChannel::InterruptStub(void*)+0x8>
   98744:	17ffffbf 	b	98640 <CDMAChannel::InterruptHandler()>
   98748:	b0000021 	adrp	x1, 9d000 <font_data+0x558>
   9874c:	91232021 	add	x1, x1, #0x8c8
   98750:	f81f0ffe 	str	x30, [sp, #-16]!
   98754:	910ec020 	add	x0, x1, #0x3b0
   98758:	52803802 	mov	w2, #0x1c0                 	// #448
   9875c:	97ffc305 	bl	89370 <assertion_failed>

0000000000098760 <CPtrList::CPtrList()>:
   98760:	f900001f 	str	xzr, [x0]
   98764:	d65f03c0 	ret
   98768:	d503201f 	nop
   9876c:	d503201f 	nop

0000000000098770 <CPtrList::~CPtrList()>:
   98770:	f9400000 	ldr	x0, [x0]
   98774:	b5000040 	cbnz	x0, 9877c <CPtrList::~CPtrList()+0xc>
   98778:	d65f03c0 	ret
   9877c:	b0000022 	adrp	x2, 9d000 <font_data+0x558>
   98780:	b0000021 	adrp	x1, 9d000 <font_data+0x558>
   98784:	f81f0ffe 	str	x30, [sp, #-16]!
   98788:	91326040 	add	x0, x2, #0xc98
   9878c:	91322021 	add	x1, x1, #0xc88
   98790:	52800542 	mov	w2, #0x2a                  	// #42
   98794:	97ffc2f7 	bl	89370 <assertion_failed>
   98798:	d503201f 	nop
   9879c:	d503201f 	nop

00000000000987a0 <CPtrList::GetFirst()>:
   987a0:	f9400000 	ldr	x0, [x0]
   987a4:	d65f03c0 	ret
   987a8:	d503201f 	nop
   987ac:	d503201f 	nop

00000000000987b0 <CPtrList::GetNext(TPtrListElement*)>:
   987b0:	f81f0ffe 	str	x30, [sp, #-16]!
   987b4:	b4000121 	cbz	x1, 987d8 <CPtrList::GetNext(TPtrListElement*)+0x28>
   987b8:	b9400022 	ldr	w2, [x1]
   987bc:	5289a863 	mov	w3, #0x4d43                	// #19779
   987c0:	72aa0983 	movk	w3, #0x504c, lsl #16
   987c4:	6b03005f 	cmp	w2, w3
   987c8:	54000141 	b.ne	987f0 <CPtrList::GetNext(TPtrListElement*)+0x40>  // b.any
   987cc:	f84107fe 	ldr	x30, [sp], #16
   987d0:	f9400820 	ldr	x0, [x1, #16]
   987d4:	d65f03c0 	ret
   987d8:	b0000021 	adrp	x1, 9d000 <font_data+0x558>
   987dc:	b0000020 	adrp	x0, 9d000 <font_data+0x558>
   987e0:	91322021 	add	x1, x1, #0xc88
   987e4:	9132a000 	add	x0, x0, #0xca8
   987e8:	52800682 	mov	w2, #0x34                  	// #52
   987ec:	97ffc2e1 	bl	89370 <assertion_failed>
   987f0:	b0000024 	adrp	x4, 9d000 <font_data+0x558>
   987f4:	b0000025 	adrp	x5, 9d000 <font_data+0x558>
   987f8:	91322081 	add	x1, x4, #0xc88
   987fc:	9132e0a0 	add	x0, x5, #0xcb8
   98800:	528006a2 	mov	w2, #0x35                  	// #53
   98804:	97ffc2db 	bl	89370 <assertion_failed>
   98808:	d503201f 	nop
   9880c:	d503201f 	nop

0000000000098810 <CPtrList::GetPtr(TPtrListElement*)>:
   98810:	f81f0ffe 	str	x30, [sp, #-16]!
   98814:	b4000121 	cbz	x1, 98838 <CPtrList::GetPtr(TPtrListElement*)+0x28>
   98818:	b9400022 	ldr	w2, [x1]
   9881c:	5289a863 	mov	w3, #0x4d43                	// #19779
   98820:	72aa0983 	movk	w3, #0x504c, lsl #16
   98824:	6b03005f 	cmp	w2, w3
   98828:	54000141 	b.ne	98850 <CPtrList::GetPtr(TPtrListElement*)+0x40>  // b.any
   9882c:	f84107fe 	ldr	x30, [sp], #16
   98830:	f9400c20 	ldr	x0, [x1, #24]
   98834:	d65f03c0 	ret
   98838:	b0000021 	adrp	x1, 9d000 <font_data+0x558>
   9883c:	b0000020 	adrp	x0, 9d000 <font_data+0x558>
   98840:	91322021 	add	x1, x1, #0xc88
   98844:	9132a000 	add	x0, x0, #0xca8
   98848:	52800782 	mov	w2, #0x3c                  	// #60
   9884c:	97ffc2c9 	bl	89370 <assertion_failed>
   98850:	b0000024 	adrp	x4, 9d000 <font_data+0x558>
   98854:	b0000025 	adrp	x5, 9d000 <font_data+0x558>
   98858:	91322081 	add	x1, x4, #0xc88
   9885c:	9132e0a0 	add	x0, x5, #0xcb8
   98860:	528007a2 	mov	w2, #0x3d                  	// #61
   98864:	97ffc2c3 	bl	89370 <assertion_failed>
   98868:	d503201f 	nop
   9886c:	d503201f 	nop

0000000000098870 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   98870:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   98874:	aa0003f4 	mov	x20, x0
   98878:	d2800400 	mov	x0, #0x20                  	// #32
   9887c:	aa0103f3 	mov	x19, x1
   98880:	f9000bfe 	str	x30, [sp, #16]
   98884:	f90017e2 	str	x2, [sp, #40]
   98888:	97fff06a 	bl	94a30 <operator new(unsigned long)>
   9888c:	f94017e2 	ldr	x2, [sp, #40]
   98890:	5289a863 	mov	w3, #0x4d43                	// #19779
   98894:	72aa0983 	movk	w3, #0x504c, lsl #16
   98898:	b9000003 	str	w3, [x0]
   9889c:	f9400281 	ldr	x1, [x20]
   988a0:	f9000c02 	str	x2, [x0, #24]
   988a4:	b4000301 	cbz	x1, 98904 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x94>
   988a8:	b40003b3 	cbz	x19, 9891c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xac>
   988ac:	b9400267 	ldr	w7, [x19]
   988b0:	6b0300ff 	cmp	w7, w3
   988b4:	54000401 	b.ne	98934 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc4>  // b.any
   988b8:	eb13003f 	cmp	x1, x19
   988bc:	54000180 	b.eq	988ec <CPtrList::InsertBefore(TPtrListElement*, void*)+0x7c>  // b.none
   988c0:	f940066a 	ldr	x10, [x19, #8]
   988c4:	a900cc0a 	stp	x10, x19, [x0, #8]
   988c8:	b40000aa 	cbz	x10, 988dc <CPtrList::InsertBefore(TPtrListElement*, void*)+0x6c>
   988cc:	b940014b 	ldr	w11, [x10]
   988d0:	6b07017f 	cmp	w11, w7
   988d4:	540003c1 	b.ne	9894c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xdc>  // b.any
   988d8:	f9000940 	str	x0, [x10, #16]
   988dc:	f9000660 	str	x0, [x19, #8]
   988e0:	f9400bfe 	ldr	x30, [sp, #16]
   988e4:	a8c353f3 	ldp	x19, x20, [sp], #48
   988e8:	d65f03c0 	ret
   988ec:	f9000420 	str	x0, [x1, #8]
   988f0:	f9000280 	str	x0, [x20]
   988f4:	a900841f 	stp	xzr, x1, [x0, #8]
   988f8:	f9400bfe 	ldr	x30, [sp, #16]
   988fc:	a8c353f3 	ldp	x19, x20, [sp], #48
   98900:	d65f03c0 	ret
   98904:	b0000024 	adrp	x4, 9d000 <font_data+0x558>
   98908:	b0000020 	adrp	x0, 9d000 <font_data+0x558>
   9890c:	91322081 	add	x1, x4, #0xc88
   98910:	91338000 	add	x0, x0, #0xce0
   98914:	52800982 	mov	w2, #0x4c                  	// #76
   98918:	97ffc296 	bl	89370 <assertion_failed>
   9891c:	b0000025 	adrp	x5, 9d000 <font_data+0x558>
   98920:	b0000026 	adrp	x6, 9d000 <font_data+0x558>
   98924:	913220a1 	add	x1, x5, #0xc88
   98928:	9133c0c0 	add	x0, x6, #0xcf0
   9892c:	528009a2 	mov	w2, #0x4d                  	// #77
   98930:	97ffc290 	bl	89370 <assertion_failed>
   98934:	b0000028 	adrp	x8, 9d000 <font_data+0x558>
   98938:	b0000029 	adrp	x9, 9d000 <font_data+0x558>
   9893c:	91322101 	add	x1, x8, #0xc88
   98940:	91340120 	add	x0, x9, #0xd00
   98944:	528009c2 	mov	w2, #0x4e                  	// #78
   98948:	97ffc28a 	bl	89370 <assertion_failed>
   9894c:	b000002c 	adrp	x12, 9d000 <font_data+0x558>
   98950:	b000002d 	adrp	x13, 9d000 <font_data+0x558>
   98954:	91322181 	add	x1, x12, #0xc88
   98958:	9134a1a0 	add	x0, x13, #0xd28
   9895c:	52800c02 	mov	w2, #0x60                  	// #96
   98960:	97ffc284 	bl	89370 <assertion_failed>
   98964:	d503201f 	nop
   98968:	d503201f 	nop
   9896c:	d503201f 	nop

0000000000098970 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   98970:	a9bd53f3 	stp	x19, x20, [sp, #-48]!
   98974:	aa0003f4 	mov	x20, x0
   98978:	d2800400 	mov	x0, #0x20                  	// #32
   9897c:	aa0103f3 	mov	x19, x1
   98980:	f9000bfe 	str	x30, [sp, #16]
   98984:	f90017e2 	str	x2, [sp, #40]
   98988:	97fff02a 	bl	94a30 <operator new(unsigned long)>
   9898c:	f94017e2 	ldr	x2, [sp, #40]
   98990:	5289a861 	mov	w1, #0x4d43                	// #19779
   98994:	72aa0981 	movk	w1, #0x504c, lsl #16
   98998:	b9000001 	str	w1, [x0]
   9899c:	f9000c02 	str	x2, [x0, #24]
   989a0:	b4000233 	cbz	x19, 989e4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x74>
   989a4:	f9400283 	ldr	x3, [x20]
   989a8:	b40002c3 	cbz	x3, 98a00 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x90>
   989ac:	b9400265 	ldr	w5, [x19]
   989b0:	6b0100bf 	cmp	w5, w1
   989b4:	54000321 	b.ne	98a18 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xa8>  // b.any
   989b8:	f9400a68 	ldr	x8, [x19, #16]
   989bc:	a900a013 	stp	x19, x8, [x0, #8]
   989c0:	b40000a8 	cbz	x8, 989d4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x64>
   989c4:	b9400109 	ldr	w9, [x8]
   989c8:	6b05013f 	cmp	w9, w5
   989cc:	54000321 	b.ne	98a30 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xc0>  // b.any
   989d0:	f9000500 	str	x0, [x8, #8]
   989d4:	f9000a60 	str	x0, [x19, #16]
   989d8:	f9400bfe 	ldr	x30, [sp, #16]
   989dc:	a8c353f3 	ldp	x19, x20, [sp], #48
   989e0:	d65f03c0 	ret
   989e4:	f940028c 	ldr	x12, [x20]
   989e8:	b500030c 	cbnz	x12, 98a48 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd8>
   989ec:	f9000280 	str	x0, [x20]
   989f0:	a900fc1f 	stp	xzr, xzr, [x0, #8]
   989f4:	f9400bfe 	ldr	x30, [sp, #16]
   989f8:	a8c353f3 	ldp	x19, x20, [sp], #48
   989fc:	d65f03c0 	ret
   98a00:	b0000024 	adrp	x4, 9d000 <font_data+0x558>
   98a04:	b0000020 	adrp	x0, 9d000 <font_data+0x558>
   98a08:	91322081 	add	x1, x4, #0xc88
   98a0c:	91338000 	add	x0, x0, #0xce0
   98a10:	52800fa2 	mov	w2, #0x7d                  	// #125
   98a14:	97ffc257 	bl	89370 <assertion_failed>
   98a18:	b0000026 	adrp	x6, 9d000 <font_data+0x558>
   98a1c:	b0000027 	adrp	x7, 9d000 <font_data+0x558>
   98a20:	913220c1 	add	x1, x6, #0xc88
   98a24:	913540e0 	add	x0, x7, #0xd50
   98a28:	52800fc2 	mov	w2, #0x7e                  	// #126
   98a2c:	97ffc251 	bl	89370 <assertion_failed>
   98a30:	b000002a 	adrp	x10, 9d000 <font_data+0x558>
   98a34:	b000002b 	adrp	x11, 9d000 <font_data+0x558>
   98a38:	91322141 	add	x1, x10, #0xc88
   98a3c:	9135e160 	add	x0, x11, #0xd78
   98a40:	528010a2 	mov	w2, #0x85                  	// #133
   98a44:	97ffc24b 	bl	89370 <assertion_failed>
   98a48:	b000002d 	adrp	x13, 9d000 <font_data+0x558>
   98a4c:	b000002e 	adrp	x14, 9d000 <font_data+0x558>
   98a50:	913221a1 	add	x1, x13, #0xc88
   98a54:	913261c0 	add	x0, x14, #0xc98
   98a58:	52800e82 	mov	w2, #0x74                  	// #116
   98a5c:	97ffc245 	bl	89370 <assertion_failed>

0000000000098a60 <CPtrList::Remove(TPtrListElement*)>:
   98a60:	f81f0ffe 	str	x30, [sp, #-16]!
   98a64:	b40005a1 	cbz	x1, 98b18 <CPtrList::Remove(TPtrListElement*)+0xb8>
   98a68:	b9400024 	ldr	w4, [x1]
   98a6c:	5289a863 	mov	w3, #0x4d43                	// #19779
   98a70:	72aa0983 	movk	w3, #0x504c, lsl #16
   98a74:	aa0103e2 	mov	x2, x1
   98a78:	6b03009f 	cmp	w4, w3
   98a7c:	540005a1 	b.ne	98b30 <CPtrList::Remove(TPtrListElement*)+0xd0>  // b.any
   98a80:	f9400007 	ldr	x7, [x0]
   98a84:	eb0100ff 	cmp	x7, x1
   98a88:	54000240 	b.eq	98ad0 <CPtrList::Remove(TPtrListElement*)+0x70>  // b.none
   98a8c:	f9400428 	ldr	x8, [x1, #8]
   98a90:	b40005c8 	cbz	x8, 98b48 <CPtrList::Remove(TPtrListElement*)+0xe8>
   98a94:	b940010b 	ldr	w11, [x8]
   98a98:	6b04017f 	cmp	w11, w4
   98a9c:	54000321 	b.ne	98b00 <CPtrList::Remove(TPtrListElement*)+0xa0>  // b.any
   98aa0:	f940082e 	ldr	x14, [x1, #16]
   98aa4:	f900090e 	str	x14, [x8, #16]
   98aa8:	b40000ae 	cbz	x14, 98abc <CPtrList::Remove(TPtrListElement*)+0x5c>
   98aac:	b94001cf 	ldr	w15, [x14]
   98ab0:	6b0b01ff 	cmp	w15, w11
   98ab4:	54000561 	b.ne	98b60 <CPtrList::Remove(TPtrListElement*)+0x100>  // b.any
   98ab8:	f90005c8 	str	x8, [x14, #8]
   98abc:	aa0203e0 	mov	x0, x2
   98ac0:	d2800401 	mov	x1, #0x20                  	// #32
   98ac4:	f84107fe 	ldr	x30, [sp], #16
   98ac8:	b900005f 	str	wzr, [x2]
   98acc:	17ffeffd 	b	94ac0 <operator delete(void*, unsigned long)>
   98ad0:	f94008f2 	ldr	x18, [x7, #16]
   98ad4:	f9000012 	str	x18, [x0]
   98ad8:	b4ffff32 	cbz	x18, 98abc <CPtrList::Remove(TPtrListElement*)+0x5c>
   98adc:	b940025e 	ldr	w30, [x18]
   98ae0:	6b0403df 	cmp	w30, w4
   98ae4:	540004a1 	b.ne	98b78 <CPtrList::Remove(TPtrListElement*)+0x118>  // b.any
   98ae8:	f900065f 	str	xzr, [x18, #8]
   98aec:	aa0203e0 	mov	x0, x2
   98af0:	d2800401 	mov	x1, #0x20                  	// #32
   98af4:	f84107fe 	ldr	x30, [sp], #16
   98af8:	b900005f 	str	wzr, [x2]
   98afc:	17ffeff1 	b	94ac0 <operator delete(void*, unsigned long)>
   98b00:	b000002c 	adrp	x12, 9d000 <font_data+0x558>
   98b04:	b000002d 	adrp	x13, 9d000 <font_data+0x558>
   98b08:	91322181 	add	x1, x12, #0xc88
   98b0c:	9137c1a0 	add	x0, x13, #0xdf0
   98b10:	528013e2 	mov	w2, #0x9f                  	// #159
   98b14:	97ffc217 	bl	89370 <assertion_failed>
   98b18:	b0000021 	adrp	x1, 9d000 <font_data+0x558>
   98b1c:	b0000020 	adrp	x0, 9d000 <font_data+0x558>
   98b20:	91322021 	add	x1, x1, #0xc88
   98b24:	9132a000 	add	x0, x0, #0xca8
   98b28:	528011e2 	mov	w2, #0x8f                  	// #143
   98b2c:	97ffc211 	bl	89370 <assertion_failed>
   98b30:	b0000025 	adrp	x5, 9d000 <font_data+0x558>
   98b34:	b0000026 	adrp	x6, 9d000 <font_data+0x558>
   98b38:	913220a1 	add	x1, x5, #0xc88
   98b3c:	9132e0c0 	add	x0, x6, #0xcb8
   98b40:	52801202 	mov	w2, #0x90                  	// #144
   98b44:	97ffc20b 	bl	89370 <assertion_failed>
   98b48:	b0000029 	adrp	x9, 9d000 <font_data+0x558>
   98b4c:	b000002a 	adrp	x10, 9d000 <font_data+0x558>
   98b50:	91322121 	add	x1, x9, #0xc88
   98b54:	91376140 	add	x0, x10, #0xdd8
   98b58:	528013c2 	mov	w2, #0x9e                  	// #158
   98b5c:	97ffc205 	bl	89370 <assertion_failed>
   98b60:	b0000030 	adrp	x16, 9d000 <font_data+0x558>
   98b64:	b0000031 	adrp	x17, 9d000 <font_data+0x558>
   98b68:	91322201 	add	x1, x16, #0xc88
   98b6c:	9136a220 	add	x0, x17, #0xda8
   98b70:	52801482 	mov	w2, #0xa4                  	// #164
   98b74:	97ffc1ff 	bl	89370 <assertion_failed>
   98b78:	b0000021 	adrp	x1, 9d000 <font_data+0x558>
   98b7c:	b0000020 	adrp	x0, 9d000 <font_data+0x558>
   98b80:	91322021 	add	x1, x1, #0xc88
   98b84:	9136a000 	add	x0, x0, #0xda8
   98b88:	52801302 	mov	w2, #0x98                  	// #152
   98b8c:	97ffc1f9 	bl	89370 <assertion_failed>

0000000000098b90 <CPtrList::Find(void*)>:
   98b90:	f9400000 	ldr	x0, [x0]
   98b94:	b4000320 	cbz	x0, 98bf8 <CPtrList::Find(void*)+0x68>
   98b98:	b9400003 	ldr	w3, [x0]
   98b9c:	5289a862 	mov	w2, #0x4d43                	// #19779
   98ba0:	72aa0982 	movk	w2, #0x504c, lsl #16
   98ba4:	6b02007f 	cmp	w3, w2
   98ba8:	540001a1 	b.ne	98bdc <CPtrList::Find(void*)+0x4c>  // b.any
   98bac:	f9400c04 	ldr	x4, [x0, #24]
   98bb0:	eb04003f 	cmp	x1, x4
   98bb4:	540000a1 	b.ne	98bc8 <CPtrList::Find(void*)+0x38>  // b.any
   98bb8:	14000010 	b	98bf8 <CPtrList::Find(void*)+0x68>
   98bbc:	f9400c06 	ldr	x6, [x0, #24]
   98bc0:	eb0100df 	cmp	x6, x1
   98bc4:	540001a0 	b.eq	98bf8 <CPtrList::Find(void*)+0x68>  // b.none
   98bc8:	f9400800 	ldr	x0, [x0, #16]
   98bcc:	b4000160 	cbz	x0, 98bf8 <CPtrList::Find(void*)+0x68>
   98bd0:	b9400005 	ldr	w5, [x0]
   98bd4:	6b0300bf 	cmp	w5, w3
   98bd8:	54ffff20 	b.eq	98bbc <CPtrList::Find(void*)+0x2c>  // b.none
   98bdc:	b0000021 	adrp	x1, 9d000 <font_data+0x558>
   98be0:	b0000020 	adrp	x0, 9d000 <font_data+0x558>
   98be4:	f81f0ffe 	str	x30, [sp, #-16]!
   98be8:	91322021 	add	x1, x1, #0xc88
   98bec:	9132e000 	add	x0, x0, #0xcb8
   98bf0:	52801662 	mov	w2, #0xb3                  	// #179
   98bf4:	97ffc1df 	bl	89370 <assertion_failed>
   98bf8:	d65f03c0 	ret
   98bfc:	00000000 	.inst	0x00000000 ; undefined

0000000000098c00 <CPageAllocator::CPageAllocator()>:
   98c00:	52800021 	mov	w1, #0x1                   	// #1
   98c04:	a9007c1f 	stp	xzr, xzr, [x0]
   98c08:	f900081f 	str	xzr, [x0, #16]
   98c0c:	b9001801 	str	w1, [x0, #24]
   98c10:	d65f03c0 	ret
   98c14:	d503201f 	nop
   98c18:	d503201f 	nop
   98c1c:	d503201f 	nop

0000000000098c20 <CPageAllocator::~CPageAllocator()>:
   98c20:	d65f03c0 	ret
   98c24:	d503201f 	nop
   98c28:	d503201f 	nop
   98c2c:	d503201f 	nop

0000000000098c30 <CPageAllocator::Setup(unsigned long, unsigned long)>:
   98c30:	d10083ff 	sub	sp, sp, #0x20
   98c34:	f9000fe0 	str	x0, [sp, #24]
   98c38:	f9000be1 	str	x1, [sp, #16]
   98c3c:	f90007e2 	str	x2, [sp, #8]
   98c40:	f9400be1 	ldr	x1, [sp, #16]
   98c44:	d29fffe0 	mov	x0, #0xffff                	// #65535
   98c48:	8b000020 	add	x0, x1, x0
   98c4c:	9270bc00 	and	x0, x0, #0xffffffffffff0000
   98c50:	aa0003e1 	mov	x1, x0
   98c54:	f9400fe0 	ldr	x0, [sp, #24]
   98c58:	f9000001 	str	x1, [x0]
   98c5c:	f9400be1 	ldr	x1, [sp, #16]
   98c60:	f94007e0 	ldr	x0, [sp, #8]
   98c64:	8b000020 	add	x0, x1, x0
   98c68:	9270bc00 	and	x0, x0, #0xffffffffffff0000
   98c6c:	aa0003e1 	mov	x1, x0
   98c70:	f9400fe0 	ldr	x0, [sp, #24]
   98c74:	f9000401 	str	x1, [x0, #8]
   98c78:	d503201f 	nop
   98c7c:	910083ff 	add	sp, sp, #0x20
   98c80:	d65f03c0 	ret
   98c84:	d503201f 	nop
   98c88:	d503201f 	nop
   98c8c:	d503201f 	nop

0000000000098c90 <CPageAllocator::GetFreeSpace() const>:
   98c90:	a9400001 	ldp	x1, x0, [x0]
   98c94:	cb010000 	sub	x0, x0, x1
   98c98:	d65f03c0 	ret
   98c9c:	d503201f 	nop

0000000000098ca0 <CPageAllocator::Allocate()>:
   98ca0:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   98ca4:	aa0003f3 	mov	x19, x0
   98ca8:	f9400000 	ldr	x0, [x0]
   98cac:	f9000bfe 	str	x30, [sp, #16]
   98cb0:	b4000460 	cbz	x0, 98d3c <CPageAllocator::Allocate()+0x9c>
   98cb4:	b9401a60 	ldr	w0, [x19, #24]
   98cb8:	35000220 	cbnz	w0, 98cfc <CPageAllocator::Allocate()+0x5c>
   98cbc:	f9400a74 	ldr	x20, [x19, #16]
   98cc0:	b4000254 	cbz	x20, 98d08 <CPageAllocator::Allocate()+0x68>
   98cc4:	b9400286 	ldr	w6, [x20]
   98cc8:	5289a865 	mov	w5, #0x4d43                	// #19779
   98ccc:	72aa08e5 	movk	w5, #0x5047, lsl #16
   98cd0:	6b0500df 	cmp	w6, w5
   98cd4:	540003e1 	b.ne	98d50 <CPageAllocator::Allocate()+0xb0>  // b.any
   98cd8:	f9400688 	ldr	x8, [x20, #8]
   98cdc:	f9000a68 	str	x8, [x19, #16]
   98ce0:	b900029f 	str	wzr, [x20]
   98ce4:	b9401a63 	ldr	w3, [x19, #24]
   98ce8:	35000203 	cbnz	w3, 98d28 <CPageAllocator::Allocate()+0x88>
   98cec:	aa1403e0 	mov	x0, x20
   98cf0:	f9400bfe 	ldr	x30, [sp, #16]
   98cf4:	a8c253f3 	ldp	x19, x20, [sp], #32
   98cf8:	d65f03c0 	ret
   98cfc:	97fff1cd 	bl	95430 <EnterCritical>
   98d00:	f9400a74 	ldr	x20, [x19, #16]
   98d04:	b5fffe14 	cbnz	x20, 98cc4 <CPageAllocator::Allocate()+0x24>
   98d08:	a9400a74 	ldp	x20, x2, [x19]
   98d0c:	b9401a63 	ldr	w3, [x19, #24]
   98d10:	91404284 	add	x4, x20, #0x10, lsl #12
   98d14:	eb02009f 	cmp	x4, x2
   98d18:	f9000264 	str	x4, [x19]
   98d1c:	54fffe69 	b.ls	98ce8 <CPageAllocator::Allocate()+0x48>  // b.plast
   98d20:	d2800014 	mov	x20, #0x0                   	// #0
   98d24:	34fffe43 	cbz	w3, 98cec <CPageAllocator::Allocate()+0x4c>
   98d28:	97fff1ee 	bl	954e0 <LeaveCritical>
   98d2c:	aa1403e0 	mov	x0, x20
   98d30:	f9400bfe 	ldr	x30, [sp, #16]
   98d34:	a8c253f3 	ldp	x19, x20, [sp], #32
   98d38:	d65f03c0 	ret
   98d3c:	b0000021 	adrp	x1, 9d000 <font_data+0x558>
   98d40:	91388021 	add	x1, x1, #0xe20
   98d44:	91006020 	add	x0, x1, #0x18
   98d48:	528006c2 	mov	w2, #0x36                  	// #54
   98d4c:	97ffc189 	bl	89370 <assertion_failed>
   98d50:	b0000027 	adrp	x7, 9d000 <font_data+0x558>
   98d54:	913880e1 	add	x1, x7, #0xe20
   98d58:	9100a020 	add	x0, x1, #0x28
   98d5c:	52800882 	mov	w2, #0x44                  	// #68
   98d60:	97ffc184 	bl	89370 <assertion_failed>
   98d64:	d503201f 	nop
   98d68:	d503201f 	nop
   98d6c:	d503201f 	nop

0000000000098d70 <CPageAllocator::Free(void*)>:
   98d70:	b40003c1 	cbz	x1, 98de8 <CPageAllocator::Free(void*)+0x78>
   98d74:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   98d78:	aa0003f4 	mov	x20, x0
   98d7c:	aa0103f3 	mov	x19, x1
   98d80:	b9401800 	ldr	w0, [x0, #24]
   98d84:	f9000bfe 	str	x30, [sp, #16]
   98d88:	35000180 	cbnz	w0, 98db8 <CPageAllocator::Free(void*)+0x48>
   98d8c:	f9400a81 	ldr	x1, [x20, #16]
   98d90:	5289a860 	mov	w0, #0x4d43                	// #19779
   98d94:	72aa08e0 	movk	w0, #0x5047, lsl #16
   98d98:	b9000260 	str	w0, [x19]
   98d9c:	b9401a82 	ldr	w2, [x20, #24]
   98da0:	f9000661 	str	x1, [x19, #8]
   98da4:	f9000a93 	str	x19, [x20, #16]
   98da8:	350001a2 	cbnz	w2, 98ddc <CPageAllocator::Free(void*)+0x6c>
   98dac:	f9400bfe 	ldr	x30, [sp, #16]
   98db0:	a8c253f3 	ldp	x19, x20, [sp], #32
   98db4:	d65f03c0 	ret
   98db8:	97fff19e 	bl	95430 <EnterCritical>
   98dbc:	f9400a81 	ldr	x1, [x20, #16]
   98dc0:	5289a860 	mov	w0, #0x4d43                	// #19779
   98dc4:	72aa08e0 	movk	w0, #0x5047, lsl #16
   98dc8:	b9000260 	str	w0, [x19]
   98dcc:	b9401a82 	ldr	w2, [x20, #24]
   98dd0:	f9000661 	str	x1, [x19, #8]
   98dd4:	f9000a93 	str	x19, [x20, #16]
   98dd8:	34fffea2 	cbz	w2, 98dac <CPageAllocator::Free(void*)+0x3c>
   98ddc:	f9400bfe 	ldr	x30, [sp, #16]
   98de0:	a8c253f3 	ldp	x19, x20, [sp], #32
   98de4:	17fff1bf 	b	954e0 <LeaveCritical>
   98de8:	d65f03c0 	ret
	...

0000000000099000 <VectorTable>:
   99000:	140001ef 	b	997bc <SynchronousStub>
   99004:	d503201f 	nop
   99008:	d503201f 	nop
   9900c:	d503201f 	nop
   99010:	d503201f 	nop
   99014:	d503201f 	nop
   99018:	d503201f 	nop
   9901c:	d503201f 	nop
   99020:	d503201f 	nop
   99024:	d503201f 	nop
   99028:	d503201f 	nop
   9902c:	d503201f 	nop
   99030:	d503201f 	nop
   99034:	d503201f 	nop
   99038:	d503201f 	nop
   9903c:	d503201f 	nop
   99040:	d503201f 	nop
   99044:	d503201f 	nop
   99048:	d503201f 	nop
   9904c:	d503201f 	nop
   99050:	d503201f 	nop
   99054:	d503201f 	nop
   99058:	d503201f 	nop
   9905c:	d503201f 	nop
   99060:	d503201f 	nop
   99064:	d503201f 	nop
   99068:	d503201f 	nop
   9906c:	d503201f 	nop
   99070:	d503201f 	nop
   99074:	d503201f 	nop
   99078:	d503201f 	nop
   9907c:	d503201f 	nop
   99080:	140001eb 	b	9982c <IRQStub>
   99084:	d503201f 	nop
   99088:	d503201f 	nop
   9908c:	d503201f 	nop
   99090:	d503201f 	nop
   99094:	d503201f 	nop
   99098:	d503201f 	nop
   9909c:	d503201f 	nop
   990a0:	d503201f 	nop
   990a4:	d503201f 	nop
   990a8:	d503201f 	nop
   990ac:	d503201f 	nop
   990b0:	d503201f 	nop
   990b4:	d503201f 	nop
   990b8:	d503201f 	nop
   990bc:	d503201f 	nop
   990c0:	d503201f 	nop
   990c4:	d503201f 	nop
   990c8:	d503201f 	nop
   990cc:	d503201f 	nop
   990d0:	d503201f 	nop
   990d4:	d503201f 	nop
   990d8:	d503201f 	nop
   990dc:	d503201f 	nop
   990e0:	d503201f 	nop
   990e4:	d503201f 	nop
   990e8:	d503201f 	nop
   990ec:	d503201f 	nop
   990f0:	d503201f 	nop
   990f4:	d503201f 	nop
   990f8:	d503201f 	nop
   990fc:	d503201f 	nop
   99100:	140001f7 	b	998dc <FIQStub>
   99104:	d503201f 	nop
   99108:	d503201f 	nop
   9910c:	d503201f 	nop
   99110:	d503201f 	nop
   99114:	d503201f 	nop
   99118:	d503201f 	nop
   9911c:	d503201f 	nop
   99120:	d503201f 	nop
   99124:	d503201f 	nop
   99128:	d503201f 	nop
   9912c:	d503201f 	nop
   99130:	d503201f 	nop
   99134:	d503201f 	nop
   99138:	d503201f 	nop
   9913c:	d503201f 	nop
   99140:	d503201f 	nop
   99144:	d503201f 	nop
   99148:	d503201f 	nop
   9914c:	d503201f 	nop
   99150:	d503201f 	nop
   99154:	d503201f 	nop
   99158:	d503201f 	nop
   9915c:	d503201f 	nop
   99160:	d503201f 	nop
   99164:	d503201f 	nop
   99168:	d503201f 	nop
   9916c:	d503201f 	nop
   99170:	d503201f 	nop
   99174:	d503201f 	nop
   99178:	d503201f 	nop
   9917c:	d503201f 	nop
   99180:	1400019d 	b	997f4 <SErrorStub>
   99184:	d503201f 	nop
   99188:	d503201f 	nop
   9918c:	d503201f 	nop
   99190:	d503201f 	nop
   99194:	d503201f 	nop
   99198:	d503201f 	nop
   9919c:	d503201f 	nop
   991a0:	d503201f 	nop
   991a4:	d503201f 	nop
   991a8:	d503201f 	nop
   991ac:	d503201f 	nop
   991b0:	d503201f 	nop
   991b4:	d503201f 	nop
   991b8:	d503201f 	nop
   991bc:	d503201f 	nop
   991c0:	d503201f 	nop
   991c4:	d503201f 	nop
   991c8:	d503201f 	nop
   991cc:	d503201f 	nop
   991d0:	d503201f 	nop
   991d4:	d503201f 	nop
   991d8:	d503201f 	nop
   991dc:	d503201f 	nop
   991e0:	d503201f 	nop
   991e4:	d503201f 	nop
   991e8:	d503201f 	nop
   991ec:	d503201f 	nop
   991f0:	d503201f 	nop
   991f4:	d503201f 	nop
   991f8:	d503201f 	nop
   991fc:	d503201f 	nop
   99200:	1400016f 	b	997bc <SynchronousStub>
   99204:	d503201f 	nop
   99208:	d503201f 	nop
   9920c:	d503201f 	nop
   99210:	d503201f 	nop
   99214:	d503201f 	nop
   99218:	d503201f 	nop
   9921c:	d503201f 	nop
   99220:	d503201f 	nop
   99224:	d503201f 	nop
   99228:	d503201f 	nop
   9922c:	d503201f 	nop
   99230:	d503201f 	nop
   99234:	d503201f 	nop
   99238:	d503201f 	nop
   9923c:	d503201f 	nop
   99240:	d503201f 	nop
   99244:	d503201f 	nop
   99248:	d503201f 	nop
   9924c:	d503201f 	nop
   99250:	d503201f 	nop
   99254:	d503201f 	nop
   99258:	d503201f 	nop
   9925c:	d503201f 	nop
   99260:	d503201f 	nop
   99264:	d503201f 	nop
   99268:	d503201f 	nop
   9926c:	d503201f 	nop
   99270:	d503201f 	nop
   99274:	d503201f 	nop
   99278:	d503201f 	nop
   9927c:	d503201f 	nop
   99280:	1400016b 	b	9982c <IRQStub>
   99284:	d503201f 	nop
   99288:	d503201f 	nop
   9928c:	d503201f 	nop
   99290:	d503201f 	nop
   99294:	d503201f 	nop
   99298:	d503201f 	nop
   9929c:	d503201f 	nop
   992a0:	d503201f 	nop
   992a4:	d503201f 	nop
   992a8:	d503201f 	nop
   992ac:	d503201f 	nop
   992b0:	d503201f 	nop
   992b4:	d503201f 	nop
   992b8:	d503201f 	nop
   992bc:	d503201f 	nop
   992c0:	d503201f 	nop
   992c4:	d503201f 	nop
   992c8:	d503201f 	nop
   992cc:	d503201f 	nop
   992d0:	d503201f 	nop
   992d4:	d503201f 	nop
   992d8:	d503201f 	nop
   992dc:	d503201f 	nop
   992e0:	d503201f 	nop
   992e4:	d503201f 	nop
   992e8:	d503201f 	nop
   992ec:	d503201f 	nop
   992f0:	d503201f 	nop
   992f4:	d503201f 	nop
   992f8:	d503201f 	nop
   992fc:	d503201f 	nop
   99300:	14000177 	b	998dc <FIQStub>
   99304:	d503201f 	nop
   99308:	d503201f 	nop
   9930c:	d503201f 	nop
   99310:	d503201f 	nop
   99314:	d503201f 	nop
   99318:	d503201f 	nop
   9931c:	d503201f 	nop
   99320:	d503201f 	nop
   99324:	d503201f 	nop
   99328:	d503201f 	nop
   9932c:	d503201f 	nop
   99330:	d503201f 	nop
   99334:	d503201f 	nop
   99338:	d503201f 	nop
   9933c:	d503201f 	nop
   99340:	d503201f 	nop
   99344:	d503201f 	nop
   99348:	d503201f 	nop
   9934c:	d503201f 	nop
   99350:	d503201f 	nop
   99354:	d503201f 	nop
   99358:	d503201f 	nop
   9935c:	d503201f 	nop
   99360:	d503201f 	nop
   99364:	d503201f 	nop
   99368:	d503201f 	nop
   9936c:	d503201f 	nop
   99370:	d503201f 	nop
   99374:	d503201f 	nop
   99378:	d503201f 	nop
   9937c:	d503201f 	nop
   99380:	1400011d 	b	997f4 <SErrorStub>
   99384:	d503201f 	nop
   99388:	d503201f 	nop
   9938c:	d503201f 	nop
   99390:	d503201f 	nop
   99394:	d503201f 	nop
   99398:	d503201f 	nop
   9939c:	d503201f 	nop
   993a0:	d503201f 	nop
   993a4:	d503201f 	nop
   993a8:	d503201f 	nop
   993ac:	d503201f 	nop
   993b0:	d503201f 	nop
   993b4:	d503201f 	nop
   993b8:	d503201f 	nop
   993bc:	d503201f 	nop
   993c0:	d503201f 	nop
   993c4:	d503201f 	nop
   993c8:	d503201f 	nop
   993cc:	d503201f 	nop
   993d0:	d503201f 	nop
   993d4:	d503201f 	nop
   993d8:	d503201f 	nop
   993dc:	d503201f 	nop
   993e0:	d503201f 	nop
   993e4:	d503201f 	nop
   993e8:	d503201f 	nop
   993ec:	d503201f 	nop
   993f0:	d503201f 	nop
   993f4:	d503201f 	nop
   993f8:	d503201f 	nop
   993fc:	d503201f 	nop
   99400:	14000168 	b	999a0 <HVCStub>
   99404:	d503201f 	nop
   99408:	d503201f 	nop
   9940c:	d503201f 	nop
   99410:	d503201f 	nop
   99414:	d503201f 	nop
   99418:	d503201f 	nop
   9941c:	d503201f 	nop
   99420:	d503201f 	nop
   99424:	d503201f 	nop
   99428:	d503201f 	nop
   9942c:	d503201f 	nop
   99430:	d503201f 	nop
   99434:	d503201f 	nop
   99438:	d503201f 	nop
   9943c:	d503201f 	nop
   99440:	d503201f 	nop
   99444:	d503201f 	nop
   99448:	d503201f 	nop
   9944c:	d503201f 	nop
   99450:	d503201f 	nop
   99454:	d503201f 	nop
   99458:	d503201f 	nop
   9945c:	d503201f 	nop
   99460:	d503201f 	nop
   99464:	d503201f 	nop
   99468:	d503201f 	nop
   9946c:	d503201f 	nop
   99470:	d503201f 	nop
   99474:	d503201f 	nop
   99478:	d503201f 	nop
   9947c:	d503201f 	nop
   99480:	140000c1 	b	99784 <UnexpectedStub>
   99484:	d503201f 	nop
   99488:	d503201f 	nop
   9948c:	d503201f 	nop
   99490:	d503201f 	nop
   99494:	d503201f 	nop
   99498:	d503201f 	nop
   9949c:	d503201f 	nop
   994a0:	d503201f 	nop
   994a4:	d503201f 	nop
   994a8:	d503201f 	nop
   994ac:	d503201f 	nop
   994b0:	d503201f 	nop
   994b4:	d503201f 	nop
   994b8:	d503201f 	nop
   994bc:	d503201f 	nop
   994c0:	d503201f 	nop
   994c4:	d503201f 	nop
   994c8:	d503201f 	nop
   994cc:	d503201f 	nop
   994d0:	d503201f 	nop
   994d4:	d503201f 	nop
   994d8:	d503201f 	nop
   994dc:	d503201f 	nop
   994e0:	d503201f 	nop
   994e4:	d503201f 	nop
   994e8:	d503201f 	nop
   994ec:	d503201f 	nop
   994f0:	d503201f 	nop
   994f4:	d503201f 	nop
   994f8:	d503201f 	nop
   994fc:	d503201f 	nop
   99500:	140000a1 	b	99784 <UnexpectedStub>
   99504:	d503201f 	nop
   99508:	d503201f 	nop
   9950c:	d503201f 	nop
   99510:	d503201f 	nop
   99514:	d503201f 	nop
   99518:	d503201f 	nop
   9951c:	d503201f 	nop
   99520:	d503201f 	nop
   99524:	d503201f 	nop
   99528:	d503201f 	nop
   9952c:	d503201f 	nop
   99530:	d503201f 	nop
   99534:	d503201f 	nop
   99538:	d503201f 	nop
   9953c:	d503201f 	nop
   99540:	d503201f 	nop
   99544:	d503201f 	nop
   99548:	d503201f 	nop
   9954c:	d503201f 	nop
   99550:	d503201f 	nop
   99554:	d503201f 	nop
   99558:	d503201f 	nop
   9955c:	d503201f 	nop
   99560:	d503201f 	nop
   99564:	d503201f 	nop
   99568:	d503201f 	nop
   9956c:	d503201f 	nop
   99570:	d503201f 	nop
   99574:	d503201f 	nop
   99578:	d503201f 	nop
   9957c:	d503201f 	nop
   99580:	14000081 	b	99784 <UnexpectedStub>
   99584:	d503201f 	nop
   99588:	d503201f 	nop
   9958c:	d503201f 	nop
   99590:	d503201f 	nop
   99594:	d503201f 	nop
   99598:	d503201f 	nop
   9959c:	d503201f 	nop
   995a0:	d503201f 	nop
   995a4:	d503201f 	nop
   995a8:	d503201f 	nop
   995ac:	d503201f 	nop
   995b0:	d503201f 	nop
   995b4:	d503201f 	nop
   995b8:	d503201f 	nop
   995bc:	d503201f 	nop
   995c0:	d503201f 	nop
   995c4:	d503201f 	nop
   995c8:	d503201f 	nop
   995cc:	d503201f 	nop
   995d0:	d503201f 	nop
   995d4:	d503201f 	nop
   995d8:	d503201f 	nop
   995dc:	d503201f 	nop
   995e0:	d503201f 	nop
   995e4:	d503201f 	nop
   995e8:	d503201f 	nop
   995ec:	d503201f 	nop
   995f0:	d503201f 	nop
   995f4:	d503201f 	nop
   995f8:	d503201f 	nop
   995fc:	d503201f 	nop
   99600:	14000061 	b	99784 <UnexpectedStub>
   99604:	d503201f 	nop
   99608:	d503201f 	nop
   9960c:	d503201f 	nop
   99610:	d503201f 	nop
   99614:	d503201f 	nop
   99618:	d503201f 	nop
   9961c:	d503201f 	nop
   99620:	d503201f 	nop
   99624:	d503201f 	nop
   99628:	d503201f 	nop
   9962c:	d503201f 	nop
   99630:	d503201f 	nop
   99634:	d503201f 	nop
   99638:	d503201f 	nop
   9963c:	d503201f 	nop
   99640:	d503201f 	nop
   99644:	d503201f 	nop
   99648:	d503201f 	nop
   9964c:	d503201f 	nop
   99650:	d503201f 	nop
   99654:	d503201f 	nop
   99658:	d503201f 	nop
   9965c:	d503201f 	nop
   99660:	d503201f 	nop
   99664:	d503201f 	nop
   99668:	d503201f 	nop
   9966c:	d503201f 	nop
   99670:	d503201f 	nop
   99674:	d503201f 	nop
   99678:	d503201f 	nop
   9967c:	d503201f 	nop
   99680:	14000041 	b	99784 <UnexpectedStub>
   99684:	d503201f 	nop
   99688:	d503201f 	nop
   9968c:	d503201f 	nop
   99690:	d503201f 	nop
   99694:	d503201f 	nop
   99698:	d503201f 	nop
   9969c:	d503201f 	nop
   996a0:	d503201f 	nop
   996a4:	d503201f 	nop
   996a8:	d503201f 	nop
   996ac:	d503201f 	nop
   996b0:	d503201f 	nop
   996b4:	d503201f 	nop
   996b8:	d503201f 	nop
   996bc:	d503201f 	nop
   996c0:	d503201f 	nop
   996c4:	d503201f 	nop
   996c8:	d503201f 	nop
   996cc:	d503201f 	nop
   996d0:	d503201f 	nop
   996d4:	d503201f 	nop
   996d8:	d503201f 	nop
   996dc:	d503201f 	nop
   996e0:	d503201f 	nop
   996e4:	d503201f 	nop
   996e8:	d503201f 	nop
   996ec:	d503201f 	nop
   996f0:	d503201f 	nop
   996f4:	d503201f 	nop
   996f8:	d503201f 	nop
   996fc:	d503201f 	nop
   99700:	14000021 	b	99784 <UnexpectedStub>
   99704:	d503201f 	nop
   99708:	d503201f 	nop
   9970c:	d503201f 	nop
   99710:	d503201f 	nop
   99714:	d503201f 	nop
   99718:	d503201f 	nop
   9971c:	d503201f 	nop
   99720:	d503201f 	nop
   99724:	d503201f 	nop
   99728:	d503201f 	nop
   9972c:	d503201f 	nop
   99730:	d503201f 	nop
   99734:	d503201f 	nop
   99738:	d503201f 	nop
   9973c:	d503201f 	nop
   99740:	d503201f 	nop
   99744:	d503201f 	nop
   99748:	d503201f 	nop
   9974c:	d503201f 	nop
   99750:	d503201f 	nop
   99754:	d503201f 	nop
   99758:	d503201f 	nop
   9975c:	d503201f 	nop
   99760:	d503201f 	nop
   99764:	d503201f 	nop
   99768:	d503201f 	nop
   9976c:	d503201f 	nop
   99770:	d503201f 	nop
   99774:	d503201f 	nop
   99778:	d503201f 	nop
   9977c:	d503201f 	nop
   99780:	14000001 	b	99784 <UnexpectedStub>

0000000000099784 <UnexpectedStub>:
   99784:	d5385200 	mrs	x0, esr_el1
   99788:	d5384001 	mrs	x1, spsr_el1
   9978c:	aa1e03e2 	mov	x2, x30
   99790:	d5384023 	mrs	x3, elr_el1
   99794:	d5384104 	mrs	x4, sp_el0
   99798:	910003e5 	mov	x5, sp
   9979c:	d5386006 	mrs	x6, far_el1
   997a0:	f81f0fe6 	str	x6, [sp, #-16]!
   997a4:	a9bf17e4 	stp	x4, x5, [sp, #-16]!
   997a8:	a9bf0fe2 	stp	x2, x3, [sp, #-16]!
   997ac:	a9bf07e0 	stp	x0, x1, [sp, #-16]!
   997b0:	d2800000 	mov	x0, #0x0                   	// #0
   997b4:	910003e1 	mov	x1, sp
   997b8:	17ffee1a 	b	95020 <ExceptionHandler>

00000000000997bc <SynchronousStub>:
   997bc:	d5385200 	mrs	x0, esr_el1
   997c0:	d5384001 	mrs	x1, spsr_el1
   997c4:	aa1e03e2 	mov	x2, x30
   997c8:	d5384023 	mrs	x3, elr_el1
   997cc:	d5384104 	mrs	x4, sp_el0
   997d0:	910003e5 	mov	x5, sp
   997d4:	d5386006 	mrs	x6, far_el1
   997d8:	f81f0fe6 	str	x6, [sp, #-16]!
   997dc:	a9bf17e4 	stp	x4, x5, [sp, #-16]!
   997e0:	a9bf0fe2 	stp	x2, x3, [sp, #-16]!
   997e4:	a9bf07e0 	stp	x0, x1, [sp, #-16]!
   997e8:	d2800020 	mov	x0, #0x1                   	// #1
   997ec:	910003e1 	mov	x1, sp
   997f0:	17ffee0c 	b	95020 <ExceptionHandler>

00000000000997f4 <SErrorStub>:
   997f4:	d5385200 	mrs	x0, esr_el1
   997f8:	d5384001 	mrs	x1, spsr_el1
   997fc:	aa1e03e2 	mov	x2, x30
   99800:	d5384023 	mrs	x3, elr_el1
   99804:	d5384104 	mrs	x4, sp_el0
   99808:	910003e5 	mov	x5, sp
   9980c:	d5386006 	mrs	x6, far_el1
   99810:	f81f0fe6 	str	x6, [sp, #-16]!
   99814:	a9bf17e4 	stp	x4, x5, [sp, #-16]!
   99818:	a9bf0fe2 	stp	x2, x3, [sp, #-16]!
   9981c:	a9bf07e0 	stp	x0, x1, [sp, #-16]!
   99820:	d2800040 	mov	x0, #0x2                   	// #2
   99824:	910003e1 	mov	x1, sp
   99828:	17ffedfe 	b	95020 <ExceptionHandler>

000000000009982c <IRQStub>:
   9982c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   99830:	d538403d 	mrs	x29, elr_el1
   99834:	d538401e 	mrs	x30, spsr_el1
   99838:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9983c:	d50341ff 	msr	daifclr, #0x1
   99840:	a9bf73fb 	stp	x27, x28, [sp, #-16]!
   99844:	a9bf6bf9 	stp	x25, x26, [sp, #-16]!
   99848:	a9bf63f7 	stp	x23, x24, [sp, #-16]!
   9984c:	a9bf5bf5 	stp	x21, x22, [sp, #-16]!
   99850:	a9bf53f3 	stp	x19, x20, [sp, #-16]!
   99854:	a9bf4bf1 	stp	x17, x18, [sp, #-16]!
   99858:	a9bf43ef 	stp	x15, x16, [sp, #-16]!
   9985c:	a9bf3bed 	stp	x13, x14, [sp, #-16]!
   99860:	a9bf33eb 	stp	x11, x12, [sp, #-16]!
   99864:	a9bf2be9 	stp	x9, x10, [sp, #-16]!
   99868:	a9bf23e7 	stp	x7, x8, [sp, #-16]!
   9986c:	a9bf1be5 	stp	x5, x6, [sp, #-16]!
   99870:	a9bf13e3 	stp	x3, x4, [sp, #-16]!
   99874:	a9bf0be1 	stp	x1, x2, [sp, #-16]!
   99878:	f81f0fe0 	str	x0, [sp, #-16]!
   9987c:	580009e0 	ldr	x0, 999b8 <HVCStub+0x18>
   99880:	f900001d 	str	x29, [x0]
   99884:	97fff417 	bl	968e0 <InterruptHandler>
   99888:	f84107e0 	ldr	x0, [sp], #16
   9988c:	a8c10be1 	ldp	x1, x2, [sp], #16
   99890:	a8c113e3 	ldp	x3, x4, [sp], #16
   99894:	a8c11be5 	ldp	x5, x6, [sp], #16
   99898:	a8c123e7 	ldp	x7, x8, [sp], #16
   9989c:	a8c12be9 	ldp	x9, x10, [sp], #16
   998a0:	a8c133eb 	ldp	x11, x12, [sp], #16
   998a4:	a8c13bed 	ldp	x13, x14, [sp], #16
   998a8:	a8c143ef 	ldp	x15, x16, [sp], #16
   998ac:	a8c14bf1 	ldp	x17, x18, [sp], #16
   998b0:	a8c153f3 	ldp	x19, x20, [sp], #16
   998b4:	a8c15bf5 	ldp	x21, x22, [sp], #16
   998b8:	a8c163f7 	ldp	x23, x24, [sp], #16
   998bc:	a8c16bf9 	ldp	x25, x26, [sp], #16
   998c0:	a8c173fb 	ldp	x27, x28, [sp], #16
   998c4:	d50341df 	msr	daifset, #0x1
   998c8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   998cc:	d518403d 	msr	elr_el1, x29
   998d0:	d518401e 	msr	spsr_el1, x30
   998d4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   998d8:	d69f03e0 	eret

00000000000998dc <FIQStub>:
   998dc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   998e0:	a9bf73fb 	stp	x27, x28, [sp, #-16]!
   998e4:	a9bf6bf9 	stp	x25, x26, [sp, #-16]!
   998e8:	a9bf63f7 	stp	x23, x24, [sp, #-16]!
   998ec:	a9bf5bf5 	stp	x21, x22, [sp, #-16]!
   998f0:	a9bf53f3 	stp	x19, x20, [sp, #-16]!
   998f4:	a9bf4bf1 	stp	x17, x18, [sp, #-16]!
   998f8:	a9bf43ef 	stp	x15, x16, [sp, #-16]!
   998fc:	a9bf3bed 	stp	x13, x14, [sp, #-16]!
   99900:	a9bf33eb 	stp	x11, x12, [sp, #-16]!
   99904:	a9bf2be9 	stp	x9, x10, [sp, #-16]!
   99908:	a9bf23e7 	stp	x7, x8, [sp, #-16]!
   9990c:	a9bf1be5 	stp	x5, x6, [sp, #-16]!
   99910:	a9bf13e3 	stp	x3, x4, [sp, #-16]!
   99914:	a9bf0be1 	stp	x1, x2, [sp, #-16]!
   99918:	f81f0fe0 	str	x0, [sp, #-16]!
   9991c:	58000522 	ldr	x2, 999c0 <HVCStub+0x20>
   99920:	f9400041 	ldr	x1, [x2]
   99924:	f100003f 	cmp	x1, #0x0
   99928:	54000280 	b.eq	99978 <FIQStub+0x9c>  // b.none
   9992c:	f9400440 	ldr	x0, [x2, #8]
   99930:	d63f0020 	blr	x1
   99934:	f84107e0 	ldr	x0, [sp], #16
   99938:	a8c10be1 	ldp	x1, x2, [sp], #16
   9993c:	a8c113e3 	ldp	x3, x4, [sp], #16
   99940:	a8c11be5 	ldp	x5, x6, [sp], #16
   99944:	a8c123e7 	ldp	x7, x8, [sp], #16
   99948:	a8c12be9 	ldp	x9, x10, [sp], #16
   9994c:	a8c133eb 	ldp	x11, x12, [sp], #16
   99950:	a8c13bed 	ldp	x13, x14, [sp], #16
   99954:	a8c143ef 	ldp	x15, x16, [sp], #16
   99958:	a8c14bf1 	ldp	x17, x18, [sp], #16
   9995c:	a8c153f3 	ldp	x19, x20, [sp], #16
   99960:	a8c15bf5 	ldp	x21, x22, [sp], #16
   99964:	a8c163f7 	ldp	x23, x24, [sp], #16
   99968:	a8c16bf9 	ldp	x25, x26, [sp], #16
   9996c:	a8c173fb 	ldp	x27, x28, [sp], #16
   99970:	a8c17bfd 	ldp	x29, x30, [sp], #16
   99974:	d69f03e0 	eret
   99978:	58000281 	ldr	x1, 999c8 <HVCStub+0x28>
   9997c:	52800000 	mov	w0, #0x0                   	// #0
   99980:	b9000020 	str	w0, [x1]
   99984:	17ffffec 	b	99934 <FIQStub+0x58>

0000000000099988 <SMCStub>:
   99988:	58000242 	ldr	x2, 999d0 <HVCStub+0x30>
   9998c:	9100005f 	mov	sp, x2
   99990:	f81f0ffe 	str	x30, [sp, #-16]!
   99994:	97fff443 	bl	96aa0 <SecureMonitorHandler>
   99998:	f84107fe 	ldr	x30, [sp], #16
   9999c:	d69f03e0 	eret

00000000000999a0 <HVCStub>:
   999a0:	d53c4000 	mrs	x0, spsr_el2
   999a4:	927cec00 	and	x0, x0, #0xfffffffffffffff0
   999a8:	d2800121 	mov	x1, #0x9                   	// #9
   999ac:	aa010000 	orr	x0, x0, x1
   999b0:	d51c4000 	msr	spsr_el2, x0
   999b4:	d69f03e0 	eret
   999b8:	0009e658 	.word	0x0009e658
   999bc:	00000000 	.word	0x00000000
   999c0:	0009e640 	.word	0x0009e640
   999c4:	00000000 	.word	0x00000000
   999c8:	fe00b20c 	.word	0xfe00b20c
   999cc:	00000000 	.word	0x00000000
   999d0:	02e65410 	.word	0x02e65410
	...

00000000000999e0 <CDMA4Channel::CDMA4Channel(unsigned int, CInterruptSystem*)>:
   999e0:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   999e4:	7100283f 	cmp	w1, #0xa
   999e8:	a9017bf5 	stp	x21, x30, [sp, #16]
   999ec:	b9000001 	str	w1, [x0]
   999f0:	a900fc1f 	stp	xzr, xzr, [x0, #8]
   999f4:	f9000c02 	str	x2, [x0, #24]
   999f8:	3900801f 	strb	wzr, [x0, #32]
   999fc:	a902fc1f 	stp	xzr, xzr, [x0, #40]
   99a00:	3900e01f 	strb	wzr, [x0, #56]
   99a04:	54000549 	b.ls	99aac <CDMA4Channel::CDMA4Channel(unsigned int, CInterruptSystem*)+0xcc>  // b.plast
   99a08:	7100383f 	cmp	w1, #0xe
   99a0c:	540005a8 	b.hi	99ac0 <CDMA4Channel::CDMA4Channel(unsigned int, CInterruptSystem*)+0xe0>  // b.pmore
   99a10:	52800e15 	mov	w21, #0x70                  	// #112
   99a14:	72a01fd5 	movk	w21, #0xfe, lsl #16
   99a18:	0b150022 	add	w2, w1, w21
   99a1c:	53185c43 	lsl	w3, w2, #8
   99a20:	11003064 	add	w4, w3, #0xc
   99a24:	2a0403e5 	mov	w5, w4
   99a28:	b94000b4 	ldr	w20, [x5]
   99a2c:	531c7e94 	lsr	w20, w20, #28
   99a30:	7100069f 	cmp	w20, #0x1
   99a34:	54000501 	b.ne	99ad4 <CDMA4Channel::CDMA4Channel(unsigned int, CInterruptSystem*)+0xf4>  // b.any
   99a38:	aa0003f3 	mov	x19, x0
   99a3c:	52800041 	mov	w1, #0x2                   	// #2
   99a40:	d28023e0 	mov	x0, #0x11f                 	// #287
   99a44:	97ffebcf 	bl	94980 <operator new[](unsigned long, int)>
   99a48:	9103fc09 	add	x9, x0, #0xff
   99a4c:	aa0003e7 	mov	x7, x0
   99a50:	b940026b 	ldr	w11, [x19]
   99a54:	9278dd2a 	and	x10, x9, #0xffffffffffffff00
   99a58:	d28ffe08 	mov	x8, #0x7ff0                	// #32752
   99a5c:	f2bfc008 	movk	x8, #0xfe00, lsl #16
   99a60:	52807d00 	mov	w0, #0x3e8                 	// #1000
   99a64:	a900aa67 	stp	x7, x10, [x19, #8]
   99a68:	1acb228c 	lsl	w12, w20, w11
   99a6c:	b9001d5f 	str	wzr, [x10, #28]
   99a70:	b940010d 	ldr	w13, [x8]
   99a74:	2a0d018e 	orr	w14, w12, w13
   99a78:	b900010e 	str	w14, [x8]
   99a7c:	97ffe6a1 	bl	93500 <CTimer::SimpleusDelay(unsigned int)>
   99a80:	b9400270 	ldr	w16, [x19]
   99a84:	52a0100f 	mov	w15, #0x800000              	// #8388608
   99a88:	52807d00 	mov	w0, #0x3e8                 	// #1000
   99a8c:	0b150211 	add	w17, w16, w21
   99a90:	a9417bf5 	ldp	x21, x30, [sp, #16]
   99a94:	53185e32 	lsl	w18, w17, #8
   99a98:	11003241 	add	w1, w18, #0xc
   99a9c:	2a0103e2 	mov	w2, w1
   99aa0:	b900004f 	str	w15, [x2]
   99aa4:	a8c253f3 	ldp	x19, x20, [sp], #32
   99aa8:	17ffe696 	b	93500 <CTimer::SimpleusDelay(unsigned int)>
   99aac:	90000021 	adrp	x1, 9d000 <font_data+0x558>
   99ab0:	9139c021 	add	x1, x1, #0xe70
   99ab4:	91004020 	add	x0, x1, #0x10
   99ab8:	52800de2 	mov	w2, #0x6f                  	// #111
   99abc:	97ffbe2d 	bl	89370 <assertion_failed>
   99ac0:	90000020 	adrp	x0, 9d000 <font_data+0x558>
   99ac4:	9139c001 	add	x1, x0, #0xe70
   99ac8:	9100c020 	add	x0, x1, #0x30
   99acc:	52800e02 	mov	w2, #0x70                  	// #112
   99ad0:	97ffbe28 	bl	89370 <assertion_failed>
   99ad4:	90000026 	adrp	x6, 9d000 <font_data+0x558>
   99ad8:	9139c0c1 	add	x1, x6, #0xe70
   99adc:	91014020 	add	x0, x1, #0x50
   99ae0:	52800e42 	mov	w2, #0x72                  	// #114
   99ae4:	97ffbe23 	bl	89370 <assertion_failed>
   99ae8:	d503201f 	nop
   99aec:	d503201f 	nop

0000000000099af0 <CDMA4Channel::~CDMA4Channel()>:
   99af0:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   99af4:	aa0003f3 	mov	x19, x0
   99af8:	b9400000 	ldr	w0, [x0]
   99afc:	7100281f 	cmp	w0, #0xa
   99b00:	540004c9 	b.ls	99b98 <CDMA4Channel::~CDMA4Channel()+0xa8>  // b.plast
   99b04:	7100381f 	cmp	w0, #0xe
   99b08:	54000528 	b.hi	99bac <CDMA4Channel::~CDMA4Channel()+0xbc>  // b.pmore
   99b0c:	117f8003 	add	w3, w0, #0xfe0, lsl #12
   99b10:	52a01004 	mov	w4, #0x800000              	// #8388608
   99b14:	1101c063 	add	w3, w3, #0x70
   99b18:	52807d00 	mov	w0, #0x3e8                 	// #1000
   99b1c:	53185c65 	lsl	w5, w3, #8
   99b20:	110030a6 	add	w6, w5, #0xc
   99b24:	2a0603e7 	mov	w7, w6
   99b28:	b90000e4 	str	w4, [x7]
   99b2c:	97ffe675 	bl	93500 <CTimer::SimpleusDelay(unsigned int)>
   99b30:	b940026b 	ldr	w11, [x19]
   99b34:	d28ffe08 	mov	x8, #0x7ff0                	// #32752
   99b38:	f2bfc008 	movk	x8, #0xfe00, lsl #16
   99b3c:	52800029 	mov	w9, #0x1                   	// #1
   99b40:	b940010a 	ldr	w10, [x8]
   99b44:	f9400e60 	ldr	x0, [x19, #24]
   99b48:	1acb212c 	lsl	w12, w9, w11
   99b4c:	0a2c014d 	bic	w13, w10, w12
   99b50:	b900010d 	str	w13, [x8]
   99b54:	f900167f 	str	xzr, [x19, #40]
   99b58:	b4000120 	cbz	x0, 99b7c <CDMA4Channel::~CDMA4Channel()+0x8c>
   99b5c:	3940826e 	ldrb	w14, [x19, #32]
   99b60:	340000ce 	cbz	w14, 99b78 <CDMA4Channel::~CDMA4Channel()+0x88>
   99b64:	b940026f 	ldr	w15, [x19]
   99b68:	710029ff 	cmp	w15, #0xa
   99b6c:	540002a9 	b.ls	99bc0 <CDMA4Channel::~CDMA4Channel()+0xd0>  // b.plast
   99b70:	1101b9e1 	add	w1, w15, #0x6e
   99b74:	97fff2ab 	bl	96620 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   99b78:	f9000e7f 	str	xzr, [x19, #24]
   99b7c:	f9000a7f 	str	xzr, [x19, #16]
   99b80:	f9400660 	ldr	x0, [x19, #8]
   99b84:	b4000060 	cbz	x0, 99b90 <CDMA4Channel::~CDMA4Channel()+0xa0>
   99b88:	a8c17bf3 	ldp	x19, x30, [sp], #16
   99b8c:	17ffebc1 	b	94a90 <operator delete[](void*)>
   99b90:	a8c17bf3 	ldp	x19, x30, [sp], #16
   99b94:	d65f03c0 	ret
   99b98:	90000021 	adrp	x1, 9d000 <font_data+0x558>
   99b9c:	9139c021 	add	x1, x1, #0xe70
   99ba0:	91004020 	add	x0, x1, #0x10
   99ba4:	52801062 	mov	w2, #0x83                  	// #131
   99ba8:	97ffbdf2 	bl	89370 <assertion_failed>
   99bac:	90000022 	adrp	x2, 9d000 <font_data+0x558>
   99bb0:	9139c041 	add	x1, x2, #0xe70
   99bb4:	9100c020 	add	x0, x1, #0x30
   99bb8:	52801082 	mov	w2, #0x84                  	// #132
   99bbc:	97ffbded 	bl	89370 <assertion_failed>
   99bc0:	90000030 	adrp	x16, 9d000 <font_data+0x558>
   99bc4:	9139c201 	add	x1, x16, #0xe70
   99bc8:	91030020 	add	x0, x1, #0xc0
   99bcc:	52801222 	mov	w2, #0x91                  	// #145
   99bd0:	97ffbde8 	bl	89370 <assertion_failed>
   99bd4:	d503201f 	nop
   99bd8:	d503201f 	nop
   99bdc:	d503201f 	nop

0000000000099be0 <CDMA4Channel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)>:
   99be0:	a9be7bf3 	stp	x19, x30, [sp, #-32]!
   99be4:	b40004e1 	cbz	x1, 99c80 <CDMA4Channel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0xa0>
   99be8:	b4000562 	cbz	x2, 99c94 <CDMA4Channel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0xb4>
   99bec:	b40005e3 	cbz	x3, 99ca8 <CDMA4Channel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0xc8>
   99bf0:	71003c9f 	cmp	w4, #0xf
   99bf4:	54000648 	b.hi	99cbc <CDMA4Channel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0xdc>  // b.pmore
   99bf8:	f9400809 	ldr	x9, [x0, #16]
   99bfc:	aa0103f3 	mov	x19, x1
   99c00:	aa0003e8 	mov	x8, x0
   99c04:	b4000669 	cbz	x9, 99cd0 <CDMA4Channel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0xf0>
   99c08:	b24077e6 	mov	x6, #0x3fffffff            	// #1073741823
   99c0c:	eb06007f 	cmp	x3, x6
   99c10:	540006a8 	b.hi	99ce4 <CDMA4Channel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x104>  // b.pmore
   99c14:	53185c8b 	lsl	w11, w4, #8
   99c18:	d3609c47 	ubfx	x7, x2, #32, #8
   99c1c:	b900193f 	str	wzr, [x9, #24]
   99c20:	d3609c2c 	ubfx	x12, x1, #32, #8
   99c24:	528a000f 	mov	w15, #0x5000                	// #20480
   99c28:	2a0b00ed 	orr	w13, w7, w11
   99c2c:	2a0b018e 	orr	w14, w12, w11
   99c30:	2a0f01b0 	orr	w16, w13, w15
   99c34:	2a0f01d1 	orr	w17, w14, w15
   99c38:	52800192 	mov	w18, #0xc                   	// #12
   99c3c:	12001caa 	and	w10, w5, #0xff
   99c40:	29010530 	stp	w16, w1, [x9, #8]
   99c44:	29000932 	stp	w18, w2, [x9]
   99c48:	29020d31 	stp	w17, w3, [x9, #16]
   99c4c:	3500008a 	cbnz	w10, 99c5c <CDMA4Channel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x7c>
   99c50:	f900201f 	str	xzr, [x0, #64]
   99c54:	a8c27bf3 	ldp	x19, x30, [sp], #32
   99c58:	d65f03c0 	ret
   99c5c:	aa0203e0 	mov	x0, x2
   99c60:	aa0303e1 	mov	x1, x3
   99c64:	a9040d13 	stp	x19, x3, [x8, #64]
   99c68:	f9000fe3 	str	x3, [sp, #24]
   99c6c:	97ffefa1 	bl	95af0 <CleanAndInvalidateDataCacheRange>
   99c70:	aa1303e0 	mov	x0, x19
   99c74:	f9400fe1 	ldr	x1, [sp, #24]
   99c78:	a8c27bf3 	ldp	x19, x30, [sp], #32
   99c7c:	17ffef9d 	b	95af0 <CleanAndInvalidateDataCacheRange>
   99c80:	90000021 	adrp	x1, 9d000 <font_data+0x558>
   99c84:	9139c021 	add	x1, x1, #0xe70
   99c88:	91036020 	add	x0, x1, #0xd8
   99c8c:	52801422 	mov	w2, #0xa1                  	// #161
   99c90:	97ffbdb8 	bl	89370 <assertion_failed>
   99c94:	90000020 	adrp	x0, 9d000 <font_data+0x558>
   99c98:	9139c001 	add	x1, x0, #0xe70
   99c9c:	9103c020 	add	x0, x1, #0xf0
   99ca0:	52801442 	mov	w2, #0xa2                  	// #162
   99ca4:	97ffbdb3 	bl	89370 <assertion_failed>
   99ca8:	90000022 	adrp	x2, 9d000 <font_data+0x558>
   99cac:	9139c041 	add	x1, x2, #0xe70
   99cb0:	91040020 	add	x0, x1, #0x100
   99cb4:	52801462 	mov	w2, #0xa3                  	// #163
   99cb8:	97ffbdae 	bl	89370 <assertion_failed>
   99cbc:	90000023 	adrp	x3, 9d000 <font_data+0x558>
   99cc0:	9139c061 	add	x1, x3, #0xe70
   99cc4:	91044020 	add	x0, x1, #0x110
   99cc8:	52801482 	mov	w2, #0xa4                  	// #164
   99ccc:	97ffbda9 	bl	89370 <assertion_failed>
   99cd0:	90000024 	adrp	x4, 9d000 <font_data+0x558>
   99cd4:	9139c081 	add	x1, x4, #0xe70
   99cd8:	9104c020 	add	x0, x1, #0x130
   99cdc:	528014c2 	mov	w2, #0xa6                  	// #166
   99ce0:	97ffbda4 	bl	89370 <assertion_failed>
   99ce4:	90000025 	adrp	x5, 9d000 <font_data+0x558>
   99ce8:	9139c0a1 	add	x1, x5, #0xe70
   99cec:	91052020 	add	x0, x1, #0x148
   99cf0:	528014e2 	mov	w2, #0xa7                  	// #167
   99cf4:	97ffbd9f 	bl	89370 <assertion_failed>
   99cf8:	d503201f 	nop
   99cfc:	d503201f 	nop

0000000000099d00 <CDMA4Channel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)>:
   99d00:	f81f0ffe 	str	x30, [sp, #-16]!
   99d04:	b4000381 	cbz	x1, 99d74 <CDMA4Channel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0x74>
   99d08:	b4000403 	cbz	x3, 99d88 <CDMA4Channel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0x88>
   99d0c:	b24077e5 	mov	x5, #0x3fffffff            	// #1073741823
   99d10:	aa0003e7 	mov	x7, x0
   99d14:	eb05007f 	cmp	x3, x5
   99d18:	54000428 	b.hi	99d9c <CDMA4Channel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0x9c>  // b.pmore
   99d1c:	72005c46 	ands	w6, w2, #0xffffff
   99d20:	54000480 	b.eq	99db0 <CDMA4Channel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0xb0>  // b.none
   99d24:	52afc008 	mov	w8, #0x7e000000            	// #2113929216
   99d28:	f940080a 	ldr	x10, [x0, #16]
   99d2c:	0b0800c9 	add	w9, w6, w8
   99d30:	b40004aa 	cbz	x10, 99dc4 <CDMA4Channel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0xc4>
   99d34:	5288018c 	mov	w12, #0x400c                	// #16396
   99d38:	d3609c2d 	ubfx	x13, x1, #32, #8
   99d3c:	f84107fe 	ldr	x30, [sp], #16
   99d40:	2a04258e 	orr	w14, w12, w4, lsl #9
   99d44:	528a0010 	mov	w16, #0x5000                	// #20480
   99d48:	aa0103eb 	mov	x11, x1
   99d4c:	5280008f 	mov	w15, #0x4                   	// #4
   99d50:	2a1001b1 	orr	w17, w13, w16
   99d54:	2902fd43 	stp	w3, wzr, [x10, #20]
   99d58:	aa0303e1 	mov	x1, x3
   99d5c:	aa0b03e0 	mov	x0, x11
   99d60:	2900254e 	stp	w14, w9, [x10]
   99d64:	29012d4f 	stp	w15, w11, [x10, #8]
   99d68:	b9001151 	str	w17, [x10, #16]
   99d6c:	a9040ceb 	stp	x11, x3, [x7, #64]
   99d70:	17ffef60 	b	95af0 <CleanAndInvalidateDataCacheRange>
   99d74:	90000021 	adrp	x1, 9d000 <font_data+0x558>
   99d78:	9139c021 	add	x1, x1, #0xe70
   99d7c:	91036020 	add	x0, x1, #0xd8
   99d80:	52801942 	mov	w2, #0xca                  	// #202
   99d84:	97ffbd7b 	bl	89370 <assertion_failed>
   99d88:	90000020 	adrp	x0, 9d000 <font_data+0x558>
   99d8c:	9139c001 	add	x1, x0, #0xe70
   99d90:	91040020 	add	x0, x1, #0x100
   99d94:	52801962 	mov	w2, #0xcb                  	// #203
   99d98:	97ffbd76 	bl	89370 <assertion_failed>
   99d9c:	90000022 	adrp	x2, 9d000 <font_data+0x558>
   99da0:	9139c041 	add	x1, x2, #0xe70
   99da4:	91052020 	add	x0, x1, #0x148
   99da8:	52801982 	mov	w2, #0xcc                  	// #204
   99dac:	97ffbd71 	bl	89370 <assertion_failed>
   99db0:	90000023 	adrp	x3, 9d000 <font_data+0x558>
   99db4:	9139c061 	add	x1, x3, #0xe70
   99db8:	9105a020 	add	x0, x1, #0x168
   99dbc:	528019e2 	mov	w2, #0xcf                  	// #207
   99dc0:	97ffbd6c 	bl	89370 <assertion_failed>
   99dc4:	90000024 	adrp	x4, 9d000 <font_data+0x558>
   99dc8:	9139c081 	add	x1, x4, #0xe70
   99dcc:	9104c020 	add	x0, x1, #0x130
   99dd0:	52801a42 	mov	w2, #0xd2                  	// #210
   99dd4:	97ffbd67 	bl	89370 <assertion_failed>
   99dd8:	d503201f 	nop
   99ddc:	d503201f 	nop

0000000000099de0 <CDMA4Channel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)>:
   99de0:	f81f0ffe 	str	x30, [sp, #-16]!
   99de4:	b4000362 	cbz	x2, 99e50 <CDMA4Channel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0x70>
   99de8:	b40003e3 	cbz	x3, 99e64 <CDMA4Channel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0x84>
   99dec:	b24077e5 	mov	x5, #0x3fffffff            	// #1073741823
   99df0:	aa0003e7 	mov	x7, x0
   99df4:	eb05007f 	cmp	x3, x5
   99df8:	54000408 	b.hi	99e78 <CDMA4Channel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0x98>  // b.pmore
   99dfc:	72005c26 	ands	w6, w1, #0xffffff
   99e00:	54000460 	b.eq	99e8c <CDMA4Channel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0xac>  // b.none
   99e04:	52afc008 	mov	w8, #0x7e000000            	// #2113929216
   99e08:	f940080a 	ldr	x10, [x0, #16]
   99e0c:	0b0800c9 	add	w9, w6, w8
   99e10:	b400048a 	cbz	x10, 99ea0 <CDMA4Channel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0xc0>
   99e14:	5290018b 	mov	w11, #0x800c                	// #32780
   99e18:	d3609c4c 	ubfx	x12, x2, #32, #8
   99e1c:	f84107fe 	ldr	x30, [sp], #16
   99e20:	2a04256d 	orr	w13, w11, w4, lsl #9
   99e24:	528a000e 	mov	w14, #0x5000                	// #20480
   99e28:	5280008f 	mov	w15, #0x4                   	// #4
   99e2c:	2a0e0190 	orr	w16, w12, w14
   99e30:	b900195f 	str	wzr, [x10, #24]
   99e34:	aa0303e1 	mov	x1, x3
   99e38:	29020d4f 	stp	w15, w3, [x10, #16]
   99e3c:	aa0203e0 	mov	x0, x2
   99e40:	2900094d 	stp	w13, w2, [x10]
   99e44:	29012550 	stp	w16, w9, [x10, #8]
   99e48:	f90020ff 	str	xzr, [x7, #64]
   99e4c:	17ffef29 	b	95af0 <CleanAndInvalidateDataCacheRange>
   99e50:	90000021 	adrp	x1, 9d000 <font_data+0x558>
   99e54:	9139c021 	add	x1, x1, #0xe70
   99e58:	9103c020 	add	x0, x1, #0xf0
   99e5c:	52801d82 	mov	w2, #0xec                  	// #236
   99e60:	97ffbd44 	bl	89370 <assertion_failed>
   99e64:	90000020 	adrp	x0, 9d000 <font_data+0x558>
   99e68:	9139c001 	add	x1, x0, #0xe70
   99e6c:	91040020 	add	x0, x1, #0x100
   99e70:	52801da2 	mov	w2, #0xed                  	// #237
   99e74:	97ffbd3f 	bl	89370 <assertion_failed>
   99e78:	90000022 	adrp	x2, 9d000 <font_data+0x558>
   99e7c:	9139c041 	add	x1, x2, #0xe70
   99e80:	91052020 	add	x0, x1, #0x148
   99e84:	52801dc2 	mov	w2, #0xee                  	// #238
   99e88:	97ffbd3a 	bl	89370 <assertion_failed>
   99e8c:	90000023 	adrp	x3, 9d000 <font_data+0x558>
   99e90:	9139c061 	add	x1, x3, #0xe70
   99e94:	9105a020 	add	x0, x1, #0x168
   99e98:	52801e22 	mov	w2, #0xf1                  	// #241
   99e9c:	97ffbd35 	bl	89370 <assertion_failed>
   99ea0:	90000024 	adrp	x4, 9d000 <font_data+0x558>
   99ea4:	9139c081 	add	x1, x4, #0xe70
   99ea8:	9104c020 	add	x0, x1, #0x130
   99eac:	52801e82 	mov	w2, #0xf4                  	// #244
   99eb0:	97ffbd30 	bl	89370 <assertion_failed>
   99eb4:	d503201f 	nop
   99eb8:	d503201f 	nop
   99ebc:	d503201f 	nop

0000000000099ec0 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)>:
   99ec0:	f81f0ffe 	str	x30, [sp, #-16]!
   99ec4:	b4000581 	cbz	x1, 99f74 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0xb4>
   99ec8:	b4000602 	cbz	x2, 99f88 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0xc8>
   99ecc:	b4000683 	cbz	x3, 99f9c <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0xdc>
   99ed0:	d29fffe8 	mov	x8, #0xffff                	// #65535
   99ed4:	aa0003e9 	mov	x9, x0
   99ed8:	eb08007f 	cmp	x3, x8
   99edc:	540006a8 	b.hi	99fb0 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0xf0>  // b.pmore
   99ee0:	34000724 	cbz	w4, 99fc4 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x104>
   99ee4:	5287ffe7 	mov	w7, #0x3fff                	// #16383
   99ee8:	6b07009f 	cmp	w4, w7
   99eec:	54000768 	b.hi	99fd8 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x118>  // b.pmore
   99ef0:	eb0800bf 	cmp	x5, x8
   99ef4:	54000368 	b.hi	99f60 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0xa0>  // b.pmore
   99ef8:	71003cdf 	cmp	w6, #0xf
   99efc:	54000788 	b.hi	99fec <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x12c>  // b.pmore
   99f00:	f940080c 	ldr	x12, [x0, #16]
   99f04:	b40007ec 	cbz	x12, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   99f08:	53185ccd 	lsl	w13, w6, #8
   99f0c:	d3609c2e 	ubfx	x14, x1, #32, #8
   99f10:	2a0541af 	orr	w15, w13, w5, lsl #16
   99f14:	528a0010 	mov	w16, #0x5000                	// #20480
   99f18:	51000492 	sub	w18, w4, #0x1
   99f1c:	2a1001de 	orr	w30, w14, w16
   99f20:	d3609c51 	ubfx	x17, x2, #32, #8
   99f24:	2a124068 	orr	w8, w3, w18, lsl #16
   99f28:	2a0f03c7 	orr	w7, w30, w15
   99f2c:	2a0d0220 	orr	w0, w17, w13
   99f30:	f84107fe 	ldr	x30, [sp], #16
   99f34:	2a100005 	orr	w5, w0, w16
   99f38:	2a0403e4 	mov	w4, w4
   99f3c:	29019d81 	stp	w1, w7, [x12, #12]
   99f40:	528001c1 	mov	w1, #0xe                   	// #14
   99f44:	aa0203e0 	mov	x0, x2
   99f48:	29009582 	stp	w2, w5, [x12, #4]
   99f4c:	b9000181 	str	w1, [x12]
   99f50:	9b037c81 	mul	x1, x4, x3
   99f54:	2902fd88 	stp	w8, wzr, [x12, #20]
   99f58:	f900213f 	str	xzr, [x9, #64]
   99f5c:	17ffeee5 	b	95af0 <CleanAndInvalidateDataCacheRange>
   99f60:	90000026 	adrp	x6, 9d000 <font_data+0x558>
   99f64:	9139c0c1 	add	x1, x6, #0xe70
   99f68:	9107a020 	add	x0, x1, #0x1e8
   99f6c:	528022a2 	mov	w2, #0x115                 	// #277
   99f70:	97ffbd00 	bl	89370 <assertion_failed>
   99f74:	90000021 	adrp	x1, 9d000 <font_data+0x558>
   99f78:	9139c021 	add	x1, x1, #0xe70
   99f7c:	91036020 	add	x0, x1, #0xd8
   99f80:	528021e2 	mov	w2, #0x10f                 	// #271
   99f84:	97ffbcfb 	bl	89370 <assertion_failed>
   99f88:	90000020 	adrp	x0, 9d000 <font_data+0x558>
   99f8c:	9139c001 	add	x1, x0, #0xe70
   99f90:	9103c020 	add	x0, x1, #0xf0
   99f94:	52802202 	mov	w2, #0x110                 	// #272
   99f98:	97ffbcf6 	bl	89370 <assertion_failed>
   99f9c:	90000022 	adrp	x2, 9d000 <font_data+0x558>
   99fa0:	9139c041 	add	x1, x2, #0xe70
   99fa4:	9105e020 	add	x0, x1, #0x178
   99fa8:	52802222 	mov	w2, #0x111                 	// #273
   99fac:	97ffbcf1 	bl	89370 <assertion_failed>
   99fb0:	90000023 	adrp	x3, 9d000 <font_data+0x558>
   99fb4:	9139c061 	add	x1, x3, #0xe70
   99fb8:	91064020 	add	x0, x1, #0x190
   99fbc:	52802242 	mov	w2, #0x112                 	// #274
   99fc0:	97ffbcec 	bl	89370 <assertion_failed>
   99fc4:	90000024 	adrp	x4, 9d000 <font_data+0x558>
   99fc8:	9139c081 	add	x1, x4, #0xe70
   99fcc:	9106e020 	add	x0, x1, #0x1b8
   99fd0:	52802262 	mov	w2, #0x113                 	// #275
   99fd4:	97ffbce7 	bl	89370 <assertion_failed>
   99fd8:	90000025 	adrp	x5, 9d000 <font_data+0x558>
   99fdc:	9139c0a1 	add	x1, x5, #0xe70
   99fe0:	91072020 	add	x0, x1, #0x1c8
   99fe4:	52802282 	mov	w2, #0x114                 	// #276
   99fe8:	97ffbce2 	bl	89370 <assertion_failed>
   99fec:	9000002a 	adrp	x10, 9d000 <font_data+0x558>
   99ff0:	9139c141 	add	x1, x10, #0xe70
   99ff4:	91044020 	add	x0, x1, #0x110
   99ff8:	528022c2 	mov	w2, #0x116                 	// #278
   99ffc:	97ffbcdd 	bl	89370 <assertion_failed>
   9a000:	f000000b 	adrp	x11, 9d000 <font_data+0x558>
   9a004:	9139c161 	add	x1, x11, #0xe70
   9a008:	9104c020 	add	x0, x1, #0x130
   9a00c:	52802302 	mov	w2, #0x118                 	// #280
   9a010:	97ffbcd8 	bl	89370 <assertion_failed>
   9a014:	d503201f 	nop
   9a018:	d503201f 	nop
   9a01c:	d503201f 	nop

000000000009a020 <CDMA4Channel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)>:
   9a020:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   9a024:	aa0103f4 	mov	x20, x1
   9a028:	b9400001 	ldr	w1, [x0]
   9a02c:	a9017bf5 	stp	x21, x30, [sp, #16]
   9a030:	7100283f 	cmp	w1, #0xa
   9a034:	540002e9 	b.ls	9a090 <CDMA4Channel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x70>  // b.plast
   9a038:	7100383f 	cmp	w1, #0xe
   9a03c:	54000348 	b.hi	9a0a4 <CDMA4Channel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x84>  // b.pmore
   9a040:	aa0003f3 	mov	x19, x0
   9a044:	f9400c00 	ldr	x0, [x0, #24]
   9a048:	b4000380 	cbz	x0, 9a0b8 <CDMA4Channel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x98>
   9a04c:	39408264 	ldrb	w4, [x19, #32]
   9a050:	aa0203f5 	mov	x21, x2
   9a054:	340000e4 	cbz	w4, 9a070 <CDMA4Channel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x50>
   9a058:	f9001674 	str	x20, [x19, #40]
   9a05c:	b4000394 	cbz	x20, 9a0cc <CDMA4Channel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0xac>
   9a060:	f9001a75 	str	x21, [x19, #48]
   9a064:	a9417bf5 	ldp	x21, x30, [sp, #16]
   9a068:	a8c253f3 	ldp	x19, x20, [sp], #32
   9a06c:	d65f03c0 	ret
   9a070:	90000005 	adrp	x5, 9a000 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x140>
   9a074:	1101b821 	add	w1, w1, #0x6e
   9a078:	911200a2 	add	x2, x5, #0x480
   9a07c:	aa1303e3 	mov	x3, x19
   9a080:	97fff13c 	bl	96570 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   9a084:	52800026 	mov	w6, #0x1                   	// #1
   9a088:	39008266 	strb	w6, [x19, #32]
   9a08c:	17fffff3 	b	9a058 <CDMA4Channel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x38>
   9a090:	f0000000 	adrp	x0, 9d000 <font_data+0x558>
   9a094:	9139c001 	add	x1, x0, #0xe70
   9a098:	91004020 	add	x0, x1, #0x10
   9a09c:	528026a2 	mov	w2, #0x135                 	// #309
   9a0a0:	97ffbcb4 	bl	89370 <assertion_failed>
   9a0a4:	f0000002 	adrp	x2, 9d000 <font_data+0x558>
   9a0a8:	9139c041 	add	x1, x2, #0xe70
   9a0ac:	9100c020 	add	x0, x1, #0x30
   9a0b0:	528026c2 	mov	w2, #0x136                 	// #310
   9a0b4:	97ffbcaf 	bl	89370 <assertion_failed>
   9a0b8:	f0000003 	adrp	x3, 9d000 <font_data+0x558>
   9a0bc:	9139c061 	add	x1, x3, #0xe70
   9a0c0:	91084020 	add	x0, x1, #0x210
   9a0c4:	528026e2 	mov	w2, #0x137                 	// #311
   9a0c8:	97ffbcaa 	bl	89370 <assertion_failed>
   9a0cc:	f0000007 	adrp	x7, 9d000 <font_data+0x558>
   9a0d0:	9139c0e1 	add	x1, x7, #0xe70
   9a0d4:	9108a020 	add	x0, x1, #0x228
   9a0d8:	52802842 	mov	w2, #0x142                 	// #322
   9a0dc:	97ffbca5 	bl	89370 <assertion_failed>

000000000009a0e0 <CDMA4Channel::Start()>:
   9a0e0:	a9be53f3 	stp	x19, x20, [sp, #-32]!
   9a0e4:	b9400002 	ldr	w2, [x0]
   9a0e8:	f9000bfe 	str	x30, [sp, #16]
   9a0ec:	7100285f 	cmp	w2, #0xa
   9a0f0:	54000629 	b.ls	9a1b4 <CDMA4Channel::Start()+0xd4>  // b.plast
   9a0f4:	7100385f 	cmp	w2, #0xe
   9a0f8:	54000688 	b.hi	9a1c8 <CDMA4Channel::Start()+0xe8>  // b.pmore
   9a0fc:	aa0003f3 	mov	x19, x0
   9a100:	f9400800 	ldr	x0, [x0, #16]
   9a104:	b40006c0 	cbz	x0, 9a1dc <CDMA4Channel::Start()+0xfc>
   9a108:	f9401664 	ldr	x4, [x19, #40]
   9a10c:	b4000104 	cbz	x4, 9a12c <CDMA4Channel::Start()+0x4c>
   9a110:	f9400e65 	ldr	x5, [x19, #24]
   9a114:	b4000465 	cbz	x5, 9a1a0 <CDMA4Channel::Start()+0xc0>
   9a118:	39408267 	ldrb	w7, [x19, #32]
   9a11c:	340007e7 	cbz	w7, 9a218 <CDMA4Channel::Start()+0x138>
   9a120:	b9400009 	ldr	w9, [x0]
   9a124:	3200012a 	orr	w10, w9, #0x1
   9a128:	b900000a 	str	w10, [x0]
   9a12c:	52800e14 	mov	w20, #0x70                  	// #112
   9a130:	72a01fd4 	movk	w20, #0xfe, lsl #16
   9a134:	0b14004b 	add	w11, w2, w20
   9a138:	53185d6c 	lsl	w12, w11, #8
   9a13c:	2a0c03ed 	mov	w13, w12
   9a140:	b94001ae 	ldr	w14, [x13]
   9a144:	3710056e 	tbnz	w14, #2, 9a1f0 <CDMA4Channel::Start()+0x110>
   9a148:	d28ffc10 	mov	x16, #0x7fe0                	// #32736
   9a14c:	f2bfc010 	movk	x16, #0xfe00, lsl #16
   9a150:	b940021e 	ldr	w30, [x16]
   9a154:	52800031 	mov	w17, #0x1                   	// #1
   9a158:	1ac22232 	lsl	w18, w17, w2
   9a15c:	6a1e025f 	tst	w18, w30
   9a160:	54000521 	b.ne	9a204 <CDMA4Channel::Start()+0x124>  // b.any
   9a164:	11001181 	add	w1, w12, #0x4
   9a168:	d345fc03 	lsr	x3, x0, #5
   9a16c:	2a0103e4 	mov	w4, w1
   9a170:	d2800401 	mov	x1, #0x20                  	// #32
   9a174:	b9000083 	str	w3, [x4]
   9a178:	97ffee5e 	bl	95af0 <CleanAndInvalidateDataCacheRange>
   9a17c:	b9400260 	ldr	w0, [x19]
   9a180:	52800025 	mov	w5, #0x1                   	// #1
   9a184:	72a21e25 	movk	w5, #0x10f1, lsl #16
   9a188:	f9400bfe 	ldr	x30, [sp, #16]
   9a18c:	0b140013 	add	w19, w0, w20
   9a190:	53185e66 	lsl	w6, w19, #8
   9a194:	b90000c5 	str	w5, [x6]
   9a198:	a8c253f3 	ldp	x19, x20, [sp], #32
   9a19c:	d65f03c0 	ret
   9a1a0:	f0000006 	adrp	x6, 9d000 <font_data+0x558>
   9a1a4:	9139c0c1 	add	x1, x6, #0xe70
   9a1a8:	91084020 	add	x0, x1, #0x210
   9a1ac:	528029e2 	mov	w2, #0x14f                 	// #335
   9a1b0:	97ffbc70 	bl	89370 <assertion_failed>
   9a1b4:	f0000001 	adrp	x1, 9d000 <font_data+0x558>
   9a1b8:	9139c021 	add	x1, x1, #0xe70
   9a1bc:	91004020 	add	x0, x1, #0x10
   9a1c0:	52802922 	mov	w2, #0x149                 	// #329
   9a1c4:	97ffbc6b 	bl	89370 <assertion_failed>
   9a1c8:	f0000000 	adrp	x0, 9d000 <font_data+0x558>
   9a1cc:	9139c001 	add	x1, x0, #0xe70
   9a1d0:	9100c020 	add	x0, x1, #0x30
   9a1d4:	52802942 	mov	w2, #0x14a                 	// #330
   9a1d8:	97ffbc66 	bl	89370 <assertion_failed>
   9a1dc:	f0000003 	adrp	x3, 9d000 <font_data+0x558>
   9a1e0:	9139c061 	add	x1, x3, #0xe70
   9a1e4:	9104c020 	add	x0, x1, #0x130
   9a1e8:	52802962 	mov	w2, #0x14b                 	// #331
   9a1ec:	97ffbc61 	bl	89370 <assertion_failed>
   9a1f0:	f000000f 	adrp	x15, 9d000 <font_data+0x558>
   9a1f4:	9139c1e1 	add	x1, x15, #0xe70
   9a1f8:	91096020 	add	x0, x1, #0x258
   9a1fc:	52802a82 	mov	w2, #0x154                 	// #340
   9a200:	97ffbc5c 	bl	89370 <assertion_failed>
   9a204:	f0000002 	adrp	x2, 9d000 <font_data+0x558>
   9a208:	9139c041 	add	x1, x2, #0xe70
   9a20c:	910a4020 	add	x0, x1, #0x290
   9a210:	52802aa2 	mov	w2, #0x155                 	// #341
   9a214:	97ffbc57 	bl	89370 <assertion_failed>
   9a218:	f0000008 	adrp	x8, 9d000 <font_data+0x558>
   9a21c:	9139c101 	add	x1, x8, #0xe70
   9a220:	91092020 	add	x0, x1, #0x248
   9a224:	52802a02 	mov	w2, #0x150                 	// #336
   9a228:	97ffbc52 	bl	89370 <assertion_failed>
   9a22c:	d503201f 	nop

000000000009a230 <CDMA4Channel::Wait()>:
   9a230:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   9a234:	b9400001 	ldr	w1, [x0]
   9a238:	7100283f 	cmp	w1, #0xa
   9a23c:	54000309 	b.ls	9a29c <CDMA4Channel::Wait()+0x6c>  // b.plast
   9a240:	7100383f 	cmp	w1, #0xe
   9a244:	54000368 	b.hi	9a2b0 <CDMA4Channel::Wait()+0x80>  // b.pmore
   9a248:	f9401403 	ldr	x3, [x0, #40]
   9a24c:	aa0003f3 	mov	x19, x0
   9a250:	b50003a3 	cbnz	x3, 9a2c4 <CDMA4Channel::Wait()+0x94>
   9a254:	117f8025 	add	w5, w1, #0xfe0, lsl #12
   9a258:	1101c0a5 	add	w5, w5, #0x70
   9a25c:	53185ca6 	lsl	w6, w5, #8
   9a260:	b94000c7 	ldr	w7, [x6]
   9a264:	3707ffe7 	tbnz	w7, #0, 9a260 <CDMA4Channel::Wait()+0x30>
   9a268:	d27600e8 	eor	x8, x7, #0x400
   9a26c:	f9402269 	ldr	x9, [x19, #64]
   9a270:	530a2900 	ubfx	w0, w8, #10, #1
   9a274:	3900e260 	strb	w0, [x19, #56]
   9a278:	b5000069 	cbnz	x9, 9a284 <CDMA4Channel::Wait()+0x54>
   9a27c:	a8c17bf3 	ldp	x19, x30, [sp], #16
   9a280:	d65f03c0 	ret
   9a284:	aa0903e0 	mov	x0, x9
   9a288:	f9402661 	ldr	x1, [x19, #72]
   9a28c:	97ffee19 	bl	95af0 <CleanAndInvalidateDataCacheRange>
   9a290:	3940e260 	ldrb	w0, [x19, #56]
   9a294:	a8c17bf3 	ldp	x19, x30, [sp], #16
   9a298:	d65f03c0 	ret
   9a29c:	f0000000 	adrp	x0, 9d000 <font_data+0x558>
   9a2a0:	9139c001 	add	x1, x0, #0xe70
   9a2a4:	91004020 	add	x0, x1, #0x10
   9a2a8:	52802c82 	mov	w2, #0x164                 	// #356
   9a2ac:	97ffbc31 	bl	89370 <assertion_failed>
   9a2b0:	f0000002 	adrp	x2, 9d000 <font_data+0x558>
   9a2b4:	9139c041 	add	x1, x2, #0xe70
   9a2b8:	9100c020 	add	x0, x1, #0x30
   9a2bc:	52802ca2 	mov	w2, #0x165                 	// #357
   9a2c0:	97ffbc2c 	bl	89370 <assertion_failed>
   9a2c4:	f0000004 	adrp	x4, 9d000 <font_data+0x558>
   9a2c8:	9139c081 	add	x1, x4, #0xe70
   9a2cc:	910b2020 	add	x0, x1, #0x2c8
   9a2d0:	52802cc2 	mov	w2, #0x166                 	// #358
   9a2d4:	97ffbc27 	bl	89370 <assertion_failed>
   9a2d8:	d503201f 	nop
   9a2dc:	d503201f 	nop

000000000009a2e0 <CDMA4Channel::GetStatus()>:
   9a2e0:	b9400001 	ldr	w1, [x0]
   9a2e4:	f81f0ffe 	str	x30, [sp, #-16]!
   9a2e8:	7100283f 	cmp	w1, #0xa
   9a2ec:	54000169 	b.ls	9a318 <CDMA4Channel::GetStatus()+0x38>  // b.plast
   9a2f0:	7100383f 	cmp	w1, #0xe
   9a2f4:	540001c8 	b.hi	9a32c <CDMA4Channel::GetStatus()+0x4c>  // b.pmore
   9a2f8:	117f8023 	add	w3, w1, #0xfe0, lsl #12
   9a2fc:	1101c063 	add	w3, w3, #0x70
   9a300:	53185c64 	lsl	w4, w3, #8
   9a304:	b9400085 	ldr	w5, [x4]
   9a308:	370001c5 	tbnz	w5, #0, 9a340 <CDMA4Channel::GetStatus()+0x60>
   9a30c:	3940e000 	ldrb	w0, [x0, #56]
   9a310:	f84107fe 	ldr	x30, [sp], #16
   9a314:	d65f03c0 	ret
   9a318:	f0000000 	adrp	x0, 9d000 <font_data+0x558>
   9a31c:	9139c001 	add	x1, x0, #0xe70
   9a320:	91004020 	add	x0, x1, #0x10
   9a324:	52802f42 	mov	w2, #0x17a                 	// #378
   9a328:	97ffbc12 	bl	89370 <assertion_failed>
   9a32c:	f0000002 	adrp	x2, 9d000 <font_data+0x558>
   9a330:	9139c041 	add	x1, x2, #0xe70
   9a334:	9100c020 	add	x0, x1, #0x30
   9a338:	52802f62 	mov	w2, #0x17b                 	// #379
   9a33c:	97ffbc0d 	bl	89370 <assertion_failed>
   9a340:	f0000006 	adrp	x6, 9d000 <font_data+0x558>
   9a344:	9139c0c1 	add	x1, x6, #0xe70
   9a348:	910ba020 	add	x0, x1, #0x2e8
   9a34c:	52802f82 	mov	w2, #0x17c                 	// #380
   9a350:	97ffbc08 	bl	89370 <assertion_failed>
   9a354:	d503201f 	nop
   9a358:	d503201f 	nop
   9a35c:	d503201f 	nop

000000000009a360 <CDMA4Channel::InterruptHandler()>:
   9a360:	a9bf7bf3 	stp	x19, x30, [sp, #-16]!
   9a364:	aa0003f3 	mov	x19, x0
   9a368:	f9402000 	ldr	x0, [x0, #64]
   9a36c:	b5000400 	cbnz	x0, 9a3ec <CDMA4Channel::InterruptHandler()+0x8c>
   9a370:	b9400261 	ldr	w1, [x19]
   9a374:	7100283f 	cmp	w1, #0xa
   9a378:	54000449 	b.ls	9a400 <CDMA4Channel::InterruptHandler()+0xa0>  // b.plast
   9a37c:	7100383f 	cmp	w1, #0xe
   9a380:	540004a8 	b.hi	9a414 <CDMA4Channel::InterruptHandler()+0xb4>  // b.pmore
   9a384:	d28ffc04 	mov	x4, #0x7fe0                	// #32736
   9a388:	f2bfc004 	movk	x4, #0xfe00, lsl #16
   9a38c:	b9400086 	ldr	w6, [x4]
   9a390:	52800023 	mov	w3, #0x1                   	// #1
   9a394:	1ac12065 	lsl	w5, w3, w1
   9a398:	6a0600bf 	tst	w5, w6
   9a39c:	54000460 	b.eq	9a428 <CDMA4Channel::InterruptHandler()+0xc8>  // b.none
   9a3a0:	b9000085 	str	w5, [x4]
   9a3a4:	b9400268 	ldr	w8, [x19]
   9a3a8:	117f8109 	add	w9, w8, #0xfe0, lsl #12
   9a3ac:	1101c129 	add	w9, w9, #0x70
   9a3b0:	53185d2a 	lsl	w10, w9, #8
   9a3b4:	b940014b 	ldr	w11, [x10]
   9a3b8:	3610042b 	tbz	w11, #2, 9a43c <CDMA4Channel::InterruptHandler()+0xdc>
   9a3bc:	370004ab 	tbnz	w11, #0, 9a450 <CDMA4Channel::InterruptHandler()+0xf0>
   9a3c0:	d276016e 	eor	x14, x11, #0x400
   9a3c4:	5280008f 	mov	w15, #0x4                   	// #4
   9a3c8:	f9401672 	ldr	x18, [x19, #40]
   9a3cc:	530a29c1 	ubfx	w1, w14, #10, #1
   9a3d0:	b900014f 	str	w15, [x10]
   9a3d4:	3900e261 	strb	w1, [x19, #56]
   9a3d8:	b4000472 	cbz	x18, 9a464 <CDMA4Channel::InterruptHandler()+0x104>
   9a3dc:	b9400260 	ldr	w0, [x19]
   9a3e0:	f9401a62 	ldr	x2, [x19, #48]
   9a3e4:	a8c17bf3 	ldp	x19, x30, [sp], #16
   9a3e8:	d61f0240 	br	x18
   9a3ec:	f9402661 	ldr	x1, [x19, #72]
   9a3f0:	97ffedc0 	bl	95af0 <CleanAndInvalidateDataCacheRange>
   9a3f4:	b9400261 	ldr	w1, [x19]
   9a3f8:	7100283f 	cmp	w1, #0xa
   9a3fc:	54fffc08 	b.hi	9a37c <CDMA4Channel::InterruptHandler()+0x1c>  // b.pmore
   9a400:	f0000000 	adrp	x0, 9d000 <font_data+0x558>
   9a404:	9139c001 	add	x1, x0, #0xe70
   9a408:	91004020 	add	x0, x1, #0x10
   9a40c:	52803102 	mov	w2, #0x188                 	// #392
   9a410:	97ffbbd8 	bl	89370 <assertion_failed>
   9a414:	f0000002 	adrp	x2, 9d000 <font_data+0x558>
   9a418:	9139c041 	add	x1, x2, #0xe70
   9a41c:	9100c020 	add	x0, x1, #0x30
   9a420:	52803122 	mov	w2, #0x189                 	// #393
   9a424:	97ffbbd3 	bl	89370 <assertion_failed>
   9a428:	f0000007 	adrp	x7, 9d000 <font_data+0x558>
   9a42c:	9139c0e1 	add	x1, x7, #0xe70
   9a430:	910c8020 	add	x0, x1, #0x320
   9a434:	528031e2 	mov	w2, #0x18f                 	// #399
   9a438:	97ffbbce 	bl	89370 <assertion_failed>
   9a43c:	f000000c 	adrp	x12, 9d000 <font_data+0x558>
   9a440:	9139c181 	add	x1, x12, #0xe70
   9a444:	910ce020 	add	x0, x1, #0x338
   9a448:	52803262 	mov	w2, #0x193                 	// #403
   9a44c:	97ffbbc9 	bl	89370 <assertion_failed>
   9a450:	f000000d 	adrp	x13, 9d000 <font_data+0x558>
   9a454:	9139c1a1 	add	x1, x13, #0xe70
   9a458:	910d2020 	add	x0, x1, #0x348
   9a45c:	52803282 	mov	w2, #0x194                 	// #404
   9a460:	97ffbbc4 	bl	89370 <assertion_failed>
   9a464:	f0000010 	adrp	x16, 9d000 <font_data+0x558>
   9a468:	9139c201 	add	x1, x16, #0xe70
   9a46c:	9108a020 	add	x0, x1, #0x228
   9a470:	52803322 	mov	w2, #0x199                 	// #409
   9a474:	97ffbbbf 	bl	89370 <assertion_failed>
   9a478:	d503201f 	nop
   9a47c:	d503201f 	nop

000000000009a480 <CDMA4Channel::InterruptStub(void*)>:
   9a480:	b4000040 	cbz	x0, 9a488 <CDMA4Channel::InterruptStub(void*)+0x8>
   9a484:	17ffffb7 	b	9a360 <CDMA4Channel::InterruptHandler()>
   9a488:	f0000001 	adrp	x1, 9d000 <font_data+0x558>
   9a48c:	9139c021 	add	x1, x1, #0xe70
   9a490:	f81f0ffe 	str	x30, [sp, #-16]!
   9a494:	910d8020 	add	x0, x1, #0x360
   9a498:	52803402 	mov	w2, #0x1a0                 	// #416
   9a49c:	97ffbbb5 	bl	89370 <assertion_failed>
